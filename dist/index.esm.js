import require$$1 from 'http';
import require$$2 from 'https';
import require$$3 from 'zlib';
import require$$5 from 'crypto';
import require$$0$3 from 'events';
import require$$3$1 from 'net';
import require$$4 from 'tls';
import require$$0$2 from 'stream';
import require$$0$4 from 'url';
import require$$1$1 from 'module';
import require$$1$2 from 'util';
import require$$1$3 from 'path';
import require$$6 from 'fs';
import require$$4$1 from 'assert';

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function getAugmentedNamespace(n) {
  if (n.__esModule) return n;
  var f = n.default;
	if (typeof f == "function") {
		var a = function a () {
			if (this instanceof a) {
        return Reflect.construct(f, arguments, this.constructor);
			}
			return f.apply(this, arguments);
		};
		a.prototype = f.prototype;
  } else a = {};
  Object.defineProperty(a, '__esModule', {value: true});
	Object.keys(n).forEach(function (k) {
		var d = Object.getOwnPropertyDescriptor(n, k);
		Object.defineProperty(a, k, d.get ? d : {
			enumerable: true,
			get: function () {
				return n[k];
			}
		});
	});
	return a;
}

var lib_commonjs$1 = {};

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var __createBinding = Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});

function __exportStar(m, o) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

/** @deprecated */
function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

/** @deprecated */
function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
}
var __setModuleDefault = Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}

function __classPrivateFieldIn(state, receiver) {
    if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
    return typeof state === "function" ? receiver === state : state.has(receiver);
}

var tslib_es6 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	get __assign () { return __assign; },
	__asyncDelegator: __asyncDelegator,
	__asyncGenerator: __asyncGenerator,
	__asyncValues: __asyncValues,
	__await: __await,
	__awaiter: __awaiter,
	__classPrivateFieldGet: __classPrivateFieldGet,
	__classPrivateFieldIn: __classPrivateFieldIn,
	__classPrivateFieldSet: __classPrivateFieldSet,
	__createBinding: __createBinding,
	__decorate: __decorate,
	__exportStar: __exportStar,
	__extends: __extends,
	__generator: __generator,
	__importDefault: __importDefault,
	__importStar: __importStar,
	__makeTemplateObject: __makeTemplateObject,
	__metadata: __metadata,
	__param: __param,
	__read: __read,
	__rest: __rest,
	__spread: __spread,
	__spreadArray: __spreadArray,
	__spreadArrays: __spreadArrays,
	__values: __values
});

var require$$0$1 = /*@__PURE__*/getAugmentedNamespace(tslib_es6);

var ethers$4 = {};

var _version = {};

var hasRequired_version;

function require_version () {
	if (hasRequired_version) return _version;
	hasRequired_version = 1;
	/* Do NOT modify this file; see /src.ts/_admin/update-version.ts */
	Object.defineProperty(_version, "__esModule", { value: true });
	_version.version = void 0;
	/**
	 *  The current version of Ethers.
	 */
	_version.version = "6.11.1";
	
	return _version;
}

var abi = {};

var abiCoder = {};

var utils$9 = {};

var base58 = {};

var data = {};

var errors = {};

var properties = {};

var hasRequiredProperties;

function requireProperties () {
	if (hasRequiredProperties) return properties;
	hasRequiredProperties = 1;
	/**
	 *  Property helper functions.
	 *
	 *  @_subsection api/utils:Properties  [about-properties]
	 */
	Object.defineProperty(properties, "__esModule", { value: true });
	properties.defineProperties = properties.resolveProperties = void 0;
	function checkType(value, type, name) {
	    const types = type.split("|").map(t => t.trim());
	    for (let i = 0; i < types.length; i++) {
	        switch (type) {
	            case "any":
	                return;
	            case "bigint":
	            case "boolean":
	            case "number":
	            case "string":
	                if (typeof (value) === type) {
	                    return;
	                }
	        }
	    }
	    const error = new Error(`invalid value for type ${type}`);
	    error.code = "INVALID_ARGUMENT";
	    error.argument = `value.${name}`;
	    error.value = value;
	    throw error;
	}
	/**
	 *  Resolves to a new object that is a copy of %%value%%, but with all
	 *  values resolved.
	 */
	async function resolveProperties(value) {
	    const keys = Object.keys(value);
	    const results = await Promise.all(keys.map((k) => Promise.resolve(value[k])));
	    return results.reduce((accum, v, index) => {
	        accum[keys[index]] = v;
	        return accum;
	    }, {});
	}
	properties.resolveProperties = resolveProperties;
	/**
	 *  Assigns the %%values%% to %%target%% as read-only values.
	 *
	 *  It %%types%% is specified, the values are checked.
	 */
	function defineProperties(target, values, types) {
	    for (let key in values) {
	        let value = values[key];
	        const type = (types ? types[key] : null);
	        if (type) {
	            checkType(value, type, key);
	        }
	        Object.defineProperty(target, key, { enumerable: true, value, writable: false });
	    }
	}
	properties.defineProperties = defineProperties;
	
	return properties;
}

var hasRequiredErrors;

function requireErrors () {
	if (hasRequiredErrors) return errors;
	hasRequiredErrors = 1;
	/**
	 *  All errors in ethers include properties to ensure they are both
	 *  human-readable (i.e. ``.message``) and machine-readable (i.e. ``.code``).
	 *
	 *  The [[isError]] function can be used to check the error ``code`` and
	 *  provide a type guard for the properties present on that error interface.
	 *
	 *  @_section: api/utils/errors:Errors  [about-errors]
	 */
	Object.defineProperty(errors, "__esModule", { value: true });
	errors.assertPrivate = errors.assertNormalize = errors.assertArgumentCount = errors.assertArgument = errors.assert = errors.makeError = errors.isCallException = errors.isError = void 0;
	const _version_js_1 = require_version();
	const properties_js_1 = requireProperties();
	function stringify(value) {
	    if (value == null) {
	        return "null";
	    }
	    if (Array.isArray(value)) {
	        return "[ " + (value.map(stringify)).join(", ") + " ]";
	    }
	    if (value instanceof Uint8Array) {
	        const HEX = "0123456789abcdef";
	        let result = "0x";
	        for (let i = 0; i < value.length; i++) {
	            result += HEX[value[i] >> 4];
	            result += HEX[value[i] & 0xf];
	        }
	        return result;
	    }
	    if (typeof (value) === "object" && typeof (value.toJSON) === "function") {
	        return stringify(value.toJSON());
	    }
	    switch (typeof (value)) {
	        case "boolean":
	        case "symbol":
	            return value.toString();
	        case "bigint":
	            return BigInt(value).toString();
	        case "number":
	            return (value).toString();
	        case "string":
	            return JSON.stringify(value);
	        case "object": {
	            const keys = Object.keys(value);
	            keys.sort();
	            return "{ " + keys.map((k) => `${stringify(k)}: ${stringify(value[k])}`).join(", ") + " }";
	        }
	    }
	    return `[ COULD NOT SERIALIZE ]`;
	}
	/**
	 *  Returns true if the %%error%% matches an error thrown by ethers
	 *  that matches the error %%code%%.
	 *
	 *  In TypeScript environments, this can be used to check that %%error%%
	 *  matches an EthersError type, which means the expected properties will
	 *  be set.
	 *
	 *  @See [ErrorCodes](api:ErrorCode)
	 *  @example
	 *    try {
	 *      // code....
	 *    } catch (e) {
	 *      if (isError(e, "CALL_EXCEPTION")) {
	 *          // The Type Guard has validated this object
	 *          console.log(e.data);
	 *      }
	 *    }
	 */
	function isError(error, code) {
	    return (error && error.code === code);
	}
	errors.isError = isError;
	/**
	 *  Returns true if %%error%% is a [[CallExceptionError].
	 */
	function isCallException(error) {
	    return isError(error, "CALL_EXCEPTION");
	}
	errors.isCallException = isCallException;
	/**
	 *  Returns a new Error configured to the format ethers emits errors, with
	 *  the %%message%%, [[api:ErrorCode]] %%code%% and additional properties
	 *  for the corresponding EthersError.
	 *
	 *  Each error in ethers includes the version of ethers, a
	 *  machine-readable [[ErrorCode]], and depending on %%code%%, additional
	 *  required properties. The error message will also include the %%message%%,
	 *  ethers version, %%code%% and all additional properties, serialized.
	 */
	function makeError(message, code, info) {
	    let shortMessage = message;
	    {
	        const details = [];
	        if (info) {
	            if ("message" in info || "code" in info || "name" in info) {
	                throw new Error(`value will overwrite populated values: ${stringify(info)}`);
	            }
	            for (const key in info) {
	                if (key === "shortMessage") {
	                    continue;
	                }
	                const value = (info[key]);
	                //                try {
	                details.push(key + "=" + stringify(value));
	                //                } catch (error: any) {
	                //                console.log("MMM", error.message);
	                //                    details.push(key + "=[could not serialize object]");
	                //                }
	            }
	        }
	        details.push(`code=${code}`);
	        details.push(`version=${_version_js_1.version}`);
	        if (details.length) {
	            message += " (" + details.join(", ") + ")";
	        }
	    }
	    let error;
	    switch (code) {
	        case "INVALID_ARGUMENT":
	            error = new TypeError(message);
	            break;
	        case "NUMERIC_FAULT":
	        case "BUFFER_OVERRUN":
	            error = new RangeError(message);
	            break;
	        default:
	            error = new Error(message);
	    }
	    (0, properties_js_1.defineProperties)(error, { code });
	    if (info) {
	        Object.assign(error, info);
	    }
	    if (error.shortMessage == null) {
	        (0, properties_js_1.defineProperties)(error, { shortMessage });
	    }
	    return error;
	}
	errors.makeError = makeError;
	/**
	 *  Throws an EthersError with %%message%%, %%code%% and additional error
	 *  %%info%% when %%check%% is falsish..
	 *
	 *  @see [[api:makeError]]
	 */
	function assert(check, message, code, info) {
	    if (!check) {
	        throw makeError(message, code, info);
	    }
	}
	errors.assert = assert;
	/**
	 *  A simple helper to simply ensuring provided arguments match expected
	 *  constraints, throwing if not.
	 *
	 *  In TypeScript environments, the %%check%% has been asserted true, so
	 *  any further code does not need additional compile-time checks.
	 */
	function assertArgument(check, message, name, value) {
	    assert(check, message, "INVALID_ARGUMENT", { argument: name, value: value });
	}
	errors.assertArgument = assertArgument;
	function assertArgumentCount(count, expectedCount, message) {
	    if (message == null) {
	        message = "";
	    }
	    if (message) {
	        message = ": " + message;
	    }
	    assert(count >= expectedCount, "missing arguemnt" + message, "MISSING_ARGUMENT", {
	        count: count,
	        expectedCount: expectedCount
	    });
	    assert(count <= expectedCount, "too many arguments" + message, "UNEXPECTED_ARGUMENT", {
	        count: count,
	        expectedCount: expectedCount
	    });
	}
	errors.assertArgumentCount = assertArgumentCount;
	const _normalizeForms = ["NFD", "NFC", "NFKD", "NFKC"].reduce((accum, form) => {
	    try {
	        // General test for normalize
	        /* c8 ignore start */
	        if ("test".normalize(form) !== "test") {
	            throw new Error("bad");
	        }
	        ;
	        /* c8 ignore stop */
	        if (form === "NFD") {
	            const check = String.fromCharCode(0xe9).normalize("NFD");
	            const expected = String.fromCharCode(0x65, 0x0301);
	            /* c8 ignore start */
	            if (check !== expected) {
	                throw new Error("broken");
	            }
	            /* c8 ignore stop */
	        }
	        accum.push(form);
	    }
	    catch (error) { }
	    return accum;
	}, []);
	/**
	 *  Throws if the normalization %%form%% is not supported.
	 */
	function assertNormalize(form) {
	    assert(_normalizeForms.indexOf(form) >= 0, "platform missing String.prototype.normalize", "UNSUPPORTED_OPERATION", {
	        operation: "String.prototype.normalize", info: { form }
	    });
	}
	errors.assertNormalize = assertNormalize;
	/**
	 *  Many classes use file-scoped values to guard the constructor,
	 *  making it effectively private. This facilitates that pattern
	 *  by ensuring the %%givenGaurd%% matches the file-scoped %%guard%%,
	 *  throwing if not, indicating the %%className%% if provided.
	 */
	function assertPrivate(givenGuard, guard, className) {
	    if (className == null) {
	        className = "";
	    }
	    if (givenGuard !== guard) {
	        let method = className, operation = "new";
	        if (className) {
	            method += ".";
	            operation += " " + className;
	        }
	        assert(false, `private constructor; use ${method}from* methods`, "UNSUPPORTED_OPERATION", {
	            operation
	        });
	    }
	}
	errors.assertPrivate = assertPrivate;
	
	return errors;
}

var hasRequiredData;

function requireData () {
	if (hasRequiredData) return data;
	hasRequiredData = 1;
	Object.defineProperty(data, "__esModule", { value: true });
	data.zeroPadBytes = data.zeroPadValue = data.stripZerosLeft = data.dataSlice = data.dataLength = data.concat = data.hexlify = data.isBytesLike = data.isHexString = data.getBytesCopy = data.getBytes = void 0;
	/**
	 *  Some data helpers.
	 *
	 *
	 *  @_subsection api/utils:Data Helpers  [about-data]
	 */
	const errors_js_1 = requireErrors();
	function _getBytes(value, name, copy) {
	    if (value instanceof Uint8Array) {
	        if (copy) {
	            return new Uint8Array(value);
	        }
	        return value;
	    }
	    if (typeof (value) === "string" && value.match(/^0x([0-9a-f][0-9a-f])*$/i)) {
	        const result = new Uint8Array((value.length - 2) / 2);
	        let offset = 2;
	        for (let i = 0; i < result.length; i++) {
	            result[i] = parseInt(value.substring(offset, offset + 2), 16);
	            offset += 2;
	        }
	        return result;
	    }
	    (0, errors_js_1.assertArgument)(false, "invalid BytesLike value", name || "value", value);
	}
	/**
	 *  Get a typed Uint8Array for %%value%%. If already a Uint8Array
	 *  the original %%value%% is returned; if a copy is required use
	 *  [[getBytesCopy]].
	 *
	 *  @see: getBytesCopy
	 */
	function getBytes(value, name) {
	    return _getBytes(value, name, false);
	}
	data.getBytes = getBytes;
	/**
	 *  Get a typed Uint8Array for %%value%%, creating a copy if necessary
	 *  to prevent any modifications of the returned value from being
	 *  reflected elsewhere.
	 *
	 *  @see: getBytes
	 */
	function getBytesCopy(value, name) {
	    return _getBytes(value, name, true);
	}
	data.getBytesCopy = getBytesCopy;
	/**
	 *  Returns true if %%value%% is a valid [[HexString]].
	 *
	 *  If %%length%% is ``true`` or a //number//, it also checks that
	 *  %%value%% is a valid [[DataHexString]] of %%length%% (if a //number//)
	 *  bytes of data (e.g. ``0x1234`` is 2 bytes).
	 */
	function isHexString(value, length) {
	    if (typeof (value) !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
	        return false;
	    }
	    if (typeof (length) === "number" && value.length !== 2 + 2 * length) {
	        return false;
	    }
	    if (length === true && (value.length % 2) !== 0) {
	        return false;
	    }
	    return true;
	}
	data.isHexString = isHexString;
	/**
	 *  Returns true if %%value%% is a valid representation of arbitrary
	 *  data (i.e. a valid [[DataHexString]] or a Uint8Array).
	 */
	function isBytesLike(value) {
	    return (isHexString(value, true) || (value instanceof Uint8Array));
	}
	data.isBytesLike = isBytesLike;
	const HexCharacters = "0123456789abcdef";
	/**
	 *  Returns a [[DataHexString]] representation of %%data%%.
	 */
	function hexlify(data) {
	    const bytes = getBytes(data);
	    let result = "0x";
	    for (let i = 0; i < bytes.length; i++) {
	        const v = bytes[i];
	        result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];
	    }
	    return result;
	}
	data.hexlify = hexlify;
	/**
	 *  Returns a [[DataHexString]] by concatenating all values
	 *  within %%data%%.
	 */
	function concat(datas) {
	    return "0x" + datas.map((d) => hexlify(d).substring(2)).join("");
	}
	data.concat = concat;
	/**
	 *  Returns the length of %%data%%, in bytes.
	 */
	function dataLength(data) {
	    if (isHexString(data, true)) {
	        return (data.length - 2) / 2;
	    }
	    return getBytes(data).length;
	}
	data.dataLength = dataLength;
	/**
	 *  Returns a [[DataHexString]] by slicing %%data%% from the %%start%%
	 *  offset to the %%end%% offset.
	 *
	 *  By default %%start%% is 0 and %%end%% is the length of %%data%%.
	 */
	function dataSlice(data, start, end) {
	    const bytes = getBytes(data);
	    if (end != null && end > bytes.length) {
	        (0, errors_js_1.assert)(false, "cannot slice beyond data bounds", "BUFFER_OVERRUN", {
	            buffer: bytes, length: bytes.length, offset: end
	        });
	    }
	    return hexlify(bytes.slice((start == null) ? 0 : start, (end == null) ? bytes.length : end));
	}
	data.dataSlice = dataSlice;
	/**
	 *  Return the [[DataHexString]] result by stripping all **leading**
	 ** zero bytes from %%data%%.
	 */
	function stripZerosLeft(data) {
	    let bytes = hexlify(data).substring(2);
	    while (bytes.startsWith("00")) {
	        bytes = bytes.substring(2);
	    }
	    return "0x" + bytes;
	}
	data.stripZerosLeft = stripZerosLeft;
	function zeroPad(data, length, left) {
	    const bytes = getBytes(data);
	    (0, errors_js_1.assert)(length >= bytes.length, "padding exceeds data length", "BUFFER_OVERRUN", {
	        buffer: new Uint8Array(bytes),
	        length: length,
	        offset: length + 1
	    });
	    const result = new Uint8Array(length);
	    result.fill(0);
	    if (left) {
	        result.set(bytes, length - bytes.length);
	    }
	    else {
	        result.set(bytes, 0);
	    }
	    return hexlify(result);
	}
	/**
	 *  Return the [[DataHexString]] of %%data%% padded on the **left**
	 *  to %%length%% bytes.
	 *
	 *  If %%data%% already exceeds %%length%%, a [[BufferOverrunError]] is
	 *  thrown.
	 *
	 *  This pads data the same as **values** are in Solidity
	 *  (e.g. ``uint128``).
	 */
	function zeroPadValue(data, length) {
	    return zeroPad(data, length, true);
	}
	data.zeroPadValue = zeroPadValue;
	/**
	 *  Return the [[DataHexString]] of %%data%% padded on the **right**
	 *  to %%length%% bytes.
	 *
	 *  If %%data%% already exceeds %%length%%, a [[BufferOverrunError]] is
	 *  thrown.
	 *
	 *  This pads data the same as **bytes** are in Solidity
	 *  (e.g. ``bytes16``).
	 */
	function zeroPadBytes(data, length) {
	    return zeroPad(data, length, false);
	}
	data.zeroPadBytes = zeroPadBytes;
	
	return data;
}

var maths = {};

var hasRequiredMaths;

function requireMaths () {
	if (hasRequiredMaths) return maths;
	hasRequiredMaths = 1;
	Object.defineProperty(maths, "__esModule", { value: true });
	maths.toQuantity = maths.toBeArray = maths.toBeHex = maths.toNumber = maths.getNumber = maths.toBigInt = maths.getUint = maths.getBigInt = maths.mask = maths.toTwos = maths.fromTwos = void 0;
	/**
	 *  Some mathematic operations.
	 *
	 *  @_subsection: api/utils:Math Helpers  [about-maths]
	 */
	const data_js_1 = requireData();
	const errors_js_1 = requireErrors();
	const BN_0 = BigInt(0);
	const BN_1 = BigInt(1);
	//const BN_Max256 = (BN_1 << BigInt(256)) - BN_1;
	// IEEE 754 support 53-bits of mantissa
	const maxValue = 0x1fffffffffffff;
	/**
	 *  Convert %%value%% from a twos-compliment representation of %%width%%
	 *  bits to its value.
	 *
	 *  If the highest bit is ``1``, the result will be negative.
	 */
	function fromTwos(_value, _width) {
	    const value = getUint(_value, "value");
	    const width = BigInt(getNumber(_width, "width"));
	    (0, errors_js_1.assert)((value >> width) === BN_0, "overflow", "NUMERIC_FAULT", {
	        operation: "fromTwos", fault: "overflow", value: _value
	    });
	    // Top bit set; treat as a negative value
	    if (value >> (width - BN_1)) {
	        const mask = (BN_1 << width) - BN_1;
	        return -(((~value) & mask) + BN_1);
	    }
	    return value;
	}
	maths.fromTwos = fromTwos;
	/**
	 *  Convert %%value%% to a twos-compliment representation of
	 *  %%width%% bits.
	 *
	 *  The result will always be positive.
	 */
	function toTwos(_value, _width) {
	    let value = getBigInt(_value, "value");
	    const width = BigInt(getNumber(_width, "width"));
	    const limit = (BN_1 << (width - BN_1));
	    if (value < BN_0) {
	        value = -value;
	        (0, errors_js_1.assert)(value <= limit, "too low", "NUMERIC_FAULT", {
	            operation: "toTwos", fault: "overflow", value: _value
	        });
	        const mask = (BN_1 << width) - BN_1;
	        return ((~value) & mask) + BN_1;
	    }
	    else {
	        (0, errors_js_1.assert)(value < limit, "too high", "NUMERIC_FAULT", {
	            operation: "toTwos", fault: "overflow", value: _value
	        });
	    }
	    return value;
	}
	maths.toTwos = toTwos;
	/**
	 *  Mask %%value%% with a bitmask of %%bits%% ones.
	 */
	function mask(_value, _bits) {
	    const value = getUint(_value, "value");
	    const bits = BigInt(getNumber(_bits, "bits"));
	    return value & ((BN_1 << bits) - BN_1);
	}
	maths.mask = mask;
	/**
	 *  Gets a BigInt from %%value%%. If it is an invalid value for
	 *  a BigInt, then an ArgumentError will be thrown for %%name%%.
	 */
	function getBigInt(value, name) {
	    switch (typeof (value)) {
	        case "bigint": return value;
	        case "number":
	            (0, errors_js_1.assertArgument)(Number.isInteger(value), "underflow", name || "value", value);
	            (0, errors_js_1.assertArgument)(value >= -maxValue && value <= maxValue, "overflow", name || "value", value);
	            return BigInt(value);
	        case "string":
	            try {
	                if (value === "") {
	                    throw new Error("empty string");
	                }
	                if (value[0] === "-" && value[1] !== "-") {
	                    return -BigInt(value.substring(1));
	                }
	                return BigInt(value);
	            }
	            catch (e) {
	                (0, errors_js_1.assertArgument)(false, `invalid BigNumberish string: ${e.message}`, name || "value", value);
	            }
	    }
	    (0, errors_js_1.assertArgument)(false, "invalid BigNumberish value", name || "value", value);
	}
	maths.getBigInt = getBigInt;
	/**
	 *  Returns %%value%% as a bigint, validating it is valid as a bigint
	 *  value and that it is positive.
	 */
	function getUint(value, name) {
	    const result = getBigInt(value, name);
	    (0, errors_js_1.assert)(result >= BN_0, "unsigned value cannot be negative", "NUMERIC_FAULT", {
	        fault: "overflow", operation: "getUint", value
	    });
	    return result;
	}
	maths.getUint = getUint;
	const Nibbles = "0123456789abcdef";
	/*
	 * Converts %%value%% to a BigInt. If %%value%% is a Uint8Array, it
	 * is treated as Big Endian data.
	 */
	function toBigInt(value) {
	    if (value instanceof Uint8Array) {
	        let result = "0x0";
	        for (const v of value) {
	            result += Nibbles[v >> 4];
	            result += Nibbles[v & 0x0f];
	        }
	        return BigInt(result);
	    }
	    return getBigInt(value);
	}
	maths.toBigInt = toBigInt;
	/**
	 *  Gets a //number// from %%value%%. If it is an invalid value for
	 *  a //number//, then an ArgumentError will be thrown for %%name%%.
	 */
	function getNumber(value, name) {
	    switch (typeof (value)) {
	        case "bigint":
	            (0, errors_js_1.assertArgument)(value >= -maxValue && value <= maxValue, "overflow", name || "value", value);
	            return Number(value);
	        case "number":
	            (0, errors_js_1.assertArgument)(Number.isInteger(value), "underflow", name || "value", value);
	            (0, errors_js_1.assertArgument)(value >= -maxValue && value <= maxValue, "overflow", name || "value", value);
	            return value;
	        case "string":
	            try {
	                if (value === "") {
	                    throw new Error("empty string");
	                }
	                return getNumber(BigInt(value), name);
	            }
	            catch (e) {
	                (0, errors_js_1.assertArgument)(false, `invalid numeric string: ${e.message}`, name || "value", value);
	            }
	    }
	    (0, errors_js_1.assertArgument)(false, "invalid numeric value", name || "value", value);
	}
	maths.getNumber = getNumber;
	/**
	 *  Converts %%value%% to a number. If %%value%% is a Uint8Array, it
	 *  is treated as Big Endian data. Throws if the value is not safe.
	 */
	function toNumber(value) {
	    return getNumber(toBigInt(value));
	}
	maths.toNumber = toNumber;
	/**
	 *  Converts %%value%% to a Big Endian hexstring, optionally padded to
	 *  %%width%% bytes.
	 */
	function toBeHex(_value, _width) {
	    const value = getUint(_value, "value");
	    let result = value.toString(16);
	    if (_width == null) {
	        // Ensure the value is of even length
	        if (result.length % 2) {
	            result = "0" + result;
	        }
	    }
	    else {
	        const width = getNumber(_width, "width");
	        (0, errors_js_1.assert)(width * 2 >= result.length, `value exceeds width (${width} bytes)`, "NUMERIC_FAULT", {
	            operation: "toBeHex",
	            fault: "overflow",
	            value: _value
	        });
	        // Pad the value to the required width
	        while (result.length < (width * 2)) {
	            result = "0" + result;
	        }
	    }
	    return "0x" + result;
	}
	maths.toBeHex = toBeHex;
	/**
	 *  Converts %%value%% to a Big Endian Uint8Array.
	 */
	function toBeArray(_value) {
	    const value = getUint(_value, "value");
	    if (value === BN_0) {
	        return new Uint8Array([]);
	    }
	    let hex = value.toString(16);
	    if (hex.length % 2) {
	        hex = "0" + hex;
	    }
	    const result = new Uint8Array(hex.length / 2);
	    for (let i = 0; i < result.length; i++) {
	        const offset = i * 2;
	        result[i] = parseInt(hex.substring(offset, offset + 2), 16);
	    }
	    return result;
	}
	maths.toBeArray = toBeArray;
	/**
	 *  Returns a [[HexString]] for %%value%% safe to use as a //Quantity//.
	 *
	 *  A //Quantity// does not have and leading 0 values unless the value is
	 *  the literal value `0x0`. This is most commonly used for JSSON-RPC
	 *  numeric values.
	 */
	function toQuantity(value) {
	    let result = (0, data_js_1.hexlify)((0, data_js_1.isBytesLike)(value) ? value : toBeArray(value)).substring(2);
	    while (result.startsWith("0")) {
	        result = result.substring(1);
	    }
	    if (result === "") {
	        result = "0";
	    }
	    return "0x" + result;
	}
	maths.toQuantity = toQuantity;
	
	return maths;
}

var hasRequiredBase58;

function requireBase58 () {
	if (hasRequiredBase58) return base58;
	hasRequiredBase58 = 1;
	/**
	 *  The [Base58 Encoding](link-base58) scheme allows a **numeric** value
	 *  to be encoded as a compact string using a radix of 58 using only
	 *  alpha-numeric characters. Confusingly similar characters are omitted
	 *  (i.e. ``"l0O"``).
	 *
	 *  Note that Base58 encodes a **numeric** value, not arbitrary bytes,
	 *  since any zero-bytes on the left would get removed. To mitigate this
	 *  issue most schemes that use Base58 choose specific high-order values
	 *  to ensure non-zero prefixes.
	 *
	 *  @_subsection: api/utils:Base58 Encoding [about-base58]
	 */
	Object.defineProperty(base58, "__esModule", { value: true });
	base58.decodeBase58 = base58.encodeBase58 = void 0;
	const data_js_1 = requireData();
	const errors_js_1 = requireErrors();
	const maths_js_1 = requireMaths();
	const Alphabet = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
	let Lookup = null;
	function getAlpha(letter) {
	    if (Lookup == null) {
	        Lookup = {};
	        for (let i = 0; i < Alphabet.length; i++) {
	            Lookup[Alphabet[i]] = BigInt(i);
	        }
	    }
	    const result = Lookup[letter];
	    (0, errors_js_1.assertArgument)(result != null, `invalid base58 value`, "letter", letter);
	    return result;
	}
	const BN_0 = BigInt(0);
	const BN_58 = BigInt(58);
	/**
	 *  Encode %%value%% as a Base58-encoded string.
	 */
	function encodeBase58(_value) {
	    const bytes = (0, data_js_1.getBytes)(_value);
	    let value = (0, maths_js_1.toBigInt)(bytes);
	    let result = "";
	    while (value) {
	        result = Alphabet[Number(value % BN_58)] + result;
	        value /= BN_58;
	    }
	    // Account for leading padding zeros
	    for (let i = 0; i < bytes.length; i++) {
	        if (bytes[i]) {
	            break;
	        }
	        result = Alphabet[0] + result;
	    }
	    return result;
	}
	base58.encodeBase58 = encodeBase58;
	/**
	 *  Decode the Base58-encoded %%value%%.
	 */
	function decodeBase58(value) {
	    let result = BN_0;
	    for (let i = 0; i < value.length; i++) {
	        result *= BN_58;
	        result += getAlpha(value[i]);
	    }
	    return result;
	}
	base58.decodeBase58 = decodeBase58;
	
	return base58;
}

var base64 = {};

var hasRequiredBase64;

function requireBase64 () {
	if (hasRequiredBase64) return base64;
	hasRequiredBase64 = 1;
	Object.defineProperty(base64, "__esModule", { value: true });
	base64.encodeBase64 = base64.decodeBase64 = void 0;
	/**
	 *  [Base64 encoding](link-wiki-base64) using 6-bit words to encode
	 *  arbitrary bytes into a string using 65 printable symbols, the
	 *  upper-case and lower-case alphabet, the digits ``0`` through ``9``,
	 *  ``"+"`` and ``"/"`` with the ``"="`` used for padding.
	 *
	 *  @_subsection: api/utils:Base64 Encoding  [about-base64]
	 */
	const data_js_1 = requireData();
	/**
	 *  Decodes the base-64 encoded %%value%%.
	 *
	 *  @example:
	 *    // The decoded value is always binary data...
	 *    result = decodeBase64("SGVsbG8gV29ybGQhIQ==")
	 *    //_result:
	 *
	 *    // ...use toUtf8String to convert it to a string.
	 *    toUtf8String(result)
	 *    //_result:
	 *
	 *    // Decoding binary data
	 *    decodeBase64("EjQ=")
	 *    //_result:
	 */
	function decodeBase64(value) {
	    return (0, data_js_1.getBytesCopy)(Buffer.from(value, "base64"));
	}
	base64.decodeBase64 = decodeBase64;
	/**
	 *  Encodes %%data%% as a base-64 encoded string.
	 *
	 *  @example:
	 *    // Encoding binary data as a hexstring
	 *    encodeBase64("0x1234")
	 *    //_result:
	 *
	 *    // Encoding binary data as a Uint8Array
	 *    encodeBase64(new Uint8Array([ 0x12, 0x34 ]))
	 *    //_result:
	 *
	 *    // The input MUST be data...
	 *    encodeBase64("Hello World!!")
	 *    //_error:
	 *
	 *    // ...use toUtf8Bytes for this.
	 *    encodeBase64(toUtf8Bytes("Hello World!!"))
	 *    //_result:
	 */
	function encodeBase64(data) {
	    return Buffer.from((0, data_js_1.getBytes)(data)).toString("base64");
	}
	base64.encodeBase64 = encodeBase64;
	
	return base64;
}

var events$1 = {};

var hasRequiredEvents;

function requireEvents () {
	if (hasRequiredEvents) return events$1;
	hasRequiredEvents = 1;
	Object.defineProperty(events$1, "__esModule", { value: true });
	events$1.EventPayload = void 0;
	/**
	 *  Events allow for applications to use the observer pattern, which
	 *  allows subscribing and publishing events, outside the normal
	 *  execution paths.
	 *
	 *  @_section api/utils/events:Events  [about-events]
	 */
	const properties_js_1 = requireProperties();
	/**
	 *  When an [[EventEmitterable]] triggers a [[Listener]], the
	 *  callback always ahas one additional argument passed, which is
	 *  an **EventPayload**.
	 */
	class EventPayload {
	    /**
	     *  The event filter.
	     */
	    filter;
	    /**
	     *  The **EventEmitterable**.
	     */
	    emitter;
	    #listener;
	    /**
	     *  Create a new **EventPayload** for %%emitter%% with
	     *  the %%listener%% and for %%filter%%.
	     */
	    constructor(emitter, listener, filter) {
	        this.#listener = listener;
	        (0, properties_js_1.defineProperties)(this, { emitter, filter });
	    }
	    /**
	     *  Unregister the triggered listener for future events.
	     */
	    async removeListener() {
	        if (this.#listener == null) {
	            return;
	        }
	        await this.emitter.off(this.filter, this.#listener);
	    }
	}
	events$1.EventPayload = EventPayload;
	
	return events$1;
}

var fetch$1 = {};

var utf8 = {};

var hasRequiredUtf8;

function requireUtf8 () {
	if (hasRequiredUtf8) return utf8;
	hasRequiredUtf8 = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.toUtf8CodePoints = exports.toUtf8String = exports.toUtf8Bytes = exports.Utf8ErrorFuncs = void 0;
		/**
		 *  Using strings in Ethereum (or any security-basd system) requires
		 *  additional care. These utilities attempt to mitigate some of the
		 *  safety issues as well as provide the ability to recover and analyse
		 *  strings.
		 *
		 *  @_subsection api/utils:Strings and UTF-8  [about-strings]
		 */
		const data_js_1 = requireData();
		const errors_js_1 = requireErrors();
		function errorFunc(reason, offset, bytes, output, badCodepoint) {
		    (0, errors_js_1.assertArgument)(false, `invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes);
		}
		function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
		    // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes
		    if (reason === "BAD_PREFIX" || reason === "UNEXPECTED_CONTINUE") {
		        let i = 0;
		        for (let o = offset + 1; o < bytes.length; o++) {
		            if (bytes[o] >> 6 !== 0x02) {
		                break;
		            }
		            i++;
		        }
		        return i;
		    }
		    // This byte runs us past the end of the string, so just jump to the end
		    // (but the first byte was read already read and therefore skipped)
		    if (reason === "OVERRUN") {
		        return bytes.length - offset - 1;
		    }
		    // Nothing to skip
		    return 0;
		}
		function replaceFunc(reason, offset, bytes, output, badCodepoint) {
		    // Overlong representations are otherwise "valid" code points; just non-deistingtished
		    if (reason === "OVERLONG") {
		        (0, errors_js_1.assertArgument)(typeof (badCodepoint) === "number", "invalid bad code point for replacement", "badCodepoint", badCodepoint);
		        output.push(badCodepoint);
		        return 0;
		    }
		    // Put the replacement character into the output
		    output.push(0xfffd);
		    // Otherwise, process as if ignoring errors
		    return ignoreFunc(reason, offset, bytes);
		}
		/**
		 *  A handful of popular, built-in UTF-8 error handling strategies.
		 *
		 *  **``"error"``** - throws on ANY illegal UTF-8 sequence or
		 *  non-canonical (overlong) codepoints (this is the default)
		 *
		 *  **``"ignore"``** - silently drops any illegal UTF-8 sequence
		 *  and accepts non-canonical (overlong) codepoints
		 *
		 *  **``"replace"``** - replace any illegal UTF-8 sequence with the
		 *  UTF-8 replacement character (i.e. ``"\\ufffd"``) and accepts
		 *  non-canonical (overlong) codepoints
		 *
		 *  @returns: Record<"error" | "ignore" | "replace", Utf8ErrorFunc>
		 */
		exports.Utf8ErrorFuncs = Object.freeze({
		    error: errorFunc,
		    ignore: ignoreFunc,
		    replace: replaceFunc
		});
		// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499
		function getUtf8CodePoints(_bytes, onError) {
		    if (onError == null) {
		        onError = exports.Utf8ErrorFuncs.error;
		    }
		    const bytes = (0, data_js_1.getBytes)(_bytes, "bytes");
		    const result = [];
		    let i = 0;
		    // Invalid bytes are ignored
		    while (i < bytes.length) {
		        const c = bytes[i++];
		        // 0xxx xxxx
		        if (c >> 7 === 0) {
		            result.push(c);
		            continue;
		        }
		        // Multibyte; how many bytes left for this character?
		        let extraLength = null;
		        let overlongMask = null;
		        // 110x xxxx 10xx xxxx
		        if ((c & 0xe0) === 0xc0) {
		            extraLength = 1;
		            overlongMask = 0x7f;
		            // 1110 xxxx 10xx xxxx 10xx xxxx
		        }
		        else if ((c & 0xf0) === 0xe0) {
		            extraLength = 2;
		            overlongMask = 0x7ff;
		            // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx
		        }
		        else if ((c & 0xf8) === 0xf0) {
		            extraLength = 3;
		            overlongMask = 0xffff;
		        }
		        else {
		            if ((c & 0xc0) === 0x80) {
		                i += onError("UNEXPECTED_CONTINUE", i - 1, bytes, result);
		            }
		            else {
		                i += onError("BAD_PREFIX", i - 1, bytes, result);
		            }
		            continue;
		        }
		        // Do we have enough bytes in our data?
		        if (i - 1 + extraLength >= bytes.length) {
		            i += onError("OVERRUN", i - 1, bytes, result);
		            continue;
		        }
		        // Remove the length prefix from the char
		        let res = c & ((1 << (8 - extraLength - 1)) - 1);
		        for (let j = 0; j < extraLength; j++) {
		            let nextChar = bytes[i];
		            // Invalid continuation byte
		            if ((nextChar & 0xc0) != 0x80) {
		                i += onError("MISSING_CONTINUE", i, bytes, result);
		                res = null;
		                break;
		            }
		            res = (res << 6) | (nextChar & 0x3f);
		            i++;
		        }
		        // See above loop for invalid continuation byte
		        if (res === null) {
		            continue;
		        }
		        // Maximum code point
		        if (res > 0x10ffff) {
		            i += onError("OUT_OF_RANGE", i - 1 - extraLength, bytes, result, res);
		            continue;
		        }
		        // Reserved for UTF-16 surrogate halves
		        if (res >= 0xd800 && res <= 0xdfff) {
		            i += onError("UTF16_SURROGATE", i - 1 - extraLength, bytes, result, res);
		            continue;
		        }
		        // Check for overlong sequences (more bytes than needed)
		        if (res <= overlongMask) {
		            i += onError("OVERLONG", i - 1 - extraLength, bytes, result, res);
		            continue;
		        }
		        result.push(res);
		    }
		    return result;
		}
		// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array
		/**
		 *  Returns the UTF-8 byte representation of %%str%%.
		 *
		 *  If %%form%% is specified, the string is normalized.
		 */
		function toUtf8Bytes(str, form) {
		    (0, errors_js_1.assertArgument)(typeof (str) === "string", "invalid string value", "str", str);
		    if (form != null) {
		        (0, errors_js_1.assertNormalize)(form);
		        str = str.normalize(form);
		    }
		    let result = [];
		    for (let i = 0; i < str.length; i++) {
		        const c = str.charCodeAt(i);
		        if (c < 0x80) {
		            result.push(c);
		        }
		        else if (c < 0x800) {
		            result.push((c >> 6) | 0xc0);
		            result.push((c & 0x3f) | 0x80);
		        }
		        else if ((c & 0xfc00) == 0xd800) {
		            i++;
		            const c2 = str.charCodeAt(i);
		            (0, errors_js_1.assertArgument)(i < str.length && ((c2 & 0xfc00) === 0xdc00), "invalid surrogate pair", "str", str);
		            // Surrogate Pair
		            const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);
		            result.push((pair >> 18) | 0xf0);
		            result.push(((pair >> 12) & 0x3f) | 0x80);
		            result.push(((pair >> 6) & 0x3f) | 0x80);
		            result.push((pair & 0x3f) | 0x80);
		        }
		        else {
		            result.push((c >> 12) | 0xe0);
		            result.push(((c >> 6) & 0x3f) | 0x80);
		            result.push((c & 0x3f) | 0x80);
		        }
		    }
		    return new Uint8Array(result);
		}
		exports.toUtf8Bytes = toUtf8Bytes;
		//export 
		function _toUtf8String(codePoints) {
		    return codePoints.map((codePoint) => {
		        if (codePoint <= 0xffff) {
		            return String.fromCharCode(codePoint);
		        }
		        codePoint -= 0x10000;
		        return String.fromCharCode((((codePoint >> 10) & 0x3ff) + 0xd800), ((codePoint & 0x3ff) + 0xdc00));
		    }).join("");
		}
		/**
		 *  Returns the string represented by the UTF-8 data %%bytes%%.
		 *
		 *  When %%onError%% function is specified, it is called on UTF-8
		 *  errors allowing recovery using the [[Utf8ErrorFunc]] API.
		 *  (default: [error](Utf8ErrorFuncs))
		 */
		function toUtf8String(bytes, onError) {
		    return _toUtf8String(getUtf8CodePoints(bytes, onError));
		}
		exports.toUtf8String = toUtf8String;
		/**
		 *  Returns the UTF-8 code-points for %%str%%.
		 *
		 *  If %%form%% is specified, the string is normalized.
		 */
		function toUtf8CodePoints(str, form) {
		    return getUtf8CodePoints(toUtf8Bytes(str, form));
		}
		exports.toUtf8CodePoints = toUtf8CodePoints;
		
	} (utf8));
	return utf8;
}

var geturl = {};

var hasRequiredGeturl;

function requireGeturl () {
	if (hasRequiredGeturl) return geturl;
	hasRequiredGeturl = 1;
	Object.defineProperty(geturl, "__esModule", { value: true });
	geturl.getUrl = geturl.createGetUrl = void 0;
	const tslib_1 = require$$0$1;
	const http_1 = tslib_1.__importDefault(require$$1);
	const https_1 = tslib_1.__importDefault(require$$2);
	const zlib_1 = require$$3;
	const errors_js_1 = requireErrors();
	const data_js_1 = requireData();
	/**
	 *  @_ignore:
	 */
	function createGetUrl(options) {
	    async function getUrl(req, signal) {
	        const protocol = req.url.split(":")[0].toLowerCase();
	        (0, errors_js_1.assert)(protocol === "http" || protocol === "https", `unsupported protocol ${protocol}`, "UNSUPPORTED_OPERATION", {
	            info: { protocol },
	            operation: "request"
	        });
	        (0, errors_js_1.assert)(protocol === "https" || !req.credentials || req.allowInsecureAuthentication, "insecure authorized connections unsupported", "UNSUPPORTED_OPERATION", {
	            operation: "request"
	        });
	        const method = req.method;
	        const headers = Object.assign({}, req.headers);
	        const reqOptions = { method, headers };
	        if (options) {
	            if (options.agent) {
	                reqOptions.agent = options.agent;
	            }
	        }
	        const request = ((protocol === "http") ? http_1.default : https_1.default).request(req.url, reqOptions);
	        request.setTimeout(req.timeout);
	        const body = req.body;
	        if (body) {
	            request.write(Buffer.from(body));
	        }
	        request.end();
	        return new Promise((resolve, reject) => {
	            // @TODO: Node 15 added AbortSignal; once we drop support for
	            // Node14, we can add that in here too
	            request.once("response", (resp) => {
	                const statusCode = resp.statusCode || 0;
	                const statusMessage = resp.statusMessage || "";
	                const headers = Object.keys(resp.headers || {}).reduce((accum, name) => {
	                    let value = resp.headers[name] || "";
	                    if (Array.isArray(value)) {
	                        value = value.join(", ");
	                    }
	                    accum[name] = value;
	                    return accum;
	                }, {});
	                let body = null;
	                //resp.setEncoding("utf8");
	                resp.on("data", (chunk) => {
	                    if (signal) {
	                        try {
	                            signal.checkSignal();
	                        }
	                        catch (error) {
	                            return reject(error);
	                        }
	                    }
	                    if (body == null) {
	                        body = chunk;
	                    }
	                    else {
	                        const newBody = new Uint8Array(body.length + chunk.length);
	                        newBody.set(body, 0);
	                        newBody.set(chunk, body.length);
	                        body = newBody;
	                    }
	                });
	                resp.on("end", () => {
	                    if (headers["content-encoding"] === "gzip" && body) {
	                        body = (0, data_js_1.getBytes)((0, zlib_1.gunzipSync)(body));
	                    }
	                    resolve({ statusCode, statusMessage, headers, body });
	                });
	                resp.on("error", (error) => {
	                    //@TODO: Should this just return nornal response with a server error?
	                    error.response = { statusCode, statusMessage, headers, body };
	                    reject(error);
	                });
	            });
	            request.on("error", (error) => { reject(error); });
	        });
	    }
	    return getUrl;
	}
	geturl.createGetUrl = createGetUrl;
	// @TODO: remove in v7; provided for backwards compat
	const defaultGetUrl = createGetUrl({});
	/**
	 *  @_ignore:
	 */
	async function getUrl(req, signal) {
	    return defaultGetUrl(req, signal);
	}
	geturl.getUrl = getUrl;
	
	return geturl;
}

var hasRequiredFetch;

function requireFetch () {
	if (hasRequiredFetch) return fetch$1;
	hasRequiredFetch = 1;
	Object.defineProperty(fetch$1, "__esModule", { value: true });
	fetch$1.FetchResponse = fetch$1.FetchRequest = fetch$1.FetchCancelSignal = void 0;
	/**
	 *  Fetching content from the web is environment-specific, so Ethers
	 *  provides an abstraction that each environment can implement to provide
	 *  this service.
	 *
	 *  On [Node.js](link-node), the ``http`` and ``https`` libs are used to
	 *  create a request object, register event listeners and process data
	 *  and populate the [[FetchResponse]].
	 *
	 *  In a browser, the [DOM fetch](link-js-fetch) is used, and the resulting
	 *  ``Promise`` is waited on to retrieve the payload.
	 *
	 *  The [[FetchRequest]] is responsible for handling many common situations,
	 *  such as redirects, server throttling, authentication, etc.
	 *
	 *  It also handles common gateways, such as IPFS and data URIs.
	 *
	 *  @_section api/utils/fetching:Fetching Web Content  [about-fetch]
	 */
	const base64_js_1 = requireBase64();
	const data_js_1 = requireData();
	const errors_js_1 = requireErrors();
	const properties_js_1 = requireProperties();
	const utf8_js_1 = requireUtf8();
	const geturl_js_1 = requireGeturl();
	const MAX_ATTEMPTS = 12;
	const SLOT_INTERVAL = 250;
	// The global FetchGetUrlFunc implementation.
	let defaultGetUrlFunc = (0, geturl_js_1.createGetUrl)();
	const reData = new RegExp("^data:([^;:]*)?(;base64)?,(.*)$", "i");
	const reIpfs = new RegExp("^ipfs:/\/(ipfs/)?(.*)$", "i");
	// If locked, new Gateways cannot be added
	let locked = false;
	// https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs
	async function dataGatewayFunc(url, signal) {
	    try {
	        const match = url.match(reData);
	        if (!match) {
	            throw new Error("invalid data");
	        }
	        return new FetchResponse(200, "OK", {
	            "content-type": (match[1] || "text/plain"),
	        }, (match[2] ? (0, base64_js_1.decodeBase64)(match[3]) : unpercent(match[3])));
	    }
	    catch (error) {
	        return new FetchResponse(599, "BAD REQUEST (invalid data: URI)", {}, null, new FetchRequest(url));
	    }
	}
	/**
	 *  Returns a [[FetchGatewayFunc]] for fetching content from a standard
	 *  IPFS gateway hosted at %%baseUrl%%.
	 */
	function getIpfsGatewayFunc(baseUrl) {
	    async function gatewayIpfs(url, signal) {
	        try {
	            const match = url.match(reIpfs);
	            if (!match) {
	                throw new Error("invalid link");
	            }
	            return new FetchRequest(`${baseUrl}${match[2]}`);
	        }
	        catch (error) {
	            return new FetchResponse(599, "BAD REQUEST (invalid IPFS URI)", {}, null, new FetchRequest(url));
	        }
	    }
	    return gatewayIpfs;
	}
	const Gateways = {
	    "data": dataGatewayFunc,
	    "ipfs": getIpfsGatewayFunc("https:/\/gateway.ipfs.io/ipfs/")
	};
	const fetchSignals = new WeakMap();
	/**
	 *  @_ignore
	 */
	class FetchCancelSignal {
	    #listeners;
	    #cancelled;
	    constructor(request) {
	        this.#listeners = [];
	        this.#cancelled = false;
	        fetchSignals.set(request, () => {
	            if (this.#cancelled) {
	                return;
	            }
	            this.#cancelled = true;
	            for (const listener of this.#listeners) {
	                setTimeout(() => { listener(); }, 0);
	            }
	            this.#listeners = [];
	        });
	    }
	    addListener(listener) {
	        (0, errors_js_1.assert)(!this.#cancelled, "singal already cancelled", "UNSUPPORTED_OPERATION", {
	            operation: "fetchCancelSignal.addCancelListener"
	        });
	        this.#listeners.push(listener);
	    }
	    get cancelled() { return this.#cancelled; }
	    checkSignal() {
	        (0, errors_js_1.assert)(!this.cancelled, "cancelled", "CANCELLED", {});
	    }
	}
	fetch$1.FetchCancelSignal = FetchCancelSignal;
	// Check the signal, throwing if it is cancelled
	function checkSignal(signal) {
	    if (signal == null) {
	        throw new Error("missing signal; should not happen");
	    }
	    signal.checkSignal();
	    return signal;
	}
	/**
	 *  Represents a request for a resource using a URI.
	 *
	 *  By default, the supported schemes are ``HTTP``, ``HTTPS``, ``data:``,
	 *  and ``IPFS:``.
	 *
	 *  Additional schemes can be added globally using [[registerGateway]].
	 *
	 *  @example:
	 *    req = new FetchRequest("https://www.ricmoo.com")
	 *    resp = await req.send()
	 *    resp.body.length
	 *    //_result:
	 */
	class FetchRequest {
	    #allowInsecure;
	    #gzip;
	    #headers;
	    #method;
	    #timeout;
	    #url;
	    #body;
	    #bodyType;
	    #creds;
	    // Hooks
	    #preflight;
	    #process;
	    #retry;
	    #signal;
	    #throttle;
	    #getUrlFunc;
	    /**
	     *  The fetch URL to request.
	     */
	    get url() { return this.#url; }
	    set url(url) {
	        this.#url = String(url);
	    }
	    /**
	     *  The fetch body, if any, to send as the request body. //(default: null)//
	     *
	     *  When setting a body, the intrinsic ``Content-Type`` is automatically
	     *  set and will be used if **not overridden** by setting a custom
	     *  header.
	     *
	     *  If %%body%% is null, the body is cleared (along with the
	     *  intrinsic ``Content-Type``).
	     *
	     *  If %%body%% is a string, the intrinsic ``Content-Type`` is set to
	     *  ``text/plain``.
	     *
	     *  If %%body%% is a Uint8Array, the intrinsic ``Content-Type`` is set to
	     *  ``application/octet-stream``.
	     *
	     *  If %%body%% is any other object, the intrinsic ``Content-Type`` is
	     *  set to ``application/json``.
	     */
	    get body() {
	        if (this.#body == null) {
	            return null;
	        }
	        return new Uint8Array(this.#body);
	    }
	    set body(body) {
	        if (body == null) {
	            this.#body = undefined;
	            this.#bodyType = undefined;
	        }
	        else if (typeof (body) === "string") {
	            this.#body = (0, utf8_js_1.toUtf8Bytes)(body);
	            this.#bodyType = "text/plain";
	        }
	        else if (body instanceof Uint8Array) {
	            this.#body = body;
	            this.#bodyType = "application/octet-stream";
	        }
	        else if (typeof (body) === "object") {
	            this.#body = (0, utf8_js_1.toUtf8Bytes)(JSON.stringify(body));
	            this.#bodyType = "application/json";
	        }
	        else {
	            throw new Error("invalid body");
	        }
	    }
	    /**
	     *  Returns true if the request has a body.
	     */
	    hasBody() {
	        return (this.#body != null);
	    }
	    /**
	     *  The HTTP method to use when requesting the URI. If no method
	     *  has been explicitly set, then ``GET`` is used if the body is
	     *  null and ``POST`` otherwise.
	     */
	    get method() {
	        if (this.#method) {
	            return this.#method;
	        }
	        if (this.hasBody()) {
	            return "POST";
	        }
	        return "GET";
	    }
	    set method(method) {
	        if (method == null) {
	            method = "";
	        }
	        this.#method = String(method).toUpperCase();
	    }
	    /**
	     *  The headers that will be used when requesting the URI. All
	     *  keys are lower-case.
	     *
	     *  This object is a copy, so any changes will **NOT** be reflected
	     *  in the ``FetchRequest``.
	     *
	     *  To set a header entry, use the ``setHeader`` method.
	     */
	    get headers() {
	        const headers = Object.assign({}, this.#headers);
	        if (this.#creds) {
	            headers["authorization"] = `Basic ${(0, base64_js_1.encodeBase64)((0, utf8_js_1.toUtf8Bytes)(this.#creds))}`;
	        }
	        if (this.allowGzip) {
	            headers["accept-encoding"] = "gzip";
	        }
	        if (headers["content-type"] == null && this.#bodyType) {
	            headers["content-type"] = this.#bodyType;
	        }
	        if (this.body) {
	            headers["content-length"] = String(this.body.length);
	        }
	        return headers;
	    }
	    /**
	     *  Get the header for %%key%%, ignoring case.
	     */
	    getHeader(key) {
	        return this.headers[key.toLowerCase()];
	    }
	    /**
	     *  Set the header for %%key%% to %%value%%. All values are coerced
	     *  to a string.
	     */
	    setHeader(key, value) {
	        this.#headers[String(key).toLowerCase()] = String(value);
	    }
	    /**
	     *  Clear all headers, resetting all intrinsic headers.
	     */
	    clearHeaders() {
	        this.#headers = {};
	    }
	    [Symbol.iterator]() {
	        const headers = this.headers;
	        const keys = Object.keys(headers);
	        let index = 0;
	        return {
	            next: () => {
	                if (index < keys.length) {
	                    const key = keys[index++];
	                    return {
	                        value: [key, headers[key]], done: false
	                    };
	                }
	                return { value: undefined, done: true };
	            }
	        };
	    }
	    /**
	     *  The value that will be sent for the ``Authorization`` header.
	     *
	     *  To set the credentials, use the ``setCredentials`` method.
	     */
	    get credentials() {
	        return this.#creds || null;
	    }
	    /**
	     *  Sets an ``Authorization`` for %%username%% with %%password%%.
	     */
	    setCredentials(username, password) {
	        (0, errors_js_1.assertArgument)(!username.match(/:/), "invalid basic authentication username", "username", "[REDACTED]");
	        this.#creds = `${username}:${password}`;
	    }
	    /**
	     *  Enable and request gzip-encoded responses. The response will
	     *  automatically be decompressed. //(default: true)//
	     */
	    get allowGzip() {
	        return this.#gzip;
	    }
	    set allowGzip(value) {
	        this.#gzip = !!value;
	    }
	    /**
	     *  Allow ``Authentication`` credentials to be sent over insecure
	     *  channels. //(default: false)//
	     */
	    get allowInsecureAuthentication() {
	        return !!this.#allowInsecure;
	    }
	    set allowInsecureAuthentication(value) {
	        this.#allowInsecure = !!value;
	    }
	    /**
	     *  The timeout (in milliseconds) to wait for a complete response.
	     *  //(default: 5 minutes)//
	     */
	    get timeout() { return this.#timeout; }
	    set timeout(timeout) {
	        (0, errors_js_1.assertArgument)(timeout >= 0, "timeout must be non-zero", "timeout", timeout);
	        this.#timeout = timeout;
	    }
	    /**
	     *  This function is called prior to each request, for example
	     *  during a redirection or retry in case of server throttling.
	     *
	     *  This offers an opportunity to populate headers or update
	     *  content before sending a request.
	     */
	    get preflightFunc() {
	        return this.#preflight || null;
	    }
	    set preflightFunc(preflight) {
	        this.#preflight = preflight;
	    }
	    /**
	     *  This function is called after each response, offering an
	     *  opportunity to provide client-level throttling or updating
	     *  response data.
	     *
	     *  Any error thrown in this causes the ``send()`` to throw.
	     *
	     *  To schedule a retry attempt (assuming the maximum retry limit
	     *  has not been reached), use [[response.throwThrottleError]].
	     */
	    get processFunc() {
	        return this.#process || null;
	    }
	    set processFunc(process) {
	        this.#process = process;
	    }
	    /**
	     *  This function is called on each retry attempt.
	     */
	    get retryFunc() {
	        return this.#retry || null;
	    }
	    set retryFunc(retry) {
	        this.#retry = retry;
	    }
	    /**
	     *  This function is called to fetch content from HTTP and
	     *  HTTPS URLs and is platform specific (e.g. nodejs vs
	     *  browsers).
	     *
	     *  This is by default the currently registered global getUrl
	     *  function, which can be changed using [[registerGetUrl]].
	     *  If this has been set, setting is to ``null`` will cause
	     *  this FetchRequest (and any future clones) to revert back to
	     *  using the currently registered global getUrl function.
	     *
	     *  Setting this is generally not necessary, but may be useful
	     *  for developers that wish to intercept requests or to
	     *  configurege a proxy or other agent.
	     */
	    get getUrlFunc() {
	        return this.#getUrlFunc || defaultGetUrlFunc;
	    }
	    set getUrlFunc(value) {
	        this.#getUrlFunc = value;
	    }
	    /**
	     *  Create a new FetchRequest instance with default values.
	     *
	     *  Once created, each property may be set before issuing a
	     *  ``.send()`` to make the request.
	     */
	    constructor(url) {
	        this.#url = String(url);
	        this.#allowInsecure = false;
	        this.#gzip = true;
	        this.#headers = {};
	        this.#method = "";
	        this.#timeout = 300000;
	        this.#throttle = {
	            slotInterval: SLOT_INTERVAL,
	            maxAttempts: MAX_ATTEMPTS
	        };
	        this.#getUrlFunc = null;
	    }
	    toString() {
	        return `<FetchRequest method=${JSON.stringify(this.method)} url=${JSON.stringify(this.url)} headers=${JSON.stringify(this.headers)} body=${this.#body ? (0, data_js_1.hexlify)(this.#body) : "null"}>`;
	    }
	    /**
	     *  Update the throttle parameters used to determine maximum
	     *  attempts and exponential-backoff properties.
	     */
	    setThrottleParams(params) {
	        if (params.slotInterval != null) {
	            this.#throttle.slotInterval = params.slotInterval;
	        }
	        if (params.maxAttempts != null) {
	            this.#throttle.maxAttempts = params.maxAttempts;
	        }
	    }
	    async #send(attempt, expires, delay, _request, _response) {
	        if (attempt >= this.#throttle.maxAttempts) {
	            return _response.makeServerError("exceeded maximum retry limit");
	        }
	        (0, errors_js_1.assert)(getTime() <= expires, "timeout", "TIMEOUT", {
	            operation: "request.send", reason: "timeout", request: _request
	        });
	        if (delay > 0) {
	            await wait(delay);
	        }
	        let req = this.clone();
	        const scheme = (req.url.split(":")[0] || "").toLowerCase();
	        // Process any Gateways
	        if (scheme in Gateways) {
	            const result = await Gateways[scheme](req.url, checkSignal(_request.#signal));
	            if (result instanceof FetchResponse) {
	                let response = result;
	                if (this.processFunc) {
	                    checkSignal(_request.#signal);
	                    try {
	                        response = await this.processFunc(req, response);
	                    }
	                    catch (error) {
	                        // Something went wrong during processing; throw a 5xx server error
	                        if (error.throttle == null || typeof (error.stall) !== "number") {
	                            response.makeServerError("error in post-processing function", error).assertOk();
	                        }
	                        // Ignore throttling
	                    }
	                }
	                return response;
	            }
	            req = result;
	        }
	        // We have a preflight function; update the request
	        if (this.preflightFunc) {
	            req = await this.preflightFunc(req);
	        }
	        const resp = await this.getUrlFunc(req, checkSignal(_request.#signal));
	        let response = new FetchResponse(resp.statusCode, resp.statusMessage, resp.headers, resp.body, _request);
	        if (response.statusCode === 301 || response.statusCode === 302) {
	            // Redirect
	            try {
	                const location = response.headers.location || "";
	                return req.redirect(location).#send(attempt + 1, expires, 0, _request, response);
	            }
	            catch (error) { }
	            // Things won't get any better on another attempt; abort
	            return response;
	        }
	        else if (response.statusCode === 429) {
	            // Throttle
	            if (this.retryFunc == null || (await this.retryFunc(req, response, attempt))) {
	                const retryAfter = response.headers["retry-after"];
	                let delay = this.#throttle.slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));
	                if (typeof (retryAfter) === "string" && retryAfter.match(/^[1-9][0-9]*$/)) {
	                    delay = parseInt(retryAfter);
	                }
	                return req.clone().#send(attempt + 1, expires, delay, _request, response);
	            }
	        }
	        if (this.processFunc) {
	            checkSignal(_request.#signal);
	            try {
	                response = await this.processFunc(req, response);
	            }
	            catch (error) {
	                // Something went wrong during processing; throw a 5xx server error
	                if (error.throttle == null || typeof (error.stall) !== "number") {
	                    response.makeServerError("error in post-processing function", error).assertOk();
	                }
	                // Throttle
	                let delay = this.#throttle.slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));
	                if (error.stall >= 0) {
	                    delay = error.stall;
	                }
	                return req.clone().#send(attempt + 1, expires, delay, _request, response);
	            }
	        }
	        return response;
	    }
	    /**
	     *  Resolves to the response by sending the request.
	     */
	    send() {
	        (0, errors_js_1.assert)(this.#signal == null, "request already sent", "UNSUPPORTED_OPERATION", { operation: "fetchRequest.send" });
	        this.#signal = new FetchCancelSignal(this);
	        return this.#send(0, getTime() + this.timeout, 0, this, new FetchResponse(0, "", {}, null, this));
	    }
	    /**
	     *  Cancels the inflight response, causing a ``CANCELLED``
	     *  error to be rejected from the [[send]].
	     */
	    cancel() {
	        (0, errors_js_1.assert)(this.#signal != null, "request has not been sent", "UNSUPPORTED_OPERATION", { operation: "fetchRequest.cancel" });
	        const signal = fetchSignals.get(this);
	        if (!signal) {
	            throw new Error("missing signal; should not happen");
	        }
	        signal();
	    }
	    /**
	     *  Returns a new [[FetchRequest]] that represents the redirection
	     *  to %%location%%.
	     */
	    redirect(location) {
	        // Redirection; for now we only support absolute locations
	        const current = this.url.split(":")[0].toLowerCase();
	        const target = location.split(":")[0].toLowerCase();
	        // Don't allow redirecting:
	        // - non-GET requests
	        // - downgrading the security (e.g. https => http)
	        // - to non-HTTP (or non-HTTPS) protocols [this could be relaxed?]
	        (0, errors_js_1.assert)(this.method === "GET" && (current !== "https" || target !== "http") && location.match(/^https?:/), `unsupported redirect`, "UNSUPPORTED_OPERATION", {
	            operation: `redirect(${this.method} ${JSON.stringify(this.url)} => ${JSON.stringify(location)})`
	        });
	        // Create a copy of this request, with a new URL
	        const req = new FetchRequest(location);
	        req.method = "GET";
	        req.allowGzip = this.allowGzip;
	        req.timeout = this.timeout;
	        req.#headers = Object.assign({}, this.#headers);
	        if (this.#body) {
	            req.#body = new Uint8Array(this.#body);
	        }
	        req.#bodyType = this.#bodyType;
	        // Do not forward credentials unless on the same domain; only absolute
	        //req.allowInsecure = false;
	        // paths are currently supported; may want a way to specify to forward?
	        //setStore(req.#props, "creds", getStore(this.#pros, "creds"));
	        return req;
	    }
	    /**
	     *  Create a new copy of this request.
	     */
	    clone() {
	        const clone = new FetchRequest(this.url);
	        // Preserve "default method" (i.e. null)
	        clone.#method = this.#method;
	        // Preserve "default body" with type, copying the Uint8Array is present
	        if (this.#body) {
	            clone.#body = this.#body;
	        }
	        clone.#bodyType = this.#bodyType;
	        // Preserve "default headers"
	        clone.#headers = Object.assign({}, this.#headers);
	        // Credentials is readonly, so we copy internally
	        clone.#creds = this.#creds;
	        if (this.allowGzip) {
	            clone.allowGzip = true;
	        }
	        clone.timeout = this.timeout;
	        if (this.allowInsecureAuthentication) {
	            clone.allowInsecureAuthentication = true;
	        }
	        clone.#preflight = this.#preflight;
	        clone.#process = this.#process;
	        clone.#retry = this.#retry;
	        clone.#getUrlFunc = this.#getUrlFunc;
	        return clone;
	    }
	    /**
	     *  Locks all static configuration for gateways and FetchGetUrlFunc
	     *  registration.
	     */
	    static lockConfig() {
	        locked = true;
	    }
	    /**
	     *  Get the current Gateway function for %%scheme%%.
	     */
	    static getGateway(scheme) {
	        return Gateways[scheme.toLowerCase()] || null;
	    }
	    /**
	     *  Use the %%func%% when fetching URIs using %%scheme%%.
	     *
	     *  This method affects all requests globally.
	     *
	     *  If [[lockConfig]] has been called, no change is made and this
	     *  throws.
	     */
	    static registerGateway(scheme, func) {
	        scheme = scheme.toLowerCase();
	        if (scheme === "http" || scheme === "https") {
	            throw new Error(`cannot intercept ${scheme}; use registerGetUrl`);
	        }
	        if (locked) {
	            throw new Error("gateways locked");
	        }
	        Gateways[scheme] = func;
	    }
	    /**
	     *  Use %%getUrl%% when fetching URIs over HTTP and HTTPS requests.
	     *
	     *  This method affects all requests globally.
	     *
	     *  If [[lockConfig]] has been called, no change is made and this
	     *  throws.
	     */
	    static registerGetUrl(getUrl) {
	        if (locked) {
	            throw new Error("gateways locked");
	        }
	        defaultGetUrlFunc = getUrl;
	    }
	    /**
	     *  Creates a getUrl function that fetches content from HTTP and
	     *  HTTPS URLs.
	     *
	     *  The available %%options%% are dependent on the platform
	     *  implementation of the default getUrl function.
	     *
	     *  This is not generally something that is needed, but is useful
	     *  when trying to customize simple behaviour when fetching HTTP
	     *  content.
	     */
	    static createGetUrlFunc(options) {
	        return (0, geturl_js_1.createGetUrl)(options);
	    }
	    /**
	     *  Creates a function that can "fetch" data URIs.
	     *
	     *  Note that this is automatically done internally to support
	     *  data URIs, so it is not necessary to register it.
	     *
	     *  This is not generally something that is needed, but may
	     *  be useful in a wrapper to perfom custom data URI functionality.
	     */
	    static createDataGateway() {
	        return dataGatewayFunc;
	    }
	    /**
	     *  Creates a function that will fetch IPFS (unvalidated) from
	     *  a custom gateway baseUrl.
	     *
	     *  The default IPFS gateway used internally is
	     *  ``"https:/\/gateway.ipfs.io/ipfs/"``.
	     */
	    static createIpfsGatewayFunc(baseUrl) {
	        return getIpfsGatewayFunc(baseUrl);
	    }
	}
	fetch$1.FetchRequest = FetchRequest;
	/**
	 *  The response for a FetchRequest.
	 */
	class FetchResponse {
	    #statusCode;
	    #statusMessage;
	    #headers;
	    #body;
	    #request;
	    #error;
	    toString() {
	        return `<FetchResponse status=${this.statusCode} body=${this.#body ? (0, data_js_1.hexlify)(this.#body) : "null"}>`;
	    }
	    /**
	     *  The response status code.
	     */
	    get statusCode() { return this.#statusCode; }
	    /**
	     *  The response status message.
	     */
	    get statusMessage() { return this.#statusMessage; }
	    /**
	     *  The response headers. All keys are lower-case.
	     */
	    get headers() { return Object.assign({}, this.#headers); }
	    /**
	     *  The response body, or ``null`` if there was no body.
	     */
	    get body() {
	        return (this.#body == null) ? null : new Uint8Array(this.#body);
	    }
	    /**
	     *  The response body as a UTF-8 encoded string, or the empty
	     *  string (i.e. ``""``) if there was no body.
	     *
	     *  An error is thrown if the body is invalid UTF-8 data.
	     */
	    get bodyText() {
	        try {
	            return (this.#body == null) ? "" : (0, utf8_js_1.toUtf8String)(this.#body);
	        }
	        catch (error) {
	            (0, errors_js_1.assert)(false, "response body is not valid UTF-8 data", "UNSUPPORTED_OPERATION", {
	                operation: "bodyText", info: { response: this }
	            });
	        }
	    }
	    /**
	     *  The response body, decoded as JSON.
	     *
	     *  An error is thrown if the body is invalid JSON-encoded data
	     *  or if there was no body.
	     */
	    get bodyJson() {
	        try {
	            return JSON.parse(this.bodyText);
	        }
	        catch (error) {
	            (0, errors_js_1.assert)(false, "response body is not valid JSON", "UNSUPPORTED_OPERATION", {
	                operation: "bodyJson", info: { response: this }
	            });
	        }
	    }
	    [Symbol.iterator]() {
	        const headers = this.headers;
	        const keys = Object.keys(headers);
	        let index = 0;
	        return {
	            next: () => {
	                if (index < keys.length) {
	                    const key = keys[index++];
	                    return {
	                        value: [key, headers[key]], done: false
	                    };
	                }
	                return { value: undefined, done: true };
	            }
	        };
	    }
	    constructor(statusCode, statusMessage, headers, body, request) {
	        this.#statusCode = statusCode;
	        this.#statusMessage = statusMessage;
	        this.#headers = Object.keys(headers).reduce((accum, k) => {
	            accum[k.toLowerCase()] = String(headers[k]);
	            return accum;
	        }, {});
	        this.#body = ((body == null) ? null : new Uint8Array(body));
	        this.#request = (request || null);
	        this.#error = { message: "" };
	    }
	    /**
	     *  Return a Response with matching headers and body, but with
	     *  an error status code (i.e. 599) and %%message%% with an
	     *  optional %%error%%.
	     */
	    makeServerError(message, error) {
	        let statusMessage;
	        if (!message) {
	            message = `${this.statusCode} ${this.statusMessage}`;
	            statusMessage = `CLIENT ESCALATED SERVER ERROR (${message})`;
	        }
	        else {
	            statusMessage = `CLIENT ESCALATED SERVER ERROR (${this.statusCode} ${this.statusMessage}; ${message})`;
	        }
	        const response = new FetchResponse(599, statusMessage, this.headers, this.body, this.#request || undefined);
	        response.#error = { message, error };
	        return response;
	    }
	    /**
	     *  If called within a [request.processFunc](FetchRequest-processFunc)
	     *  call, causes the request to retry as if throttled for %%stall%%
	     *  milliseconds.
	     */
	    throwThrottleError(message, stall) {
	        if (stall == null) {
	            stall = -1;
	        }
	        else {
	            (0, errors_js_1.assertArgument)(Number.isInteger(stall) && stall >= 0, "invalid stall timeout", "stall", stall);
	        }
	        const error = new Error(message || "throttling requests");
	        (0, properties_js_1.defineProperties)(error, { stall, throttle: true });
	        throw error;
	    }
	    /**
	     *  Get the header value for %%key%%, ignoring case.
	     */
	    getHeader(key) {
	        return this.headers[key.toLowerCase()];
	    }
	    /**
	     *  Returns true if the response has a body.
	     */
	    hasBody() {
	        return (this.#body != null);
	    }
	    /**
	     *  The request made for this response.
	     */
	    get request() { return this.#request; }
	    /**
	     *  Returns true if this response was a success statusCode.
	     */
	    ok() {
	        return (this.#error.message === "" && this.statusCode >= 200 && this.statusCode < 300);
	    }
	    /**
	     *  Throws a ``SERVER_ERROR`` if this response is not ok.
	     */
	    assertOk() {
	        if (this.ok()) {
	            return;
	        }
	        let { message, error } = this.#error;
	        if (message === "") {
	            message = `server response ${this.statusCode} ${this.statusMessage}`;
	        }
	        let requestUrl = null;
	        if (this.request) {
	            requestUrl = this.request.url;
	        }
	        let responseBody = null;
	        try {
	            if (this.#body) {
	                responseBody = (0, utf8_js_1.toUtf8String)(this.#body);
	            }
	        }
	        catch (e) { }
	        (0, errors_js_1.assert)(false, message, "SERVER_ERROR", {
	            request: (this.request || "unknown request"), response: this, error,
	            info: {
	                requestUrl, responseBody,
	                responseStatus: `${this.statusCode} ${this.statusMessage}`
	            }
	        });
	    }
	}
	fetch$1.FetchResponse = FetchResponse;
	function getTime() { return (new Date()).getTime(); }
	function unpercent(value) {
	    return (0, utf8_js_1.toUtf8Bytes)(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {
	        return String.fromCharCode(parseInt(code, 16));
	    }));
	}
	function wait(delay) {
	    return new Promise((resolve) => setTimeout(resolve, delay));
	}
	
	return fetch$1;
}

var fixednumber = {};

var hasRequiredFixednumber;

function requireFixednumber () {
	if (hasRequiredFixednumber) return fixednumber;
	hasRequiredFixednumber = 1;
	Object.defineProperty(fixednumber, "__esModule", { value: true });
	fixednumber.FixedNumber = void 0;
	/**
	 *  The **FixedNumber** class permits using values with decimal places,
	 *  using fixed-pont math.
	 *
	 *  Fixed-point math is still based on integers under-the-hood, but uses an
	 *  internal offset to store fractional components below, and each operation
	 *  corrects for this after each operation.
	 *
	 *  @_section: api/utils/fixed-point-math:Fixed-Point Maths  [about-fixed-point-math]
	 */
	const data_js_1 = requireData();
	const errors_js_1 = requireErrors();
	const maths_js_1 = requireMaths();
	const properties_js_1 = requireProperties();
	const BN_N1 = BigInt(-1);
	const BN_0 = BigInt(0);
	const BN_1 = BigInt(1);
	const BN_5 = BigInt(5);
	const _guard = {};
	// Constant to pull zeros from for multipliers
	let Zeros = "0000";
	while (Zeros.length < 80) {
	    Zeros += Zeros;
	}
	// Returns a string "1" followed by decimal "0"s
	function getTens(decimals) {
	    let result = Zeros;
	    while (result.length < decimals) {
	        result += result;
	    }
	    return BigInt("1" + result.substring(0, decimals));
	}
	function checkValue(val, format, safeOp) {
	    const width = BigInt(format.width);
	    if (format.signed) {
	        const limit = (BN_1 << (width - BN_1));
	        (0, errors_js_1.assert)(safeOp == null || (val >= -limit && val < limit), "overflow", "NUMERIC_FAULT", {
	            operation: safeOp, fault: "overflow", value: val
	        });
	        if (val > BN_0) {
	            val = (0, maths_js_1.fromTwos)((0, maths_js_1.mask)(val, width), width);
	        }
	        else {
	            val = -(0, maths_js_1.fromTwos)((0, maths_js_1.mask)(-val, width), width);
	        }
	    }
	    else {
	        const limit = (BN_1 << width);
	        (0, errors_js_1.assert)(safeOp == null || (val >= 0 && val < limit), "overflow", "NUMERIC_FAULT", {
	            operation: safeOp, fault: "overflow", value: val
	        });
	        val = (((val % limit) + limit) % limit) & (limit - BN_1);
	    }
	    return val;
	}
	function getFormat(value) {
	    if (typeof (value) === "number") {
	        value = `fixed128x${value}`;
	    }
	    let signed = true;
	    let width = 128;
	    let decimals = 18;
	    if (typeof (value) === "string") {
	        // Parse the format string
	        if (value === "fixed") ;
	        else if (value === "ufixed") {
	            signed = false;
	        }
	        else {
	            const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
	            (0, errors_js_1.assertArgument)(match, "invalid fixed format", "format", value);
	            signed = (match[1] !== "u");
	            width = parseInt(match[2]);
	            decimals = parseInt(match[3]);
	        }
	    }
	    else if (value) {
	        // Extract the values from the object
	        const v = value;
	        const check = (key, type, defaultValue) => {
	            if (v[key] == null) {
	                return defaultValue;
	            }
	            (0, errors_js_1.assertArgument)(typeof (v[key]) === type, "invalid fixed format (" + key + " not " + type + ")", "format." + key, v[key]);
	            return v[key];
	        };
	        signed = check("signed", "boolean", signed);
	        width = check("width", "number", width);
	        decimals = check("decimals", "number", decimals);
	    }
	    (0, errors_js_1.assertArgument)((width % 8) === 0, "invalid FixedNumber width (not byte aligned)", "format.width", width);
	    (0, errors_js_1.assertArgument)(decimals <= 80, "invalid FixedNumber decimals (too large)", "format.decimals", decimals);
	    const name = (signed ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
	    return { signed, width, decimals, name };
	}
	function toString(val, decimals) {
	    let negative = "";
	    if (val < BN_0) {
	        negative = "-";
	        val *= BN_N1;
	    }
	    let str = val.toString();
	    // No decimal point for whole values
	    if (decimals === 0) {
	        return (negative + str);
	    }
	    // Pad out to the whole component (including a whole digit)
	    while (str.length <= decimals) {
	        str = Zeros + str;
	    }
	    // Insert the decimal point
	    const index = str.length - decimals;
	    str = str.substring(0, index) + "." + str.substring(index);
	    // Trim the whole component (leaving at least one 0)
	    while (str[0] === "0" && str[1] !== ".") {
	        str = str.substring(1);
	    }
	    // Trim the decimal component (leaving at least one 0)
	    while (str[str.length - 1] === "0" && str[str.length - 2] !== ".") {
	        str = str.substring(0, str.length - 1);
	    }
	    return (negative + str);
	}
	/**
	 *  A FixedNumber represents a value over its [[FixedFormat]]
	 *  arithmetic field.
	 *
	 *  A FixedNumber can be used to perform math, losslessly, on
	 *  values which have decmial places.
	 *
	 *  A FixedNumber has a fixed bit-width to store values in, and stores all
	 *  values internally by multiplying the value by 10 raised to the power of
	 *  %%decimals%%.
	 *
	 *  If operations are performed that cause a value to grow too high (close to
	 *  positive infinity) or too low (close to negative infinity), the value
	 *  is said to //overflow//.
	 *
	 *  For example, an 8-bit signed value, with 0 decimals may only be within
	 *  the range ``-128`` to ``127``; so ``-128 - 1`` will overflow and become
	 *  ``127``. Likewise, ``127 + 1`` will overflow and become ``-127``.
	 *
	 *  Many operation have a normal and //unsafe// variant. The normal variant
	 *  will throw a [[NumericFaultError]] on any overflow, while the //unsafe//
	 *  variant will silently allow overflow, corrupting its value value.
	 *
	 *  If operations are performed that cause a value to become too small
	 *  (close to zero), the value loses precison and is said to //underflow//.
	 *
	 *  For example, an value with 1 decimal place may store a number as small
	 *  as ``0.1``, but the value of ``0.1 / 2`` is ``0.05``, which cannot fit
	 *  into 1 decimal place, so underflow occurs which means precision is lost
	 *  and the value becomes ``0``.
	 *
	 *  Some operations have a normal and //signalling// variant. The normal
	 *  variant will silently ignore underflow, while the //signalling// variant
	 *  will thow a [[NumericFaultError]] on underflow.
	 */
	class FixedNumber {
	    /**
	     *  The specific fixed-point arithmetic field for this value.
	     */
	    format;
	    #format;
	    // The actual value (accounting for decimals)
	    #val;
	    // A base-10 value to multiple values by to maintain the magnitude
	    #tens;
	    /**
	     *  This is a property so console.log shows a human-meaningful value.
	     *
	     *  @private
	     */
	    _value;
	    // Use this when changing this file to get some typing info,
	    // but then switch to any to mask the internal type
	    //constructor(guard: any, value: bigint, format: _FixedFormat) {
	    /**
	     *  @private
	     */
	    constructor(guard, value, format) {
	        (0, errors_js_1.assertPrivate)(guard, _guard, "FixedNumber");
	        this.#val = value;
	        this.#format = format;
	        const _value = toString(value, format.decimals);
	        (0, properties_js_1.defineProperties)(this, { format: format.name, _value });
	        this.#tens = getTens(format.decimals);
	    }
	    /**
	     *  If true, negative values are permitted, otherwise only
	     *  positive values and zero are allowed.
	     */
	    get signed() { return this.#format.signed; }
	    /**
	     *  The number of bits available to store the value.
	     */
	    get width() { return this.#format.width; }
	    /**
	     *  The number of decimal places in the fixed-point arithment field.
	     */
	    get decimals() { return this.#format.decimals; }
	    /**
	     *  The value as an integer, based on the smallest unit the
	     *  [[decimals]] allow.
	     */
	    get value() { return this.#val; }
	    #checkFormat(other) {
	        (0, errors_js_1.assertArgument)(this.format === other.format, "incompatible format; use fixedNumber.toFormat", "other", other);
	    }
	    #checkValue(val, safeOp) {
	        /*
	                const width = BigInt(this.width);
	                if (this.signed) {
	                    const limit = (BN_1 << (width - BN_1));
	                    assert(safeOp == null || (val >= -limit  && val < limit), "overflow", "NUMERIC_FAULT", {
	                        operation: <string>safeOp, fault: "overflow", value: val
	                    });
	        
	                    if (val > BN_0) {
	                        val = fromTwos(mask(val, width), width);
	                    } else {
	                        val = -fromTwos(mask(-val, width), width);
	                    }
	        
	                } else {
	                    const masked = mask(val, width);
	                    assert(safeOp == null || (val >= 0 && val === masked), "overflow", "NUMERIC_FAULT", {
	                        operation: <string>safeOp, fault: "overflow", value: val
	                    });
	                    val = masked;
	                }
	        */
	        val = checkValue(val, this.#format, safeOp);
	        return new FixedNumber(_guard, val, this.#format);
	    }
	    #add(o, safeOp) {
	        this.#checkFormat(o);
	        return this.#checkValue(this.#val + o.#val, safeOp);
	    }
	    /**
	     *  Returns a new [[FixedNumber]] with the result of %%this%% added
	     *  to %%other%%, ignoring overflow.
	     */
	    addUnsafe(other) { return this.#add(other); }
	    /**
	     *  Returns a new [[FixedNumber]] with the result of %%this%% added
	     *  to %%other%%. A [[NumericFaultError]] is thrown if overflow
	     *  occurs.
	     */
	    add(other) { return this.#add(other, "add"); }
	    #sub(o, safeOp) {
	        this.#checkFormat(o);
	        return this.#checkValue(this.#val - o.#val, safeOp);
	    }
	    /**
	     *  Returns a new [[FixedNumber]] with the result of %%other%% subtracted
	     *  from %%this%%, ignoring overflow.
	     */
	    subUnsafe(other) { return this.#sub(other); }
	    /**
	     *  Returns a new [[FixedNumber]] with the result of %%other%% subtracted
	     *  from %%this%%. A [[NumericFaultError]] is thrown if overflow
	     *  occurs.
	     */
	    sub(other) { return this.#sub(other, "sub"); }
	    #mul(o, safeOp) {
	        this.#checkFormat(o);
	        return this.#checkValue((this.#val * o.#val) / this.#tens, safeOp);
	    }
	    /**
	     *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied
	     *  by %%other%%, ignoring overflow and underflow (precision loss).
	     */
	    mulUnsafe(other) { return this.#mul(other); }
	    /**
	     *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied
	     *  by %%other%%. A [[NumericFaultError]] is thrown if overflow
	     *  occurs.
	     */
	    mul(other) { return this.#mul(other, "mul"); }
	    /**
	     *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied
	     *  by %%other%%. A [[NumericFaultError]] is thrown if overflow
	     *  occurs or if underflow (precision loss) occurs.
	     */
	    mulSignal(other) {
	        this.#checkFormat(other);
	        const value = this.#val * other.#val;
	        (0, errors_js_1.assert)((value % this.#tens) === BN_0, "precision lost during signalling mul", "NUMERIC_FAULT", {
	            operation: "mulSignal", fault: "underflow", value: this
	        });
	        return this.#checkValue(value / this.#tens, "mulSignal");
	    }
	    #div(o, safeOp) {
	        (0, errors_js_1.assert)(o.#val !== BN_0, "division by zero", "NUMERIC_FAULT", {
	            operation: "div", fault: "divide-by-zero", value: this
	        });
	        this.#checkFormat(o);
	        return this.#checkValue((this.#val * this.#tens) / o.#val, safeOp);
	    }
	    /**
	     *  Returns a new [[FixedNumber]] with the result of %%this%% divided
	     *  by %%other%%, ignoring underflow (precision loss). A
	     *  [[NumericFaultError]] is thrown if overflow occurs.
	     */
	    divUnsafe(other) { return this.#div(other); }
	    /**
	     *  Returns a new [[FixedNumber]] with the result of %%this%% divided
	     *  by %%other%%, ignoring underflow (precision loss). A
	     *  [[NumericFaultError]] is thrown if overflow occurs.
	     */
	    div(other) { return this.#div(other, "div"); }
	    /**
	     *  Returns a new [[FixedNumber]] with the result of %%this%% divided
	     *  by %%other%%. A [[NumericFaultError]] is thrown if underflow
	     *  (precision loss) occurs.
	     */
	    divSignal(other) {
	        (0, errors_js_1.assert)(other.#val !== BN_0, "division by zero", "NUMERIC_FAULT", {
	            operation: "div", fault: "divide-by-zero", value: this
	        });
	        this.#checkFormat(other);
	        const value = (this.#val * this.#tens);
	        (0, errors_js_1.assert)((value % other.#val) === BN_0, "precision lost during signalling div", "NUMERIC_FAULT", {
	            operation: "divSignal", fault: "underflow", value: this
	        });
	        return this.#checkValue(value / other.#val, "divSignal");
	    }
	    /**
	     *  Returns a comparison result between %%this%% and %%other%%.
	     *
	     *  This is suitable for use in sorting, where ``-1`` implies %%this%%
	     *  is smaller, ``1`` implies %%this%% is larger and ``0`` implies
	     *  both are equal.
	     */
	    cmp(other) {
	        let a = this.value, b = other.value;
	        // Coerce a and b to the same magnitude
	        const delta = this.decimals - other.decimals;
	        if (delta > 0) {
	            b *= getTens(delta);
	        }
	        else if (delta < 0) {
	            a *= getTens(-delta);
	        }
	        // Comnpare
	        if (a < b) {
	            return -1;
	        }
	        if (a > b) {
	            return 1;
	        }
	        return 0;
	    }
	    /**
	     *  Returns true if %%other%% is equal to %%this%%.
	     */
	    eq(other) { return this.cmp(other) === 0; }
	    /**
	     *  Returns true if %%other%% is less than to %%this%%.
	     */
	    lt(other) { return this.cmp(other) < 0; }
	    /**
	     *  Returns true if %%other%% is less than or equal to %%this%%.
	     */
	    lte(other) { return this.cmp(other) <= 0; }
	    /**
	     *  Returns true if %%other%% is greater than to %%this%%.
	     */
	    gt(other) { return this.cmp(other) > 0; }
	    /**
	     *  Returns true if %%other%% is greater than or equal to %%this%%.
	     */
	    gte(other) { return this.cmp(other) >= 0; }
	    /**
	     *  Returns a new [[FixedNumber]] which is the largest **integer**
	     *  that is less than or equal to %%this%%.
	     *
	     *  The decimal component of the result will always be ``0``.
	     */
	    floor() {
	        let val = this.#val;
	        if (this.#val < BN_0) {
	            val -= this.#tens - BN_1;
	        }
	        val = (this.#val / this.#tens) * this.#tens;
	        return this.#checkValue(val, "floor");
	    }
	    /**
	     *  Returns a new [[FixedNumber]] which is the smallest **integer**
	     *  that is greater than or equal to %%this%%.
	     *
	     *  The decimal component of the result will always be ``0``.
	     */
	    ceiling() {
	        let val = this.#val;
	        if (this.#val > BN_0) {
	            val += this.#tens - BN_1;
	        }
	        val = (this.#val / this.#tens) * this.#tens;
	        return this.#checkValue(val, "ceiling");
	    }
	    /**
	     *  Returns a new [[FixedNumber]] with the decimal component
	     *  rounded up on ties at %%decimals%% places.
	     */
	    round(decimals) {
	        if (decimals == null) {
	            decimals = 0;
	        }
	        // Not enough precision to not already be rounded
	        if (decimals >= this.decimals) {
	            return this;
	        }
	        const delta = this.decimals - decimals;
	        const bump = BN_5 * getTens(delta - 1);
	        let value = this.value + bump;
	        const tens = getTens(delta);
	        value = (value / tens) * tens;
	        checkValue(value, this.#format, "round");
	        return new FixedNumber(_guard, value, this.#format);
	    }
	    /**
	     *  Returns true if %%this%% is equal to ``0``.
	     */
	    isZero() { return (this.#val === BN_0); }
	    /**
	     *  Returns true if %%this%% is less than ``0``.
	     */
	    isNegative() { return (this.#val < BN_0); }
	    /**
	     *  Returns the string representation of %%this%%.
	     */
	    toString() { return this._value; }
	    /**
	     *  Returns a float approximation.
	     *
	     *  Due to IEEE 754 precission (or lack thereof), this function
	     *  can only return an approximation and most values will contain
	     *  rounding errors.
	     */
	    toUnsafeFloat() { return parseFloat(this.toString()); }
	    /**
	     *  Return a new [[FixedNumber]] with the same value but has had
	     *  its field set to %%format%%.
	     *
	     *  This will throw if the value cannot fit into %%format%%.
	     */
	    toFormat(format) {
	        return FixedNumber.fromString(this.toString(), format);
	    }
	    /**
	     *  Creates a new [[FixedNumber]] for %%value%% divided by
	     *  %%decimal%% places with %%format%%.
	     *
	     *  This will throw a [[NumericFaultError]] if %%value%% (once adjusted
	     *  for %%decimals%%) cannot fit in %%format%%, either due to overflow
	     *  or underflow (precision loss).
	     */
	    static fromValue(_value, _decimals, _format) {
	        const decimals = (_decimals == null) ? 0 : (0, maths_js_1.getNumber)(_decimals);
	        const format = getFormat(_format);
	        let value = (0, maths_js_1.getBigInt)(_value, "value");
	        const delta = decimals - format.decimals;
	        if (delta > 0) {
	            const tens = getTens(delta);
	            (0, errors_js_1.assert)((value % tens) === BN_0, "value loses precision for format", "NUMERIC_FAULT", {
	                operation: "fromValue", fault: "underflow", value: _value
	            });
	            value /= tens;
	        }
	        else if (delta < 0) {
	            value *= getTens(-delta);
	        }
	        checkValue(value, format, "fromValue");
	        return new FixedNumber(_guard, value, format);
	    }
	    /**
	     *  Creates a new [[FixedNumber]] for %%value%% with %%format%%.
	     *
	     *  This will throw a [[NumericFaultError]] if %%value%% cannot fit
	     *  in %%format%%, either due to overflow or underflow (precision loss).
	     */
	    static fromString(_value, _format) {
	        const match = _value.match(/^(-?)([0-9]*)\.?([0-9]*)$/);
	        (0, errors_js_1.assertArgument)(match && (match[2].length + match[3].length) > 0, "invalid FixedNumber string value", "value", _value);
	        const format = getFormat(_format);
	        let whole = (match[2] || "0"), decimal = (match[3] || "");
	        // Pad out the decimals
	        while (decimal.length < format.decimals) {
	            decimal += Zeros;
	        }
	        // Check precision is safe
	        (0, errors_js_1.assert)(decimal.substring(format.decimals).match(/^0*$/), "too many decimals for format", "NUMERIC_FAULT", {
	            operation: "fromString", fault: "underflow", value: _value
	        });
	        // Remove extra padding
	        decimal = decimal.substring(0, format.decimals);
	        const value = BigInt(match[1] + whole + decimal);
	        checkValue(value, format, "fromString");
	        return new FixedNumber(_guard, value, format);
	    }
	    /**
	     *  Creates a new [[FixedNumber]] with the big-endian representation
	     *  %%value%% with %%format%%.
	     *
	     *  This will throw a [[NumericFaultError]] if %%value%% cannot fit
	     *  in %%format%% due to overflow.
	     */
	    static fromBytes(_value, _format) {
	        let value = (0, maths_js_1.toBigInt)((0, data_js_1.getBytes)(_value, "value"));
	        const format = getFormat(_format);
	        if (format.signed) {
	            value = (0, maths_js_1.fromTwos)(value, format.width);
	        }
	        checkValue(value, format, "fromBytes");
	        return new FixedNumber(_guard, value, format);
	    }
	}
	fixednumber.FixedNumber = FixedNumber;
	//const f1 = FixedNumber.fromString("12.56", "fixed16x2");
	//const f2 = FixedNumber.fromString("0.3", "fixed16x2");
	//console.log(f1.divSignal(f2));
	//const BUMP = FixedNumber.from("0.5");
	
	return fixednumber;
}

var rlpDecode = {};

var hasRequiredRlpDecode;

function requireRlpDecode () {
	if (hasRequiredRlpDecode) return rlpDecode;
	hasRequiredRlpDecode = 1;
	//See: https://github.com/ethereum/wiki/wiki/RLP
	Object.defineProperty(rlpDecode, "__esModule", { value: true });
	rlpDecode.decodeRlp = void 0;
	const data_js_1 = requireData();
	const errors_js_1 = requireErrors();
	const data_js_2 = requireData();
	function hexlifyByte(value) {
	    let result = value.toString(16);
	    while (result.length < 2) {
	        result = "0" + result;
	    }
	    return "0x" + result;
	}
	function unarrayifyInteger(data, offset, length) {
	    let result = 0;
	    for (let i = 0; i < length; i++) {
	        result = (result * 256) + data[offset + i];
	    }
	    return result;
	}
	function _decodeChildren(data, offset, childOffset, length) {
	    const result = [];
	    while (childOffset < offset + 1 + length) {
	        const decoded = _decode(data, childOffset);
	        result.push(decoded.result);
	        childOffset += decoded.consumed;
	        (0, errors_js_1.assert)(childOffset <= offset + 1 + length, "child data too short", "BUFFER_OVERRUN", {
	            buffer: data, length, offset
	        });
	    }
	    return { consumed: (1 + length), result: result };
	}
	// returns { consumed: number, result: Object }
	function _decode(data, offset) {
	    (0, errors_js_1.assert)(data.length !== 0, "data too short", "BUFFER_OVERRUN", {
	        buffer: data, length: 0, offset: 1
	    });
	    const checkOffset = (offset) => {
	        (0, errors_js_1.assert)(offset <= data.length, "data short segment too short", "BUFFER_OVERRUN", {
	            buffer: data, length: data.length, offset
	        });
	    };
	    // Array with extra length prefix
	    if (data[offset] >= 0xf8) {
	        const lengthLength = data[offset] - 0xf7;
	        checkOffset(offset + 1 + lengthLength);
	        const length = unarrayifyInteger(data, offset + 1, lengthLength);
	        checkOffset(offset + 1 + lengthLength + length);
	        return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);
	    }
	    else if (data[offset] >= 0xc0) {
	        const length = data[offset] - 0xc0;
	        checkOffset(offset + 1 + length);
	        return _decodeChildren(data, offset, offset + 1, length);
	    }
	    else if (data[offset] >= 0xb8) {
	        const lengthLength = data[offset] - 0xb7;
	        checkOffset(offset + 1 + lengthLength);
	        const length = unarrayifyInteger(data, offset + 1, lengthLength);
	        checkOffset(offset + 1 + lengthLength + length);
	        const result = (0, data_js_1.hexlify)(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));
	        return { consumed: (1 + lengthLength + length), result: result };
	    }
	    else if (data[offset] >= 0x80) {
	        const length = data[offset] - 0x80;
	        checkOffset(offset + 1 + length);
	        const result = (0, data_js_1.hexlify)(data.slice(offset + 1, offset + 1 + length));
	        return { consumed: (1 + length), result: result };
	    }
	    return { consumed: 1, result: hexlifyByte(data[offset]) };
	}
	/**
	 *  Decodes %%data%% into the structured data it represents.
	 */
	function decodeRlp(_data) {
	    const data = (0, data_js_2.getBytes)(_data, "data");
	    const decoded = _decode(data, 0);
	    (0, errors_js_1.assertArgument)(decoded.consumed === data.length, "unexpected junk after rlp payload", "data", _data);
	    return decoded.result;
	}
	rlpDecode.decodeRlp = decodeRlp;
	
	return rlpDecode;
}

var rlpEncode = {};

var hasRequiredRlpEncode;

function requireRlpEncode () {
	if (hasRequiredRlpEncode) return rlpEncode;
	hasRequiredRlpEncode = 1;
	//See: https://github.com/ethereum/wiki/wiki/RLP
	Object.defineProperty(rlpEncode, "__esModule", { value: true });
	rlpEncode.encodeRlp = void 0;
	const data_js_1 = requireData();
	function arrayifyInteger(value) {
	    const result = [];
	    while (value) {
	        result.unshift(value & 0xff);
	        value >>= 8;
	    }
	    return result;
	}
	function _encode(object) {
	    if (Array.isArray(object)) {
	        let payload = [];
	        object.forEach(function (child) {
	            payload = payload.concat(_encode(child));
	        });
	        if (payload.length <= 55) {
	            payload.unshift(0xc0 + payload.length);
	            return payload;
	        }
	        const length = arrayifyInteger(payload.length);
	        length.unshift(0xf7 + length.length);
	        return length.concat(payload);
	    }
	    const data = Array.prototype.slice.call((0, data_js_1.getBytes)(object, "object"));
	    if (data.length === 1 && data[0] <= 0x7f) {
	        return data;
	    }
	    else if (data.length <= 55) {
	        data.unshift(0x80 + data.length);
	        return data;
	    }
	    const length = arrayifyInteger(data.length);
	    length.unshift(0xb7 + length.length);
	    return length.concat(data);
	}
	const nibbles = "0123456789abcdef";
	/**
	 *  Encodes %%object%% as an RLP-encoded [[DataHexString]].
	 */
	function encodeRlp(object) {
	    let result = "0x";
	    for (const v of _encode(object)) {
	        result += nibbles[v >> 4];
	        result += nibbles[v & 0xf];
	    }
	    return result;
	}
	rlpEncode.encodeRlp = encodeRlp;
	
	return rlpEncode;
}

var units$1 = {};

var hasRequiredUnits;

function requireUnits () {
	if (hasRequiredUnits) return units$1;
	hasRequiredUnits = 1;
	Object.defineProperty(units$1, "__esModule", { value: true });
	units$1.parseEther = units$1.formatEther = units$1.parseUnits = units$1.formatUnits = void 0;
	/**
	 *  Most interactions with Ethereum requires integer values, which use
	 *  the smallest magnitude unit.
	 *
	 *  For example, imagine dealing with dollars and cents. Since dollars
	 *  are divisible, non-integer values are possible, such as ``$10.77``.
	 *  By using the smallest indivisible unit (i.e. cents), the value can
	 *  be kept as the integer ``1077``.
	 *
	 *  When receiving decimal input from the user (as a decimal string),
	 *  the value should be converted to an integer and when showing a user
	 *  a value, the integer value should be converted to a decimal string.
	 *
	 *  This creates a clear distinction, between values to be used by code
	 *  (integers) and values used for display logic to users (decimals).
	 *
	 *  The native unit in Ethereum, //ether// is divisible to 18 decimal places,
	 *  where each individual unit is called a //wei//.
	 *
	 *  @_subsection api/utils:Unit Conversion  [about-units]
	 */
	const errors_js_1 = requireErrors();
	const fixednumber_js_1 = requireFixednumber();
	const maths_js_1 = requireMaths();
	const names = [
	    "wei",
	    "kwei",
	    "mwei",
	    "gwei",
	    "szabo",
	    "finney",
	    "ether",
	];
	/**
	 *  Converts %%value%% into a //decimal string//, assuming %%unit%% decimal
	 *  places. The %%unit%% may be the number of decimal places or the name of
	 *  a unit (e.g. ``"gwei"`` for 9 decimal places).
	 *
	 */
	function formatUnits(value, unit) {
	    let decimals = 18;
	    if (typeof (unit) === "string") {
	        const index = names.indexOf(unit);
	        (0, errors_js_1.assertArgument)(index >= 0, "invalid unit", "unit", unit);
	        decimals = 3 * index;
	    }
	    else if (unit != null) {
	        decimals = (0, maths_js_1.getNumber)(unit, "unit");
	    }
	    return fixednumber_js_1.FixedNumber.fromValue(value, decimals, { decimals, width: 512 }).toString();
	}
	units$1.formatUnits = formatUnits;
	/**
	 *  Converts the //decimal string// %%value%% to a BigInt, assuming
	 *  %%unit%% decimal places. The %%unit%% may the number of decimal places
	 *  or the name of a unit (e.g. ``"gwei"`` for 9 decimal places).
	 */
	function parseUnits(value, unit) {
	    (0, errors_js_1.assertArgument)(typeof (value) === "string", "value must be a string", "value", value);
	    let decimals = 18;
	    if (typeof (unit) === "string") {
	        const index = names.indexOf(unit);
	        (0, errors_js_1.assertArgument)(index >= 0, "invalid unit", "unit", unit);
	        decimals = 3 * index;
	    }
	    else if (unit != null) {
	        decimals = (0, maths_js_1.getNumber)(unit, "unit");
	    }
	    return fixednumber_js_1.FixedNumber.fromString(value, { decimals, width: 512 }).value;
	}
	units$1.parseUnits = parseUnits;
	/**
	 *  Converts %%value%% into a //decimal string// using 18 decimal places.
	 */
	function formatEther(wei) {
	    return formatUnits(wei, 18);
	}
	units$1.formatEther = formatEther;
	/**
	 *  Converts the //decimal string// %%ether%% to a BigInt, using 18
	 *  decimal places.
	 */
	function parseEther(ether) {
	    return parseUnits(ether, 18);
	}
	units$1.parseEther = parseEther;
	
	return units$1;
}

var uuid = {};

var hasRequiredUuid;

function requireUuid () {
	if (hasRequiredUuid) return uuid;
	hasRequiredUuid = 1;
	Object.defineProperty(uuid, "__esModule", { value: true });
	uuid.uuidV4 = void 0;
	/**
	 *  Explain UUID and link to RFC here.
	 *
	 *  @_subsection: api/utils:UUID  [about-uuid]
	 */
	const data_js_1 = requireData();
	/**
	 *  Returns the version 4 [[link-uuid]] for the %%randomBytes%%.
	 *
	 *  @see: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)
	 */
	function uuidV4(randomBytes) {
	    const bytes = (0, data_js_1.getBytes)(randomBytes, "randomBytes");
	    // Section: 4.1.3:
	    // - time_hi_and_version[12:16] = 0b0100
	    bytes[6] = (bytes[6] & 0x0f) | 0x40;
	    // Section 4.4
	    // - clock_seq_hi_and_reserved[6] = 0b0
	    // - clock_seq_hi_and_reserved[7] = 0b1
	    bytes[8] = (bytes[8] & 0x3f) | 0x80;
	    const value = (0, data_js_1.hexlify)(bytes);
	    return [
	        value.substring(2, 10),
	        value.substring(10, 14),
	        value.substring(14, 18),
	        value.substring(18, 22),
	        value.substring(22, 34),
	    ].join("-");
	}
	uuid.uuidV4 = uuidV4;
	
	return uuid;
}

var hasRequiredUtils$3;

function requireUtils$3 () {
	if (hasRequiredUtils$3) return utils$9;
	hasRequiredUtils$3 = 1;
	(function (exports) {
		/**
		 *  There are many simple utilities required to interact with
		 *  Ethereum and to simplify the library, without increasing
		 *  the library dependencies for simple functions.
		 *
		 *  @_section api/utils:Utilities  [about-utils]
		 */
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.toUtf8String = exports.toUtf8CodePoints = exports.toUtf8Bytes = exports.parseUnits = exports.formatUnits = exports.parseEther = exports.formatEther = exports.encodeRlp = exports.decodeRlp = exports.defineProperties = exports.resolveProperties = exports.toQuantity = exports.toBeArray = exports.toBeHex = exports.toNumber = exports.toBigInt = exports.getUint = exports.getNumber = exports.getBigInt = exports.mask = exports.toTwos = exports.fromTwos = exports.FixedNumber = exports.FetchCancelSignal = exports.FetchResponse = exports.FetchRequest = exports.EventPayload = exports.makeError = exports.assertNormalize = exports.assertPrivate = exports.assertArgumentCount = exports.assertArgument = exports.assert = exports.isError = exports.isCallException = exports.zeroPadBytes = exports.zeroPadValue = exports.stripZerosLeft = exports.dataSlice = exports.dataLength = exports.concat = exports.hexlify = exports.isBytesLike = exports.isHexString = exports.getBytesCopy = exports.getBytes = exports.encodeBase64 = exports.decodeBase64 = exports.encodeBase58 = exports.decodeBase58 = void 0;
		exports.uuidV4 = exports.Utf8ErrorFuncs = void 0;
		var base58_js_1 = requireBase58();
		Object.defineProperty(exports, "decodeBase58", { enumerable: true, get: function () { return base58_js_1.decodeBase58; } });
		Object.defineProperty(exports, "encodeBase58", { enumerable: true, get: function () { return base58_js_1.encodeBase58; } });
		var base64_js_1 = requireBase64();
		Object.defineProperty(exports, "decodeBase64", { enumerable: true, get: function () { return base64_js_1.decodeBase64; } });
		Object.defineProperty(exports, "encodeBase64", { enumerable: true, get: function () { return base64_js_1.encodeBase64; } });
		var data_js_1 = requireData();
		Object.defineProperty(exports, "getBytes", { enumerable: true, get: function () { return data_js_1.getBytes; } });
		Object.defineProperty(exports, "getBytesCopy", { enumerable: true, get: function () { return data_js_1.getBytesCopy; } });
		Object.defineProperty(exports, "isHexString", { enumerable: true, get: function () { return data_js_1.isHexString; } });
		Object.defineProperty(exports, "isBytesLike", { enumerable: true, get: function () { return data_js_1.isBytesLike; } });
		Object.defineProperty(exports, "hexlify", { enumerable: true, get: function () { return data_js_1.hexlify; } });
		Object.defineProperty(exports, "concat", { enumerable: true, get: function () { return data_js_1.concat; } });
		Object.defineProperty(exports, "dataLength", { enumerable: true, get: function () { return data_js_1.dataLength; } });
		Object.defineProperty(exports, "dataSlice", { enumerable: true, get: function () { return data_js_1.dataSlice; } });
		Object.defineProperty(exports, "stripZerosLeft", { enumerable: true, get: function () { return data_js_1.stripZerosLeft; } });
		Object.defineProperty(exports, "zeroPadValue", { enumerable: true, get: function () { return data_js_1.zeroPadValue; } });
		Object.defineProperty(exports, "zeroPadBytes", { enumerable: true, get: function () { return data_js_1.zeroPadBytes; } });
		var errors_js_1 = requireErrors();
		Object.defineProperty(exports, "isCallException", { enumerable: true, get: function () { return errors_js_1.isCallException; } });
		Object.defineProperty(exports, "isError", { enumerable: true, get: function () { return errors_js_1.isError; } });
		Object.defineProperty(exports, "assert", { enumerable: true, get: function () { return errors_js_1.assert; } });
		Object.defineProperty(exports, "assertArgument", { enumerable: true, get: function () { return errors_js_1.assertArgument; } });
		Object.defineProperty(exports, "assertArgumentCount", { enumerable: true, get: function () { return errors_js_1.assertArgumentCount; } });
		Object.defineProperty(exports, "assertPrivate", { enumerable: true, get: function () { return errors_js_1.assertPrivate; } });
		Object.defineProperty(exports, "assertNormalize", { enumerable: true, get: function () { return errors_js_1.assertNormalize; } });
		Object.defineProperty(exports, "makeError", { enumerable: true, get: function () { return errors_js_1.makeError; } });
		var events_js_1 = requireEvents();
		Object.defineProperty(exports, "EventPayload", { enumerable: true, get: function () { return events_js_1.EventPayload; } });
		var fetch_js_1 = requireFetch();
		Object.defineProperty(exports, "FetchRequest", { enumerable: true, get: function () { return fetch_js_1.FetchRequest; } });
		Object.defineProperty(exports, "FetchResponse", { enumerable: true, get: function () { return fetch_js_1.FetchResponse; } });
		Object.defineProperty(exports, "FetchCancelSignal", { enumerable: true, get: function () { return fetch_js_1.FetchCancelSignal; } });
		var fixednumber_js_1 = requireFixednumber();
		Object.defineProperty(exports, "FixedNumber", { enumerable: true, get: function () { return fixednumber_js_1.FixedNumber; } });
		var maths_js_1 = requireMaths();
		Object.defineProperty(exports, "fromTwos", { enumerable: true, get: function () { return maths_js_1.fromTwos; } });
		Object.defineProperty(exports, "toTwos", { enumerable: true, get: function () { return maths_js_1.toTwos; } });
		Object.defineProperty(exports, "mask", { enumerable: true, get: function () { return maths_js_1.mask; } });
		Object.defineProperty(exports, "getBigInt", { enumerable: true, get: function () { return maths_js_1.getBigInt; } });
		Object.defineProperty(exports, "getNumber", { enumerable: true, get: function () { return maths_js_1.getNumber; } });
		Object.defineProperty(exports, "getUint", { enumerable: true, get: function () { return maths_js_1.getUint; } });
		Object.defineProperty(exports, "toBigInt", { enumerable: true, get: function () { return maths_js_1.toBigInt; } });
		Object.defineProperty(exports, "toNumber", { enumerable: true, get: function () { return maths_js_1.toNumber; } });
		Object.defineProperty(exports, "toBeHex", { enumerable: true, get: function () { return maths_js_1.toBeHex; } });
		Object.defineProperty(exports, "toBeArray", { enumerable: true, get: function () { return maths_js_1.toBeArray; } });
		Object.defineProperty(exports, "toQuantity", { enumerable: true, get: function () { return maths_js_1.toQuantity; } });
		var properties_js_1 = requireProperties();
		Object.defineProperty(exports, "resolveProperties", { enumerable: true, get: function () { return properties_js_1.resolveProperties; } });
		Object.defineProperty(exports, "defineProperties", { enumerable: true, get: function () { return properties_js_1.defineProperties; } });
		var rlp_decode_js_1 = requireRlpDecode();
		Object.defineProperty(exports, "decodeRlp", { enumerable: true, get: function () { return rlp_decode_js_1.decodeRlp; } });
		var rlp_encode_js_1 = requireRlpEncode();
		Object.defineProperty(exports, "encodeRlp", { enumerable: true, get: function () { return rlp_encode_js_1.encodeRlp; } });
		var units_js_1 = requireUnits();
		Object.defineProperty(exports, "formatEther", { enumerable: true, get: function () { return units_js_1.formatEther; } });
		Object.defineProperty(exports, "parseEther", { enumerable: true, get: function () { return units_js_1.parseEther; } });
		Object.defineProperty(exports, "formatUnits", { enumerable: true, get: function () { return units_js_1.formatUnits; } });
		Object.defineProperty(exports, "parseUnits", { enumerable: true, get: function () { return units_js_1.parseUnits; } });
		var utf8_js_1 = requireUtf8();
		Object.defineProperty(exports, "toUtf8Bytes", { enumerable: true, get: function () { return utf8_js_1.toUtf8Bytes; } });
		Object.defineProperty(exports, "toUtf8CodePoints", { enumerable: true, get: function () { return utf8_js_1.toUtf8CodePoints; } });
		Object.defineProperty(exports, "toUtf8String", { enumerable: true, get: function () { return utf8_js_1.toUtf8String; } });
		Object.defineProperty(exports, "Utf8ErrorFuncs", { enumerable: true, get: function () { return utf8_js_1.Utf8ErrorFuncs; } });
		var uuid_js_1 = requireUuid();
		Object.defineProperty(exports, "uuidV4", { enumerable: true, get: function () { return uuid_js_1.uuidV4; } });
		
	} (utils$9));
	return utils$9;
}

var abstractCoder = {};

var hasRequiredAbstractCoder;

function requireAbstractCoder () {
	if (hasRequiredAbstractCoder) return abstractCoder;
	hasRequiredAbstractCoder = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.Reader = exports.Writer = exports.Coder = exports.checkResultErrors = exports.Result = exports.WordSize = void 0;
		const index_js_1 = requireUtils$3();
		/**
		 * @_ignore:
		 */
		exports.WordSize = 32;
		const Padding = new Uint8Array(exports.WordSize);
		// Properties used to immediate pass through to the underlying object
		// - `then` is used to detect if an object is a Promise for await
		const passProperties = ["then"];
		const _guard = {};
		function throwError(name, error) {
		    const wrapped = new Error(`deferred error during ABI decoding triggered accessing ${name}`);
		    wrapped.error = error;
		    throw wrapped;
		}
		/**
		 *  A [[Result]] is a sub-class of Array, which allows accessing any
		 *  of its values either positionally by its index or, if keys are
		 *  provided by its name.
		 *
		 *  @_docloc: api/abi
		 */
		class Result extends Array {
		    #names;
		    /**
		     *  @private
		     */
		    constructor(...args) {
		        // To properly sub-class Array so the other built-in
		        // functions work, the constructor has to behave fairly
		        // well. So, in the event we are created via fromItems()
		        // we build the read-only Result object we want, but on
		        // any other input, we use the default constructor
		        // constructor(guard: any, items: Array<any>, keys?: Array<null | string>);
		        const guard = args[0];
		        let items = args[1];
		        let names = (args[2] || []).slice();
		        let wrap = true;
		        if (guard !== _guard) {
		            items = args;
		            names = [];
		            wrap = false;
		        }
		        // Can't just pass in ...items since an array of length 1
		        // is a special case in the super.
		        super(items.length);
		        items.forEach((item, index) => { this[index] = item; });
		        // Find all unique keys
		        const nameCounts = names.reduce((accum, name) => {
		            if (typeof (name) === "string") {
		                accum.set(name, (accum.get(name) || 0) + 1);
		            }
		            return accum;
		        }, (new Map()));
		        // Remove any key thats not unique
		        this.#names = Object.freeze(items.map((item, index) => {
		            const name = names[index];
		            if (name != null && nameCounts.get(name) === 1) {
		                return name;
		            }
		            return null;
		        }));
		        if (!wrap) {
		            return;
		        }
		        // A wrapped Result is immutable
		        Object.freeze(this);
		        // Proxy indices and names so we can trap deferred errors
		        return new Proxy(this, {
		            get: (target, prop, receiver) => {
		                if (typeof (prop) === "string") {
		                    // Index accessor
		                    if (prop.match(/^[0-9]+$/)) {
		                        const index = (0, index_js_1.getNumber)(prop, "%index");
		                        if (index < 0 || index >= this.length) {
		                            throw new RangeError("out of result range");
		                        }
		                        const item = target[index];
		                        if (item instanceof Error) {
		                            throwError(`index ${index}`, item);
		                        }
		                        return item;
		                    }
		                    // Pass important checks (like `then` for Promise) through
		                    if (passProperties.indexOf(prop) >= 0) {
		                        return Reflect.get(target, prop, receiver);
		                    }
		                    const value = target[prop];
		                    if (value instanceof Function) {
		                        // Make sure functions work with private variables
		                        // See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#no_private_property_forwarding
		                        return function (...args) {
		                            return value.apply((this === receiver) ? target : this, args);
		                        };
		                    }
		                    else if (!(prop in target)) {
		                        // Possible name accessor
		                        return target.getValue.apply((this === receiver) ? target : this, [prop]);
		                    }
		                }
		                return Reflect.get(target, prop, receiver);
		            }
		        });
		    }
		    /**
		     *  Returns the Result as a normal Array.
		     *
		     *  This will throw if there are any outstanding deferred
		     *  errors.
		     */
		    toArray() {
		        const result = [];
		        this.forEach((item, index) => {
		            if (item instanceof Error) {
		                throwError(`index ${index}`, item);
		            }
		            result.push(item);
		        });
		        return result;
		    }
		    /**
		     *  Returns the Result as an Object with each name-value pair.
		     *
		     *  This will throw if any value is unnamed, or if there are
		     *  any outstanding deferred errors.
		     */
		    toObject() {
		        return this.#names.reduce((accum, name, index) => {
		            (0, index_js_1.assert)(name != null, "value at index ${ index } unnamed", "UNSUPPORTED_OPERATION", {
		                operation: "toObject()"
		            });
		            // Add values for names that don't conflict
		            if (!(name in accum)) {
		                accum[name] = this.getValue(name);
		            }
		            return accum;
		        }, {});
		    }
		    /**
		     *  @_ignore
		     */
		    slice(start, end) {
		        if (start == null) {
		            start = 0;
		        }
		        if (start < 0) {
		            start += this.length;
		            if (start < 0) {
		                start = 0;
		            }
		        }
		        if (end == null) {
		            end = this.length;
		        }
		        if (end < 0) {
		            end += this.length;
		            if (end < 0) {
		                end = 0;
		            }
		        }
		        if (end > this.length) {
		            end = this.length;
		        }
		        const result = [], names = [];
		        for (let i = start; i < end; i++) {
		            result.push(this[i]);
		            names.push(this.#names[i]);
		        }
		        return new Result(_guard, result, names);
		    }
		    /**
		     *  @_ignore
		     */
		    filter(callback, thisArg) {
		        const result = [], names = [];
		        for (let i = 0; i < this.length; i++) {
		            const item = this[i];
		            if (item instanceof Error) {
		                throwError(`index ${i}`, item);
		            }
		            if (callback.call(thisArg, item, i, this)) {
		                result.push(item);
		                names.push(this.#names[i]);
		            }
		        }
		        return new Result(_guard, result, names);
		    }
		    /**
		     *  @_ignore
		     */
		    map(callback, thisArg) {
		        const result = [];
		        for (let i = 0; i < this.length; i++) {
		            const item = this[i];
		            if (item instanceof Error) {
		                throwError(`index ${i}`, item);
		            }
		            result.push(callback.call(thisArg, item, i, this));
		        }
		        return result;
		    }
		    /**
		     *  Returns the value for %%name%%.
		     *
		     *  Since it is possible to have a key whose name conflicts with
		     *  a method on a [[Result]] or its superclass Array, or any
		     *  JavaScript keyword, this ensures all named values are still
		     *  accessible by name.
		     */
		    getValue(name) {
		        const index = this.#names.indexOf(name);
		        if (index === -1) {
		            return undefined;
		        }
		        const value = this[index];
		        if (value instanceof Error) {
		            throwError(`property ${JSON.stringify(name)}`, value.error);
		        }
		        return value;
		    }
		    /**
		     *  Creates a new [[Result]] for %%items%% with each entry
		     *  also accessible by its corresponding name in %%keys%%.
		     */
		    static fromItems(items, keys) {
		        return new Result(_guard, items, keys);
		    }
		}
		exports.Result = Result;
		/**
		 *  Returns all errors found in a [[Result]].
		 *
		 *  Since certain errors encountered when creating a [[Result]] do
		 *  not impact the ability to continue parsing data, they are
		 *  deferred until they are actually accessed. Hence a faulty string
		 *  in an Event that is never used does not impact the program flow.
		 *
		 *  However, sometimes it may be useful to access, identify or
		 *  validate correctness of a [[Result]].
		 *
		 *  @_docloc api/abi
		 */
		function checkResultErrors(result) {
		    // Find the first error (if any)
		    const errors = [];
		    const checkErrors = function (path, object) {
		        if (!Array.isArray(object)) {
		            return;
		        }
		        for (let key in object) {
		            const childPath = path.slice();
		            childPath.push(key);
		            try {
		                checkErrors(childPath, object[key]);
		            }
		            catch (error) {
		                errors.push({ path: childPath, error: error });
		            }
		        }
		    };
		    checkErrors([], result);
		    return errors;
		}
		exports.checkResultErrors = checkResultErrors;
		function getValue(value) {
		    let bytes = (0, index_js_1.toBeArray)(value);
		    (0, index_js_1.assert)(bytes.length <= exports.WordSize, "value out-of-bounds", "BUFFER_OVERRUN", { buffer: bytes, length: exports.WordSize, offset: bytes.length });
		    if (bytes.length !== exports.WordSize) {
		        bytes = (0, index_js_1.getBytesCopy)((0, index_js_1.concat)([Padding.slice(bytes.length % exports.WordSize), bytes]));
		    }
		    return bytes;
		}
		/**
		 *  @_ignore
		 */
		class Coder {
		    // The coder name:
		    //   - address, uint256, tuple, array, etc.
		    name;
		    // The fully expanded type, including composite types:
		    //   - address, uint256, tuple(address,bytes), uint256[3][4][],  etc.
		    type;
		    // The localName bound in the signature, in this example it is "baz":
		    //   - tuple(address foo, uint bar) baz
		    localName;
		    // Whether this type is dynamic:
		    //  - Dynamic: bytes, string, address[], tuple(boolean[]), etc.
		    //  - Not Dynamic: address, uint256, boolean[3], tuple(address, uint8)
		    dynamic;
		    constructor(name, type, localName, dynamic) {
		        (0, index_js_1.defineProperties)(this, { name, type, localName, dynamic }, {
		            name: "string", type: "string", localName: "string", dynamic: "boolean"
		        });
		    }
		    _throwError(message, value) {
		        (0, index_js_1.assertArgument)(false, message, this.localName, value);
		    }
		}
		exports.Coder = Coder;
		/**
		 *  @_ignore
		 */
		class Writer {
		    // An array of WordSize lengthed objects to concatenation
		    #data;
		    #dataLength;
		    constructor() {
		        this.#data = [];
		        this.#dataLength = 0;
		    }
		    get data() {
		        return (0, index_js_1.concat)(this.#data);
		    }
		    get length() { return this.#dataLength; }
		    #writeData(data) {
		        this.#data.push(data);
		        this.#dataLength += data.length;
		        return data.length;
		    }
		    appendWriter(writer) {
		        return this.#writeData((0, index_js_1.getBytesCopy)(writer.data));
		    }
		    // Arrayish item; pad on the right to *nearest* WordSize
		    writeBytes(value) {
		        let bytes = (0, index_js_1.getBytesCopy)(value);
		        const paddingOffset = bytes.length % exports.WordSize;
		        if (paddingOffset) {
		            bytes = (0, index_js_1.getBytesCopy)((0, index_js_1.concat)([bytes, Padding.slice(paddingOffset)]));
		        }
		        return this.#writeData(bytes);
		    }
		    // Numeric item; pad on the left *to* WordSize
		    writeValue(value) {
		        return this.#writeData(getValue(value));
		    }
		    // Inserts a numeric place-holder, returning a callback that can
		    // be used to asjust the value later
		    writeUpdatableValue() {
		        const offset = this.#data.length;
		        this.#data.push(Padding);
		        this.#dataLength += exports.WordSize;
		        return (value) => {
		            this.#data[offset] = getValue(value);
		        };
		    }
		}
		exports.Writer = Writer;
		/**
		 *  @_ignore
		 */
		class Reader {
		    // Allows incomplete unpadded data to be read; otherwise an error
		    // is raised if attempting to overrun the buffer. This is required
		    // to deal with an old Solidity bug, in which event data for
		    // external (not public thoguh) was tightly packed.
		    allowLoose;
		    #data;
		    #offset;
		    #bytesRead;
		    #parent;
		    #maxInflation;
		    constructor(data, allowLoose, maxInflation) {
		        (0, index_js_1.defineProperties)(this, { allowLoose: !!allowLoose });
		        this.#data = (0, index_js_1.getBytesCopy)(data);
		        this.#bytesRead = 0;
		        this.#parent = null;
		        this.#maxInflation = (maxInflation != null) ? maxInflation : 1024;
		        this.#offset = 0;
		    }
		    get data() { return (0, index_js_1.hexlify)(this.#data); }
		    get dataLength() { return this.#data.length; }
		    get consumed() { return this.#offset; }
		    get bytes() { return new Uint8Array(this.#data); }
		    #incrementBytesRead(count) {
		        if (this.#parent) {
		            return this.#parent.#incrementBytesRead(count);
		        }
		        this.#bytesRead += count;
		        // Check for excessive inflation (see: #4537)
		        (0, index_js_1.assert)(this.#maxInflation < 1 || this.#bytesRead <= this.#maxInflation * this.dataLength, `compressed ABI data exceeds inflation ratio of ${this.#maxInflation} ( see: https:/\/github.com/ethers-io/ethers.js/issues/4537 )`, "BUFFER_OVERRUN", {
		            buffer: (0, index_js_1.getBytesCopy)(this.#data), offset: this.#offset,
		            length: count, info: {
		                bytesRead: this.#bytesRead,
		                dataLength: this.dataLength
		            }
		        });
		    }
		    #peekBytes(offset, length, loose) {
		        let alignedLength = Math.ceil(length / exports.WordSize) * exports.WordSize;
		        if (this.#offset + alignedLength > this.#data.length) {
		            if (this.allowLoose && loose && this.#offset + length <= this.#data.length) {
		                alignedLength = length;
		            }
		            else {
		                (0, index_js_1.assert)(false, "data out-of-bounds", "BUFFER_OVERRUN", {
		                    buffer: (0, index_js_1.getBytesCopy)(this.#data),
		                    length: this.#data.length,
		                    offset: this.#offset + alignedLength
		                });
		            }
		        }
		        return this.#data.slice(this.#offset, this.#offset + alignedLength);
		    }
		    // Create a sub-reader with the same underlying data, but offset
		    subReader(offset) {
		        const reader = new Reader(this.#data.slice(this.#offset + offset), this.allowLoose, this.#maxInflation);
		        reader.#parent = this;
		        return reader;
		    }
		    // Read bytes
		    readBytes(length, loose) {
		        let bytes = this.#peekBytes(0, length, !!loose);
		        this.#incrementBytesRead(length);
		        this.#offset += bytes.length;
		        // @TODO: Make sure the length..end bytes are all 0?
		        return bytes.slice(0, length);
		    }
		    // Read a numeric values
		    readValue() {
		        return (0, index_js_1.toBigInt)(this.readBytes(exports.WordSize));
		    }
		    readIndex() {
		        return (0, index_js_1.toNumber)(this.readBytes(exports.WordSize));
		    }
		}
		exports.Reader = Reader;
		
	} (abstractCoder));
	return abstractCoder;
}

var address$4 = {};

var address$3 = {};

var address$2 = {};

var crypto$3 = {};

var hmac$2 = {};

var crypto$2 = {};

var hasRequiredCrypto$2;

function requireCrypto$2 () {
	if (hasRequiredCrypto$2) return crypto$2;
	hasRequiredCrypto$2 = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.randomBytes = exports.pbkdf2Sync = exports.createHmac = exports.createHash = void 0;
		var crypto_1 = require$$5;
		Object.defineProperty(exports, "createHash", { enumerable: true, get: function () { return crypto_1.createHash; } });
		Object.defineProperty(exports, "createHmac", { enumerable: true, get: function () { return crypto_1.createHmac; } });
		Object.defineProperty(exports, "pbkdf2Sync", { enumerable: true, get: function () { return crypto_1.pbkdf2Sync; } });
		Object.defineProperty(exports, "randomBytes", { enumerable: true, get: function () { return crypto_1.randomBytes; } });
		
	} (crypto$2));
	return crypto$2;
}

var hasRequiredHmac$1;

function requireHmac$1 () {
	if (hasRequiredHmac$1) return hmac$2;
	hasRequiredHmac$1 = 1;
	Object.defineProperty(hmac$2, "__esModule", { value: true });
	hmac$2.computeHmac = void 0;
	/**
	 *  An **HMAC** enables verification that a given key was used
	 *  to authenticate a payload.
	 *
	 *  See: [[link-wiki-hmac]]
	 *
	 *  @_subsection: api/crypto:HMAC  [about-hmac]
	 */
	const crypto_js_1 = requireCrypto$2();
	const index_js_1 = requireUtils$3();
	let locked = false;
	const _computeHmac = function (algorithm, key, data) {
	    return (0, crypto_js_1.createHmac)(algorithm, key).update(data).digest();
	};
	let __computeHmac = _computeHmac;
	/**
	 *  Return the HMAC for %%data%% using the %%key%% key with the underlying
	 *  %%algo%% used for compression.
	 *
	 *  @example:
	 *    key = id("some-secret")
	 *
	 *    // Compute the HMAC
	 *    computeHmac("sha256", key, "0x1337")
	 *    //_result:
	 *
	 *    // To compute the HMAC of UTF-8 data, the data must be
	 *    // converted to UTF-8 bytes
	 *    computeHmac("sha256", key, toUtf8Bytes("Hello World"))
	 *    //_result:
	 *
	 */
	function computeHmac(algorithm, _key, _data) {
	    const key = (0, index_js_1.getBytes)(_key, "key");
	    const data = (0, index_js_1.getBytes)(_data, "data");
	    return (0, index_js_1.hexlify)(__computeHmac(algorithm, key, data));
	}
	hmac$2.computeHmac = computeHmac;
	computeHmac._ = _computeHmac;
	computeHmac.lock = function () { locked = true; };
	computeHmac.register = function (func) {
	    if (locked) {
	        throw new Error("computeHmac is locked");
	    }
	    __computeHmac = func;
	};
	Object.freeze(computeHmac);
	
	return hmac$2;
}

var keccak$1 = {};

var sha3$1 = {};

var _assert$1 = {};

var hasRequired_assert;

function require_assert () {
	if (hasRequired_assert) return _assert$1;
	hasRequired_assert = 1;
	Object.defineProperty(_assert$1, "__esModule", { value: true });
	_assert$1.output = _assert$1.exists = _assert$1.hash = _assert$1.bytes = _assert$1.bool = _assert$1.number = void 0;
	function number(n) {
	    if (!Number.isSafeInteger(n) || n < 0)
	        throw new Error(`Wrong positive integer: ${n}`);
	}
	_assert$1.number = number;
	function bool(b) {
	    if (typeof b !== 'boolean')
	        throw new Error(`Expected boolean, not ${b}`);
	}
	_assert$1.bool = bool;
	function bytes(b, ...lengths) {
	    if (!(b instanceof Uint8Array))
	        throw new Error('Expected Uint8Array');
	    if (lengths.length > 0 && !lengths.includes(b.length))
	        throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);
	}
	_assert$1.bytes = bytes;
	function hash(hash) {
	    if (typeof hash !== 'function' || typeof hash.create !== 'function')
	        throw new Error('Hash should be wrapped by utils.wrapConstructor');
	    number(hash.outputLen);
	    number(hash.blockLen);
	}
	_assert$1.hash = hash;
	function exists(instance, checkFinished = true) {
	    if (instance.destroyed)
	        throw new Error('Hash instance has been destroyed');
	    if (checkFinished && instance.finished)
	        throw new Error('Hash#digest() has already been called');
	}
	_assert$1.exists = exists;
	function output(out, instance) {
	    bytes(out);
	    const min = instance.outputLen;
	    if (out.length < min) {
	        throw new Error(`digestInto() expects output buffer of length at least ${min}`);
	    }
	}
	_assert$1.output = output;
	const assert = { number, bool, bytes, hash, exists, output };
	_assert$1.default = assert;
	
	return _assert$1;
}

var _u64$1 = {};

var hasRequired_u64;

function require_u64 () {
	if (hasRequired_u64) return _u64$1;
	hasRequired_u64 = 1;
	Object.defineProperty(_u64$1, "__esModule", { value: true });
	_u64$1.add5L = _u64$1.add5H = _u64$1.add4H = _u64$1.add4L = _u64$1.add3H = _u64$1.add3L = _u64$1.add = _u64$1.rotlBL = _u64$1.rotlBH = _u64$1.rotlSL = _u64$1.rotlSH = _u64$1.rotr32L = _u64$1.rotr32H = _u64$1.rotrBL = _u64$1.rotrBH = _u64$1.rotrSL = _u64$1.rotrSH = _u64$1.shrSL = _u64$1.shrSH = _u64$1.toBig = _u64$1.split = _u64$1.fromBig = void 0;
	const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);
	const _32n = /* @__PURE__ */ BigInt(32);
	// We are not using BigUint64Array, because they are extremely slow as per 2022
	function fromBig(n, le = false) {
	    if (le)
	        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };
	    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
	}
	_u64$1.fromBig = fromBig;
	function split(lst, le = false) {
	    let Ah = new Uint32Array(lst.length);
	    let Al = new Uint32Array(lst.length);
	    for (let i = 0; i < lst.length; i++) {
	        const { h, l } = fromBig(lst[i], le);
	        [Ah[i], Al[i]] = [h, l];
	    }
	    return [Ah, Al];
	}
	_u64$1.split = split;
	const toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);
	_u64$1.toBig = toBig;
	// for Shift in [0, 32)
	const shrSH = (h, _l, s) => h >>> s;
	_u64$1.shrSH = shrSH;
	const shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);
	_u64$1.shrSL = shrSL;
	// Right rotate for Shift in [1, 32)
	const rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));
	_u64$1.rotrSH = rotrSH;
	const rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);
	_u64$1.rotrSL = rotrSL;
	// Right rotate for Shift in (32, 64), NOTE: 32 is special case.
	const rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));
	_u64$1.rotrBH = rotrBH;
	const rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));
	_u64$1.rotrBL = rotrBL;
	// Right rotate for shift===32 (just swaps l&h)
	const rotr32H = (_h, l) => l;
	_u64$1.rotr32H = rotr32H;
	const rotr32L = (h, _l) => h;
	_u64$1.rotr32L = rotr32L;
	// Left rotate for Shift in [1, 32)
	const rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));
	_u64$1.rotlSH = rotlSH;
	const rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));
	_u64$1.rotlSL = rotlSL;
	// Left rotate for Shift in (32, 64), NOTE: 32 is special case.
	const rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));
	_u64$1.rotlBH = rotlBH;
	const rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));
	_u64$1.rotlBL = rotlBL;
	// JS uses 32-bit signed integers for bitwise operations which means we cannot
	// simple take carry out of low bit sum by shift, we need to use division.
	function add(Ah, Al, Bh, Bl) {
	    const l = (Al >>> 0) + (Bl >>> 0);
	    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };
	}
	_u64$1.add = add;
	// Addition with more than 2 elements
	const add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
	_u64$1.add3L = add3L;
	const add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;
	_u64$1.add3H = add3H;
	const add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
	_u64$1.add4L = add4L;
	const add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;
	_u64$1.add4H = add4H;
	const add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
	_u64$1.add5L = add5L;
	const add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;
	_u64$1.add5H = add5H;
	// prettier-ignore
	const u64 = {
	    fromBig, split, toBig,
	    shrSH, shrSL,
	    rotrSH, rotrSL, rotrBH, rotrBL,
	    rotr32H, rotr32L,
	    rotlSH, rotlSL, rotlBH, rotlBL,
	    add, add3L, add3H, add4L, add4H, add5H, add5L,
	};
	_u64$1.default = u64;
	
	return _u64$1;
}

var utils$8 = {};

var crypto$1 = {};

var hasRequiredCrypto$1;

function requireCrypto$1 () {
	if (hasRequiredCrypto$1) return crypto$1;
	hasRequiredCrypto$1 = 1;
	Object.defineProperty(crypto$1, "__esModule", { value: true });
	crypto$1.crypto = void 0;
	crypto$1.crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;
	
	return crypto$1;
}

var hasRequiredUtils$2;

function requireUtils$2 () {
	if (hasRequiredUtils$2) return utils$8;
	hasRequiredUtils$2 = 1;
	(function (exports) {
		/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.randomBytes = exports.wrapXOFConstructorWithOpts = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.isLE = exports.rotr = exports.createView = exports.u32 = exports.u8 = void 0;
		// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.
		// node.js versions earlier than v19 don't declare it in global scope.
		// For node.js, package.json#exports field mapping rewrites import
		// from `crypto` to `cryptoNode`, which imports native module.
		// Makes the utils un-importable in browsers without a bundler.
		// Once node.js 18 is deprecated, we can just drop the import.
		const crypto_1 = requireCrypto$1();
		const u8a = (a) => a instanceof Uint8Array;
		// Cast array to different type
		const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
		exports.u8 = u8;
		const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
		exports.u32 = u32;
		// Cast array to view
		const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
		exports.createView = createView;
		// The rotate right (circular right shift) operation for uint32
		const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);
		exports.rotr = rotr;
		// big-endian hardware is rare. Just in case someone still decides to run hashes:
		// early-throw an error because we don't support BE yet.
		exports.isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;
		if (!exports.isLE)
		    throw new Error('Non little-endian hardware is not supported');
		const hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));
		/**
		 * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'
		 */
		function bytesToHex(bytes) {
		    if (!u8a(bytes))
		        throw new Error('Uint8Array expected');
		    // pre-caching improves the speed 6x
		    let hex = '';
		    for (let i = 0; i < bytes.length; i++) {
		        hex += hexes[bytes[i]];
		    }
		    return hex;
		}
		exports.bytesToHex = bytesToHex;
		/**
		 * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])
		 */
		function hexToBytes(hex) {
		    if (typeof hex !== 'string')
		        throw new Error('hex string expected, got ' + typeof hex);
		    const len = hex.length;
		    if (len % 2)
		        throw new Error('padded hex string expected, got unpadded hex of length ' + len);
		    const array = new Uint8Array(len / 2);
		    for (let i = 0; i < array.length; i++) {
		        const j = i * 2;
		        const hexByte = hex.slice(j, j + 2);
		        const byte = Number.parseInt(hexByte, 16);
		        if (Number.isNaN(byte) || byte < 0)
		            throw new Error('Invalid byte sequence');
		        array[i] = byte;
		    }
		    return array;
		}
		exports.hexToBytes = hexToBytes;
		// There is no setImmediate in browser and setTimeout is slow.
		// call of async fn will return Promise, which will be fullfiled only on
		// next scheduler queue processing step and this is exactly what we need.
		const nextTick = async () => { };
		exports.nextTick = nextTick;
		// Returns control to thread each 'tick' ms to avoid blocking
		async function asyncLoop(iters, tick, cb) {
		    let ts = Date.now();
		    for (let i = 0; i < iters; i++) {
		        cb(i);
		        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too
		        const diff = Date.now() - ts;
		        if (diff >= 0 && diff < tick)
		            continue;
		        await (0, exports.nextTick)();
		        ts += diff;
		    }
		}
		exports.asyncLoop = asyncLoop;
		/**
		 * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])
		 */
		function utf8ToBytes(str) {
		    if (typeof str !== 'string')
		        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
		    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809
		}
		exports.utf8ToBytes = utf8ToBytes;
		/**
		 * Normalizes (non-hex) string or Uint8Array to Uint8Array.
		 * Warning: when Uint8Array is passed, it would NOT get copied.
		 * Keep in mind for future mutable operations.
		 */
		function toBytes(data) {
		    if (typeof data === 'string')
		        data = utf8ToBytes(data);
		    if (!u8a(data))
		        throw new Error(`expected Uint8Array, got ${typeof data}`);
		    return data;
		}
		exports.toBytes = toBytes;
		/**
		 * Copies several Uint8Arrays into one.
		 */
		function concatBytes(...arrays) {
		    const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));
		    let pad = 0; // walk through each item, ensure they have proper type
		    arrays.forEach((a) => {
		        if (!u8a(a))
		            throw new Error('Uint8Array expected');
		        r.set(a, pad);
		        pad += a.length;
		    });
		    return r;
		}
		exports.concatBytes = concatBytes;
		// For runtime check if class implements interface
		class Hash {
		    // Safe version that clones internal state
		    clone() {
		        return this._cloneInto();
		    }
		}
		exports.Hash = Hash;
		const toStr = {}.toString;
		function checkOpts(defaults, opts) {
		    if (opts !== undefined && toStr.call(opts) !== '[object Object]')
		        throw new Error('Options should be object or undefined');
		    const merged = Object.assign(defaults, opts);
		    return merged;
		}
		exports.checkOpts = checkOpts;
		function wrapConstructor(hashCons) {
		    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();
		    const tmp = hashCons();
		    hashC.outputLen = tmp.outputLen;
		    hashC.blockLen = tmp.blockLen;
		    hashC.create = () => hashCons();
		    return hashC;
		}
		exports.wrapConstructor = wrapConstructor;
		function wrapConstructorWithOpts(hashCons) {
		    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
		    const tmp = hashCons({});
		    hashC.outputLen = tmp.outputLen;
		    hashC.blockLen = tmp.blockLen;
		    hashC.create = (opts) => hashCons(opts);
		    return hashC;
		}
		exports.wrapConstructorWithOpts = wrapConstructorWithOpts;
		function wrapXOFConstructorWithOpts(hashCons) {
		    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
		    const tmp = hashCons({});
		    hashC.outputLen = tmp.outputLen;
		    hashC.blockLen = tmp.blockLen;
		    hashC.create = (opts) => hashCons(opts);
		    return hashC;
		}
		exports.wrapXOFConstructorWithOpts = wrapXOFConstructorWithOpts;
		/**
		 * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.
		 */
		function randomBytes(bytesLength = 32) {
		    if (crypto_1.crypto && typeof crypto_1.crypto.getRandomValues === 'function') {
		        return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength));
		    }
		    throw new Error('crypto.getRandomValues must be defined');
		}
		exports.randomBytes = randomBytes;
		
	} (utils$8));
	return utils$8;
}

var hasRequiredSha3;

function requireSha3 () {
	if (hasRequiredSha3) return sha3$1;
	hasRequiredSha3 = 1;
	Object.defineProperty(sha3$1, "__esModule", { value: true });
	sha3$1.shake256 = sha3$1.shake128 = sha3$1.keccak_512 = sha3$1.keccak_384 = sha3$1.keccak_256 = sha3$1.keccak_224 = sha3$1.sha3_512 = sha3$1.sha3_384 = sha3$1.sha3_256 = sha3$1.sha3_224 = sha3$1.Keccak = sha3$1.keccakP = void 0;
	const _assert_js_1 = require_assert();
	const _u64_js_1 = require_u64();
	const utils_js_1 = requireUtils$2();
	// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.
	// It's called a sponge function.
	// Various per round constants calculations
	const [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];
	const _0n = /* @__PURE__ */ BigInt(0);
	const _1n = /* @__PURE__ */ BigInt(1);
	const _2n = /* @__PURE__ */ BigInt(2);
	const _7n = /* @__PURE__ */ BigInt(7);
	const _256n = /* @__PURE__ */ BigInt(256);
	const _0x71n = /* @__PURE__ */ BigInt(0x71);
	for (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {
	    // Pi
	    [x, y] = [y, (2 * x + 3 * y) % 5];
	    SHA3_PI.push(2 * (5 * y + x));
	    // Rotational
	    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);
	    // Iota
	    let t = _0n;
	    for (let j = 0; j < 7; j++) {
	        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;
	        if (R & _2n)
	            t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);
	    }
	    _SHA3_IOTA.push(t);
	}
	const [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ (0, _u64_js_1.split)(_SHA3_IOTA, true);
	// Left rotation (without 0, 32, 64)
	const rotlH = (h, l, s) => (s > 32 ? (0, _u64_js_1.rotlBH)(h, l, s) : (0, _u64_js_1.rotlSH)(h, l, s));
	const rotlL = (h, l, s) => (s > 32 ? (0, _u64_js_1.rotlBL)(h, l, s) : (0, _u64_js_1.rotlSL)(h, l, s));
	// Same as keccakf1600, but allows to skip some rounds
	function keccakP(s, rounds = 24) {
	    const B = new Uint32Array(5 * 2);
	    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)
	    for (let round = 24 - rounds; round < 24; round++) {
	        // Theta θ
	        for (let x = 0; x < 10; x++)
	            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
	        for (let x = 0; x < 10; x += 2) {
	            const idx1 = (x + 8) % 10;
	            const idx0 = (x + 2) % 10;
	            const B0 = B[idx0];
	            const B1 = B[idx0 + 1];
	            const Th = rotlH(B0, B1, 1) ^ B[idx1];
	            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
	            for (let y = 0; y < 50; y += 10) {
	                s[x + y] ^= Th;
	                s[x + y + 1] ^= Tl;
	            }
	        }
	        // Rho (ρ) and Pi (π)
	        let curH = s[2];
	        let curL = s[3];
	        for (let t = 0; t < 24; t++) {
	            const shift = SHA3_ROTL[t];
	            const Th = rotlH(curH, curL, shift);
	            const Tl = rotlL(curH, curL, shift);
	            const PI = SHA3_PI[t];
	            curH = s[PI];
	            curL = s[PI + 1];
	            s[PI] = Th;
	            s[PI + 1] = Tl;
	        }
	        // Chi (χ)
	        for (let y = 0; y < 50; y += 10) {
	            for (let x = 0; x < 10; x++)
	                B[x] = s[y + x];
	            for (let x = 0; x < 10; x++)
	                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
	        }
	        // Iota (ι)
	        s[0] ^= SHA3_IOTA_H[round];
	        s[1] ^= SHA3_IOTA_L[round];
	    }
	    B.fill(0);
	}
	sha3$1.keccakP = keccakP;
	class Keccak extends utils_js_1.Hash {
	    // NOTE: we accept arguments in bytes instead of bits here.
	    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
	        super();
	        this.blockLen = blockLen;
	        this.suffix = suffix;
	        this.outputLen = outputLen;
	        this.enableXOF = enableXOF;
	        this.rounds = rounds;
	        this.pos = 0;
	        this.posOut = 0;
	        this.finished = false;
	        this.destroyed = false;
	        // Can be passed from user as dkLen
	        (0, _assert_js_1.number)(outputLen);
	        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes
	        if (0 >= this.blockLen || this.blockLen >= 200)
	            throw new Error('Sha3 supports only keccak-f1600 function');
	        this.state = new Uint8Array(200);
	        this.state32 = (0, utils_js_1.u32)(this.state);
	    }
	    keccak() {
	        keccakP(this.state32, this.rounds);
	        this.posOut = 0;
	        this.pos = 0;
	    }
	    update(data) {
	        (0, _assert_js_1.exists)(this);
	        const { blockLen, state } = this;
	        data = (0, utils_js_1.toBytes)(data);
	        const len = data.length;
	        for (let pos = 0; pos < len;) {
	            const take = Math.min(blockLen - this.pos, len - pos);
	            for (let i = 0; i < take; i++)
	                state[this.pos++] ^= data[pos++];
	            if (this.pos === blockLen)
	                this.keccak();
	        }
	        return this;
	    }
	    finish() {
	        if (this.finished)
	            return;
	        this.finished = true;
	        const { state, suffix, pos, blockLen } = this;
	        // Do the padding
	        state[pos] ^= suffix;
	        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)
	            this.keccak();
	        state[blockLen - 1] ^= 0x80;
	        this.keccak();
	    }
	    writeInto(out) {
	        (0, _assert_js_1.exists)(this, false);
	        (0, _assert_js_1.bytes)(out);
	        this.finish();
	        const bufferOut = this.state;
	        const { blockLen } = this;
	        for (let pos = 0, len = out.length; pos < len;) {
	            if (this.posOut >= blockLen)
	                this.keccak();
	            const take = Math.min(blockLen - this.posOut, len - pos);
	            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
	            this.posOut += take;
	            pos += take;
	        }
	        return out;
	    }
	    xofInto(out) {
	        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF
	        if (!this.enableXOF)
	            throw new Error('XOF is not possible for this instance');
	        return this.writeInto(out);
	    }
	    xof(bytes) {
	        (0, _assert_js_1.number)(bytes);
	        return this.xofInto(new Uint8Array(bytes));
	    }
	    digestInto(out) {
	        (0, _assert_js_1.output)(out, this);
	        if (this.finished)
	            throw new Error('digest() was already called');
	        this.writeInto(out);
	        this.destroy();
	        return out;
	    }
	    digest() {
	        return this.digestInto(new Uint8Array(this.outputLen));
	    }
	    destroy() {
	        this.destroyed = true;
	        this.state.fill(0);
	    }
	    _cloneInto(to) {
	        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
	        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
	        to.state32.set(this.state32);
	        to.pos = this.pos;
	        to.posOut = this.posOut;
	        to.finished = this.finished;
	        to.rounds = rounds;
	        // Suffix can change in cSHAKE
	        to.suffix = suffix;
	        to.outputLen = outputLen;
	        to.enableXOF = enableXOF;
	        to.destroyed = this.destroyed;
	        return to;
	    }
	}
	sha3$1.Keccak = Keccak;
	const gen = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructor)(() => new Keccak(blockLen, suffix, outputLen));
	sha3$1.sha3_224 = gen(0x06, 144, 224 / 8);
	/**
	 * SHA3-256 hash function
	 * @param message - that would be hashed
	 */
	sha3$1.sha3_256 = gen(0x06, 136, 256 / 8);
	sha3$1.sha3_384 = gen(0x06, 104, 384 / 8);
	sha3$1.sha3_512 = gen(0x06, 72, 512 / 8);
	sha3$1.keccak_224 = gen(0x01, 144, 224 / 8);
	/**
	 * keccak-256 hash function. Different from SHA3-256.
	 * @param message - that would be hashed
	 */
	sha3$1.keccak_256 = gen(0x01, 136, 256 / 8);
	sha3$1.keccak_384 = gen(0x01, 104, 384 / 8);
	sha3$1.keccak_512 = gen(0x01, 72, 512 / 8);
	const genShake = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapXOFConstructorWithOpts)((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));
	sha3$1.shake128 = genShake(0x1f, 168, 128 / 8);
	sha3$1.shake256 = genShake(0x1f, 136, 256 / 8);
	
	return sha3$1;
}

var hasRequiredKeccak;

function requireKeccak () {
	if (hasRequiredKeccak) return keccak$1;
	hasRequiredKeccak = 1;
	/**
	 *  Cryptographic hashing functions
	 *
	 *  @_subsection: api/crypto:Hash Functions [about-crypto-hashing]
	 */
	Object.defineProperty(keccak$1, "__esModule", { value: true });
	keccak$1.keccak256 = void 0;
	const sha3_1 = requireSha3();
	const index_js_1 = requireUtils$3();
	let locked = false;
	const _keccak256 = function (data) {
	    return (0, sha3_1.keccak_256)(data);
	};
	let __keccak256 = _keccak256;
	/**
	 *  Compute the cryptographic KECCAK256 hash of %%data%%.
	 *
	 *  The %%data%% **must** be a data representation, to compute the
	 *  hash of UTF-8 data use the [[id]] function.
	 *
	 *  @returns DataHexstring
	 *  @example:
	 *    keccak256("0x")
	 *    //_result:
	 *
	 *    keccak256("0x1337")
	 *    //_result:
	 *
	 *    keccak256(new Uint8Array([ 0x13, 0x37 ]))
	 *    //_result:
	 *
	 *    // Strings are assumed to be DataHexString, otherwise it will
	 *    // throw. To hash UTF-8 data, see the note above.
	 *    keccak256("Hello World")
	 *    //_error:
	 */
	function keccak256(_data) {
	    const data = (0, index_js_1.getBytes)(_data, "data");
	    return (0, index_js_1.hexlify)(__keccak256(data));
	}
	keccak$1.keccak256 = keccak256;
	keccak256._ = _keccak256;
	keccak256.lock = function () { locked = true; };
	keccak256.register = function (func) {
	    if (locked) {
	        throw new TypeError("keccak256 is locked");
	    }
	    __keccak256 = func;
	};
	Object.freeze(keccak256);
	
	return keccak$1;
}

var ripemd160$1 = {};

var ripemd160 = {};

var _sha2$1 = {};

var hasRequired_sha2;

function require_sha2 () {
	if (hasRequired_sha2) return _sha2$1;
	hasRequired_sha2 = 1;
	Object.defineProperty(_sha2$1, "__esModule", { value: true });
	_sha2$1.SHA2 = void 0;
	const _assert_js_1 = require_assert();
	const utils_js_1 = requireUtils$2();
	// Polyfill for Safari 14
	function setBigUint64(view, byteOffset, value, isLE) {
	    if (typeof view.setBigUint64 === 'function')
	        return view.setBigUint64(byteOffset, value, isLE);
	    const _32n = BigInt(32);
	    const _u32_max = BigInt(0xffffffff);
	    const wh = Number((value >> _32n) & _u32_max);
	    const wl = Number(value & _u32_max);
	    const h = isLE ? 4 : 0;
	    const l = isLE ? 0 : 4;
	    view.setUint32(byteOffset + h, wh, isLE);
	    view.setUint32(byteOffset + l, wl, isLE);
	}
	// Base SHA2 class (RFC 6234)
	class SHA2 extends utils_js_1.Hash {
	    constructor(blockLen, outputLen, padOffset, isLE) {
	        super();
	        this.blockLen = blockLen;
	        this.outputLen = outputLen;
	        this.padOffset = padOffset;
	        this.isLE = isLE;
	        this.finished = false;
	        this.length = 0;
	        this.pos = 0;
	        this.destroyed = false;
	        this.buffer = new Uint8Array(blockLen);
	        this.view = (0, utils_js_1.createView)(this.buffer);
	    }
	    update(data) {
	        (0, _assert_js_1.exists)(this);
	        const { view, buffer, blockLen } = this;
	        data = (0, utils_js_1.toBytes)(data);
	        const len = data.length;
	        for (let pos = 0; pos < len;) {
	            const take = Math.min(blockLen - this.pos, len - pos);
	            // Fast path: we have at least one block in input, cast it to view and process
	            if (take === blockLen) {
	                const dataView = (0, utils_js_1.createView)(data);
	                for (; blockLen <= len - pos; pos += blockLen)
	                    this.process(dataView, pos);
	                continue;
	            }
	            buffer.set(data.subarray(pos, pos + take), this.pos);
	            this.pos += take;
	            pos += take;
	            if (this.pos === blockLen) {
	                this.process(view, 0);
	                this.pos = 0;
	            }
	        }
	        this.length += data.length;
	        this.roundClean();
	        return this;
	    }
	    digestInto(out) {
	        (0, _assert_js_1.exists)(this);
	        (0, _assert_js_1.output)(out, this);
	        this.finished = true;
	        // Padding
	        // We can avoid allocation of buffer for padding completely if it
	        // was previously not allocated here. But it won't change performance.
	        const { buffer, view, blockLen, isLE } = this;
	        let { pos } = this;
	        // append the bit '1' to the message
	        buffer[pos++] = 0b10000000;
	        this.buffer.subarray(pos).fill(0);
	        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again
	        if (this.padOffset > blockLen - pos) {
	            this.process(view, 0);
	            pos = 0;
	        }
	        // Pad until full block byte with zeros
	        for (let i = pos; i < blockLen; i++)
	            buffer[i] = 0;
	        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that
	        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.
	        // So we just write lowest 64 bits of that value.
	        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);
	        this.process(view, 0);
	        const oview = (0, utils_js_1.createView)(out);
	        const len = this.outputLen;
	        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT
	        if (len % 4)
	            throw new Error('_sha2: outputLen should be aligned to 32bit');
	        const outLen = len / 4;
	        const state = this.get();
	        if (outLen > state.length)
	            throw new Error('_sha2: outputLen bigger than state');
	        for (let i = 0; i < outLen; i++)
	            oview.setUint32(4 * i, state[i], isLE);
	    }
	    digest() {
	        const { buffer, outputLen } = this;
	        this.digestInto(buffer);
	        const res = buffer.slice(0, outputLen);
	        this.destroy();
	        return res;
	    }
	    _cloneInto(to) {
	        to || (to = new this.constructor());
	        to.set(...this.get());
	        const { blockLen, buffer, length, finished, destroyed, pos } = this;
	        to.length = length;
	        to.pos = pos;
	        to.finished = finished;
	        to.destroyed = destroyed;
	        if (length % blockLen)
	            to.buffer.set(buffer);
	        return to;
	    }
	}
	_sha2$1.SHA2 = SHA2;
	
	return _sha2$1;
}

var hasRequiredRipemd160$1;

function requireRipemd160$1 () {
	if (hasRequiredRipemd160$1) return ripemd160;
	hasRequiredRipemd160$1 = 1;
	Object.defineProperty(ripemd160, "__esModule", { value: true });
	ripemd160.ripemd160 = ripemd160.RIPEMD160 = void 0;
	const _sha2_js_1 = require_sha2();
	const utils_js_1 = requireUtils$2();
	// https://homes.esat.kuleuven.be/~bosselae/ripemd160.html
	// https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf
	const Rho = /* @__PURE__ */ new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);
	const Id = /* @__PURE__ */ Uint8Array.from({ length: 16 }, (_, i) => i);
	const Pi = /* @__PURE__ */ Id.map((i) => (9 * i + 5) % 16);
	let idxL = [Id];
	let idxR = [Pi];
	for (let i = 0; i < 4; i++)
	    for (let j of [idxL, idxR])
	        j.push(j[i].map((k) => Rho[k]));
	const shifts = /* @__PURE__ */ [
	    [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
	    [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
	    [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
	    [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
	    [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],
	].map((i) => new Uint8Array(i));
	const shiftsL = /* @__PURE__ */ idxL.map((idx, i) => idx.map((j) => shifts[i][j]));
	const shiftsR = /* @__PURE__ */ idxR.map((idx, i) => idx.map((j) => shifts[i][j]));
	const Kl = /* @__PURE__ */ new Uint32Array([
	    0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e,
	]);
	const Kr = /* @__PURE__ */ new Uint32Array([
	    0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000,
	]);
	// The rotate left (circular left shift) operation for uint32
	const rotl = (word, shift) => (word << shift) | (word >>> (32 - shift));
	// It's called f() in spec.
	function f(group, x, y, z) {
	    if (group === 0)
	        return x ^ y ^ z;
	    else if (group === 1)
	        return (x & y) | (~x & z);
	    else if (group === 2)
	        return (x | ~y) ^ z;
	    else if (group === 3)
	        return (x & z) | (y & ~z);
	    else
	        return x ^ (y | ~z);
	}
	// Temporary buffer, not used to store anything between runs
	const BUF = /* @__PURE__ */ new Uint32Array(16);
	class RIPEMD160 extends _sha2_js_1.SHA2 {
	    constructor() {
	        super(64, 20, 8, true);
	        this.h0 = 0x67452301 | 0;
	        this.h1 = 0xefcdab89 | 0;
	        this.h2 = 0x98badcfe | 0;
	        this.h3 = 0x10325476 | 0;
	        this.h4 = 0xc3d2e1f0 | 0;
	    }
	    get() {
	        const { h0, h1, h2, h3, h4 } = this;
	        return [h0, h1, h2, h3, h4];
	    }
	    set(h0, h1, h2, h3, h4) {
	        this.h0 = h0 | 0;
	        this.h1 = h1 | 0;
	        this.h2 = h2 | 0;
	        this.h3 = h3 | 0;
	        this.h4 = h4 | 0;
	    }
	    process(view, offset) {
	        for (let i = 0; i < 16; i++, offset += 4)
	            BUF[i] = view.getUint32(offset, true);
	        // prettier-ignore
	        let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;
	        // Instead of iterating 0 to 80, we split it into 5 groups
	        // And use the groups in constants, functions, etc. Much simpler
	        for (let group = 0; group < 5; group++) {
	            const rGroup = 4 - group;
	            const hbl = Kl[group], hbr = Kr[group]; // prettier-ignore
	            const rl = idxL[group], rr = idxR[group]; // prettier-ignore
	            const sl = shiftsL[group], sr = shiftsR[group]; // prettier-ignore
	            for (let i = 0; i < 16; i++) {
	                const tl = (rotl(al + f(group, bl, cl, dl) + BUF[rl[i]] + hbl, sl[i]) + el) | 0;
	                al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore
	            }
	            // 2 loops are 10% faster
	            for (let i = 0; i < 16; i++) {
	                const tr = (rotl(ar + f(rGroup, br, cr, dr) + BUF[rr[i]] + hbr, sr[i]) + er) | 0;
	                ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore
	            }
	        }
	        // Add the compressed chunk to the current hash value
	        this.set((this.h1 + cl + dr) | 0, (this.h2 + dl + er) | 0, (this.h3 + el + ar) | 0, (this.h4 + al + br) | 0, (this.h0 + bl + cr) | 0);
	    }
	    roundClean() {
	        BUF.fill(0);
	    }
	    destroy() {
	        this.destroyed = true;
	        this.buffer.fill(0);
	        this.set(0, 0, 0, 0, 0);
	    }
	}
	ripemd160.RIPEMD160 = RIPEMD160;
	/**
	 * RIPEMD-160 - a hash function from 1990s.
	 * @param message - msg that would be hashed
	 */
	ripemd160.ripemd160 = (0, utils_js_1.wrapConstructor)(() => new RIPEMD160());
	
	return ripemd160;
}

var hasRequiredRipemd160;

function requireRipemd160 () {
	if (hasRequiredRipemd160) return ripemd160$1;
	hasRequiredRipemd160 = 1;
	Object.defineProperty(ripemd160$1, "__esModule", { value: true });
	ripemd160$1.ripemd160 = void 0;
	const ripemd160_1 = requireRipemd160$1();
	const index_js_1 = requireUtils$3();
	let locked = false;
	const _ripemd160 = function (data) {
	    return (0, ripemd160_1.ripemd160)(data);
	};
	let __ripemd160 = _ripemd160;
	/**
	 *  Compute the cryptographic RIPEMD-160 hash of %%data%%.
	 *
	 *  @_docloc: api/crypto:Hash Functions
	 *  @returns DataHexstring
	 *
	 *  @example:
	 *    ripemd160("0x")
	 *    //_result:
	 *
	 *    ripemd160("0x1337")
	 *    //_result:
	 *
	 *    ripemd160(new Uint8Array([ 0x13, 0x37 ]))
	 *    //_result:
	 *
	 */
	function ripemd160(_data) {
	    const data = (0, index_js_1.getBytes)(_data, "data");
	    return (0, index_js_1.hexlify)(__ripemd160(data));
	}
	ripemd160$1.ripemd160 = ripemd160;
	ripemd160._ = _ripemd160;
	ripemd160.lock = function () { locked = true; };
	ripemd160.register = function (func) {
	    if (locked) {
	        throw new TypeError("ripemd160 is locked");
	    }
	    __ripemd160 = func;
	};
	Object.freeze(ripemd160);
	
	return ripemd160$1;
}

var pbkdf2$1 = {};

var hasRequiredPbkdf2$1;

function requirePbkdf2$1 () {
	if (hasRequiredPbkdf2$1) return pbkdf2$1;
	hasRequiredPbkdf2$1 = 1;
	/**
	 *  A **Password-Based Key-Derivation Function** is designed to create
	 *  a sequence of bytes suitible as a **key** from a human-rememberable
	 *  password.
	 *
	 *  @_subsection: api/crypto:Passwords  [about-pbkdf]
	 */
	Object.defineProperty(pbkdf2$1, "__esModule", { value: true });
	pbkdf2$1.pbkdf2 = void 0;
	const crypto_js_1 = requireCrypto$2();
	const index_js_1 = requireUtils$3();
	let locked = false;
	const _pbkdf2 = function (password, salt, iterations, keylen, algo) {
	    return (0, crypto_js_1.pbkdf2Sync)(password, salt, iterations, keylen, algo);
	};
	let __pbkdf2 = _pbkdf2;
	/**
	 *  Return the [[link-pbkdf2]] for %%keylen%% bytes for %%password%% using
	 *  the %%salt%% and using %%iterations%% of %%algo%%.
	 *
	 *  This PBKDF is outdated and should not be used in new projects, but is
	 *  required to decrypt older files.
	 *
	 *  @example:
	 *    // The password must be converted to bytes, and it is generally
	 *    // best practices to ensure the string has been normalized. Many
	 *    // formats explicitly indicate the normalization form to use.
	 *    password = "hello"
	 *    passwordBytes = toUtf8Bytes(password, "NFKC")
	 *
	 *    salt = id("some-salt")
	 *
	 *    // Compute the PBKDF2
	 *    pbkdf2(passwordBytes, salt, 1024, 16, "sha256")
	 *    //_result:
	 */
	function pbkdf2(_password, _salt, iterations, keylen, algo) {
	    const password = (0, index_js_1.getBytes)(_password, "password");
	    const salt = (0, index_js_1.getBytes)(_salt, "salt");
	    return (0, index_js_1.hexlify)(__pbkdf2(password, salt, iterations, keylen, algo));
	}
	pbkdf2$1.pbkdf2 = pbkdf2;
	pbkdf2._ = _pbkdf2;
	pbkdf2.lock = function () { locked = true; };
	pbkdf2.register = function (func) {
	    if (locked) {
	        throw new Error("pbkdf2 is locked");
	    }
	    __pbkdf2 = func;
	};
	Object.freeze(pbkdf2);
	
	return pbkdf2$1;
}

var random$1 = {};

var hasRequiredRandom$1;

function requireRandom$1 () {
	if (hasRequiredRandom$1) return random$1;
	hasRequiredRandom$1 = 1;
	Object.defineProperty(random$1, "__esModule", { value: true });
	random$1.randomBytes = void 0;
	/**
	 *  A **Cryptographically Secure Random Value** is one that has been
	 *  generated with additional care take to prevent side-channels
	 *  from allowing others to detect it and prevent others from through
	 *  coincidence generate the same values.
	 *
	 *  @_subsection: api/crypto:Random Values  [about-crypto-random]
	 */
	const crypto_js_1 = requireCrypto$2();
	let locked = false;
	const _randomBytes = function (length) {
	    return new Uint8Array((0, crypto_js_1.randomBytes)(length));
	};
	let __randomBytes = _randomBytes;
	/**
	 *  Return %%length%% bytes of cryptographically secure random data.
	 *
	 *  @example:
	 *    randomBytes(8)
	 *    //_result:
	 */
	function randomBytes(length) {
	    return __randomBytes(length);
	}
	random$1.randomBytes = randomBytes;
	randomBytes._ = _randomBytes;
	randomBytes.lock = function () { locked = true; };
	randomBytes.register = function (func) {
	    if (locked) {
	        throw new Error("randomBytes is locked");
	    }
	    __randomBytes = func;
	};
	Object.freeze(randomBytes);
	
	return random$1;
}

var scrypt$1 = {};

var scrypt = {};

var sha256$2 = {};

var hasRequiredSha256;

function requireSha256 () {
	if (hasRequiredSha256) return sha256$2;
	hasRequiredSha256 = 1;
	Object.defineProperty(sha256$2, "__esModule", { value: true });
	sha256$2.sha224 = sha256$2.sha256 = void 0;
	const _sha2_js_1 = require_sha2();
	const utils_js_1 = requireUtils$2();
	// SHA2-256 need to try 2^128 hashes to execute birthday attack.
	// BTC network is doing 2^67 hashes/sec as per early 2023.
	// Choice: a ? b : c
	const Chi = (a, b, c) => (a & b) ^ (~a & c);
	// Majority function, true if any two inpust is true
	const Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);
	// Round constants:
	// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)
	// prettier-ignore
	const SHA256_K = /* @__PURE__ */ new Uint32Array([
	    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
	    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
	    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
	    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
	    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
	    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
	    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
	    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
	]);
	// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):
	// prettier-ignore
	const IV = /* @__PURE__ */ new Uint32Array([
	    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
	]);
	// Temporary buffer, not used to store anything between runs
	// Named this way because it matches specification.
	const SHA256_W = /* @__PURE__ */ new Uint32Array(64);
	class SHA256 extends _sha2_js_1.SHA2 {
	    constructor() {
	        super(64, 32, 8, false);
	        // We cannot use array here since array allows indexing by variable
	        // which means optimizer/compiler cannot use registers.
	        this.A = IV[0] | 0;
	        this.B = IV[1] | 0;
	        this.C = IV[2] | 0;
	        this.D = IV[3] | 0;
	        this.E = IV[4] | 0;
	        this.F = IV[5] | 0;
	        this.G = IV[6] | 0;
	        this.H = IV[7] | 0;
	    }
	    get() {
	        const { A, B, C, D, E, F, G, H } = this;
	        return [A, B, C, D, E, F, G, H];
	    }
	    // prettier-ignore
	    set(A, B, C, D, E, F, G, H) {
	        this.A = A | 0;
	        this.B = B | 0;
	        this.C = C | 0;
	        this.D = D | 0;
	        this.E = E | 0;
	        this.F = F | 0;
	        this.G = G | 0;
	        this.H = H | 0;
	    }
	    process(view, offset) {
	        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array
	        for (let i = 0; i < 16; i++, offset += 4)
	            SHA256_W[i] = view.getUint32(offset, false);
	        for (let i = 16; i < 64; i++) {
	            const W15 = SHA256_W[i - 15];
	            const W2 = SHA256_W[i - 2];
	            const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ (W15 >>> 3);
	            const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ (W2 >>> 10);
	            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;
	        }
	        // Compression function main loop, 64 rounds
	        let { A, B, C, D, E, F, G, H } = this;
	        for (let i = 0; i < 64; i++) {
	            const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);
	            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;
	            const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);
	            const T2 = (sigma0 + Maj(A, B, C)) | 0;
	            H = G;
	            G = F;
	            F = E;
	            E = (D + T1) | 0;
	            D = C;
	            C = B;
	            B = A;
	            A = (T1 + T2) | 0;
	        }
	        // Add the compressed chunk to the current hash value
	        A = (A + this.A) | 0;
	        B = (B + this.B) | 0;
	        C = (C + this.C) | 0;
	        D = (D + this.D) | 0;
	        E = (E + this.E) | 0;
	        F = (F + this.F) | 0;
	        G = (G + this.G) | 0;
	        H = (H + this.H) | 0;
	        this.set(A, B, C, D, E, F, G, H);
	    }
	    roundClean() {
	        SHA256_W.fill(0);
	    }
	    destroy() {
	        this.set(0, 0, 0, 0, 0, 0, 0, 0);
	        this.buffer.fill(0);
	    }
	}
	// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf
	class SHA224 extends SHA256 {
	    constructor() {
	        super();
	        this.A = 0xc1059ed8 | 0;
	        this.B = 0x367cd507 | 0;
	        this.C = 0x3070dd17 | 0;
	        this.D = 0xf70e5939 | 0;
	        this.E = 0xffc00b31 | 0;
	        this.F = 0x68581511 | 0;
	        this.G = 0x64f98fa7 | 0;
	        this.H = 0xbefa4fa4 | 0;
	        this.outputLen = 28;
	    }
	}
	/**
	 * SHA2-256 hash function
	 * @param message - data that would be hashed
	 */
	sha256$2.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());
	sha256$2.sha224 = (0, utils_js_1.wrapConstructor)(() => new SHA224());
	
	return sha256$2;
}

var pbkdf2 = {};

var hmac$1 = {};

var hasRequiredHmac;

function requireHmac () {
	if (hasRequiredHmac) return hmac$1;
	hasRequiredHmac = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.hmac = exports.HMAC = void 0;
		const _assert_js_1 = require_assert();
		const utils_js_1 = requireUtils$2();
		// HMAC (RFC 2104)
		class HMAC extends utils_js_1.Hash {
		    constructor(hash, _key) {
		        super();
		        this.finished = false;
		        this.destroyed = false;
		        (0, _assert_js_1.hash)(hash);
		        const key = (0, utils_js_1.toBytes)(_key);
		        this.iHash = hash.create();
		        if (typeof this.iHash.update !== 'function')
		            throw new Error('Expected instance of class which extends utils.Hash');
		        this.blockLen = this.iHash.blockLen;
		        this.outputLen = this.iHash.outputLen;
		        const blockLen = this.blockLen;
		        const pad = new Uint8Array(blockLen);
		        // blockLen can be bigger than outputLen
		        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);
		        for (let i = 0; i < pad.length; i++)
		            pad[i] ^= 0x36;
		        this.iHash.update(pad);
		        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone
		        this.oHash = hash.create();
		        // Undo internal XOR && apply outer XOR
		        for (let i = 0; i < pad.length; i++)
		            pad[i] ^= 0x36 ^ 0x5c;
		        this.oHash.update(pad);
		        pad.fill(0);
		    }
		    update(buf) {
		        (0, _assert_js_1.exists)(this);
		        this.iHash.update(buf);
		        return this;
		    }
		    digestInto(out) {
		        (0, _assert_js_1.exists)(this);
		        (0, _assert_js_1.bytes)(out, this.outputLen);
		        this.finished = true;
		        this.iHash.digestInto(out);
		        this.oHash.update(out);
		        this.oHash.digestInto(out);
		        this.destroy();
		    }
		    digest() {
		        const out = new Uint8Array(this.oHash.outputLen);
		        this.digestInto(out);
		        return out;
		    }
		    _cloneInto(to) {
		        // Create new instance without calling constructor since key already in state and we don't know it.
		        to || (to = Object.create(Object.getPrototypeOf(this), {}));
		        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
		        to = to;
		        to.finished = finished;
		        to.destroyed = destroyed;
		        to.blockLen = blockLen;
		        to.outputLen = outputLen;
		        to.oHash = oHash._cloneInto(to.oHash);
		        to.iHash = iHash._cloneInto(to.iHash);
		        return to;
		    }
		    destroy() {
		        this.destroyed = true;
		        this.oHash.destroy();
		        this.iHash.destroy();
		    }
		}
		exports.HMAC = HMAC;
		/**
		 * HMAC: RFC2104 message authentication code.
		 * @param hash - function that would be used e.g. sha256
		 * @param key - message key
		 * @param message - message data
		 */
		const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();
		exports.hmac = hmac;
		exports.hmac.create = (hash, key) => new HMAC(hash, key);
		
	} (hmac$1));
	return hmac$1;
}

var hasRequiredPbkdf2;

function requirePbkdf2 () {
	if (hasRequiredPbkdf2) return pbkdf2;
	hasRequiredPbkdf2 = 1;
	Object.defineProperty(pbkdf2, "__esModule", { value: true });
	pbkdf2.pbkdf2Async = pbkdf2.pbkdf2 = void 0;
	const _assert_js_1 = require_assert();
	const hmac_js_1 = requireHmac();
	const utils_js_1 = requireUtils$2();
	// Common prologue and epilogue for sync/async functions
	function pbkdf2Init(hash, _password, _salt, _opts) {
	    (0, _assert_js_1.hash)(hash);
	    const opts = (0, utils_js_1.checkOpts)({ dkLen: 32, asyncTick: 10 }, _opts);
	    const { c, dkLen, asyncTick } = opts;
	    (0, _assert_js_1.number)(c);
	    (0, _assert_js_1.number)(dkLen);
	    (0, _assert_js_1.number)(asyncTick);
	    if (c < 1)
	        throw new Error('PBKDF2: iterations (c) should be >= 1');
	    const password = (0, utils_js_1.toBytes)(_password);
	    const salt = (0, utils_js_1.toBytes)(_salt);
	    // DK = PBKDF2(PRF, Password, Salt, c, dkLen);
	    const DK = new Uint8Array(dkLen);
	    // U1 = PRF(Password, Salt + INT_32_BE(i))
	    const PRF = hmac_js_1.hmac.create(hash, password);
	    const PRFSalt = PRF._cloneInto().update(salt);
	    return { c, dkLen, asyncTick, DK, PRF, PRFSalt };
	}
	function pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {
	    PRF.destroy();
	    PRFSalt.destroy();
	    if (prfW)
	        prfW.destroy();
	    u.fill(0);
	    return DK;
	}
	/**
	 * PBKDF2-HMAC: RFC 2898 key derivation function
	 * @param hash - hash function that would be used e.g. sha256
	 * @param password - password from which a derived key is generated
	 * @param salt - cryptographic salt
	 * @param opts - {c, dkLen} where c is work factor and dkLen is output message size
	 */
	function pbkdf2$1(hash, password, salt, opts) {
	    const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);
	    let prfW; // Working copy
	    const arr = new Uint8Array(4);
	    const view = (0, utils_js_1.createView)(arr);
	    const u = new Uint8Array(PRF.outputLen);
	    // DK = T1 + T2 + ⋯ + Tdklen/hlen
	    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
	        // Ti = F(Password, Salt, c, i)
	        const Ti = DK.subarray(pos, pos + PRF.outputLen);
	        view.setInt32(0, ti, false);
	        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc
	        // U1 = PRF(Password, Salt + INT_32_BE(i))
	        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
	        Ti.set(u.subarray(0, Ti.length));
	        for (let ui = 1; ui < c; ui++) {
	            // Uc = PRF(Password, Uc−1)
	            PRF._cloneInto(prfW).update(u).digestInto(u);
	            for (let i = 0; i < Ti.length; i++)
	                Ti[i] ^= u[i];
	        }
	    }
	    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
	}
	pbkdf2.pbkdf2 = pbkdf2$1;
	async function pbkdf2Async(hash, password, salt, opts) {
	    const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);
	    let prfW; // Working copy
	    const arr = new Uint8Array(4);
	    const view = (0, utils_js_1.createView)(arr);
	    const u = new Uint8Array(PRF.outputLen);
	    // DK = T1 + T2 + ⋯ + Tdklen/hlen
	    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
	        // Ti = F(Password, Salt, c, i)
	        const Ti = DK.subarray(pos, pos + PRF.outputLen);
	        view.setInt32(0, ti, false);
	        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc
	        // U1 = PRF(Password, Salt + INT_32_BE(i))
	        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
	        Ti.set(u.subarray(0, Ti.length));
	        await (0, utils_js_1.asyncLoop)(c - 1, asyncTick, () => {
	            // Uc = PRF(Password, Uc−1)
	            PRF._cloneInto(prfW).update(u).digestInto(u);
	            for (let i = 0; i < Ti.length; i++)
	                Ti[i] ^= u[i];
	        });
	    }
	    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
	}
	pbkdf2.pbkdf2Async = pbkdf2Async;
	
	return pbkdf2;
}

var hasRequiredScrypt$1;

function requireScrypt$1 () {
	if (hasRequiredScrypt$1) return scrypt;
	hasRequiredScrypt$1 = 1;
	Object.defineProperty(scrypt, "__esModule", { value: true });
	scrypt.scryptAsync = scrypt.scrypt = void 0;
	const _assert_js_1 = require_assert();
	const sha256_js_1 = requireSha256();
	const pbkdf2_js_1 = requirePbkdf2();
	const utils_js_1 = requireUtils$2();
	// RFC 7914 Scrypt KDF
	// Left rotate for uint32
	const rotl = (a, b) => (a << b) | (a >>> (32 - b));
	// The main Scrypt loop: uses Salsa extensively.
	// Six versions of the function were tried, this is the fastest one.
	// prettier-ignore
	function XorAndSalsa(prev, pi, input, ii, out, oi) {
	    // Based on https://cr.yp.to/salsa20.html
	    // Xor blocks
	    let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];
	    let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];
	    let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];
	    let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];
	    let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];
	    let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];
	    let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];
	    let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];
	    // Save state to temporary variables (salsa)
	    let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;
	    // Main loop (salsa)
	    for (let i = 0; i < 8; i += 2) {
	        x04 ^= rotl(x00 + x12 | 0, 7);
	        x08 ^= rotl(x04 + x00 | 0, 9);
	        x12 ^= rotl(x08 + x04 | 0, 13);
	        x00 ^= rotl(x12 + x08 | 0, 18);
	        x09 ^= rotl(x05 + x01 | 0, 7);
	        x13 ^= rotl(x09 + x05 | 0, 9);
	        x01 ^= rotl(x13 + x09 | 0, 13);
	        x05 ^= rotl(x01 + x13 | 0, 18);
	        x14 ^= rotl(x10 + x06 | 0, 7);
	        x02 ^= rotl(x14 + x10 | 0, 9);
	        x06 ^= rotl(x02 + x14 | 0, 13);
	        x10 ^= rotl(x06 + x02 | 0, 18);
	        x03 ^= rotl(x15 + x11 | 0, 7);
	        x07 ^= rotl(x03 + x15 | 0, 9);
	        x11 ^= rotl(x07 + x03 | 0, 13);
	        x15 ^= rotl(x11 + x07 | 0, 18);
	        x01 ^= rotl(x00 + x03 | 0, 7);
	        x02 ^= rotl(x01 + x00 | 0, 9);
	        x03 ^= rotl(x02 + x01 | 0, 13);
	        x00 ^= rotl(x03 + x02 | 0, 18);
	        x06 ^= rotl(x05 + x04 | 0, 7);
	        x07 ^= rotl(x06 + x05 | 0, 9);
	        x04 ^= rotl(x07 + x06 | 0, 13);
	        x05 ^= rotl(x04 + x07 | 0, 18);
	        x11 ^= rotl(x10 + x09 | 0, 7);
	        x08 ^= rotl(x11 + x10 | 0, 9);
	        x09 ^= rotl(x08 + x11 | 0, 13);
	        x10 ^= rotl(x09 + x08 | 0, 18);
	        x12 ^= rotl(x15 + x14 | 0, 7);
	        x13 ^= rotl(x12 + x15 | 0, 9);
	        x14 ^= rotl(x13 + x12 | 0, 13);
	        x15 ^= rotl(x14 + x13 | 0, 18);
	    }
	    // Write output (salsa)
	    out[oi++] = (y00 + x00) | 0;
	    out[oi++] = (y01 + x01) | 0;
	    out[oi++] = (y02 + x02) | 0;
	    out[oi++] = (y03 + x03) | 0;
	    out[oi++] = (y04 + x04) | 0;
	    out[oi++] = (y05 + x05) | 0;
	    out[oi++] = (y06 + x06) | 0;
	    out[oi++] = (y07 + x07) | 0;
	    out[oi++] = (y08 + x08) | 0;
	    out[oi++] = (y09 + x09) | 0;
	    out[oi++] = (y10 + x10) | 0;
	    out[oi++] = (y11 + x11) | 0;
	    out[oi++] = (y12 + x12) | 0;
	    out[oi++] = (y13 + x13) | 0;
	    out[oi++] = (y14 + x14) | 0;
	    out[oi++] = (y15 + x15) | 0;
	}
	function BlockMix(input, ii, out, oi, r) {
	    // The block B is r 128-byte chunks (which is equivalent of 2r 64-byte chunks)
	    let head = oi + 0;
	    let tail = oi + 16 * r;
	    for (let i = 0; i < 16; i++)
	        out[tail + i] = input[ii + (2 * r - 1) * 16 + i]; // X ← B[2r−1]
	    for (let i = 0; i < r; i++, head += 16, ii += 16) {
	        // We write odd & even Yi at same time. Even: 0bXXXXX0 Odd:  0bXXXXX1
	        XorAndSalsa(out, tail, input, ii, out, head); // head[i] = Salsa(blockIn[2*i] ^ tail[i-1])
	        if (i > 0)
	            tail += 16; // First iteration overwrites tmp value in tail
	        XorAndSalsa(out, head, input, (ii += 16), out, tail); // tail[i] = Salsa(blockIn[2*i+1] ^ head[i])
	    }
	}
	// Common prologue and epilogue for sync/async functions
	function scryptInit(password, salt, _opts) {
	    // Maxmem - 1GB+1KB by default
	    const opts = (0, utils_js_1.checkOpts)({
	        dkLen: 32,
	        asyncTick: 10,
	        maxmem: 1024 ** 3 + 1024,
	    }, _opts);
	    const { N, r, p, dkLen, asyncTick, maxmem, onProgress } = opts;
	    (0, _assert_js_1.number)(N);
	    (0, _assert_js_1.number)(r);
	    (0, _assert_js_1.number)(p);
	    (0, _assert_js_1.number)(dkLen);
	    (0, _assert_js_1.number)(asyncTick);
	    (0, _assert_js_1.number)(maxmem);
	    if (onProgress !== undefined && typeof onProgress !== 'function')
	        throw new Error('progressCb should be function');
	    const blockSize = 128 * r;
	    const blockSize32 = blockSize / 4;
	    if (N <= 1 || (N & (N - 1)) !== 0 || N >= 2 ** (blockSize / 8) || N > 2 ** 32) {
	        // NOTE: we limit N to be less than 2**32 because of 32 bit variant of Integrify function
	        // There is no JS engines that allows alocate more than 4GB per single Uint8Array for now, but can change in future.
	        throw new Error('Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32');
	    }
	    if (p < 0 || p > ((2 ** 32 - 1) * 32) / blockSize) {
	        throw new Error('Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)');
	    }
	    if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {
	        throw new Error('Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32');
	    }
	    const memUsed = blockSize * (N + p);
	    if (memUsed > maxmem) {
	        throw new Error(`Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`);
	    }
	    // [B0...Bp−1] ← PBKDF2HMAC-SHA256(Passphrase, Salt, 1, blockSize*ParallelizationFactor)
	    // Since it has only one iteration there is no reason to use async variant
	    const B = (0, pbkdf2_js_1.pbkdf2)(sha256_js_1.sha256, password, salt, { c: 1, dkLen: blockSize * p });
	    const B32 = (0, utils_js_1.u32)(B);
	    // Re-used between parallel iterations. Array(iterations) of B
	    const V = (0, utils_js_1.u32)(new Uint8Array(blockSize * N));
	    const tmp = (0, utils_js_1.u32)(new Uint8Array(blockSize));
	    let blockMixCb = () => { };
	    if (onProgress) {
	        const totalBlockMix = 2 * N * p;
	        // Invoke callback if progress changes from 10.01 to 10.02
	        // Allows to draw smooth progress bar on up to 8K screen
	        const callbackPer = Math.max(Math.floor(totalBlockMix / 10000), 1);
	        let blockMixCnt = 0;
	        blockMixCb = () => {
	            blockMixCnt++;
	            if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))
	                onProgress(blockMixCnt / totalBlockMix);
	        };
	    }
	    return { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick };
	}
	function scryptOutput(password, dkLen, B, V, tmp) {
	    const res = (0, pbkdf2_js_1.pbkdf2)(sha256_js_1.sha256, password, B, { c: 1, dkLen });
	    B.fill(0);
	    V.fill(0);
	    tmp.fill(0);
	    return res;
	}
	/**
	 * Scrypt KDF from RFC 7914.
	 * @param password - pass
	 * @param salt - salt
	 * @param opts - parameters
	 * - `N` is cpu/mem work factor (power of 2 e.g. 2**18)
	 * - `r` is block size (8 is common), fine-tunes sequential memory read size and performance
	 * - `p` is parallelization factor (1 is common)
	 * - `dkLen` is output key length in bytes e.g. 32.
	 * - `asyncTick` - (default: 10) max time in ms for which async function can block execution
	 * - `maxmem` - (default: `1024 ** 3 + 1024` aka 1GB+1KB). A limit that the app could use for scrypt
	 * - `onProgress` - callback function that would be executed for progress report
	 * @returns Derived key
	 */
	function scrypt$1(password, salt, opts) {
	    const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb } = scryptInit(password, salt, opts);
	    for (let pi = 0; pi < p; pi++) {
	        const Pi = blockSize32 * pi;
	        for (let i = 0; i < blockSize32; i++)
	            V[i] = B32[Pi + i]; // V[0] = B[i]
	        for (let i = 0, pos = 0; i < N - 1; i++) {
	            BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);
	            blockMixCb();
	        }
	        BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element
	        blockMixCb();
	        for (let i = 0; i < N; i++) {
	            // First u32 of the last 64-byte block (u32 is LE)
	            const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations
	            for (let k = 0; k < blockSize32; k++)
	                tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]
	            BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])
	            blockMixCb();
	        }
	    }
	    return scryptOutput(password, dkLen, B, V, tmp);
	}
	scrypt.scrypt = scrypt$1;
	/**
	 * Scrypt KDF from RFC 7914.
	 */
	async function scryptAsync(password, salt, opts) {
	    const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick } = scryptInit(password, salt, opts);
	    for (let pi = 0; pi < p; pi++) {
	        const Pi = blockSize32 * pi;
	        for (let i = 0; i < blockSize32; i++)
	            V[i] = B32[Pi + i]; // V[0] = B[i]
	        let pos = 0;
	        await (0, utils_js_1.asyncLoop)(N - 1, asyncTick, () => {
	            BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);
	            blockMixCb();
	        });
	        BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element
	        blockMixCb();
	        await (0, utils_js_1.asyncLoop)(N, asyncTick, () => {
	            // First u32 of the last 64-byte block (u32 is LE)
	            const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations
	            for (let k = 0; k < blockSize32; k++)
	                tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]
	            BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])
	            blockMixCb();
	        });
	    }
	    return scryptOutput(password, dkLen, B, V, tmp);
	}
	scrypt.scryptAsync = scryptAsync;
	
	return scrypt;
}

var hasRequiredScrypt;

function requireScrypt () {
	if (hasRequiredScrypt) return scrypt$1;
	hasRequiredScrypt = 1;
	Object.defineProperty(scrypt$1, "__esModule", { value: true });
	scrypt$1.scryptSync = scrypt$1.scrypt = void 0;
	const scrypt_1 = requireScrypt$1();
	const index_js_1 = requireUtils$3();
	let lockedSync = false, lockedAsync = false;
	const _scryptAsync = async function (passwd, salt, N, r, p, dkLen, onProgress) {
	    return await (0, scrypt_1.scryptAsync)(passwd, salt, { N, r, p, dkLen, onProgress });
	};
	const _scryptSync = function (passwd, salt, N, r, p, dkLen) {
	    return (0, scrypt_1.scrypt)(passwd, salt, { N, r, p, dkLen });
	};
	let __scryptAsync = _scryptAsync;
	let __scryptSync = _scryptSync;
	/**
	 *  The [[link-wiki-scrypt]] uses a memory and cpu hard method of
	 *  derivation to increase the resource cost to brute-force a password
	 *  for a given key.
	 *
	 *  This means this algorithm is intentionally slow, and can be tuned to
	 *  become slower. As computation and memory speed improve over time,
	 *  increasing the difficulty maintains the cost of an attacker.
	 *
	 *  For example, if a target time of 5 seconds is used, a legitimate user
	 *  which knows their password requires only 5 seconds to unlock their
	 *  account. A 6 character password has 68 billion possibilities, which
	 *  would require an attacker to invest over 10,000 years of CPU time. This
	 *  is of course a crude example (as password generally aren't random),
	 *  but demonstrates to value of imposing large costs to decryption.
	 *
	 *  For this reason, if building a UI which involved decrypting or
	 *  encrypting datsa using scrypt, it is recommended to use a
	 *  [[ProgressCallback]] (as event short periods can seem lik an eternity
	 *  if the UI freezes). Including the phrase //"decrypting"// in the UI
	 *  can also help, assuring the user their waiting is for a good reason.
	 *
	 *  @_docloc: api/crypto:Passwords
	 *
	 *  @example:
	 *    // The password must be converted to bytes, and it is generally
	 *    // best practices to ensure the string has been normalized. Many
	 *    // formats explicitly indicate the normalization form to use.
	 *    password = "hello"
	 *    passwordBytes = toUtf8Bytes(password, "NFKC")
	 *
	 *    salt = id("some-salt")
	 *
	 *    // Compute the scrypt
	 *    scrypt(passwordBytes, salt, 1024, 8, 1, 16)
	 *    //_result:
	 */
	async function scrypt(_passwd, _salt, N, r, p, dkLen, progress) {
	    const passwd = (0, index_js_1.getBytes)(_passwd, "passwd");
	    const salt = (0, index_js_1.getBytes)(_salt, "salt");
	    return (0, index_js_1.hexlify)(await __scryptAsync(passwd, salt, N, r, p, dkLen, progress));
	}
	scrypt$1.scrypt = scrypt;
	scrypt._ = _scryptAsync;
	scrypt.lock = function () { lockedAsync = true; };
	scrypt.register = function (func) {
	    if (lockedAsync) {
	        throw new Error("scrypt is locked");
	    }
	    __scryptAsync = func;
	};
	Object.freeze(scrypt);
	/**
	 *  Provides a synchronous variant of [[scrypt]].
	 *
	 *  This will completely lock up and freeze the UI in a browser and will
	 *  prevent any event loop from progressing. For this reason, it is
	 *  preferred to use the [async variant](scrypt).
	 *
	 *  @_docloc: api/crypto:Passwords
	 *
	 *  @example:
	 *    // The password must be converted to bytes, and it is generally
	 *    // best practices to ensure the string has been normalized. Many
	 *    // formats explicitly indicate the normalization form to use.
	 *    password = "hello"
	 *    passwordBytes = toUtf8Bytes(password, "NFKC")
	 *
	 *    salt = id("some-salt")
	 *
	 *    // Compute the scrypt
	 *    scryptSync(passwordBytes, salt, 1024, 8, 1, 16)
	 *    //_result:
	 */
	function scryptSync(_passwd, _salt, N, r, p, dkLen) {
	    const passwd = (0, index_js_1.getBytes)(_passwd, "passwd");
	    const salt = (0, index_js_1.getBytes)(_salt, "salt");
	    return (0, index_js_1.hexlify)(__scryptSync(passwd, salt, N, r, p, dkLen));
	}
	scrypt$1.scryptSync = scryptSync;
	scryptSync._ = _scryptSync;
	scryptSync.lock = function () { lockedSync = true; };
	scryptSync.register = function (func) {
	    if (lockedSync) {
	        throw new Error("scryptSync is locked");
	    }
	    __scryptSync = func;
	};
	Object.freeze(scryptSync);
	
	return scrypt$1;
}

var sha2 = {};

var hasRequiredSha2;

function requireSha2 () {
	if (hasRequiredSha2) return sha2;
	hasRequiredSha2 = 1;
	Object.defineProperty(sha2, "__esModule", { value: true });
	sha2.sha512 = sha2.sha256 = void 0;
	const crypto_js_1 = requireCrypto$2();
	const index_js_1 = requireUtils$3();
	const _sha256 = function (data) {
	    return (0, crypto_js_1.createHash)("sha256").update(data).digest();
	};
	const _sha512 = function (data) {
	    return (0, crypto_js_1.createHash)("sha512").update(data).digest();
	};
	let __sha256 = _sha256;
	let __sha512 = _sha512;
	let locked256 = false, locked512 = false;
	/**
	 *  Compute the cryptographic SHA2-256 hash of %%data%%.
	 *
	 *  @_docloc: api/crypto:Hash Functions
	 *  @returns DataHexstring
	 *
	 *  @example:
	 *    sha256("0x")
	 *    //_result:
	 *
	 *    sha256("0x1337")
	 *    //_result:
	 *
	 *    sha256(new Uint8Array([ 0x13, 0x37 ]))
	 *    //_result:
	 *
	 */
	function sha256(_data) {
	    const data = (0, index_js_1.getBytes)(_data, "data");
	    return (0, index_js_1.hexlify)(__sha256(data));
	}
	sha2.sha256 = sha256;
	sha256._ = _sha256;
	sha256.lock = function () { locked256 = true; };
	sha256.register = function (func) {
	    if (locked256) {
	        throw new Error("sha256 is locked");
	    }
	    __sha256 = func;
	};
	Object.freeze(sha256);
	/**
	 *  Compute the cryptographic SHA2-512 hash of %%data%%.
	 *
	 *  @_docloc: api/crypto:Hash Functions
	 *  @returns DataHexstring
	 *
	 *  @example:
	 *    sha512("0x")
	 *    //_result:
	 *
	 *    sha512("0x1337")
	 *    //_result:
	 *
	 *    sha512(new Uint8Array([ 0x13, 0x37 ]))
	 *    //_result:
	 */
	function sha512(_data) {
	    const data = (0, index_js_1.getBytes)(_data, "data");
	    return (0, index_js_1.hexlify)(__sha512(data));
	}
	sha2.sha512 = sha512;
	sha512._ = _sha512;
	sha512.lock = function () { locked512 = true; };
	sha512.register = function (func) {
	    if (locked512) {
	        throw new Error("sha512 is locked");
	    }
	    __sha512 = func;
	};
	Object.freeze(sha256);
	
	return sha2;
}

var signingKey = {};

var secp256k1$2 = {};

var modular$1 = {};

var utils$7 = {};

var hasRequiredUtils$1;

function requireUtils$1 () {
	if (hasRequiredUtils$1) return utils$7;
	hasRequiredUtils$1 = 1;
	Object.defineProperty(utils$7, "__esModule", { value: true });
	utils$7.validateObject = utils$7.createHmacDrbg = utils$7.bitMask = utils$7.bitSet = utils$7.bitGet = utils$7.bitLen = utils$7.utf8ToBytes = utils$7.equalBytes = utils$7.concatBytes = utils$7.ensureBytes = utils$7.numberToVarBytesBE = utils$7.numberToBytesLE = utils$7.numberToBytesBE = utils$7.bytesToNumberLE = utils$7.bytesToNumberBE = utils$7.hexToBytes = utils$7.hexToNumber = utils$7.numberToHexUnpadded = utils$7.bytesToHex = void 0;
	/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
	// 100 lines of code in the file are duplicated from noble-hashes (utils).
	// This is OK: `abstract` directory does not use noble-hashes.
	// User may opt-in into using different hashing library. This way, noble-hashes
	// won't be included into their bundle.
	const _0n = BigInt(0);
	const _1n = BigInt(1);
	const _2n = BigInt(2);
	const u8a = (a) => a instanceof Uint8Array;
	const hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));
	/**
	 * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'
	 */
	function bytesToHex(bytes) {
	    if (!u8a(bytes))
	        throw new Error('Uint8Array expected');
	    // pre-caching improves the speed 6x
	    let hex = '';
	    for (let i = 0; i < bytes.length; i++) {
	        hex += hexes[bytes[i]];
	    }
	    return hex;
	}
	utils$7.bytesToHex = bytesToHex;
	function numberToHexUnpadded(num) {
	    const hex = num.toString(16);
	    return hex.length & 1 ? `0${hex}` : hex;
	}
	utils$7.numberToHexUnpadded = numberToHexUnpadded;
	function hexToNumber(hex) {
	    if (typeof hex !== 'string')
	        throw new Error('hex string expected, got ' + typeof hex);
	    // Big Endian
	    return BigInt(hex === '' ? '0' : `0x${hex}`);
	}
	utils$7.hexToNumber = hexToNumber;
	/**
	 * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])
	 */
	function hexToBytes(hex) {
	    if (typeof hex !== 'string')
	        throw new Error('hex string expected, got ' + typeof hex);
	    const len = hex.length;
	    if (len % 2)
	        throw new Error('padded hex string expected, got unpadded hex of length ' + len);
	    const array = new Uint8Array(len / 2);
	    for (let i = 0; i < array.length; i++) {
	        const j = i * 2;
	        const hexByte = hex.slice(j, j + 2);
	        const byte = Number.parseInt(hexByte, 16);
	        if (Number.isNaN(byte) || byte < 0)
	            throw new Error('Invalid byte sequence');
	        array[i] = byte;
	    }
	    return array;
	}
	utils$7.hexToBytes = hexToBytes;
	// BE: Big Endian, LE: Little Endian
	function bytesToNumberBE(bytes) {
	    return hexToNumber(bytesToHex(bytes));
	}
	utils$7.bytesToNumberBE = bytesToNumberBE;
	function bytesToNumberLE(bytes) {
	    if (!u8a(bytes))
	        throw new Error('Uint8Array expected');
	    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));
	}
	utils$7.bytesToNumberLE = bytesToNumberLE;
	function numberToBytesBE(n, len) {
	    return hexToBytes(n.toString(16).padStart(len * 2, '0'));
	}
	utils$7.numberToBytesBE = numberToBytesBE;
	function numberToBytesLE(n, len) {
	    return numberToBytesBE(n, len).reverse();
	}
	utils$7.numberToBytesLE = numberToBytesLE;
	// Unpadded, rarely used
	function numberToVarBytesBE(n) {
	    return hexToBytes(numberToHexUnpadded(n));
	}
	utils$7.numberToVarBytesBE = numberToVarBytesBE;
	/**
	 * Takes hex string or Uint8Array, converts to Uint8Array.
	 * Validates output length.
	 * Will throw error for other types.
	 * @param title descriptive title for an error e.g. 'private key'
	 * @param hex hex string or Uint8Array
	 * @param expectedLength optional, will compare to result array's length
	 * @returns
	 */
	function ensureBytes(title, hex, expectedLength) {
	    let res;
	    if (typeof hex === 'string') {
	        try {
	            res = hexToBytes(hex);
	        }
	        catch (e) {
	            throw new Error(`${title} must be valid hex string, got "${hex}". Cause: ${e}`);
	        }
	    }
	    else if (u8a(hex)) {
	        // Uint8Array.from() instead of hash.slice() because node.js Buffer
	        // is instance of Uint8Array, and its slice() creates **mutable** copy
	        res = Uint8Array.from(hex);
	    }
	    else {
	        throw new Error(`${title} must be hex string or Uint8Array`);
	    }
	    const len = res.length;
	    if (typeof expectedLength === 'number' && len !== expectedLength)
	        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);
	    return res;
	}
	utils$7.ensureBytes = ensureBytes;
	/**
	 * Copies several Uint8Arrays into one.
	 */
	function concatBytes(...arrays) {
	    const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));
	    let pad = 0; // walk through each item, ensure they have proper type
	    arrays.forEach((a) => {
	        if (!u8a(a))
	            throw new Error('Uint8Array expected');
	        r.set(a, pad);
	        pad += a.length;
	    });
	    return r;
	}
	utils$7.concatBytes = concatBytes;
	function equalBytes(b1, b2) {
	    // We don't care about timing attacks here
	    if (b1.length !== b2.length)
	        return false;
	    for (let i = 0; i < b1.length; i++)
	        if (b1[i] !== b2[i])
	            return false;
	    return true;
	}
	utils$7.equalBytes = equalBytes;
	/**
	 * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])
	 */
	function utf8ToBytes(str) {
	    if (typeof str !== 'string')
	        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
	    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809
	}
	utils$7.utf8ToBytes = utf8ToBytes;
	// Bit operations
	/**
	 * Calculates amount of bits in a bigint.
	 * Same as `n.toString(2).length`
	 */
	function bitLen(n) {
	    let len;
	    for (len = 0; n > _0n; n >>= _1n, len += 1)
	        ;
	    return len;
	}
	utils$7.bitLen = bitLen;
	/**
	 * Gets single bit at position.
	 * NOTE: first bit position is 0 (same as arrays)
	 * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`
	 */
	function bitGet(n, pos) {
	    return (n >> BigInt(pos)) & _1n;
	}
	utils$7.bitGet = bitGet;
	/**
	 * Sets single bit at position.
	 */
	const bitSet = (n, pos, value) => {
	    return n | ((value ? _1n : _0n) << BigInt(pos));
	};
	utils$7.bitSet = bitSet;
	/**
	 * Calculate mask for N bits. Not using ** operator with bigints because of old engines.
	 * Same as BigInt(`0b${Array(i).fill('1').join('')}`)
	 */
	const bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;
	utils$7.bitMask = bitMask;
	// DRBG
	const u8n = (data) => new Uint8Array(data); // creates Uint8Array
	const u8fr = (arr) => Uint8Array.from(arr); // another shortcut
	/**
	 * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.
	 * @returns function that will call DRBG until 2nd arg returns something meaningful
	 * @example
	 *   const drbg = createHmacDRBG<Key>(32, 32, hmac);
	 *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined
	 */
	function createHmacDrbg(hashLen, qByteLen, hmacFn) {
	    if (typeof hashLen !== 'number' || hashLen < 2)
	        throw new Error('hashLen must be a number');
	    if (typeof qByteLen !== 'number' || qByteLen < 2)
	        throw new Error('qByteLen must be a number');
	    if (typeof hmacFn !== 'function')
	        throw new Error('hmacFn must be a function');
	    // Step B, Step C: set hashLen to 8*ceil(hlen/8)
	    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.
	    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same
	    let i = 0; // Iterations counter, will throw when over 1000
	    const reset = () => {
	        v.fill(1);
	        k.fill(0);
	        i = 0;
	    };
	    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)
	    const reseed = (seed = u8n()) => {
	        // HMAC-DRBG reseed() function. Steps D-G
	        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)
	        v = h(); // v = hmac(k || v)
	        if (seed.length === 0)
	            return;
	        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)
	        v = h(); // v = hmac(k || v)
	    };
	    const gen = () => {
	        // HMAC-DRBG generate() function
	        if (i++ >= 1000)
	            throw new Error('drbg: tried 1000 values');
	        let len = 0;
	        const out = [];
	        while (len < qByteLen) {
	            v = h();
	            const sl = v.slice();
	            out.push(sl);
	            len += v.length;
	        }
	        return concatBytes(...out);
	    };
	    const genUntil = (seed, pred) => {
	        reset();
	        reseed(seed); // Steps D-G
	        let res = undefined; // Step H: grind until k is in [1..n-1]
	        while (!(res = pred(gen())))
	            reseed();
	        reset();
	        return res;
	    };
	    return genUntil;
	}
	utils$7.createHmacDrbg = createHmacDrbg;
	// Validating curves and fields
	const validatorFns = {
	    bigint: (val) => typeof val === 'bigint',
	    function: (val) => typeof val === 'function',
	    boolean: (val) => typeof val === 'boolean',
	    string: (val) => typeof val === 'string',
	    stringOrUint8Array: (val) => typeof val === 'string' || val instanceof Uint8Array,
	    isSafeInteger: (val) => Number.isSafeInteger(val),
	    array: (val) => Array.isArray(val),
	    field: (val, object) => object.Fp.isValid(val),
	    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),
	};
	// type Record<K extends string | number | symbol, T> = { [P in K]: T; }
	function validateObject(object, validators, optValidators = {}) {
	    const checkField = (fieldName, type, isOptional) => {
	        const checkVal = validatorFns[type];
	        if (typeof checkVal !== 'function')
	            throw new Error(`Invalid validator "${type}", expected function`);
	        const val = object[fieldName];
	        if (isOptional && val === undefined)
	            return;
	        if (!checkVal(val, object)) {
	            throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);
	        }
	    };
	    for (const [fieldName, type] of Object.entries(validators))
	        checkField(fieldName, type, false);
	    for (const [fieldName, type] of Object.entries(optValidators))
	        checkField(fieldName, type, true);
	    return object;
	}
	utils$7.validateObject = validateObject;
	// validate type tests
	// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };
	// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!
	// // Should fail type-check
	// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });
	// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });
	// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });
	// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });
	
	return utils$7;
}

var hasRequiredModular;

function requireModular () {
	if (hasRequiredModular) return modular$1;
	hasRequiredModular = 1;
	Object.defineProperty(modular$1, "__esModule", { value: true });
	modular$1.mapHashToField = modular$1.getMinHashLength = modular$1.getFieldBytesLength = modular$1.hashToPrivateScalar = modular$1.FpSqrtEven = modular$1.FpSqrtOdd = modular$1.Field = modular$1.nLength = modular$1.FpIsSquare = modular$1.FpDiv = modular$1.FpInvertBatch = modular$1.FpPow = modular$1.validateField = modular$1.isNegativeLE = modular$1.FpSqrt = modular$1.tonelliShanks = modular$1.invert = modular$1.pow2 = modular$1.pow = modular$1.mod = void 0;
	/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
	// Utilities for modular arithmetics and finite fields
	const utils_js_1 = requireUtils$1();
	// prettier-ignore
	const _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);
	// prettier-ignore
	const _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);
	// prettier-ignore
	BigInt(9); BigInt(16);
	// Calculates a modulo b
	function mod(a, b) {
	    const result = a % b;
	    return result >= _0n ? result : b + result;
	}
	modular$1.mod = mod;
	/**
	 * Efficiently raise num to power and do modular division.
	 * Unsafe in some contexts: uses ladder, so can expose bigint bits.
	 * @example
	 * pow(2n, 6n, 11n) // 64n % 11n == 9n
	 */
	// TODO: use field version && remove
	function pow(num, power, modulo) {
	    if (modulo <= _0n || power < _0n)
	        throw new Error('Expected power/modulo > 0');
	    if (modulo === _1n)
	        return _0n;
	    let res = _1n;
	    while (power > _0n) {
	        if (power & _1n)
	            res = (res * num) % modulo;
	        num = (num * num) % modulo;
	        power >>= _1n;
	    }
	    return res;
	}
	modular$1.pow = pow;
	// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)
	function pow2(x, power, modulo) {
	    let res = x;
	    while (power-- > _0n) {
	        res *= res;
	        res %= modulo;
	    }
	    return res;
	}
	modular$1.pow2 = pow2;
	// Inverses number over modulo
	function invert(number, modulo) {
	    if (number === _0n || modulo <= _0n) {
	        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);
	    }
	    // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/
	    // Fermat's little theorem "CT-like" version inv(n) = n^(m-2) mod m is 30x slower.
	    let a = mod(number, modulo);
	    let b = modulo;
	    // prettier-ignore
	    let x = _0n, u = _1n;
	    while (a !== _0n) {
	        // JIT applies optimization if those two lines follow each other
	        const q = b / a;
	        const r = b % a;
	        const m = x - u * q;
	        // prettier-ignore
	        b = a, a = r, x = u, u = m;
	    }
	    const gcd = b;
	    if (gcd !== _1n)
	        throw new Error('invert: does not exist');
	    return mod(x, modulo);
	}
	modular$1.invert = invert;
	/**
	 * Tonelli-Shanks square root search algorithm.
	 * 1. https://eprint.iacr.org/2012/685.pdf (page 12)
	 * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks
	 * Will start an infinite loop if field order P is not prime.
	 * @param P field order
	 * @returns function that takes field Fp (created from P) and number n
	 */
	function tonelliShanks(P) {
	    // Legendre constant: used to calculate Legendre symbol (a | p),
	    // which denotes the value of a^((p-1)/2) (mod p).
	    // (a | p) ≡ 1    if a is a square (mod p)
	    // (a | p) ≡ -1   if a is not a square (mod p)
	    // (a | p) ≡ 0    if a ≡ 0 (mod p)
	    const legendreC = (P - _1n) / _2n;
	    let Q, S, Z;
	    // Step 1: By factoring out powers of 2 from p - 1,
	    // find q and s such that p - 1 = q*(2^s) with q odd
	    for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)
	        ;
	    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq
	    for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++)
	        ;
	    // Fast-path
	    if (S === 1) {
	        const p1div4 = (P + _1n) / _4n;
	        return function tonelliFast(Fp, n) {
	            const root = Fp.pow(n, p1div4);
	            if (!Fp.eql(Fp.sqr(root), n))
	                throw new Error('Cannot find square root');
	            return root;
	        };
	    }
	    // Slow-path
	    const Q1div2 = (Q + _1n) / _2n;
	    return function tonelliSlow(Fp, n) {
	        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1
	        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))
	            throw new Error('Cannot find square root');
	        let r = S;
	        // TODO: will fail at Fp2/etc
	        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b
	        let x = Fp.pow(n, Q1div2); // first guess at the square root
	        let b = Fp.pow(n, Q); // first guess at the fudge factor
	        while (!Fp.eql(b, Fp.ONE)) {
	            if (Fp.eql(b, Fp.ZERO))
	                return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)
	            // Find m such b^(2^m)==1
	            let m = 1;
	            for (let t2 = Fp.sqr(b); m < r; m++) {
	                if (Fp.eql(t2, Fp.ONE))
	                    break;
	                t2 = Fp.sqr(t2); // t2 *= t2
	            }
	            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow
	            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)
	            g = Fp.sqr(ge); // g = ge * ge
	            x = Fp.mul(x, ge); // x *= ge
	            b = Fp.mul(b, g); // b *= g
	            r = m;
	        }
	        return x;
	    };
	}
	modular$1.tonelliShanks = tonelliShanks;
	function FpSqrt(P) {
	    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.
	    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).
	    // P ≡ 3 (mod 4)
	    // √n = n^((P+1)/4)
	    if (P % _4n === _3n) {
	        // Not all roots possible!
	        // const ORDER =
	        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;
	        // const NUM = 72057594037927816n;
	        const p1div4 = (P + _1n) / _4n;
	        return function sqrt3mod4(Fp, n) {
	            const root = Fp.pow(n, p1div4);
	            // Throw if root**2 != n
	            if (!Fp.eql(Fp.sqr(root), n))
	                throw new Error('Cannot find square root');
	            return root;
	        };
	    }
	    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)
	    if (P % _8n === _5n) {
	        const c1 = (P - _5n) / _8n;
	        return function sqrt5mod8(Fp, n) {
	            const n2 = Fp.mul(n, _2n);
	            const v = Fp.pow(n2, c1);
	            const nv = Fp.mul(n, v);
	            const i = Fp.mul(Fp.mul(nv, _2n), v);
	            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));
	            if (!Fp.eql(Fp.sqr(root), n))
	                throw new Error('Cannot find square root');
	            return root;
	        };
	    }
	    // Other cases: Tonelli-Shanks algorithm
	    return tonelliShanks(P);
	}
	modular$1.FpSqrt = FpSqrt;
	// Little-endian check for first LE bit (last BE bit);
	const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;
	modular$1.isNegativeLE = isNegativeLE;
	// prettier-ignore
	const FIELD_FIELDS = [
	    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',
	    'eql', 'add', 'sub', 'mul', 'pow', 'div',
	    'addN', 'subN', 'mulN', 'sqrN'
	];
	function validateField(field) {
	    const initial = {
	        ORDER: 'bigint',
	        MASK: 'bigint',
	        BYTES: 'isSafeInteger',
	        BITS: 'isSafeInteger',
	    };
	    const opts = FIELD_FIELDS.reduce((map, val) => {
	        map[val] = 'function';
	        return map;
	    }, initial);
	    return (0, utils_js_1.validateObject)(field, opts);
	}
	modular$1.validateField = validateField;
	// Generic field functions
	/**
	 * Same as `pow` but for Fp: non-constant-time.
	 * Unsafe in some contexts: uses ladder, so can expose bigint bits.
	 */
	function FpPow(f, num, power) {
	    // Should have same speed as pow for bigints
	    // TODO: benchmark!
	    if (power < _0n)
	        throw new Error('Expected power > 0');
	    if (power === _0n)
	        return f.ONE;
	    if (power === _1n)
	        return num;
	    let p = f.ONE;
	    let d = num;
	    while (power > _0n) {
	        if (power & _1n)
	            p = f.mul(p, d);
	        d = f.sqr(d);
	        power >>= _1n;
	    }
	    return p;
	}
	modular$1.FpPow = FpPow;
	/**
	 * Efficiently invert an array of Field elements.
	 * `inv(0)` will return `undefined` here: make sure to throw an error.
	 */
	function FpInvertBatch(f, nums) {
	    const tmp = new Array(nums.length);
	    // Walk from first to last, multiply them by each other MOD p
	    const lastMultiplied = nums.reduce((acc, num, i) => {
	        if (f.is0(num))
	            return acc;
	        tmp[i] = acc;
	        return f.mul(acc, num);
	    }, f.ONE);
	    // Invert last element
	    const inverted = f.inv(lastMultiplied);
	    // Walk from last to first, multiply them by inverted each other MOD p
	    nums.reduceRight((acc, num, i) => {
	        if (f.is0(num))
	            return acc;
	        tmp[i] = f.mul(acc, tmp[i]);
	        return f.mul(acc, num);
	    }, inverted);
	    return tmp;
	}
	modular$1.FpInvertBatch = FpInvertBatch;
	function FpDiv(f, lhs, rhs) {
	    return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));
	}
	modular$1.FpDiv = FpDiv;
	// This function returns True whenever the value x is a square in the field F.
	function FpIsSquare(f) {
	    const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic
	    return (x) => {
	        const p = f.pow(x, legendreConst);
	        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);
	    };
	}
	modular$1.FpIsSquare = FpIsSquare;
	// CURVE.n lengths
	function nLength(n, nBitLength) {
	    // Bit size, byte size of CURVE.n
	    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;
	    const nByteLength = Math.ceil(_nBitLength / 8);
	    return { nBitLength: _nBitLength, nByteLength };
	}
	modular$1.nLength = nLength;
	/**
	 * Initializes a finite field over prime. **Non-primes are not supported.**
	 * Do not init in loop: slow. Very fragile: always run a benchmark on a change.
	 * Major performance optimizations:
	 * * a) denormalized operations like mulN instead of mul
	 * * b) same object shape: never add or remove keys
	 * * c) Object.freeze
	 * @param ORDER prime positive bigint
	 * @param bitLen how many bits the field consumes
	 * @param isLE (def: false) if encoding / decoding should be in little-endian
	 * @param redef optional faster redefinitions of sqrt and other methods
	 */
	function Field(ORDER, bitLen, isLE = false, redef = {}) {
	    if (ORDER <= _0n)
	        throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);
	    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);
	    if (BYTES > 2048)
	        throw new Error('Field lengths over 2048 bytes are not supported');
	    const sqrtP = FpSqrt(ORDER);
	    const f = Object.freeze({
	        ORDER,
	        BITS,
	        BYTES,
	        MASK: (0, utils_js_1.bitMask)(BITS),
	        ZERO: _0n,
	        ONE: _1n,
	        create: (num) => mod(num, ORDER),
	        isValid: (num) => {
	            if (typeof num !== 'bigint')
	                throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);
	            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible
	        },
	        is0: (num) => num === _0n,
	        isOdd: (num) => (num & _1n) === _1n,
	        neg: (num) => mod(-num, ORDER),
	        eql: (lhs, rhs) => lhs === rhs,
	        sqr: (num) => mod(num * num, ORDER),
	        add: (lhs, rhs) => mod(lhs + rhs, ORDER),
	        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),
	        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),
	        pow: (num, power) => FpPow(f, num, power),
	        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),
	        // Same as above, but doesn't normalize
	        sqrN: (num) => num * num,
	        addN: (lhs, rhs) => lhs + rhs,
	        subN: (lhs, rhs) => lhs - rhs,
	        mulN: (lhs, rhs) => lhs * rhs,
	        inv: (num) => invert(num, ORDER),
	        sqrt: redef.sqrt || ((n) => sqrtP(f, n)),
	        invertBatch: (lst) => FpInvertBatch(f, lst),
	        // TODO: do we really need constant cmov?
	        // We don't have const-time bigints anyway, so probably will be not very useful
	        cmov: (a, b, c) => (c ? b : a),
	        toBytes: (num) => (isLE ? (0, utils_js_1.numberToBytesLE)(num, BYTES) : (0, utils_js_1.numberToBytesBE)(num, BYTES)),
	        fromBytes: (bytes) => {
	            if (bytes.length !== BYTES)
	                throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);
	            return isLE ? (0, utils_js_1.bytesToNumberLE)(bytes) : (0, utils_js_1.bytesToNumberBE)(bytes);
	        },
	    });
	    return Object.freeze(f);
	}
	modular$1.Field = Field;
	function FpSqrtOdd(Fp, elm) {
	    if (!Fp.isOdd)
	        throw new Error(`Field doesn't have isOdd`);
	    const root = Fp.sqrt(elm);
	    return Fp.isOdd(root) ? root : Fp.neg(root);
	}
	modular$1.FpSqrtOdd = FpSqrtOdd;
	function FpSqrtEven(Fp, elm) {
	    if (!Fp.isOdd)
	        throw new Error(`Field doesn't have isOdd`);
	    const root = Fp.sqrt(elm);
	    return Fp.isOdd(root) ? Fp.neg(root) : root;
	}
	modular$1.FpSqrtEven = FpSqrtEven;
	/**
	 * "Constant-time" private key generation utility.
	 * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).
	 * Which makes it slightly more biased, less secure.
	 * @deprecated use mapKeyToField instead
	 */
	function hashToPrivateScalar(hash, groupOrder, isLE = false) {
	    hash = (0, utils_js_1.ensureBytes)('privateHash', hash);
	    const hashLen = hash.length;
	    const minLen = nLength(groupOrder).nByteLength + 8;
	    if (minLen < 24 || hashLen < minLen || hashLen > 1024)
	        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);
	    const num = isLE ? (0, utils_js_1.bytesToNumberLE)(hash) : (0, utils_js_1.bytesToNumberBE)(hash);
	    return mod(num, groupOrder - _1n) + _1n;
	}
	modular$1.hashToPrivateScalar = hashToPrivateScalar;
	/**
	 * Returns total number of bytes consumed by the field element.
	 * For example, 32 bytes for usual 256-bit weierstrass curve.
	 * @param fieldOrder number of field elements, usually CURVE.n
	 * @returns byte length of field
	 */
	function getFieldBytesLength(fieldOrder) {
	    if (typeof fieldOrder !== 'bigint')
	        throw new Error('field order must be bigint');
	    const bitLength = fieldOrder.toString(2).length;
	    return Math.ceil(bitLength / 8);
	}
	modular$1.getFieldBytesLength = getFieldBytesLength;
	/**
	 * Returns minimal amount of bytes that can be safely reduced
	 * by field order.
	 * Should be 2^-128 for 128-bit curve such as P256.
	 * @param fieldOrder number of field elements, usually CURVE.n
	 * @returns byte length of target hash
	 */
	function getMinHashLength(fieldOrder) {
	    const length = getFieldBytesLength(fieldOrder);
	    return length + Math.ceil(length / 2);
	}
	modular$1.getMinHashLength = getMinHashLength;
	/**
	 * "Constant-time" private key generation utility.
	 * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF
	 * and convert them into private scalar, with the modulo bias being negligible.
	 * Needs at least 48 bytes of input for 32-byte private key.
	 * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/
	 * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final
	 * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5
	 * @param hash hash output from SHA3 or a similar function
	 * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)
	 * @param isLE interpret hash bytes as LE num
	 * @returns valid private scalar
	 */
	function mapHashToField(key, fieldOrder, isLE = false) {
	    const len = key.length;
	    const fieldLen = getFieldBytesLength(fieldOrder);
	    const minLen = getMinHashLength(fieldOrder);
	    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.
	    if (len < 16 || len < minLen || len > 1024)
	        throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);
	    const num = isLE ? (0, utils_js_1.bytesToNumberBE)(key) : (0, utils_js_1.bytesToNumberLE)(key);
	    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0
	    const reduced = mod(num, fieldOrder - _1n) + _1n;
	    return isLE ? (0, utils_js_1.numberToBytesLE)(reduced, fieldLen) : (0, utils_js_1.numberToBytesBE)(reduced, fieldLen);
	}
	modular$1.mapHashToField = mapHashToField;
	
	return modular$1;
}

var weierstrass$1 = {};

var curve$1 = {};

var hasRequiredCurve;

function requireCurve () {
	if (hasRequiredCurve) return curve$1;
	hasRequiredCurve = 1;
	Object.defineProperty(curve$1, "__esModule", { value: true });
	curve$1.validateBasic = curve$1.wNAF = void 0;
	/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
	// Abelian group utilities
	const modular_js_1 = requireModular();
	const utils_js_1 = requireUtils$1();
	const _0n = BigInt(0);
	const _1n = BigInt(1);
	// Elliptic curve multiplication of Point by scalar. Fragile.
	// Scalars should always be less than curve order: this should be checked inside of a curve itself.
	// Creates precomputation tables for fast multiplication:
	// - private scalar is split by fixed size windows of W bits
	// - every window point is collected from window's table & added to accumulator
	// - since windows are different, same point inside tables won't be accessed more than once per calc
	// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)
	// - +1 window is neccessary for wNAF
	// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication
	// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow
	// windows to be in different memory locations
	function wNAF(c, bits) {
	    const constTimeNegate = (condition, item) => {
	        const neg = item.negate();
	        return condition ? neg : item;
	    };
	    const opts = (W) => {
	        const windows = Math.ceil(bits / W) + 1; // +1, because
	        const windowSize = 2 ** (W - 1); // -1 because we skip zero
	        return { windows, windowSize };
	    };
	    return {
	        constTimeNegate,
	        // non-const time multiplication ladder
	        unsafeLadder(elm, n) {
	            let p = c.ZERO;
	            let d = elm;
	            while (n > _0n) {
	                if (n & _1n)
	                    p = p.add(d);
	                d = d.double();
	                n >>= _1n;
	            }
	            return p;
	        },
	        /**
	         * Creates a wNAF precomputation window. Used for caching.
	         * Default window size is set by `utils.precompute()` and is equal to 8.
	         * Number of precomputed points depends on the curve size:
	         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
	         * - 𝑊 is the window size
	         * - 𝑛 is the bitlength of the curve order.
	         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
	         * @returns precomputed point tables flattened to a single array
	         */
	        precomputeWindow(elm, W) {
	            const { windows, windowSize } = opts(W);
	            const points = [];
	            let p = elm;
	            let base = p;
	            for (let window = 0; window < windows; window++) {
	                base = p;
	                points.push(base);
	                // =1, because we skip zero
	                for (let i = 1; i < windowSize; i++) {
	                    base = base.add(p);
	                    points.push(base);
	                }
	                p = base.double();
	            }
	            return points;
	        },
	        /**
	         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
	         * @param W window size
	         * @param precomputes precomputed tables
	         * @param n scalar (we don't check here, but should be less than curve order)
	         * @returns real and fake (for const-time) points
	         */
	        wNAF(W, precomputes, n) {
	            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise
	            // But need to carefully remove other checks before wNAF. ORDER == bits here
	            const { windows, windowSize } = opts(W);
	            let p = c.ZERO;
	            let f = c.BASE;
	            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.
	            const maxNumber = 2 ** W;
	            const shiftBy = BigInt(W);
	            for (let window = 0; window < windows; window++) {
	                const offset = window * windowSize;
	                // Extract W bits.
	                let wbits = Number(n & mask);
	                // Shift number by W bits.
	                n >>= shiftBy;
	                // If the bits are bigger than max size, we'll split those.
	                // +224 => 256 - 32
	                if (wbits > windowSize) {
	                    wbits -= maxNumber;
	                    n += _1n;
	                }
	                // This code was first written with assumption that 'f' and 'p' will never be infinity point:
	                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,
	                // there is negate now: it is possible that negated element from low value
	                // would be the same as high element, which will create carry into next window.
	                // It's not obvious how this can fail, but still worth investigating later.
	                // Check if we're onto Zero point.
	                // Add random point inside current window to f.
	                const offset1 = offset;
	                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero
	                const cond1 = window % 2 !== 0;
	                const cond2 = wbits < 0;
	                if (wbits === 0) {
	                    // The most important part for const-time getPublicKey
	                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));
	                }
	                else {
	                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));
	                }
	            }
	            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()
	            // Even if the variable is still unused, there are some checks which will
	            // throw an exception, so compiler needs to prove they won't happen, which is hard.
	            // At this point there is a way to F be infinity-point even if p is not,
	            // which makes it less const-time: around 1 bigint multiply.
	            return { p, f };
	        },
	        wNAFCached(P, precomputesMap, n, transform) {
	            // @ts-ignore
	            const W = P._WINDOW_SIZE || 1;
	            // Calculate precomputes on a first run, reuse them after
	            let comp = precomputesMap.get(P);
	            if (!comp) {
	                comp = this.precomputeWindow(P, W);
	                if (W !== 1) {
	                    precomputesMap.set(P, transform(comp));
	                }
	            }
	            return this.wNAF(W, comp, n);
	        },
	    };
	}
	curve$1.wNAF = wNAF;
	function validateBasic(curve) {
	    (0, modular_js_1.validateField)(curve.Fp);
	    (0, utils_js_1.validateObject)(curve, {
	        n: 'bigint',
	        h: 'bigint',
	        Gx: 'field',
	        Gy: 'field',
	    }, {
	        nBitLength: 'isSafeInteger',
	        nByteLength: 'isSafeInteger',
	    });
	    // Set defaults
	    return Object.freeze({
	        ...(0, modular_js_1.nLength)(curve.n, curve.nBitLength),
	        ...curve,
	        ...{ p: curve.Fp.ORDER },
	    });
	}
	curve$1.validateBasic = validateBasic;
	
	return curve$1;
}

var hasRequiredWeierstrass;

function requireWeierstrass () {
	if (hasRequiredWeierstrass) return weierstrass$1;
	hasRequiredWeierstrass = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.mapToCurveSimpleSWU = exports.SWUFpSqrtRatio = exports.weierstrass = exports.weierstrassPoints = exports.DER = void 0;
		/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
		// Short Weierstrass curve. The formula is: y² = x³ + ax + b
		const mod = requireModular();
		const ut = requireUtils$1();
		const utils_js_1 = requireUtils$1();
		const curve_js_1 = requireCurve();
		function validatePointOpts(curve) {
		    const opts = (0, curve_js_1.validateBasic)(curve);
		    ut.validateObject(opts, {
		        a: 'field',
		        b: 'field',
		    }, {
		        allowedPrivateKeyLengths: 'array',
		        wrapPrivateKey: 'boolean',
		        isTorsionFree: 'function',
		        clearCofactor: 'function',
		        allowInfinityPoint: 'boolean',
		        fromBytes: 'function',
		        toBytes: 'function',
		    });
		    const { endo, Fp, a } = opts;
		    if (endo) {
		        if (!Fp.eql(a, Fp.ZERO)) {
		            throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');
		        }
		        if (typeof endo !== 'object' ||
		            typeof endo.beta !== 'bigint' ||
		            typeof endo.splitScalar !== 'function') {
		            throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');
		        }
		    }
		    return Object.freeze({ ...opts });
		}
		// ASN.1 DER encoding utilities
		const { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;
		exports.DER = {
		    // asn.1 DER encoding utils
		    Err: class DERErr extends Error {
		        constructor(m = '') {
		            super(m);
		        }
		    },
		    _parseInt(data) {
		        const { Err: E } = exports.DER;
		        if (data.length < 2 || data[0] !== 0x02)
		            throw new E('Invalid signature integer tag');
		        const len = data[1];
		        const res = data.subarray(2, len + 2);
		        if (!len || res.length !== len)
		            throw new E('Invalid signature integer: wrong length');
		        // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,
		        // since we always use positive integers here. It must always be empty:
		        // - add zero byte if exists
		        // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)
		        if (res[0] & 0b10000000)
		            throw new E('Invalid signature integer: negative');
		        if (res[0] === 0x00 && !(res[1] & 0b10000000))
		            throw new E('Invalid signature integer: unnecessary leading zero');
		        return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left
		    },
		    toSig(hex) {
		        // parse DER signature
		        const { Err: E } = exports.DER;
		        const data = typeof hex === 'string' ? h2b(hex) : hex;
		        if (!(data instanceof Uint8Array))
		            throw new Error('ui8a expected');
		        let l = data.length;
		        if (l < 2 || data[0] != 0x30)
		            throw new E('Invalid signature tag');
		        if (data[1] !== l - 2)
		            throw new E('Invalid signature: incorrect length');
		        const { d: r, l: sBytes } = exports.DER._parseInt(data.subarray(2));
		        const { d: s, l: rBytesLeft } = exports.DER._parseInt(sBytes);
		        if (rBytesLeft.length)
		            throw new E('Invalid signature: left bytes after parsing');
		        return { r, s };
		    },
		    hexFromSig(sig) {
		        // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'
		        const slice = (s) => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);
		        const h = (num) => {
		            const hex = num.toString(16);
		            return hex.length & 1 ? `0${hex}` : hex;
		        };
		        const s = slice(h(sig.s));
		        const r = slice(h(sig.r));
		        const shl = s.length / 2;
		        const rhl = r.length / 2;
		        const sl = h(shl);
		        const rl = h(rhl);
		        return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;
		    },
		};
		// Be friendly to bad ECMAScript parsers by not using bigint literals
		// prettier-ignore
		const _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);
		function weierstrassPoints(opts) {
		    const CURVE = validatePointOpts(opts);
		    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ
		    const toBytes = CURVE.toBytes ||
		        ((_c, point, _isCompressed) => {
		            const a = point.toAffine();
		            return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));
		        });
		    const fromBytes = CURVE.fromBytes ||
		        ((bytes) => {
		            // const head = bytes[0];
		            const tail = bytes.subarray(1);
		            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');
		            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
		            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
		            return { x, y };
		        });
		    /**
		     * y² = x³ + ax + b: Short weierstrass curve formula
		     * @returns y²
		     */
		    function weierstrassEquation(x) {
		        const { a, b } = CURVE;
		        const x2 = Fp.sqr(x); // x * x
		        const x3 = Fp.mul(x2, x); // x2 * x
		        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b
		    }
		    // Validate whether the passed curve params are valid.
		    // We check if curve equation works for generator point.
		    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.
		    // ProjectivePoint class has not been initialized yet.
		    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))
		        throw new Error('bad generator point: equation left != right');
		    // Valid group elements reside in range 1..n-1
		    function isWithinCurveOrder(num) {
		        return typeof num === 'bigint' && _0n < num && num < CURVE.n;
		    }
		    function assertGE(num) {
		        if (!isWithinCurveOrder(num))
		            throw new Error('Expected valid bigint: 0 < bigint < curve.n');
		    }
		    // Validates if priv key is valid and converts it to bigint.
		    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.
		    function normPrivateKeyToScalar(key) {
		        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;
		        if (lengths && typeof key !== 'bigint') {
		            if (key instanceof Uint8Array)
		                key = ut.bytesToHex(key);
		            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes
		            if (typeof key !== 'string' || !lengths.includes(key.length))
		                throw new Error('Invalid key');
		            key = key.padStart(nByteLength * 2, '0');
		        }
		        let num;
		        try {
		            num =
		                typeof key === 'bigint'
		                    ? key
		                    : ut.bytesToNumberBE((0, utils_js_1.ensureBytes)('private key', key, nByteLength));
		        }
		        catch (error) {
		            throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);
		        }
		        if (wrapPrivateKey)
		            num = mod.mod(num, n); // disabled by default, enabled for BLS
		        assertGE(num); // num in range [1..N-1]
		        return num;
		    }
		    const pointPrecomputes = new Map();
		    function assertPrjPoint(other) {
		        if (!(other instanceof Point))
		            throw new Error('ProjectivePoint expected');
		    }
		    /**
		     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)
		     * Default Point works in 2d / affine coordinates: (x, y)
		     * We're doing calculations in projective, because its operations don't require costly inversion.
		     */
		    class Point {
		        constructor(px, py, pz) {
		            this.px = px;
		            this.py = py;
		            this.pz = pz;
		            if (px == null || !Fp.isValid(px))
		                throw new Error('x required');
		            if (py == null || !Fp.isValid(py))
		                throw new Error('y required');
		            if (pz == null || !Fp.isValid(pz))
		                throw new Error('z required');
		        }
		        // Does not validate if the point is on-curve.
		        // Use fromHex instead, or call assertValidity() later.
		        static fromAffine(p) {
		            const { x, y } = p || {};
		            if (!p || !Fp.isValid(x) || !Fp.isValid(y))
		                throw new Error('invalid affine point');
		            if (p instanceof Point)
		                throw new Error('projective point not allowed');
		            const is0 = (i) => Fp.eql(i, Fp.ZERO);
		            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)
		            if (is0(x) && is0(y))
		                return Point.ZERO;
		            return new Point(x, y, Fp.ONE);
		        }
		        get x() {
		            return this.toAffine().x;
		        }
		        get y() {
		            return this.toAffine().y;
		        }
		        /**
		         * Takes a bunch of Projective Points but executes only one
		         * inversion on all of them. Inversion is very slow operation,
		         * so this improves performance massively.
		         * Optimization: converts a list of projective points to a list of identical points with Z=1.
		         */
		        static normalizeZ(points) {
		            const toInv = Fp.invertBatch(points.map((p) => p.pz));
		            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);
		        }
		        /**
		         * Converts hash string or Uint8Array to Point.
		         * @param hex short/long ECDSA hex
		         */
		        static fromHex(hex) {
		            const P = Point.fromAffine(fromBytes((0, utils_js_1.ensureBytes)('pointHex', hex)));
		            P.assertValidity();
		            return P;
		        }
		        // Multiplies generator point by privateKey.
		        static fromPrivateKey(privateKey) {
		            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));
		        }
		        // "Private method", don't use it directly
		        _setWindowSize(windowSize) {
		            this._WINDOW_SIZE = windowSize;
		            pointPrecomputes.delete(this);
		        }
		        // A point on curve is valid if it conforms to equation.
		        assertValidity() {
		            if (this.is0()) {
		                // (0, 1, 0) aka ZERO is invalid in most contexts.
		                // In BLS, ZERO can be serialized, so we allow it.
		                // (0, 0, 0) is wrong representation of ZERO and is always invalid.
		                if (CURVE.allowInfinityPoint && !Fp.is0(this.py))
		                    return;
		                throw new Error('bad point: ZERO');
		            }
		            // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`
		            const { x, y } = this.toAffine();
		            // Check if x, y are valid field elements
		            if (!Fp.isValid(x) || !Fp.isValid(y))
		                throw new Error('bad point: x or y not FE');
		            const left = Fp.sqr(y); // y²
		            const right = weierstrassEquation(x); // x³ + ax + b
		            if (!Fp.eql(left, right))
		                throw new Error('bad point: equation left != right');
		            if (!this.isTorsionFree())
		                throw new Error('bad point: not in prime-order subgroup');
		        }
		        hasEvenY() {
		            const { y } = this.toAffine();
		            if (Fp.isOdd)
		                return !Fp.isOdd(y);
		            throw new Error("Field doesn't support isOdd");
		        }
		        /**
		         * Compare one point to another.
		         */
		        equals(other) {
		            assertPrjPoint(other);
		            const { px: X1, py: Y1, pz: Z1 } = this;
		            const { px: X2, py: Y2, pz: Z2 } = other;
		            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));
		            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));
		            return U1 && U2;
		        }
		        /**
		         * Flips point to one corresponding to (x, -y) in Affine coordinates.
		         */
		        negate() {
		            return new Point(this.px, Fp.neg(this.py), this.pz);
		        }
		        // Renes-Costello-Batina exception-free doubling formula.
		        // There is 30% faster Jacobian formula, but it is not complete.
		        // https://eprint.iacr.org/2015/1060, algorithm 3
		        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
		        double() {
		            const { a, b } = CURVE;
		            const b3 = Fp.mul(b, _3n);
		            const { px: X1, py: Y1, pz: Z1 } = this;
		            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore
		            let t0 = Fp.mul(X1, X1); // step 1
		            let t1 = Fp.mul(Y1, Y1);
		            let t2 = Fp.mul(Z1, Z1);
		            let t3 = Fp.mul(X1, Y1);
		            t3 = Fp.add(t3, t3); // step 5
		            Z3 = Fp.mul(X1, Z1);
		            Z3 = Fp.add(Z3, Z3);
		            X3 = Fp.mul(a, Z3);
		            Y3 = Fp.mul(b3, t2);
		            Y3 = Fp.add(X3, Y3); // step 10
		            X3 = Fp.sub(t1, Y3);
		            Y3 = Fp.add(t1, Y3);
		            Y3 = Fp.mul(X3, Y3);
		            X3 = Fp.mul(t3, X3);
		            Z3 = Fp.mul(b3, Z3); // step 15
		            t2 = Fp.mul(a, t2);
		            t3 = Fp.sub(t0, t2);
		            t3 = Fp.mul(a, t3);
		            t3 = Fp.add(t3, Z3);
		            Z3 = Fp.add(t0, t0); // step 20
		            t0 = Fp.add(Z3, t0);
		            t0 = Fp.add(t0, t2);
		            t0 = Fp.mul(t0, t3);
		            Y3 = Fp.add(Y3, t0);
		            t2 = Fp.mul(Y1, Z1); // step 25
		            t2 = Fp.add(t2, t2);
		            t0 = Fp.mul(t2, t3);
		            X3 = Fp.sub(X3, t0);
		            Z3 = Fp.mul(t2, t1);
		            Z3 = Fp.add(Z3, Z3); // step 30
		            Z3 = Fp.add(Z3, Z3);
		            return new Point(X3, Y3, Z3);
		        }
		        // Renes-Costello-Batina exception-free addition formula.
		        // There is 30% faster Jacobian formula, but it is not complete.
		        // https://eprint.iacr.org/2015/1060, algorithm 1
		        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
		        add(other) {
		            assertPrjPoint(other);
		            const { px: X1, py: Y1, pz: Z1 } = this;
		            const { px: X2, py: Y2, pz: Z2 } = other;
		            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore
		            const a = CURVE.a;
		            const b3 = Fp.mul(CURVE.b, _3n);
		            let t0 = Fp.mul(X1, X2); // step 1
		            let t1 = Fp.mul(Y1, Y2);
		            let t2 = Fp.mul(Z1, Z2);
		            let t3 = Fp.add(X1, Y1);
		            let t4 = Fp.add(X2, Y2); // step 5
		            t3 = Fp.mul(t3, t4);
		            t4 = Fp.add(t0, t1);
		            t3 = Fp.sub(t3, t4);
		            t4 = Fp.add(X1, Z1);
		            let t5 = Fp.add(X2, Z2); // step 10
		            t4 = Fp.mul(t4, t5);
		            t5 = Fp.add(t0, t2);
		            t4 = Fp.sub(t4, t5);
		            t5 = Fp.add(Y1, Z1);
		            X3 = Fp.add(Y2, Z2); // step 15
		            t5 = Fp.mul(t5, X3);
		            X3 = Fp.add(t1, t2);
		            t5 = Fp.sub(t5, X3);
		            Z3 = Fp.mul(a, t4);
		            X3 = Fp.mul(b3, t2); // step 20
		            Z3 = Fp.add(X3, Z3);
		            X3 = Fp.sub(t1, Z3);
		            Z3 = Fp.add(t1, Z3);
		            Y3 = Fp.mul(X3, Z3);
		            t1 = Fp.add(t0, t0); // step 25
		            t1 = Fp.add(t1, t0);
		            t2 = Fp.mul(a, t2);
		            t4 = Fp.mul(b3, t4);
		            t1 = Fp.add(t1, t2);
		            t2 = Fp.sub(t0, t2); // step 30
		            t2 = Fp.mul(a, t2);
		            t4 = Fp.add(t4, t2);
		            t0 = Fp.mul(t1, t4);
		            Y3 = Fp.add(Y3, t0);
		            t0 = Fp.mul(t5, t4); // step 35
		            X3 = Fp.mul(t3, X3);
		            X3 = Fp.sub(X3, t0);
		            t0 = Fp.mul(t3, t1);
		            Z3 = Fp.mul(t5, Z3);
		            Z3 = Fp.add(Z3, t0); // step 40
		            return new Point(X3, Y3, Z3);
		        }
		        subtract(other) {
		            return this.add(other.negate());
		        }
		        is0() {
		            return this.equals(Point.ZERO);
		        }
		        wNAF(n) {
		            return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {
		                const toInv = Fp.invertBatch(comp.map((p) => p.pz));
		                return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);
		            });
		        }
		        /**
		         * Non-constant-time multiplication. Uses double-and-add algorithm.
		         * It's faster, but should only be used when you don't care about
		         * an exposed private key e.g. sig verification, which works over *public* keys.
		         */
		        multiplyUnsafe(n) {
		            const I = Point.ZERO;
		            if (n === _0n)
		                return I;
		            assertGE(n); // Will throw on 0
		            if (n === _1n)
		                return this;
		            const { endo } = CURVE;
		            if (!endo)
		                return wnaf.unsafeLadder(this, n);
		            // Apply endomorphism
		            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
		            let k1p = I;
		            let k2p = I;
		            let d = this;
		            while (k1 > _0n || k2 > _0n) {
		                if (k1 & _1n)
		                    k1p = k1p.add(d);
		                if (k2 & _1n)
		                    k2p = k2p.add(d);
		                d = d.double();
		                k1 >>= _1n;
		                k2 >>= _1n;
		            }
		            if (k1neg)
		                k1p = k1p.negate();
		            if (k2neg)
		                k2p = k2p.negate();
		            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
		            return k1p.add(k2p);
		        }
		        /**
		         * Constant time multiplication.
		         * Uses wNAF method. Windowed method may be 10% faster,
		         * but takes 2x longer to generate and consumes 2x memory.
		         * Uses precomputes when available.
		         * Uses endomorphism for Koblitz curves.
		         * @param scalar by which the point would be multiplied
		         * @returns New point
		         */
		        multiply(scalar) {
		            assertGE(scalar);
		            let n = scalar;
		            let point, fake; // Fake point is used to const-time mult
		            const { endo } = CURVE;
		            if (endo) {
		                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
		                let { p: k1p, f: f1p } = this.wNAF(k1);
		                let { p: k2p, f: f2p } = this.wNAF(k2);
		                k1p = wnaf.constTimeNegate(k1neg, k1p);
		                k2p = wnaf.constTimeNegate(k2neg, k2p);
		                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
		                point = k1p.add(k2p);
		                fake = f1p.add(f2p);
		            }
		            else {
		                const { p, f } = this.wNAF(n);
		                point = p;
		                fake = f;
		            }
		            // Normalize `z` for both points, but return only real one
		            return Point.normalizeZ([point, fake])[0];
		        }
		        /**
		         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
		         * Not using Strauss-Shamir trick: precomputation tables are faster.
		         * The trick could be useful if both P and Q are not G (not in our case).
		         * @returns non-zero affine point
		         */
		        multiplyAndAddUnsafe(Q, a, b) {
		            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes
		            const mul = (P, a // Select faster multiply() method
		            ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));
		            const sum = mul(this, a).add(mul(Q, b));
		            return sum.is0() ? undefined : sum;
		        }
		        // Converts Projective point to affine (x, y) coordinates.
		        // Can accept precomputed Z^-1 - for example, from invertBatch.
		        // (x, y, z) ∋ (x=x/z, y=y/z)
		        toAffine(iz) {
		            const { px: x, py: y, pz: z } = this;
		            const is0 = this.is0();
		            // If invZ was 0, we return zero point. However we still want to execute
		            // all operations, so we replace invZ with a random number, 1.
		            if (iz == null)
		                iz = is0 ? Fp.ONE : Fp.inv(z);
		            const ax = Fp.mul(x, iz);
		            const ay = Fp.mul(y, iz);
		            const zz = Fp.mul(z, iz);
		            if (is0)
		                return { x: Fp.ZERO, y: Fp.ZERO };
		            if (!Fp.eql(zz, Fp.ONE))
		                throw new Error('invZ was invalid');
		            return { x: ax, y: ay };
		        }
		        isTorsionFree() {
		            const { h: cofactor, isTorsionFree } = CURVE;
		            if (cofactor === _1n)
		                return true; // No subgroups, always torsion-free
		            if (isTorsionFree)
		                return isTorsionFree(Point, this);
		            throw new Error('isTorsionFree() has not been declared for the elliptic curve');
		        }
		        clearCofactor() {
		            const { h: cofactor, clearCofactor } = CURVE;
		            if (cofactor === _1n)
		                return this; // Fast-path
		            if (clearCofactor)
		                return clearCofactor(Point, this);
		            return this.multiplyUnsafe(CURVE.h);
		        }
		        toRawBytes(isCompressed = true) {
		            this.assertValidity();
		            return toBytes(Point, this, isCompressed);
		        }
		        toHex(isCompressed = true) {
		            return ut.bytesToHex(this.toRawBytes(isCompressed));
		        }
		    }
		    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);
		    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);
		    const _bits = CURVE.nBitLength;
		    const wnaf = (0, curve_js_1.wNAF)(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
		    // Validate if generator point is on curve
		    return {
		        CURVE,
		        ProjectivePoint: Point,
		        normPrivateKeyToScalar,
		        weierstrassEquation,
		        isWithinCurveOrder,
		    };
		}
		exports.weierstrassPoints = weierstrassPoints;
		function validateOpts(curve) {
		    const opts = (0, curve_js_1.validateBasic)(curve);
		    ut.validateObject(opts, {
		        hash: 'hash',
		        hmac: 'function',
		        randomBytes: 'function',
		    }, {
		        bits2int: 'function',
		        bits2int_modN: 'function',
		        lowS: 'boolean',
		    });
		    return Object.freeze({ lowS: true, ...opts });
		}
		function weierstrass(curveDef) {
		    const CURVE = validateOpts(curveDef);
		    const { Fp, n: CURVE_ORDER } = CURVE;
		    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32
		    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32
		    function isValidFieldElement(num) {
		        return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE
		    }
		    function modN(a) {
		        return mod.mod(a, CURVE_ORDER);
		    }
		    function invN(a) {
		        return mod.invert(a, CURVE_ORDER);
		    }
		    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({
		        ...CURVE,
		        toBytes(_c, point, isCompressed) {
		            const a = point.toAffine();
		            const x = Fp.toBytes(a.x);
		            const cat = ut.concatBytes;
		            if (isCompressed) {
		                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);
		            }
		            else {
		                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));
		            }
		        },
		        fromBytes(bytes) {
		            const len = bytes.length;
		            const head = bytes[0];
		            const tail = bytes.subarray(1);
		            // this.assertValidity() is done inside of fromHex
		            if (len === compressedLen && (head === 0x02 || head === 0x03)) {
		                const x = ut.bytesToNumberBE(tail);
		                if (!isValidFieldElement(x))
		                    throw new Error('Point is not on curve');
		                const y2 = weierstrassEquation(x); // y² = x³ + ax + b
		                let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4
		                const isYOdd = (y & _1n) === _1n;
		                // ECDSA
		                const isHeadOdd = (head & 1) === 1;
		                if (isHeadOdd !== isYOdd)
		                    y = Fp.neg(y);
		                return { x, y };
		            }
		            else if (len === uncompressedLen && head === 0x04) {
		                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
		                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
		                return { x, y };
		            }
		            else {
		                throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);
		            }
		        },
		    });
		    const numToNByteStr = (num) => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));
		    function isBiggerThanHalfOrder(number) {
		        const HALF = CURVE_ORDER >> _1n;
		        return number > HALF;
		    }
		    function normalizeS(s) {
		        return isBiggerThanHalfOrder(s) ? modN(-s) : s;
		    }
		    // slice bytes num
		    const slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));
		    /**
		     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.
		     */
		    class Signature {
		        constructor(r, s, recovery) {
		            this.r = r;
		            this.s = s;
		            this.recovery = recovery;
		            this.assertValidity();
		        }
		        // pair (bytes of r, bytes of s)
		        static fromCompact(hex) {
		            const l = CURVE.nByteLength;
		            hex = (0, utils_js_1.ensureBytes)('compactSignature', hex, l * 2);
		            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));
		        }
		        // DER encoded ECDSA signature
		        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
		        static fromDER(hex) {
		            const { r, s } = exports.DER.toSig((0, utils_js_1.ensureBytes)('DER', hex));
		            return new Signature(r, s);
		        }
		        assertValidity() {
		            // can use assertGE here
		            if (!isWithinCurveOrder(this.r))
		                throw new Error('r must be 0 < r < CURVE.n');
		            if (!isWithinCurveOrder(this.s))
		                throw new Error('s must be 0 < s < CURVE.n');
		        }
		        addRecoveryBit(recovery) {
		            return new Signature(this.r, this.s, recovery);
		        }
		        recoverPublicKey(msgHash) {
		            const { r, s, recovery: rec } = this;
		            const h = bits2int_modN((0, utils_js_1.ensureBytes)('msgHash', msgHash)); // Truncate hash
		            if (rec == null || ![0, 1, 2, 3].includes(rec))
		                throw new Error('recovery id invalid');
		            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;
		            if (radj >= Fp.ORDER)
		                throw new Error('recovery id 2 or 3 invalid');
		            const prefix = (rec & 1) === 0 ? '02' : '03';
		            const R = Point.fromHex(prefix + numToNByteStr(radj));
		            const ir = invN(radj); // r^-1
		            const u1 = modN(-h * ir); // -hr^-1
		            const u2 = modN(s * ir); // sr^-1
		            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)
		            if (!Q)
		                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked
		            Q.assertValidity();
		            return Q;
		        }
		        // Signatures should be low-s, to prevent malleability.
		        hasHighS() {
		            return isBiggerThanHalfOrder(this.s);
		        }
		        normalizeS() {
		            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;
		        }
		        // DER-encoded
		        toDERRawBytes() {
		            return ut.hexToBytes(this.toDERHex());
		        }
		        toDERHex() {
		            return exports.DER.hexFromSig({ r: this.r, s: this.s });
		        }
		        // padded bytes of r, then padded bytes of s
		        toCompactRawBytes() {
		            return ut.hexToBytes(this.toCompactHex());
		        }
		        toCompactHex() {
		            return numToNByteStr(this.r) + numToNByteStr(this.s);
		        }
		    }
		    const utils = {
		        isValidPrivateKey(privateKey) {
		            try {
		                normPrivateKeyToScalar(privateKey);
		                return true;
		            }
		            catch (error) {
		                return false;
		            }
		        },
		        normPrivateKeyToScalar: normPrivateKeyToScalar,
		        /**
		         * Produces cryptographically secure private key from random of size
		         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
		         */
		        randomPrivateKey: () => {
		            const length = mod.getMinHashLength(CURVE.n);
		            return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);
		        },
		        /**
		         * Creates precompute table for an arbitrary EC point. Makes point "cached".
		         * Allows to massively speed-up `point.multiply(scalar)`.
		         * @returns cached point
		         * @example
		         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
		         * fast.multiply(privKey); // much faster ECDH now
		         */
		        precompute(windowSize = 8, point = Point.BASE) {
		            point._setWindowSize(windowSize);
		            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here
		            return point;
		        },
		    };
		    /**
		     * Computes public key for a private key. Checks for validity of the private key.
		     * @param privateKey private key
		     * @param isCompressed whether to return compact (default), or full key
		     * @returns Public key, full when isCompressed=false; short when isCompressed=true
		     */
		    function getPublicKey(privateKey, isCompressed = true) {
		        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);
		    }
		    /**
		     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.
		     */
		    function isProbPub(item) {
		        const arr = item instanceof Uint8Array;
		        const str = typeof item === 'string';
		        const len = (arr || str) && item.length;
		        if (arr)
		            return len === compressedLen || len === uncompressedLen;
		        if (str)
		            return len === 2 * compressedLen || len === 2 * uncompressedLen;
		        if (item instanceof Point)
		            return true;
		        return false;
		    }
		    /**
		     * ECDH (Elliptic Curve Diffie Hellman).
		     * Computes shared public key from private key and public key.
		     * Checks: 1) private key validity 2) shared key is on-curve.
		     * Does NOT hash the result.
		     * @param privateA private key
		     * @param publicB different public key
		     * @param isCompressed whether to return compact (default), or full key
		     * @returns shared public key
		     */
		    function getSharedSecret(privateA, publicB, isCompressed = true) {
		        if (isProbPub(privateA))
		            throw new Error('first arg must be private key');
		        if (!isProbPub(publicB))
		            throw new Error('second arg must be public key');
		        const b = Point.fromHex(publicB); // check for being on-curve
		        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
		    }
		    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.
		    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.
		    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.
		    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors
		    const bits2int = CURVE.bits2int ||
		        function (bytes) {
		            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)
		            // for some cases, since bytes.length * 8 is not actual bitLength.
		            const num = ut.bytesToNumberBE(bytes); // check for == u8 done here
		            const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits
		            return delta > 0 ? num >> BigInt(delta) : num;
		        };
		    const bits2int_modN = CURVE.bits2int_modN ||
		        function (bytes) {
		            return modN(bits2int(bytes)); // can't use bytesToNumberBE here
		        };
		    // NOTE: pads output with zero as per spec
		    const ORDER_MASK = ut.bitMask(CURVE.nBitLength);
		    /**
		     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.
		     */
		    function int2octets(num) {
		        if (typeof num !== 'bigint')
		            throw new Error('bigint expected');
		        if (!(_0n <= num && num < ORDER_MASK))
		            throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);
		        // works with order, can have different size than numToField!
		        return ut.numberToBytesBE(num, CURVE.nByteLength);
		    }
		    // Steps A, D of RFC6979 3.2
		    // Creates RFC6979 seed; converts msg/privKey to numbers.
		    // Used only in sign, not in verify.
		    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.
		    // Also it can be bigger for P224 + SHA256
		    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
		        if (['recovered', 'canonical'].some((k) => k in opts))
		            throw new Error('sign() legacy options not supported');
		        const { hash, randomBytes } = CURVE;
		        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default
		        if (lowS == null)
		            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash
		        msgHash = (0, utils_js_1.ensureBytes)('msgHash', msgHash);
		        if (prehash)
		            msgHash = (0, utils_js_1.ensureBytes)('prehashed msgHash', hash(msgHash));
		        // We can't later call bits2octets, since nested bits2int is broken for curves
		        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.
		        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))
		        const h1int = bits2int_modN(msgHash);
		        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint
		        const seedArgs = [int2octets(d), int2octets(h1int)];
		        // extraEntropy. RFC6979 3.6: additional k' (optional).
		        if (ent != null) {
		            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')
		            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is
		            seedArgs.push((0, utils_js_1.ensureBytes)('extraEntropy', e)); // check for being bytes
		        }
		        const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2
		        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!
		        // Converts signature params into point w r/s, checks result for validity.
		        function k2sig(kBytes) {
		            // RFC 6979 Section 3.2, step 3: k = bits2int(T)
		            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element
		            if (!isWithinCurveOrder(k))
		                return; // Important: all mod() calls here must be done over N
		            const ik = invN(k); // k^-1 mod n
		            const q = Point.BASE.multiply(k).toAffine(); // q = Gk
		            const r = modN(q.x); // r = q.x mod n
		            if (r === _0n)
		                return;
		            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to
		            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:
		            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT
		            const s = modN(ik * modN(m + r * d)); // Not using blinding here
		            if (s === _0n)
		                return;
		            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)
		            let normS = s;
		            if (lowS && isBiggerThanHalfOrder(s)) {
		                normS = normalizeS(s); // if lowS was passed, ensure s is always
		                recovery ^= 1; // // in the bottom half of N
		            }
		            return new Signature(r, normS, recovery); // use normS, not s
		        }
		        return { seed, k2sig };
		    }
		    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };
		    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };
		    /**
		     * Signs message hash with a private key.
		     * ```
		     * sign(m, d, k) where
		     *   (x, y) = G × k
		     *   r = x mod n
		     *   s = (m + dr)/k mod n
		     * ```
		     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.
		     * @param privKey private key
		     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.
		     * @returns signature with recovery param
		     */
		    function sign(msgHash, privKey, opts = defaultSigOpts) {
		        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.
		        const C = CURVE;
		        const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);
		        return drbg(seed, k2sig); // Steps B, C, D, E, F, G
		    }
		    // Enable precomputes. Slows down first publicKey computation by 20ms.
		    Point.BASE._setWindowSize(8);
		    // utils.precompute(8, ProjectivePoint.BASE)
		    /**
		     * Verifies a signature against message hash and public key.
		     * Rejects lowS signatures by default: to override,
		     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:
		     *
		     * ```
		     * verify(r, s, h, P) where
		     *   U1 = hs^-1 mod n
		     *   U2 = rs^-1 mod n
		     *   R = U1⋅G - U2⋅P
		     *   mod(R.x, n) == r
		     * ```
		     */
		    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {
		        const sg = signature;
		        msgHash = (0, utils_js_1.ensureBytes)('msgHash', msgHash);
		        publicKey = (0, utils_js_1.ensureBytes)('publicKey', publicKey);
		        if ('strict' in opts)
		            throw new Error('options.strict was renamed to lowS');
		        const { lowS, prehash } = opts;
		        let _sig = undefined;
		        let P;
		        try {
		            if (typeof sg === 'string' || sg instanceof Uint8Array) {
		                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).
		                // Since DER can also be 2*nByteLength bytes, we check for it first.
		                try {
		                    _sig = Signature.fromDER(sg);
		                }
		                catch (derError) {
		                    if (!(derError instanceof exports.DER.Err))
		                        throw derError;
		                    _sig = Signature.fromCompact(sg);
		                }
		            }
		            else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {
		                const { r, s } = sg;
		                _sig = new Signature(r, s);
		            }
		            else {
		                throw new Error('PARSE');
		            }
		            P = Point.fromHex(publicKey);
		        }
		        catch (error) {
		            if (error.message === 'PARSE')
		                throw new Error(`signature must be Signature instance, Uint8Array or hex string`);
		            return false;
		        }
		        if (lowS && _sig.hasHighS())
		            return false;
		        if (prehash)
		            msgHash = CURVE.hash(msgHash);
		        const { r, s } = _sig;
		        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element
		        const is = invN(s); // s^-1
		        const u1 = modN(h * is); // u1 = hs^-1 mod n
		        const u2 = modN(r * is); // u2 = rs^-1 mod n
		        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P
		        if (!R)
		            return false;
		        const v = modN(R.x);
		        return v === r;
		    }
		    return {
		        CURVE,
		        getPublicKey,
		        getSharedSecret,
		        sign,
		        verify,
		        ProjectivePoint: Point,
		        Signature,
		        utils,
		    };
		}
		exports.weierstrass = weierstrass;
		/**
		 * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.
		 * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.
		 * b = True and y = sqrt(u / v) if (u / v) is square in F, and
		 * b = False and y = sqrt(Z * (u / v)) otherwise.
		 * @param Fp
		 * @param Z
		 * @returns
		 */
		function SWUFpSqrtRatio(Fp, Z) {
		    // Generic implementation
		    const q = Fp.ORDER;
		    let l = _0n;
		    for (let o = q - _1n; o % _2n === _0n; o /= _2n)
		        l += _1n;
		    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.
		    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.
		    // 2n ** c1 == 2n << (c1-1)
		    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);
		    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;
		    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic
		    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic
		    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic
		    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic
		    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2
		    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)
		    let sqrtRatio = (u, v) => {
		        let tv1 = c6; // 1. tv1 = c6
		        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4
		        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2
		        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v
		        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3
		        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3
		        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2
		        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v
		        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u
		        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2
		        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5
		        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1
		        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7
		        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1
		        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)
		        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)
		        // 17. for i in (c1, c1 - 1, ..., 2):
		        for (let i = c1; i > _1n; i--) {
		            let tv5 = i - _2n; // 18.    tv5 = i - 2
		            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5
		            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5
		            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1
		            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1
		            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1
		            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1
		            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)
		            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)
		        }
		        return { isValid: isQR, value: tv3 };
		    };
		    if (Fp.ORDER % _4n === _3n) {
		        // sqrt_ratio_3mod4(u, v)
		        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic
		        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)
		        sqrtRatio = (u, v) => {
		            let tv1 = Fp.sqr(v); // 1. tv1 = v^2
		            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v
		            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2
		            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1
		            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2
		            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2
		            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v
		            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u
		            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)
		            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2
		        };
		    }
		    // No curves uses that
		    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8
		    return sqrtRatio;
		}
		exports.SWUFpSqrtRatio = SWUFpSqrtRatio;
		/**
		 * Simplified Shallue-van de Woestijne-Ulas Method
		 * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2
		 */
		function mapToCurveSimpleSWU(Fp, opts) {
		    mod.validateField(Fp);
		    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))
		        throw new Error('mapToCurveSimpleSWU: invalid opts');
		    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);
		    if (!Fp.isOdd)
		        throw new Error('Fp.isOdd is not implemented!');
		    // Input: u, an element of F.
		    // Output: (x, y), a point on E.
		    return (u) => {
		        // prettier-ignore
		        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;
		        tv1 = Fp.sqr(u); // 1.  tv1 = u^2
		        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1
		        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2
		        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1
		        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1
		        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3
		        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)
		        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4
		        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2
		        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2
		        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6
		        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5
		        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3
		        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4
		        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6
		        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5
		        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3
		        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)
		        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1
		        y = Fp.mul(y, value); // 20.   y = y * y1
		        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)
		        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)
		        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)
		        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)
		        x = Fp.div(x, tv4); // 25.   x = x / tv4
		        return { x, y };
		    };
		}
		exports.mapToCurveSimpleSWU = mapToCurveSimpleSWU;
		
	} (weierstrass$1));
	return weierstrass$1;
}

var hashToCurve$1 = {};

var hasRequiredHashToCurve;

function requireHashToCurve () {
	if (hasRequiredHashToCurve) return hashToCurve$1;
	hasRequiredHashToCurve = 1;
	Object.defineProperty(hashToCurve$1, "__esModule", { value: true });
	hashToCurve$1.createHasher = hashToCurve$1.isogenyMap = hashToCurve$1.hash_to_field = hashToCurve$1.expand_message_xof = hashToCurve$1.expand_message_xmd = void 0;
	const modular_js_1 = requireModular();
	const utils_js_1 = requireUtils$1();
	function validateDST(dst) {
	    if (dst instanceof Uint8Array)
	        return dst;
	    if (typeof dst === 'string')
	        return (0, utils_js_1.utf8ToBytes)(dst);
	    throw new Error('DST must be Uint8Array or string');
	}
	// Octet Stream to Integer. "spec" implementation of os2ip is 2.5x slower vs bytesToNumberBE.
	const os2ip = utils_js_1.bytesToNumberBE;
	// Integer to Octet Stream (numberToBytesBE)
	function i2osp(value, length) {
	    if (value < 0 || value >= 1 << (8 * length)) {
	        throw new Error(`bad I2OSP call: value=${value} length=${length}`);
	    }
	    const res = Array.from({ length }).fill(0);
	    for (let i = length - 1; i >= 0; i--) {
	        res[i] = value & 0xff;
	        value >>>= 8;
	    }
	    return new Uint8Array(res);
	}
	function strxor(a, b) {
	    const arr = new Uint8Array(a.length);
	    for (let i = 0; i < a.length; i++) {
	        arr[i] = a[i] ^ b[i];
	    }
	    return arr;
	}
	function isBytes(item) {
	    if (!(item instanceof Uint8Array))
	        throw new Error('Uint8Array expected');
	}
	function isNum(item) {
	    if (!Number.isSafeInteger(item))
	        throw new Error('number expected');
	}
	// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits
	// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1
	function expand_message_xmd(msg, DST, lenInBytes, H) {
	    isBytes(msg);
	    isBytes(DST);
	    isNum(lenInBytes);
	    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3
	    if (DST.length > 255)
	        DST = H((0, utils_js_1.concatBytes)((0, utils_js_1.utf8ToBytes)('H2C-OVERSIZE-DST-'), DST));
	    const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;
	    const ell = Math.ceil(lenInBytes / b_in_bytes);
	    if (ell > 255)
	        throw new Error('Invalid xmd length');
	    const DST_prime = (0, utils_js_1.concatBytes)(DST, i2osp(DST.length, 1));
	    const Z_pad = i2osp(0, r_in_bytes);
	    const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str
	    const b = new Array(ell);
	    const b_0 = H((0, utils_js_1.concatBytes)(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));
	    b[0] = H((0, utils_js_1.concatBytes)(b_0, i2osp(1, 1), DST_prime));
	    for (let i = 1; i <= ell; i++) {
	        const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];
	        b[i] = H((0, utils_js_1.concatBytes)(...args));
	    }
	    const pseudo_random_bytes = (0, utils_js_1.concatBytes)(...b);
	    return pseudo_random_bytes.slice(0, lenInBytes);
	}
	hashToCurve$1.expand_message_xmd = expand_message_xmd;
	// Produces a uniformly random byte string using an extendable-output function (XOF) H.
	// 1. The collision resistance of H MUST be at least k bits.
	// 2. H MUST be an XOF that has been proved indifferentiable from
	//    a random oracle under a reasonable cryptographic assumption.
	// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2
	function expand_message_xof(msg, DST, lenInBytes, k, H) {
	    isBytes(msg);
	    isBytes(DST);
	    isNum(lenInBytes);
	    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3
	    // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));
	    if (DST.length > 255) {
	        const dkLen = Math.ceil((2 * k) / 8);
	        DST = H.create({ dkLen }).update((0, utils_js_1.utf8ToBytes)('H2C-OVERSIZE-DST-')).update(DST).digest();
	    }
	    if (lenInBytes > 65535 || DST.length > 255)
	        throw new Error('expand_message_xof: invalid lenInBytes');
	    return (H.create({ dkLen: lenInBytes })
	        .update(msg)
	        .update(i2osp(lenInBytes, 2))
	        // 2. DST_prime = DST || I2OSP(len(DST), 1)
	        .update(DST)
	        .update(i2osp(DST.length, 1))
	        .digest());
	}
	hashToCurve$1.expand_message_xof = expand_message_xof;
	/**
	 * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F
	 * https://www.rfc-editor.org/rfc/rfc9380#section-5.2
	 * @param msg a byte string containing the message to hash
	 * @param count the number of elements of F to output
	 * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above
	 * @returns [u_0, ..., u_(count - 1)], a list of field elements.
	 */
	function hash_to_field(msg, count, options) {
	    (0, utils_js_1.validateObject)(options, {
	        DST: 'stringOrUint8Array',
	        p: 'bigint',
	        m: 'isSafeInteger',
	        k: 'isSafeInteger',
	        hash: 'hash',
	    });
	    const { p, k, m, hash, expand, DST: _DST } = options;
	    isBytes(msg);
	    isNum(count);
	    const DST = validateDST(_DST);
	    const log2p = p.toString(2).length;
	    const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above
	    const len_in_bytes = count * m * L;
	    let prb; // pseudo_random_bytes
	    if (expand === 'xmd') {
	        prb = expand_message_xmd(msg, DST, len_in_bytes, hash);
	    }
	    else if (expand === 'xof') {
	        prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);
	    }
	    else if (expand === '_internal_pass') {
	        // for internal tests only
	        prb = msg;
	    }
	    else {
	        throw new Error('expand must be "xmd" or "xof"');
	    }
	    const u = new Array(count);
	    for (let i = 0; i < count; i++) {
	        const e = new Array(m);
	        for (let j = 0; j < m; j++) {
	            const elm_offset = L * (j + i * m);
	            const tv = prb.subarray(elm_offset, elm_offset + L);
	            e[j] = (0, modular_js_1.mod)(os2ip(tv), p);
	        }
	        u[i] = e;
	    }
	    return u;
	}
	hashToCurve$1.hash_to_field = hash_to_field;
	function isogenyMap(field, map) {
	    // Make same order as in spec
	    const COEFF = map.map((i) => Array.from(i).reverse());
	    return (x, y) => {
	        const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));
	        x = field.div(xNum, xDen); // xNum / xDen
	        y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)
	        return { x, y };
	    };
	}
	hashToCurve$1.isogenyMap = isogenyMap;
	function createHasher(Point, mapToCurve, def) {
	    if (typeof mapToCurve !== 'function')
	        throw new Error('mapToCurve() must be defined');
	    return {
	        // Encodes byte string to elliptic curve.
	        // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
	        hashToCurve(msg, options) {
	            const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options });
	            const u0 = Point.fromAffine(mapToCurve(u[0]));
	            const u1 = Point.fromAffine(mapToCurve(u[1]));
	            const P = u0.add(u1).clearCofactor();
	            P.assertValidity();
	            return P;
	        },
	        // Encodes byte string to elliptic curve.
	        // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
	        encodeToCurve(msg, options) {
	            const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options });
	            const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();
	            P.assertValidity();
	            return P;
	        },
	    };
	}
	hashToCurve$1.createHasher = createHasher;
	
	return hashToCurve$1;
}

var _shortw_utils$1 = {};

var hasRequired_shortw_utils;

function require_shortw_utils () {
	if (hasRequired_shortw_utils) return _shortw_utils$1;
	hasRequired_shortw_utils = 1;
	Object.defineProperty(_shortw_utils$1, "__esModule", { value: true });
	_shortw_utils$1.createCurve = _shortw_utils$1.getHash = void 0;
	/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
	const hmac_1 = requireHmac();
	const utils_1 = requireUtils$2();
	const weierstrass_js_1 = requireWeierstrass();
	// connects noble-curves to noble-hashes
	function getHash(hash) {
	    return {
	        hash,
	        hmac: (key, ...msgs) => (0, hmac_1.hmac)(hash, key, (0, utils_1.concatBytes)(...msgs)),
	        randomBytes: utils_1.randomBytes,
	    };
	}
	_shortw_utils$1.getHash = getHash;
	function createCurve(curveDef, defHash) {
	    const create = (hash) => (0, weierstrass_js_1.weierstrass)({ ...curveDef, ...getHash(hash) });
	    return Object.freeze({ ...create(defHash), create });
	}
	_shortw_utils$1.createCurve = createCurve;
	
	return _shortw_utils$1;
}

var hasRequiredSecp256k1;

function requireSecp256k1 () {
	if (hasRequiredSecp256k1) return secp256k1$2;
	hasRequiredSecp256k1 = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.encodeToCurve = exports.hashToCurve = exports.schnorr = exports.secp256k1 = void 0;
		/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
		const sha256_1 = requireSha256();
		const utils_1 = requireUtils$2();
		const modular_js_1 = requireModular();
		const weierstrass_js_1 = requireWeierstrass();
		const utils_js_1 = requireUtils$1();
		const hash_to_curve_js_1 = requireHashToCurve();
		const _shortw_utils_js_1 = require_shortw_utils();
		const secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');
		const secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');
		const _1n = BigInt(1);
		const _2n = BigInt(2);
		const divNearest = (a, b) => (a + b / _2n) / b;
		/**
		 * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.
		 * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]
		 */
		function sqrtMod(y) {
		    const P = secp256k1P;
		    // prettier-ignore
		    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);
		    // prettier-ignore
		    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
		    const b2 = (y * y * y) % P; // x^3, 11
		    const b3 = (b2 * b2 * y) % P; // x^7
		    const b6 = ((0, modular_js_1.pow2)(b3, _3n, P) * b3) % P;
		    const b9 = ((0, modular_js_1.pow2)(b6, _3n, P) * b3) % P;
		    const b11 = ((0, modular_js_1.pow2)(b9, _2n, P) * b2) % P;
		    const b22 = ((0, modular_js_1.pow2)(b11, _11n, P) * b11) % P;
		    const b44 = ((0, modular_js_1.pow2)(b22, _22n, P) * b22) % P;
		    const b88 = ((0, modular_js_1.pow2)(b44, _44n, P) * b44) % P;
		    const b176 = ((0, modular_js_1.pow2)(b88, _88n, P) * b88) % P;
		    const b220 = ((0, modular_js_1.pow2)(b176, _44n, P) * b44) % P;
		    const b223 = ((0, modular_js_1.pow2)(b220, _3n, P) * b3) % P;
		    const t1 = ((0, modular_js_1.pow2)(b223, _23n, P) * b22) % P;
		    const t2 = ((0, modular_js_1.pow2)(t1, _6n, P) * b2) % P;
		    const root = (0, modular_js_1.pow2)(t2, _2n, P);
		    if (!Fp.eql(Fp.sqr(root), y))
		        throw new Error('Cannot find square root');
		    return root;
		}
		const Fp = (0, modular_js_1.Field)(secp256k1P, undefined, undefined, { sqrt: sqrtMod });
		exports.secp256k1 = (0, _shortw_utils_js_1.createCurve)({
		    a: BigInt(0),
		    b: BigInt(7),
		    Fp,
		    n: secp256k1N,
		    // Base point (x, y) aka generator point
		    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),
		    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),
		    h: BigInt(1),
		    lowS: true,
		    /**
		     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
		     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
		     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
		     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
		     */
		    endo: {
		        beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),
		        splitScalar: (k) => {
		            const n = secp256k1N;
		            const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');
		            const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');
		            const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');
		            const b2 = a1;
		            const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)
		            const c1 = divNearest(b2 * k, n);
		            const c2 = divNearest(-b1 * k, n);
		            let k1 = (0, modular_js_1.mod)(k - c1 * a1 - c2 * a2, n);
		            let k2 = (0, modular_js_1.mod)(-c1 * b1 - c2 * b2, n);
		            const k1neg = k1 > POW_2_128;
		            const k2neg = k2 > POW_2_128;
		            if (k1neg)
		                k1 = n - k1;
		            if (k2neg)
		                k2 = n - k2;
		            if (k1 > POW_2_128 || k2 > POW_2_128) {
		                throw new Error('splitScalar: Endomorphism failed, k=' + k);
		            }
		            return { k1neg, k1, k2neg, k2 };
		        },
		    },
		}, sha256_1.sha256);
		// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.
		// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki
		const _0n = BigInt(0);
		const fe = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1P;
		const ge = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1N;
		/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */
		const TAGGED_HASH_PREFIXES = {};
		function taggedHash(tag, ...messages) {
		    let tagP = TAGGED_HASH_PREFIXES[tag];
		    if (tagP === undefined) {
		        const tagH = (0, sha256_1.sha256)(Uint8Array.from(tag, (c) => c.charCodeAt(0)));
		        tagP = (0, utils_js_1.concatBytes)(tagH, tagH);
		        TAGGED_HASH_PREFIXES[tag] = tagP;
		    }
		    return (0, sha256_1.sha256)((0, utils_js_1.concatBytes)(tagP, ...messages));
		}
		// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03
		const pointToBytes = (point) => point.toRawBytes(true).slice(1);
		const numTo32b = (n) => (0, utils_js_1.numberToBytesBE)(n, 32);
		const modP = (x) => (0, modular_js_1.mod)(x, secp256k1P);
		const modN = (x) => (0, modular_js_1.mod)(x, secp256k1N);
		const Point = exports.secp256k1.ProjectivePoint;
		const GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);
		// Calculate point, scalar and bytes
		function schnorrGetExtPubKey(priv) {
		    let d_ = exports.secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey
		    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside
		    const scalar = p.hasEvenY() ? d_ : modN(-d_);
		    return { scalar: scalar, bytes: pointToBytes(p) };
		}
		/**
		 * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.
		 * @returns valid point checked for being on-curve
		 */
		function lift_x(x) {
		    if (!fe(x))
		        throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.
		    const xx = modP(x * x);
		    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.
		    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.
		    if (y % _2n !== _0n)
		        y = modP(-y); // Return the unique point P such that x(P) = x and
		    const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.
		    p.assertValidity();
		    return p;
		}
		/**
		 * Create tagged hash, convert it to bigint, reduce modulo-n.
		 */
		function challenge(...args) {
		    return modN((0, utils_js_1.bytesToNumberBE)(taggedHash('BIP0340/challenge', ...args)));
		}
		/**
		 * Schnorr public key is just `x` coordinate of Point as per BIP340.
		 */
		function schnorrGetPublicKey(privateKey) {
		    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)
		}
		/**
		 * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.
		 * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.
		 */
		function schnorrSign(message, privateKey, auxRand = (0, utils_1.randomBytes)(32)) {
		    const m = (0, utils_js_1.ensureBytes)('message', message);
		    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder
		    const a = (0, utils_js_1.ensureBytes)('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array
		    const t = numTo32b(d ^ (0, utils_js_1.bytesToNumberBE)(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)
		    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)
		    const k_ = modN((0, utils_js_1.bytesToNumberBE)(rand)); // Let k' = int(rand) mod n
		    if (k_ === _0n)
		        throw new Error('sign failed: k is zero'); // Fail if k' = 0.
		    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.
		    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.
		    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).
		    sig.set(rx, 0);
		    sig.set(numTo32b(modN(k + e * d)), 32);
		    // If Verify(bytes(P), m, sig) (see below) returns failure, abort
		    if (!schnorrVerify(sig, m, px))
		        throw new Error('sign: Invalid signature produced');
		    return sig;
		}
		/**
		 * Verifies Schnorr signature.
		 * Will swallow errors & return false except for initial type validation of arguments.
		 */
		function schnorrVerify(signature, message, publicKey) {
		    const sig = (0, utils_js_1.ensureBytes)('signature', signature, 64);
		    const m = (0, utils_js_1.ensureBytes)('message', message);
		    const pub = (0, utils_js_1.ensureBytes)('publicKey', publicKey, 32);
		    try {
		        const P = lift_x((0, utils_js_1.bytesToNumberBE)(pub)); // P = lift_x(int(pk)); fail if that fails
		        const r = (0, utils_js_1.bytesToNumberBE)(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.
		        if (!fe(r))
		            return false;
		        const s = (0, utils_js_1.bytesToNumberBE)(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.
		        if (!ge(s))
		            return false;
		        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n
		        const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P
		        if (!R || !R.hasEvenY() || R.toAffine().x !== r)
		            return false; // -eP == (n-e)P
		        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.
		    }
		    catch (error) {
		        return false;
		    }
		}
		exports.schnorr = (() => ({
		    getPublicKey: schnorrGetPublicKey,
		    sign: schnorrSign,
		    verify: schnorrVerify,
		    utils: {
		        randomPrivateKey: exports.secp256k1.utils.randomPrivateKey,
		        lift_x,
		        pointToBytes,
		        numberToBytesBE: utils_js_1.numberToBytesBE,
		        bytesToNumberBE: utils_js_1.bytesToNumberBE,
		        taggedHash,
		        mod: modular_js_1.mod,
		    },
		}))();
		const isoMap = /* @__PURE__ */ (() => (0, hash_to_curve_js_1.isogenyMap)(Fp, [
		    // xNum
		    [
		        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',
		        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',
		        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',
		        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',
		    ],
		    // xDen
		    [
		        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',
		        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',
		        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1
		    ],
		    // yNum
		    [
		        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',
		        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',
		        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',
		        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',
		    ],
		    // yDen
		    [
		        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',
		        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',
		        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',
		        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1
		    ],
		].map((i) => i.map((j) => BigInt(j)))))();
		const mapSWU = /* @__PURE__ */ (() => (0, weierstrass_js_1.mapToCurveSimpleSWU)(Fp, {
		    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),
		    B: BigInt('1771'),
		    Z: Fp.create(BigInt('-11')),
		}))();
		const htf = /* @__PURE__ */ (() => (0, hash_to_curve_js_1.createHasher)(exports.secp256k1.ProjectivePoint, (scalars) => {
		    const { x, y } = mapSWU(Fp.create(scalars[0]));
		    return isoMap(x, y);
		}, {
		    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',
		    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',
		    p: Fp.ORDER,
		    m: 1,
		    k: 128,
		    expand: 'xmd',
		    hash: sha256_1.sha256,
		}))();
		exports.hashToCurve = (() => htf.hashToCurve)();
		exports.encodeToCurve = (() => htf.encodeToCurve)();
		
	} (secp256k1$2));
	return secp256k1$2;
}

var signature$1 = {};

var constants$3 = {};

var addresses = {};

var hasRequiredAddresses;

function requireAddresses () {
	if (hasRequiredAddresses) return addresses;
	hasRequiredAddresses = 1;
	Object.defineProperty(addresses, "__esModule", { value: true });
	addresses.ZeroAddress = void 0;
	/**
	 *  A constant for the zero address.
	 *
	 *  (**i.e.** ``"0x0000000000000000000000000000000000000000"``)
	 */
	addresses.ZeroAddress = "0x0000000000000000000000000000000000000000";
	
	return addresses;
}

var hashes = {};

var hasRequiredHashes;

function requireHashes () {
	if (hasRequiredHashes) return hashes;
	hasRequiredHashes = 1;
	Object.defineProperty(hashes, "__esModule", { value: true });
	hashes.ZeroHash = void 0;
	/**
	 *  A constant for the zero hash.
	 *
	 *  (**i.e.** ``"0x0000000000000000000000000000000000000000000000000000000000000000"``)
	 */
	hashes.ZeroHash = "0x0000000000000000000000000000000000000000000000000000000000000000";
	
	return hashes;
}

var numbers = {};

var hasRequiredNumbers;

function requireNumbers () {
	if (hasRequiredNumbers) return numbers;
	hasRequiredNumbers = 1;
	Object.defineProperty(numbers, "__esModule", { value: true });
	numbers.MaxInt256 = numbers.MinInt256 = numbers.MaxUint256 = numbers.WeiPerEther = numbers.N = void 0;
	/**
	 *  A constant for the order N for the secp256k1 curve.
	 *
	 *  (**i.e.** ``0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141n``)
	 */
	numbers.N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
	/**
	 *  A constant for the number of wei in a single ether.
	 *
	 *  (**i.e.** ``1000000000000000000n``)
	 */
	numbers.WeiPerEther = BigInt("1000000000000000000");
	/**
	 *  A constant for the maximum value for a ``uint256``.
	 *
	 *  (**i.e.** ``0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn``)
	 */
	numbers.MaxUint256 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
	/**
	 *  A constant for the minimum value for an ``int256``.
	 *
	 *  (**i.e.** ``-8000000000000000000000000000000000000000000000000000000000000000n``)
	 */
	numbers.MinInt256 = BigInt("0x8000000000000000000000000000000000000000000000000000000000000000") * BigInt(-1);
	/**
	 *  A constant for the maximum value for an ``int256``.
	 *
	 *  (**i.e.** ``0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn``)
	 */
	numbers.MaxInt256 = BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
	
	return numbers;
}

var strings = {};

var hasRequiredStrings;

function requireStrings () {
	if (hasRequiredStrings) return strings;
	hasRequiredStrings = 1;
	// NFKC (composed)             // (decomposed)
	Object.defineProperty(strings, "__esModule", { value: true });
	strings.MessagePrefix = strings.EtherSymbol = void 0;
	/**
	 *  A constant for the ether symbol (normalized using NFKC).
	 *
	 *  (**i.e.** ``"\\u039e"``)
	 */
	strings.EtherSymbol = "\u039e"; // "\uD835\uDF63";
	/**
	 *  A constant for the [[link-eip-191]] personal message prefix.
	 *
	 *  (**i.e.** ``"\\x19Ethereum Signed Message:\\n"``)
	 */
	strings.MessagePrefix = "\x19Ethereum Signed Message:\n";
	
	return strings;
}

var hasRequiredConstants$1;

function requireConstants$1 () {
	if (hasRequiredConstants$1) return constants$3;
	hasRequiredConstants$1 = 1;
	(function (exports) {
		/**
		 *  Some common constants useful for Ethereum.
		 *
		 *  @_section: api/constants: Constants  [about-constants]
		 */
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.MessagePrefix = exports.EtherSymbol = exports.MaxInt256 = exports.MinInt256 = exports.MaxUint256 = exports.WeiPerEther = exports.N = exports.ZeroHash = exports.ZeroAddress = void 0;
		var addresses_js_1 = requireAddresses();
		Object.defineProperty(exports, "ZeroAddress", { enumerable: true, get: function () { return addresses_js_1.ZeroAddress; } });
		var hashes_js_1 = requireHashes();
		Object.defineProperty(exports, "ZeroHash", { enumerable: true, get: function () { return hashes_js_1.ZeroHash; } });
		var numbers_js_1 = requireNumbers();
		Object.defineProperty(exports, "N", { enumerable: true, get: function () { return numbers_js_1.N; } });
		Object.defineProperty(exports, "WeiPerEther", { enumerable: true, get: function () { return numbers_js_1.WeiPerEther; } });
		Object.defineProperty(exports, "MaxUint256", { enumerable: true, get: function () { return numbers_js_1.MaxUint256; } });
		Object.defineProperty(exports, "MinInt256", { enumerable: true, get: function () { return numbers_js_1.MinInt256; } });
		Object.defineProperty(exports, "MaxInt256", { enumerable: true, get: function () { return numbers_js_1.MaxInt256; } });
		var strings_js_1 = requireStrings();
		Object.defineProperty(exports, "EtherSymbol", { enumerable: true, get: function () { return strings_js_1.EtherSymbol; } });
		Object.defineProperty(exports, "MessagePrefix", { enumerable: true, get: function () { return strings_js_1.MessagePrefix; } });
		
	} (constants$3));
	return constants$3;
}

var hasRequiredSignature;

function requireSignature () {
	if (hasRequiredSignature) return signature$1;
	hasRequiredSignature = 1;
	Object.defineProperty(signature$1, "__esModule", { value: true });
	signature$1.Signature = void 0;
	const index_js_1 = requireConstants$1();
	const index_js_2 = requireUtils$3();
	// Constants
	const BN_0 = BigInt(0);
	const BN_1 = BigInt(1);
	const BN_2 = BigInt(2);
	const BN_27 = BigInt(27);
	const BN_28 = BigInt(28);
	const BN_35 = BigInt(35);
	const _guard = {};
	function toUint256(value) {
	    return (0, index_js_2.zeroPadValue)((0, index_js_2.toBeArray)(value), 32);
	}
	/**
	 *  A Signature  @TODO
	 *
	 *
	 *  @_docloc: api/crypto:Signing
	 */
	class Signature {
	    #r;
	    #s;
	    #v;
	    #networkV;
	    /**
	     *  The ``r`` value for a signautre.
	     *
	     *  This represents the ``x`` coordinate of a "reference" or
	     *  challenge point, from which the ``y`` can be computed.
	     */
	    get r() { return this.#r; }
	    set r(value) {
	        (0, index_js_2.assertArgument)((0, index_js_2.dataLength)(value) === 32, "invalid r", "value", value);
	        this.#r = (0, index_js_2.hexlify)(value);
	    }
	    /**
	     *  The ``s`` value for a signature.
	     */
	    get s() { return this.#s; }
	    set s(_value) {
	        (0, index_js_2.assertArgument)((0, index_js_2.dataLength)(_value) === 32, "invalid s", "value", _value);
	        const value = (0, index_js_2.hexlify)(_value);
	        (0, index_js_2.assertArgument)(parseInt(value.substring(0, 3)) < 8, "non-canonical s", "value", value);
	        this.#s = value;
	    }
	    /**
	     *  The ``v`` value for a signature.
	     *
	     *  Since a given ``x`` value for ``r`` has two possible values for
	     *  its correspondin ``y``, the ``v`` indicates which of the two ``y``
	     *  values to use.
	     *
	     *  It is normalized to the values ``27`` or ``28`` for legacy
	     *  purposes.
	     */
	    get v() { return this.#v; }
	    set v(value) {
	        const v = (0, index_js_2.getNumber)(value, "value");
	        (0, index_js_2.assertArgument)(v === 27 || v === 28, "invalid v", "v", value);
	        this.#v = v;
	    }
	    /**
	     *  The EIP-155 ``v`` for legacy transactions. For non-legacy
	     *  transactions, this value is ``null``.
	     */
	    get networkV() { return this.#networkV; }
	    /**
	     *  The chain ID for EIP-155 legacy transactions. For non-legacy
	     *  transactions, this value is ``null``.
	     */
	    get legacyChainId() {
	        const v = this.networkV;
	        if (v == null) {
	            return null;
	        }
	        return Signature.getChainId(v);
	    }
	    /**
	     *  The ``yParity`` for the signature.
	     *
	     *  See ``v`` for more details on how this value is used.
	     */
	    get yParity() {
	        return (this.v === 27) ? 0 : 1;
	    }
	    /**
	     *  The [[link-eip-2098]] compact representation of the ``yParity``
	     *  and ``s`` compacted into a single ``bytes32``.
	     */
	    get yParityAndS() {
	        // The EIP-2098 compact representation
	        const yParityAndS = (0, index_js_2.getBytes)(this.s);
	        if (this.yParity) {
	            yParityAndS[0] |= 0x80;
	        }
	        return (0, index_js_2.hexlify)(yParityAndS);
	    }
	    /**
	     *  The [[link-eip-2098]] compact representation.
	     */
	    get compactSerialized() {
	        return (0, index_js_2.concat)([this.r, this.yParityAndS]);
	    }
	    /**
	     *  The serialized representation.
	     */
	    get serialized() {
	        return (0, index_js_2.concat)([this.r, this.s, (this.yParity ? "0x1c" : "0x1b")]);
	    }
	    /**
	     *  @private
	     */
	    constructor(guard, r, s, v) {
	        (0, index_js_2.assertPrivate)(guard, _guard, "Signature");
	        this.#r = r;
	        this.#s = s;
	        this.#v = v;
	        this.#networkV = null;
	    }
	    [Symbol.for('nodejs.util.inspect.custom')]() {
	        return `Signature { r: "${this.r}", s: "${this.s}", yParity: ${this.yParity}, networkV: ${this.networkV} }`;
	    }
	    /**
	     *  Returns a new identical [[Signature]].
	     */
	    clone() {
	        const clone = new Signature(_guard, this.r, this.s, this.v);
	        if (this.networkV) {
	            clone.#networkV = this.networkV;
	        }
	        return clone;
	    }
	    /**
	     *  Returns a representation that is compatible with ``JSON.stringify``.
	     */
	    toJSON() {
	        const networkV = this.networkV;
	        return {
	            _type: "signature",
	            networkV: ((networkV != null) ? networkV.toString() : null),
	            r: this.r, s: this.s, v: this.v,
	        };
	    }
	    /**
	     *  Compute the chain ID from the ``v`` in a legacy EIP-155 transactions.
	     *
	     *  @example:
	     *    Signature.getChainId(45)
	     *    //_result:
	     *
	     *    Signature.getChainId(46)
	     *    //_result:
	     */
	    static getChainId(v) {
	        const bv = (0, index_js_2.getBigInt)(v, "v");
	        // The v is not an EIP-155 v, so it is the unspecified chain ID
	        if ((bv == BN_27) || (bv == BN_28)) {
	            return BN_0;
	        }
	        // Bad value for an EIP-155 v
	        (0, index_js_2.assertArgument)(bv >= BN_35, "invalid EIP-155 v", "v", v);
	        return (bv - BN_35) / BN_2;
	    }
	    /**
	     *  Compute the ``v`` for a chain ID for a legacy EIP-155 transactions.
	     *
	     *  Legacy transactions which use [[link-eip-155]] hijack the ``v``
	     *  property to include the chain ID.
	     *
	     *  @example:
	     *    Signature.getChainIdV(5, 27)
	     *    //_result:
	     *
	     *    Signature.getChainIdV(5, 28)
	     *    //_result:
	     *
	     */
	    static getChainIdV(chainId, v) {
	        return ((0, index_js_2.getBigInt)(chainId) * BN_2) + BigInt(35 + v - 27);
	    }
	    /**
	     *  Compute the normalized legacy transaction ``v`` from a ``yParirty``,
	     *  a legacy transaction ``v`` or a legacy [[link-eip-155]] transaction.
	     *
	     *  @example:
	     *    // The values 0 and 1 imply v is actually yParity
	     *    Signature.getNormalizedV(0)
	     *    //_result:
	     *
	     *    // Legacy non-EIP-1559 transaction (i.e. 27 or 28)
	     *    Signature.getNormalizedV(27)
	     *    //_result:
	     *
	     *    // Legacy EIP-155 transaction (i.e. >= 35)
	     *    Signature.getNormalizedV(46)
	     *    //_result:
	     *
	     *    // Invalid values throw
	     *    Signature.getNormalizedV(5)
	     *    //_error:
	     */
	    static getNormalizedV(v) {
	        const bv = (0, index_js_2.getBigInt)(v);
	        if (bv === BN_0 || bv === BN_27) {
	            return 27;
	        }
	        if (bv === BN_1 || bv === BN_28) {
	            return 28;
	        }
	        (0, index_js_2.assertArgument)(bv >= BN_35, "invalid v", "v", v);
	        // Otherwise, EIP-155 v means odd is 27 and even is 28
	        return (bv & BN_1) ? 27 : 28;
	    }
	    /**
	     *  Creates a new [[Signature]].
	     *
	     *  If no %%sig%% is provided, a new [[Signature]] is created
	     *  with default values.
	     *
	     *  If %%sig%% is a string, it is parsed.
	     */
	    static from(sig) {
	        function assertError(check, message) {
	            (0, index_js_2.assertArgument)(check, message, "signature", sig);
	        }
	        if (sig == null) {
	            return new Signature(_guard, index_js_1.ZeroHash, index_js_1.ZeroHash, 27);
	        }
	        if (typeof (sig) === "string") {
	            const bytes = (0, index_js_2.getBytes)(sig, "signature");
	            if (bytes.length === 64) {
	                const r = (0, index_js_2.hexlify)(bytes.slice(0, 32));
	                const s = bytes.slice(32, 64);
	                const v = (s[0] & 0x80) ? 28 : 27;
	                s[0] &= 0x7f;
	                return new Signature(_guard, r, (0, index_js_2.hexlify)(s), v);
	            }
	            if (bytes.length === 65) {
	                const r = (0, index_js_2.hexlify)(bytes.slice(0, 32));
	                const s = bytes.slice(32, 64);
	                assertError((s[0] & 0x80) === 0, "non-canonical s");
	                const v = Signature.getNormalizedV(bytes[64]);
	                return new Signature(_guard, r, (0, index_js_2.hexlify)(s), v);
	            }
	            assertError(false, "invalid raw signature length");
	        }
	        if (sig instanceof Signature) {
	            return sig.clone();
	        }
	        // Get r
	        const _r = sig.r;
	        assertError(_r != null, "missing r");
	        const r = toUint256(_r);
	        // Get s; by any means necessary (we check consistency below)
	        const s = (function (s, yParityAndS) {
	            if (s != null) {
	                return toUint256(s);
	            }
	            if (yParityAndS != null) {
	                assertError((0, index_js_2.isHexString)(yParityAndS, 32), "invalid yParityAndS");
	                const bytes = (0, index_js_2.getBytes)(yParityAndS);
	                bytes[0] &= 0x7f;
	                return (0, index_js_2.hexlify)(bytes);
	            }
	            assertError(false, "missing s");
	        })(sig.s, sig.yParityAndS);
	        assertError(((0, index_js_2.getBytes)(s)[0] & 0x80) == 0, "non-canonical s");
	        // Get v; by any means necessary (we check consistency below)
	        const { networkV, v } = (function (_v, yParityAndS, yParity) {
	            if (_v != null) {
	                const v = (0, index_js_2.getBigInt)(_v);
	                return {
	                    networkV: ((v >= BN_35) ? v : undefined),
	                    v: Signature.getNormalizedV(v)
	                };
	            }
	            if (yParityAndS != null) {
	                assertError((0, index_js_2.isHexString)(yParityAndS, 32), "invalid yParityAndS");
	                return { v: (((0, index_js_2.getBytes)(yParityAndS)[0] & 0x80) ? 28 : 27) };
	            }
	            if (yParity != null) {
	                switch ((0, index_js_2.getNumber)(yParity, "sig.yParity")) {
	                    case 0: return { v: 27 };
	                    case 1: return { v: 28 };
	                }
	                assertError(false, "invalid yParity");
	            }
	            assertError(false, "missing v");
	        })(sig.v, sig.yParityAndS, sig.yParity);
	        const result = new Signature(_guard, r, s, v);
	        if (networkV) {
	            result.#networkV = networkV;
	        }
	        // If multiple of v, yParity, yParityAndS we given, check they match
	        assertError(sig.yParity == null || (0, index_js_2.getNumber)(sig.yParity, "sig.yParity") === result.yParity, "yParity mismatch");
	        assertError(sig.yParityAndS == null || sig.yParityAndS === result.yParityAndS, "yParityAndS mismatch");
	        return result;
	    }
	}
	signature$1.Signature = Signature;
	
	return signature$1;
}

var hasRequiredSigningKey;

function requireSigningKey () {
	if (hasRequiredSigningKey) return signingKey;
	hasRequiredSigningKey = 1;
	/**
	 *  Add details about signing here.
	 *
	 *  @_subsection: api/crypto:Signing  [about-signing]
	 */
	Object.defineProperty(signingKey, "__esModule", { value: true });
	signingKey.SigningKey = void 0;
	const secp256k1_1 = requireSecp256k1();
	const index_js_1 = requireUtils$3();
	const signature_js_1 = requireSignature();
	/**
	 *  A **SigningKey** provides high-level access to the elliptic curve
	 *  cryptography (ECC) operations and key management.
	 */
	class SigningKey {
	    #privateKey;
	    /**
	     *  Creates a new **SigningKey** for %%privateKey%%.
	     */
	    constructor(privateKey) {
	        (0, index_js_1.assertArgument)((0, index_js_1.dataLength)(privateKey) === 32, "invalid private key", "privateKey", "[REDACTED]");
	        this.#privateKey = (0, index_js_1.hexlify)(privateKey);
	    }
	    /**
	     *  The private key.
	     */
	    get privateKey() { return this.#privateKey; }
	    /**
	     *  The uncompressed public key.
	     *
	     * This will always begin with the prefix ``0x04`` and be 132
	     * characters long (the ``0x`` prefix and 130 hexadecimal nibbles).
	     */
	    get publicKey() { return SigningKey.computePublicKey(this.#privateKey); }
	    /**
	     *  The compressed public key.
	     *
	     *  This will always begin with either the prefix ``0x02`` or ``0x03``
	     *  and be 68 characters long (the ``0x`` prefix and 33 hexadecimal
	     *  nibbles)
	     */
	    get compressedPublicKey() { return SigningKey.computePublicKey(this.#privateKey, true); }
	    /**
	     *  Return the signature of the signed %%digest%%.
	     */
	    sign(digest) {
	        (0, index_js_1.assertArgument)((0, index_js_1.dataLength)(digest) === 32, "invalid digest length", "digest", digest);
	        const sig = secp256k1_1.secp256k1.sign((0, index_js_1.getBytesCopy)(digest), (0, index_js_1.getBytesCopy)(this.#privateKey), {
	            lowS: true
	        });
	        return signature_js_1.Signature.from({
	            r: (0, index_js_1.toBeHex)(sig.r, 32),
	            s: (0, index_js_1.toBeHex)(sig.s, 32),
	            v: (sig.recovery ? 0x1c : 0x1b)
	        });
	    }
	    /**
	     *  Returns the [[link-wiki-ecdh]] shared secret between this
	     *  private key and the %%other%% key.
	     *
	     *  The %%other%% key may be any type of key, a raw public key,
	     *  a compressed/uncompressed pubic key or aprivate key.
	     *
	     *  Best practice is usually to use a cryptographic hash on the
	     *  returned value before using it as a symetric secret.
	     *
	     *  @example:
	     *    sign1 = new SigningKey(id("some-secret-1"))
	     *    sign2 = new SigningKey(id("some-secret-2"))
	     *
	     *    // Notice that privA.computeSharedSecret(pubB)...
	     *    sign1.computeSharedSecret(sign2.publicKey)
	     *    //_result:
	     *
	     *    // ...is equal to privB.computeSharedSecret(pubA).
	     *    sign2.computeSharedSecret(sign1.publicKey)
	     *    //_result:
	     */
	    computeSharedSecret(other) {
	        const pubKey = SigningKey.computePublicKey(other);
	        return (0, index_js_1.hexlify)(secp256k1_1.secp256k1.getSharedSecret((0, index_js_1.getBytesCopy)(this.#privateKey), (0, index_js_1.getBytes)(pubKey), false));
	    }
	    /**
	     *  Compute the public key for %%key%%, optionally %%compressed%%.
	     *
	     *  The %%key%% may be any type of key, a raw public key, a
	     *  compressed/uncompressed public key or private key.
	     *
	     *  @example:
	     *    sign = new SigningKey(id("some-secret"));
	     *
	     *    // Compute the uncompressed public key for a private key
	     *    SigningKey.computePublicKey(sign.privateKey)
	     *    //_result:
	     *
	     *    // Compute the compressed public key for a private key
	     *    SigningKey.computePublicKey(sign.privateKey, true)
	     *    //_result:
	     *
	     *    // Compute the uncompressed public key
	     *    SigningKey.computePublicKey(sign.publicKey, false);
	     *    //_result:
	     *
	     *    // Compute the Compressed a public key
	     *    SigningKey.computePublicKey(sign.publicKey, true);
	     *    //_result:
	     */
	    static computePublicKey(key, compressed) {
	        let bytes = (0, index_js_1.getBytes)(key, "key");
	        // private key
	        if (bytes.length === 32) {
	            const pubKey = secp256k1_1.secp256k1.getPublicKey(bytes, !!compressed);
	            return (0, index_js_1.hexlify)(pubKey);
	        }
	        // raw public key; use uncompressed key with 0x04 prefix
	        if (bytes.length === 64) {
	            const pub = new Uint8Array(65);
	            pub[0] = 0x04;
	            pub.set(bytes, 1);
	            bytes = pub;
	        }
	        const point = secp256k1_1.secp256k1.ProjectivePoint.fromHex(bytes);
	        return (0, index_js_1.hexlify)(point.toRawBytes(compressed));
	    }
	    /**
	     *  Returns the public key for the private key which produced the
	     *  %%signature%% for the given %%digest%%.
	     *
	     *  @example:
	     *    key = new SigningKey(id("some-secret"))
	     *    digest = id("hello world")
	     *    sig = key.sign(digest)
	     *
	     *    // Notice the signer public key...
	     *    key.publicKey
	     *    //_result:
	     *
	     *    // ...is equal to the recovered public key
	     *    SigningKey.recoverPublicKey(digest, sig)
	     *    //_result:
	     *
	     */
	    static recoverPublicKey(digest, signature) {
	        (0, index_js_1.assertArgument)((0, index_js_1.dataLength)(digest) === 32, "invalid digest length", "digest", digest);
	        const sig = signature_js_1.Signature.from(signature);
	        let secpSig = secp256k1_1.secp256k1.Signature.fromCompact((0, index_js_1.getBytesCopy)((0, index_js_1.concat)([sig.r, sig.s])));
	        secpSig = secpSig.addRecoveryBit(sig.yParity);
	        const pubKey = secpSig.recoverPublicKey((0, index_js_1.getBytesCopy)(digest));
	        (0, index_js_1.assertArgument)(pubKey != null, "invalid signautre for digest", "signature", signature);
	        return "0x" + pubKey.toHex(false);
	    }
	    /**
	     *  Returns the point resulting from adding the ellipic curve points
	     *  %%p0%% and %%p1%%.
	     *
	     *  This is not a common function most developers should require, but
	     *  can be useful for certain privacy-specific techniques.
	     *
	     *  For example, it is used by [[HDNodeWallet]] to compute child
	     *  addresses from parent public keys and chain codes.
	     */
	    static addPoints(p0, p1, compressed) {
	        const pub0 = secp256k1_1.secp256k1.ProjectivePoint.fromHex(SigningKey.computePublicKey(p0).substring(2));
	        const pub1 = secp256k1_1.secp256k1.ProjectivePoint.fromHex(SigningKey.computePublicKey(p1).substring(2));
	        return "0x" + pub0.add(pub1).toHex(!!compressed);
	    }
	}
	signingKey.SigningKey = SigningKey;
	
	return signingKey;
}

var hasRequiredCrypto;

function requireCrypto () {
	if (hasRequiredCrypto) return crypto$3;
	hasRequiredCrypto = 1;
	(function (exports) {
		/**
		 *  A fundamental building block of Ethereum is the underlying
		 *  cryptographic primitives.
		 *
		 *  @_section: api/crypto:Cryptographic Functions   [about-crypto]
		 */
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.lock = exports.Signature = exports.SigningKey = exports.scryptSync = exports.scrypt = exports.pbkdf2 = exports.sha512 = exports.sha256 = exports.ripemd160 = exports.keccak256 = exports.randomBytes = exports.computeHmac = void 0;
		// We import all these so we can export lock()
		const hmac_js_1 = requireHmac$1();
		Object.defineProperty(exports, "computeHmac", { enumerable: true, get: function () { return hmac_js_1.computeHmac; } });
		const keccak_js_1 = requireKeccak();
		Object.defineProperty(exports, "keccak256", { enumerable: true, get: function () { return keccak_js_1.keccak256; } });
		const ripemd160_js_1 = requireRipemd160();
		Object.defineProperty(exports, "ripemd160", { enumerable: true, get: function () { return ripemd160_js_1.ripemd160; } });
		const pbkdf2_js_1 = requirePbkdf2$1();
		Object.defineProperty(exports, "pbkdf2", { enumerable: true, get: function () { return pbkdf2_js_1.pbkdf2; } });
		const random_js_1 = requireRandom$1();
		Object.defineProperty(exports, "randomBytes", { enumerable: true, get: function () { return random_js_1.randomBytes; } });
		const scrypt_js_1 = requireScrypt();
		Object.defineProperty(exports, "scrypt", { enumerable: true, get: function () { return scrypt_js_1.scrypt; } });
		Object.defineProperty(exports, "scryptSync", { enumerable: true, get: function () { return scrypt_js_1.scryptSync; } });
		const sha2_js_1 = requireSha2();
		Object.defineProperty(exports, "sha256", { enumerable: true, get: function () { return sha2_js_1.sha256; } });
		Object.defineProperty(exports, "sha512", { enumerable: true, get: function () { return sha2_js_1.sha512; } });
		var signing_key_js_1 = requireSigningKey();
		Object.defineProperty(exports, "SigningKey", { enumerable: true, get: function () { return signing_key_js_1.SigningKey; } });
		var signature_js_1 = requireSignature();
		Object.defineProperty(exports, "Signature", { enumerable: true, get: function () { return signature_js_1.Signature; } });
		/**
		 *  Once called, prevents any future change to the underlying cryptographic
		 *  primitives using the ``.register`` feature for hooks.
		 */
		function lock() {
		    hmac_js_1.computeHmac.lock();
		    keccak_js_1.keccak256.lock();
		    pbkdf2_js_1.pbkdf2.lock();
		    random_js_1.randomBytes.lock();
		    ripemd160_js_1.ripemd160.lock();
		    scrypt_js_1.scrypt.lock();
		    scrypt_js_1.scryptSync.lock();
		    sha2_js_1.sha256.lock();
		    sha2_js_1.sha512.lock();
		    random_js_1.randomBytes.lock();
		}
		exports.lock = lock;
		
	} (crypto$3));
	return crypto$3;
}

var hasRequiredAddress$3;

function requireAddress$3 () {
	if (hasRequiredAddress$3) return address$2;
	hasRequiredAddress$3 = 1;
	Object.defineProperty(address$2, "__esModule", { value: true });
	address$2.getIcapAddress = address$2.getAddress = void 0;
	const index_js_1 = requireCrypto();
	const index_js_2 = requireUtils$3();
	const BN_0 = BigInt(0);
	const BN_36 = BigInt(36);
	function getChecksumAddress(address) {
	    //    if (!isHexString(address, 20)) {
	    //        logger.throwArgumentError("invalid address", "address", address);
	    //    }
	    address = address.toLowerCase();
	    const chars = address.substring(2).split("");
	    const expanded = new Uint8Array(40);
	    for (let i = 0; i < 40; i++) {
	        expanded[i] = chars[i].charCodeAt(0);
	    }
	    const hashed = (0, index_js_2.getBytes)((0, index_js_1.keccak256)(expanded));
	    for (let i = 0; i < 40; i += 2) {
	        if ((hashed[i >> 1] >> 4) >= 8) {
	            chars[i] = chars[i].toUpperCase();
	        }
	        if ((hashed[i >> 1] & 0x0f) >= 8) {
	            chars[i + 1] = chars[i + 1].toUpperCase();
	        }
	    }
	    return "0x" + chars.join("");
	}
	// See: https://en.wikipedia.org/wiki/International_Bank_Account_Number
	// Create lookup table
	const ibanLookup = {};
	for (let i = 0; i < 10; i++) {
	    ibanLookup[String(i)] = String(i);
	}
	for (let i = 0; i < 26; i++) {
	    ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
	}
	// How many decimal digits can we process? (for 64-bit float, this is 15)
	// i.e. Math.floor(Math.log10(Number.MAX_SAFE_INTEGER));
	const safeDigits = 15;
	function ibanChecksum(address) {
	    address = address.toUpperCase();
	    address = address.substring(4) + address.substring(0, 2) + "00";
	    let expanded = address.split("").map((c) => { return ibanLookup[c]; }).join("");
	    // Javascript can handle integers safely up to 15 (decimal) digits
	    while (expanded.length >= safeDigits) {
	        let block = expanded.substring(0, safeDigits);
	        expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
	    }
	    let checksum = String(98 - (parseInt(expanded, 10) % 97));
	    while (checksum.length < 2) {
	        checksum = "0" + checksum;
	    }
	    return checksum;
	}
	const Base36 = (function () {
	    const result = {};
	    for (let i = 0; i < 36; i++) {
	        const key = "0123456789abcdefghijklmnopqrstuvwxyz"[i];
	        result[key] = BigInt(i);
	    }
	    return result;
	})();
	function fromBase36(value) {
	    value = value.toLowerCase();
	    let result = BN_0;
	    for (let i = 0; i < value.length; i++) {
	        result = result * BN_36 + Base36[value[i]];
	    }
	    return result;
	}
	/**
	 *  Returns a normalized and checksumed address for %%address%%.
	 *  This accepts non-checksum addresses, checksum addresses and
	 *  [[getIcapAddress]] formats.
	 *
	 *  The checksum in Ethereum uses the capitalization (upper-case
	 *  vs lower-case) of the characters within an address to encode
	 *  its checksum, which offers, on average, a checksum of 15-bits.
	 *
	 *  If %%address%% contains both upper-case and lower-case, it is
	 *  assumed to already be a checksum address and its checksum is
	 *  validated, and if the address fails its expected checksum an
	 *  error is thrown.
	 *
	 *  If you wish the checksum of %%address%% to be ignore, it should
	 *  be converted to lower-case (i.e. ``.toLowercase()``) before
	 *  being passed in. This should be a very rare situation though,
	 *  that you wish to bypass the safegaurds in place to protect
	 *  against an address that has been incorrectly copied from another
	 *  source.
	 *
	 *  @example:
	 *    // Adds the checksum (via upper-casing specific letters)
	 *    getAddress("0x8ba1f109551bd432803012645ac136ddd64dba72")
	 *    //_result:
	 *
	 *    // Converts ICAP address and adds checksum
	 *    getAddress("XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK36");
	 *    //_result:
	 *
	 *    // Throws an error if an address contains mixed case,
	 *    // but the checksum fails
	 *    getAddress("0x8Ba1f109551bD432803012645Ac136ddd64DBA72")
	 *    //_error:
	 */
	function getAddress(address) {
	    (0, index_js_2.assertArgument)(typeof (address) === "string", "invalid address", "address", address);
	    if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
	        // Missing the 0x prefix
	        if (!address.startsWith("0x")) {
	            address = "0x" + address;
	        }
	        const result = getChecksumAddress(address);
	        // It is a checksummed address with a bad checksum
	        (0, index_js_2.assertArgument)(!address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) || result === address, "bad address checksum", "address", address);
	        return result;
	    }
	    // Maybe ICAP? (we only support direct mode)
	    if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
	        // It is an ICAP address with a bad checksum
	        (0, index_js_2.assertArgument)(address.substring(2, 4) === ibanChecksum(address), "bad icap checksum", "address", address);
	        let result = fromBase36(address.substring(4)).toString(16);
	        while (result.length < 40) {
	            result = "0" + result;
	        }
	        return getChecksumAddress("0x" + result);
	    }
	    (0, index_js_2.assertArgument)(false, "invalid address", "address", address);
	}
	address$2.getAddress = getAddress;
	/**
	 *  The [ICAP Address format](link-icap) format is an early checksum
	 *  format which attempts to be compatible with the banking
	 *  industry [IBAN format](link-wiki-iban) for bank accounts.
	 *
	 *  It is no longer common or a recommended format.
	 *
	 *  @example:
	 *    getIcapAddress("0x8ba1f109551bd432803012645ac136ddd64dba72");
	 *    //_result:
	 *
	 *    getIcapAddress("XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK36");
	 *    //_result:
	 *
	 *    // Throws an error if the ICAP checksum is wrong
	 *    getIcapAddress("XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK37");
	 *    //_error:
	 */
	function getIcapAddress(address) {
	    //let base36 = _base16To36(getAddress(address).substring(2)).toUpperCase();
	    let base36 = BigInt(getAddress(address)).toString(36).toUpperCase();
	    while (base36.length < 30) {
	        base36 = "0" + base36;
	    }
	    return "XE" + ibanChecksum("XE00" + base36) + base36;
	}
	address$2.getIcapAddress = getIcapAddress;
	
	return address$2;
}

var contractAddress = {};

var hasRequiredContractAddress;

function requireContractAddress () {
	if (hasRequiredContractAddress) return contractAddress;
	hasRequiredContractAddress = 1;
	Object.defineProperty(contractAddress, "__esModule", { value: true });
	contractAddress.getCreate2Address = contractAddress.getCreateAddress = void 0;
	const index_js_1 = requireCrypto();
	const index_js_2 = requireUtils$3();
	const address_js_1 = requireAddress$3();
	// http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed
	/**
	 *  Returns the address that would result from a ``CREATE`` for %%tx%%.
	 *
	 *  This can be used to compute the address a contract will be
	 *  deployed to by an EOA when sending a deployment transaction (i.e.
	 *  when the ``to`` address is ``null``).
	 *
	 *  This can also be used to compute the address a contract will be
	 *  deployed to by a contract, by using the contract's address as the
	 *  ``to`` and the contract's nonce.
	 *
	 *  @example
	 *    from = "0x8ba1f109551bD432803012645Ac136ddd64DBA72";
	 *    nonce = 5;
	 *
	 *    getCreateAddress({ from, nonce });
	 *    //_result:
	 */
	function getCreateAddress(tx) {
	    const from = (0, address_js_1.getAddress)(tx.from);
	    const nonce = (0, index_js_2.getBigInt)(tx.nonce, "tx.nonce");
	    let nonceHex = nonce.toString(16);
	    if (nonceHex === "0") {
	        nonceHex = "0x";
	    }
	    else if (nonceHex.length % 2) {
	        nonceHex = "0x0" + nonceHex;
	    }
	    else {
	        nonceHex = "0x" + nonceHex;
	    }
	    return (0, address_js_1.getAddress)((0, index_js_2.dataSlice)((0, index_js_1.keccak256)((0, index_js_2.encodeRlp)([from, nonceHex])), 12));
	}
	contractAddress.getCreateAddress = getCreateAddress;
	/**
	 *  Returns the address that would result from a ``CREATE2`` operation
	 *  with the given %%from%%, %%salt%% and %%initCodeHash%%.
	 *
	 *  To compute the %%initCodeHash%% from a contract's init code, use
	 *  the [[keccak256]] function.
	 *
	 *  For a quick overview and example of ``CREATE2``, see [[link-ricmoo-wisps]].
	 *
	 *  @example
	 *    // The address of the contract
	 *    from = "0x8ba1f109551bD432803012645Ac136ddd64DBA72"
	 *
	 *    // The salt
	 *    salt = id("HelloWorld")
	 *
	 *    // The hash of the initCode
	 *    initCode = "0x6394198df16000526103ff60206004601c335afa6040516060f3";
	 *    initCodeHash = keccak256(initCode)
	 *
	 *    getCreate2Address(from, salt, initCodeHash)
	 *    //_result:
	 */
	function getCreate2Address(_from, _salt, _initCodeHash) {
	    const from = (0, address_js_1.getAddress)(_from);
	    const salt = (0, index_js_2.getBytes)(_salt, "salt");
	    const initCodeHash = (0, index_js_2.getBytes)(_initCodeHash, "initCodeHash");
	    (0, index_js_2.assertArgument)(salt.length === 32, "salt must be 32 bytes", "salt", _salt);
	    (0, index_js_2.assertArgument)(initCodeHash.length === 32, "initCodeHash must be 32 bytes", "initCodeHash", _initCodeHash);
	    return (0, address_js_1.getAddress)((0, index_js_2.dataSlice)((0, index_js_1.keccak256)((0, index_js_2.concat)(["0xff", from, salt, initCodeHash])), 12));
	}
	contractAddress.getCreate2Address = getCreate2Address;
	
	return contractAddress;
}

var checks = {};

var hasRequiredChecks;

function requireChecks () {
	if (hasRequiredChecks) return checks;
	hasRequiredChecks = 1;
	Object.defineProperty(checks, "__esModule", { value: true });
	checks.resolveAddress = checks.isAddress = checks.isAddressable = void 0;
	const index_js_1 = requireUtils$3();
	const address_js_1 = requireAddress$3();
	/**
	 *  Returns true if %%value%% is an object which implements the
	 *  [[Addressable]] interface.
	 *
	 *  @example:
	 *    // Wallets and AbstractSigner sub-classes
	 *    isAddressable(Wallet.createRandom())
	 *    //_result:
	 *
	 *    // Contracts
	 *    contract = new Contract("dai.tokens.ethers.eth", [ ], provider)
	 *    isAddressable(contract)
	 *    //_result:
	 */
	function isAddressable(value) {
	    return (value && typeof (value.getAddress) === "function");
	}
	checks.isAddressable = isAddressable;
	/**
	 *  Returns true if %%value%% is a valid address.
	 *
	 *  @example:
	 *    // Valid address
	 *    isAddress("0x8ba1f109551bD432803012645Ac136ddd64DBA72")
	 *    //_result:
	 *
	 *    // Valid ICAP address
	 *    isAddress("XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK36")
	 *    //_result:
	 *
	 *    // Invalid checksum
	 *    isAddress("0x8Ba1f109551bD432803012645Ac136ddd64DBa72")
	 *    //_result:
	 *
	 *    // Invalid ICAP checksum
	 *    isAddress("0x8Ba1f109551bD432803012645Ac136ddd64DBA72")
	 *    //_result:
	 *
	 *    // Not an address (an ENS name requires a provided and an
	 *    // asynchronous API to access)
	 *    isAddress("ricmoo.eth")
	 *    //_result:
	 */
	function isAddress(value) {
	    try {
	        (0, address_js_1.getAddress)(value);
	        return true;
	    }
	    catch (error) { }
	    return false;
	}
	checks.isAddress = isAddress;
	async function checkAddress(target, promise) {
	    const result = await promise;
	    if (result == null || result === "0x0000000000000000000000000000000000000000") {
	        (0, index_js_1.assert)(typeof (target) !== "string", "unconfigured name", "UNCONFIGURED_NAME", { value: target });
	        (0, index_js_1.assertArgument)(false, "invalid AddressLike value; did not resolve to a value address", "target", target);
	    }
	    return (0, address_js_1.getAddress)(result);
	}
	/**
	 *  Resolves to an address for the %%target%%, which may be any
	 *  supported address type, an [[Addressable]] or a Promise which
	 *  resolves to an address.
	 *
	 *  If an ENS name is provided, but that name has not been correctly
	 *  configured a [[UnconfiguredNameError]] is thrown.
	 *
	 *  @example:
	 *    addr = "0x6B175474E89094C44Da98b954EedeAC495271d0F"
	 *
	 *    // Addresses are return synchronously
	 *    resolveAddress(addr, provider)
	 *    //_result:
	 *
	 *    // Address promises are resolved asynchronously
	 *    resolveAddress(Promise.resolve(addr))
	 *    //_result:
	 *
	 *    // ENS names are resolved asynchronously
	 *    resolveAddress("dai.tokens.ethers.eth", provider)
	 *    //_result:
	 *
	 *    // Addressable objects are resolved asynchronously
	 *    contract = new Contract(addr, [ ])
	 *    resolveAddress(contract, provider)
	 *    //_result:
	 *
	 *    // Unconfigured ENS names reject
	 *    resolveAddress("nothing-here.ricmoo.eth", provider)
	 *    //_error:
	 *
	 *    // ENS names require a NameResolver object passed in
	 *    // (notice the provider was omitted)
	 *    resolveAddress("nothing-here.ricmoo.eth")
	 *    //_error:
	 */
	function resolveAddress(target, resolver) {
	    if (typeof (target) === "string") {
	        if (target.match(/^0x[0-9a-f]{40}$/i)) {
	            return (0, address_js_1.getAddress)(target);
	        }
	        (0, index_js_1.assert)(resolver != null, "ENS resolution requires a provider", "UNSUPPORTED_OPERATION", { operation: "resolveName" });
	        return checkAddress(target, resolver.resolveName(target));
	    }
	    else if (isAddressable(target)) {
	        return checkAddress(target, target.getAddress());
	    }
	    else if (target && typeof (target.then) === "function") {
	        return checkAddress(target, target);
	    }
	    (0, index_js_1.assertArgument)(false, "unsupported addressable value", "target", target);
	}
	checks.resolveAddress = resolveAddress;
	
	return checks;
}

var hasRequiredAddress$2;

function requireAddress$2 () {
	if (hasRequiredAddress$2) return address$3;
	hasRequiredAddress$2 = 1;
	(function (exports) {
		/**
		 *  Addresses are a fundamental part of interacting with Ethereum. They
		 *  represent the gloabal identity of Externally Owned Accounts (accounts
		 *  backed by a private key) and contracts.
		 *
		 *  The Ethereum Naming Service (ENS) provides an interconnected ecosystem
		 *  of contracts, standards and libraries which enable looking up an
		 *  address for an ENS name.
		 *
		 *  These functions help convert between various formats, validate
		 *  addresses and safely resolve ENS names.
		 *
		 *  @_section: api/address:Addresses  [about-addresses]
		 */
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.resolveAddress = exports.isAddress = exports.isAddressable = exports.getCreate2Address = exports.getCreateAddress = exports.getIcapAddress = exports.getAddress = void 0;
		var address_js_1 = requireAddress$3();
		Object.defineProperty(exports, "getAddress", { enumerable: true, get: function () { return address_js_1.getAddress; } });
		Object.defineProperty(exports, "getIcapAddress", { enumerable: true, get: function () { return address_js_1.getIcapAddress; } });
		var contract_address_js_1 = requireContractAddress();
		Object.defineProperty(exports, "getCreateAddress", { enumerable: true, get: function () { return contract_address_js_1.getCreateAddress; } });
		Object.defineProperty(exports, "getCreate2Address", { enumerable: true, get: function () { return contract_address_js_1.getCreate2Address; } });
		var checks_js_1 = requireChecks();
		Object.defineProperty(exports, "isAddressable", { enumerable: true, get: function () { return checks_js_1.isAddressable; } });
		Object.defineProperty(exports, "isAddress", { enumerable: true, get: function () { return checks_js_1.isAddress; } });
		Object.defineProperty(exports, "resolveAddress", { enumerable: true, get: function () { return checks_js_1.resolveAddress; } });
		
	} (address$3));
	return address$3;
}

var typed = {};

var hasRequiredTyped;

function requireTyped () {
	if (hasRequiredTyped) return typed;
	hasRequiredTyped = 1;
	/**
	 *  A Typed object allows a value to have its type explicitly
	 *  specified.
	 *
	 *  For example, in Solidity, the value ``45`` could represent a
	 *  ``uint8`` or a ``uint256``. The value ``0x1234`` could represent
	 *  a ``bytes2`` or ``bytes``.
	 *
	 *  Since JavaScript has no meaningful way to explicitly inform any
	 *  APIs which what the type is, this allows transparent interoperation
	 *  with Soldity.
	 *
	 *  @_subsection: api/abi:Typed Values
	 */
	Object.defineProperty(typed, "__esModule", { value: true });
	typed.Typed = void 0;
	const index_js_1 = requireUtils$3();
	const _gaurd = {};
	function n(value, width) {
	    let signed = false;
	    if (width < 0) {
	        signed = true;
	        width *= -1;
	    }
	    // @TODO: Check range is valid for value
	    return new Typed(_gaurd, `${signed ? "" : "u"}int${width}`, value, { signed, width });
	}
	function b(value, size) {
	    // @TODO: Check range is valid for value
	    return new Typed(_gaurd, `bytes${(size) ? size : ""}`, value, { size });
	}
	const _typedSymbol = Symbol.for("_ethers_typed");
	/**
	 *  The **Typed** class to wrap values providing explicit type information.
	 */
	class Typed {
	    /**
	     *  The type, as a Solidity-compatible type.
	     */
	    type;
	    /**
	     *  The actual value.
	     */
	    value;
	    #options;
	    /**
	     *  @_ignore:
	     */
	    _typedSymbol;
	    /**
	     *  @_ignore:
	     */
	    constructor(gaurd, type, value, options) {
	        if (options == null) {
	            options = null;
	        }
	        (0, index_js_1.assertPrivate)(_gaurd, gaurd, "Typed");
	        (0, index_js_1.defineProperties)(this, { _typedSymbol, type, value });
	        this.#options = options;
	        // Check the value is valid
	        this.format();
	    }
	    /**
	     *  Format the type as a Human-Readable type.
	     */
	    format() {
	        if (this.type === "array") {
	            throw new Error("");
	        }
	        else if (this.type === "dynamicArray") {
	            throw new Error("");
	        }
	        else if (this.type === "tuple") {
	            return `tuple(${this.value.map((v) => v.format()).join(",")})`;
	        }
	        return this.type;
	    }
	    /**
	     *  The default value returned by this type.
	     */
	    defaultValue() {
	        return 0;
	    }
	    /**
	     *  The minimum value for numeric types.
	     */
	    minValue() {
	        return 0;
	    }
	    /**
	     *  The maximum value for numeric types.
	     */
	    maxValue() {
	        return 0;
	    }
	    /**
	     *  Returns ``true`` and provides a type guard is this is a [[TypedBigInt]].
	     */
	    isBigInt() {
	        return !!(this.type.match(/^u?int[0-9]+$/));
	    }
	    /**
	     *  Returns ``true`` and provides a type guard is this is a [[TypedData]].
	     */
	    isData() {
	        return this.type.startsWith("bytes");
	    }
	    /**
	     *  Returns ``true`` and provides a type guard is this is a [[TypedString]].
	     */
	    isString() {
	        return (this.type === "string");
	    }
	    /**
	     *  Returns the tuple name, if this is a tuple. Throws otherwise.
	     */
	    get tupleName() {
	        if (this.type !== "tuple") {
	            throw TypeError("not a tuple");
	        }
	        return this.#options;
	    }
	    // Returns the length of this type as an array
	    // - `null` indicates the length is unforced, it could be dynamic
	    // - `-1` indicates the length is dynamic
	    // - any other value indicates it is a static array and is its length
	    /**
	     *  Returns the length of the array type or ``-1`` if it is dynamic.
	     *
	     *  Throws if the type is not an array.
	     */
	    get arrayLength() {
	        if (this.type !== "array") {
	            throw TypeError("not an array");
	        }
	        if (this.#options === true) {
	            return -1;
	        }
	        if (this.#options === false) {
	            return (this.value).length;
	        }
	        return null;
	    }
	    /**
	     *  Returns a new **Typed** of %%type%% with the %%value%%.
	     */
	    static from(type, value) {
	        return new Typed(_gaurd, type, value);
	    }
	    /**
	     *  Return a new ``uint8`` type for %%v%%.
	     */
	    static uint8(v) { return n(v, 8); }
	    /**
	     *  Return a new ``uint16`` type for %%v%%.
	     */
	    static uint16(v) { return n(v, 16); }
	    /**
	     *  Return a new ``uint24`` type for %%v%%.
	     */
	    static uint24(v) { return n(v, 24); }
	    /**
	     *  Return a new ``uint32`` type for %%v%%.
	     */
	    static uint32(v) { return n(v, 32); }
	    /**
	     *  Return a new ``uint40`` type for %%v%%.
	     */
	    static uint40(v) { return n(v, 40); }
	    /**
	     *  Return a new ``uint48`` type for %%v%%.
	     */
	    static uint48(v) { return n(v, 48); }
	    /**
	     *  Return a new ``uint56`` type for %%v%%.
	     */
	    static uint56(v) { return n(v, 56); }
	    /**
	     *  Return a new ``uint64`` type for %%v%%.
	     */
	    static uint64(v) { return n(v, 64); }
	    /**
	     *  Return a new ``uint72`` type for %%v%%.
	     */
	    static uint72(v) { return n(v, 72); }
	    /**
	     *  Return a new ``uint80`` type for %%v%%.
	     */
	    static uint80(v) { return n(v, 80); }
	    /**
	     *  Return a new ``uint88`` type for %%v%%.
	     */
	    static uint88(v) { return n(v, 88); }
	    /**
	     *  Return a new ``uint96`` type for %%v%%.
	     */
	    static uint96(v) { return n(v, 96); }
	    /**
	     *  Return a new ``uint104`` type for %%v%%.
	     */
	    static uint104(v) { return n(v, 104); }
	    /**
	     *  Return a new ``uint112`` type for %%v%%.
	     */
	    static uint112(v) { return n(v, 112); }
	    /**
	     *  Return a new ``uint120`` type for %%v%%.
	     */
	    static uint120(v) { return n(v, 120); }
	    /**
	     *  Return a new ``uint128`` type for %%v%%.
	     */
	    static uint128(v) { return n(v, 128); }
	    /**
	     *  Return a new ``uint136`` type for %%v%%.
	     */
	    static uint136(v) { return n(v, 136); }
	    /**
	     *  Return a new ``uint144`` type for %%v%%.
	     */
	    static uint144(v) { return n(v, 144); }
	    /**
	     *  Return a new ``uint152`` type for %%v%%.
	     */
	    static uint152(v) { return n(v, 152); }
	    /**
	     *  Return a new ``uint160`` type for %%v%%.
	     */
	    static uint160(v) { return n(v, 160); }
	    /**
	     *  Return a new ``uint168`` type for %%v%%.
	     */
	    static uint168(v) { return n(v, 168); }
	    /**
	     *  Return a new ``uint176`` type for %%v%%.
	     */
	    static uint176(v) { return n(v, 176); }
	    /**
	     *  Return a new ``uint184`` type for %%v%%.
	     */
	    static uint184(v) { return n(v, 184); }
	    /**
	     *  Return a new ``uint192`` type for %%v%%.
	     */
	    static uint192(v) { return n(v, 192); }
	    /**
	     *  Return a new ``uint200`` type for %%v%%.
	     */
	    static uint200(v) { return n(v, 200); }
	    /**
	     *  Return a new ``uint208`` type for %%v%%.
	     */
	    static uint208(v) { return n(v, 208); }
	    /**
	     *  Return a new ``uint216`` type for %%v%%.
	     */
	    static uint216(v) { return n(v, 216); }
	    /**
	     *  Return a new ``uint224`` type for %%v%%.
	     */
	    static uint224(v) { return n(v, 224); }
	    /**
	     *  Return a new ``uint232`` type for %%v%%.
	     */
	    static uint232(v) { return n(v, 232); }
	    /**
	     *  Return a new ``uint240`` type for %%v%%.
	     */
	    static uint240(v) { return n(v, 240); }
	    /**
	     *  Return a new ``uint248`` type for %%v%%.
	     */
	    static uint248(v) { return n(v, 248); }
	    /**
	     *  Return a new ``uint256`` type for %%v%%.
	     */
	    static uint256(v) { return n(v, 256); }
	    /**
	     *  Return a new ``uint256`` type for %%v%%.
	     */
	    static uint(v) { return n(v, 256); }
	    /**
	     *  Return a new ``int8`` type for %%v%%.
	     */
	    static int8(v) { return n(v, -8); }
	    /**
	     *  Return a new ``int16`` type for %%v%%.
	     */
	    static int16(v) { return n(v, -16); }
	    /**
	     *  Return a new ``int24`` type for %%v%%.
	     */
	    static int24(v) { return n(v, -24); }
	    /**
	     *  Return a new ``int32`` type for %%v%%.
	     */
	    static int32(v) { return n(v, -32); }
	    /**
	     *  Return a new ``int40`` type for %%v%%.
	     */
	    static int40(v) { return n(v, -40); }
	    /**
	     *  Return a new ``int48`` type for %%v%%.
	     */
	    static int48(v) { return n(v, -48); }
	    /**
	     *  Return a new ``int56`` type for %%v%%.
	     */
	    static int56(v) { return n(v, -56); }
	    /**
	     *  Return a new ``int64`` type for %%v%%.
	     */
	    static int64(v) { return n(v, -64); }
	    /**
	     *  Return a new ``int72`` type for %%v%%.
	     */
	    static int72(v) { return n(v, -72); }
	    /**
	     *  Return a new ``int80`` type for %%v%%.
	     */
	    static int80(v) { return n(v, -80); }
	    /**
	     *  Return a new ``int88`` type for %%v%%.
	     */
	    static int88(v) { return n(v, -88); }
	    /**
	     *  Return a new ``int96`` type for %%v%%.
	     */
	    static int96(v) { return n(v, -96); }
	    /**
	     *  Return a new ``int104`` type for %%v%%.
	     */
	    static int104(v) { return n(v, -104); }
	    /**
	     *  Return a new ``int112`` type for %%v%%.
	     */
	    static int112(v) { return n(v, -112); }
	    /**
	     *  Return a new ``int120`` type for %%v%%.
	     */
	    static int120(v) { return n(v, -120); }
	    /**
	     *  Return a new ``int128`` type for %%v%%.
	     */
	    static int128(v) { return n(v, -128); }
	    /**
	     *  Return a new ``int136`` type for %%v%%.
	     */
	    static int136(v) { return n(v, -136); }
	    /**
	     *  Return a new ``int144`` type for %%v%%.
	     */
	    static int144(v) { return n(v, -144); }
	    /**
	     *  Return a new ``int52`` type for %%v%%.
	     */
	    static int152(v) { return n(v, -152); }
	    /**
	     *  Return a new ``int160`` type for %%v%%.
	     */
	    static int160(v) { return n(v, -160); }
	    /**
	     *  Return a new ``int168`` type for %%v%%.
	     */
	    static int168(v) { return n(v, -168); }
	    /**
	     *  Return a new ``int176`` type for %%v%%.
	     */
	    static int176(v) { return n(v, -176); }
	    /**
	     *  Return a new ``int184`` type for %%v%%.
	     */
	    static int184(v) { return n(v, -184); }
	    /**
	     *  Return a new ``int92`` type for %%v%%.
	     */
	    static int192(v) { return n(v, -192); }
	    /**
	     *  Return a new ``int200`` type for %%v%%.
	     */
	    static int200(v) { return n(v, -200); }
	    /**
	     *  Return a new ``int208`` type for %%v%%.
	     */
	    static int208(v) { return n(v, -208); }
	    /**
	     *  Return a new ``int216`` type for %%v%%.
	     */
	    static int216(v) { return n(v, -216); }
	    /**
	     *  Return a new ``int224`` type for %%v%%.
	     */
	    static int224(v) { return n(v, -224); }
	    /**
	     *  Return a new ``int232`` type for %%v%%.
	     */
	    static int232(v) { return n(v, -232); }
	    /**
	     *  Return a new ``int240`` type for %%v%%.
	     */
	    static int240(v) { return n(v, -240); }
	    /**
	     *  Return a new ``int248`` type for %%v%%.
	     */
	    static int248(v) { return n(v, -248); }
	    /**
	     *  Return a new ``int256`` type for %%v%%.
	     */
	    static int256(v) { return n(v, -256); }
	    /**
	     *  Return a new ``int256`` type for %%v%%.
	     */
	    static int(v) { return n(v, -256); }
	    /**
	     *  Return a new ``bytes1`` type for %%v%%.
	     */
	    static bytes1(v) { return b(v, 1); }
	    /**
	     *  Return a new ``bytes2`` type for %%v%%.
	     */
	    static bytes2(v) { return b(v, 2); }
	    /**
	     *  Return a new ``bytes3`` type for %%v%%.
	     */
	    static bytes3(v) { return b(v, 3); }
	    /**
	     *  Return a new ``bytes4`` type for %%v%%.
	     */
	    static bytes4(v) { return b(v, 4); }
	    /**
	     *  Return a new ``bytes5`` type for %%v%%.
	     */
	    static bytes5(v) { return b(v, 5); }
	    /**
	     *  Return a new ``bytes6`` type for %%v%%.
	     */
	    static bytes6(v) { return b(v, 6); }
	    /**
	     *  Return a new ``bytes7`` type for %%v%%.
	     */
	    static bytes7(v) { return b(v, 7); }
	    /**
	     *  Return a new ``bytes8`` type for %%v%%.
	     */
	    static bytes8(v) { return b(v, 8); }
	    /**
	     *  Return a new ``bytes9`` type for %%v%%.
	     */
	    static bytes9(v) { return b(v, 9); }
	    /**
	     *  Return a new ``bytes10`` type for %%v%%.
	     */
	    static bytes10(v) { return b(v, 10); }
	    /**
	     *  Return a new ``bytes11`` type for %%v%%.
	     */
	    static bytes11(v) { return b(v, 11); }
	    /**
	     *  Return a new ``bytes12`` type for %%v%%.
	     */
	    static bytes12(v) { return b(v, 12); }
	    /**
	     *  Return a new ``bytes13`` type for %%v%%.
	     */
	    static bytes13(v) { return b(v, 13); }
	    /**
	     *  Return a new ``bytes14`` type for %%v%%.
	     */
	    static bytes14(v) { return b(v, 14); }
	    /**
	     *  Return a new ``bytes15`` type for %%v%%.
	     */
	    static bytes15(v) { return b(v, 15); }
	    /**
	     *  Return a new ``bytes16`` type for %%v%%.
	     */
	    static bytes16(v) { return b(v, 16); }
	    /**
	     *  Return a new ``bytes17`` type for %%v%%.
	     */
	    static bytes17(v) { return b(v, 17); }
	    /**
	     *  Return a new ``bytes18`` type for %%v%%.
	     */
	    static bytes18(v) { return b(v, 18); }
	    /**
	     *  Return a new ``bytes19`` type for %%v%%.
	     */
	    static bytes19(v) { return b(v, 19); }
	    /**
	     *  Return a new ``bytes20`` type for %%v%%.
	     */
	    static bytes20(v) { return b(v, 20); }
	    /**
	     *  Return a new ``bytes21`` type for %%v%%.
	     */
	    static bytes21(v) { return b(v, 21); }
	    /**
	     *  Return a new ``bytes22`` type for %%v%%.
	     */
	    static bytes22(v) { return b(v, 22); }
	    /**
	     *  Return a new ``bytes23`` type for %%v%%.
	     */
	    static bytes23(v) { return b(v, 23); }
	    /**
	     *  Return a new ``bytes24`` type for %%v%%.
	     */
	    static bytes24(v) { return b(v, 24); }
	    /**
	     *  Return a new ``bytes25`` type for %%v%%.
	     */
	    static bytes25(v) { return b(v, 25); }
	    /**
	     *  Return a new ``bytes26`` type for %%v%%.
	     */
	    static bytes26(v) { return b(v, 26); }
	    /**
	     *  Return a new ``bytes27`` type for %%v%%.
	     */
	    static bytes27(v) { return b(v, 27); }
	    /**
	     *  Return a new ``bytes28`` type for %%v%%.
	     */
	    static bytes28(v) { return b(v, 28); }
	    /**
	     *  Return a new ``bytes29`` type for %%v%%.
	     */
	    static bytes29(v) { return b(v, 29); }
	    /**
	     *  Return a new ``bytes30`` type for %%v%%.
	     */
	    static bytes30(v) { return b(v, 30); }
	    /**
	     *  Return a new ``bytes31`` type for %%v%%.
	     */
	    static bytes31(v) { return b(v, 31); }
	    /**
	     *  Return a new ``bytes32`` type for %%v%%.
	     */
	    static bytes32(v) { return b(v, 32); }
	    /**
	     *  Return a new ``address`` type for %%v%%.
	     */
	    static address(v) { return new Typed(_gaurd, "address", v); }
	    /**
	     *  Return a new ``bool`` type for %%v%%.
	     */
	    static bool(v) { return new Typed(_gaurd, "bool", !!v); }
	    /**
	     *  Return a new ``bytes`` type for %%v%%.
	     */
	    static bytes(v) { return new Typed(_gaurd, "bytes", v); }
	    /**
	     *  Return a new ``string`` type for %%v%%.
	     */
	    static string(v) { return new Typed(_gaurd, "string", v); }
	    /**
	     *  Return a new ``array`` type for %%v%%, allowing %%dynamic%% length.
	     */
	    static array(v, dynamic) {
	        throw new Error("not implemented yet");
	    }
	    /**
	     *  Return a new ``tuple`` type for %%v%%, with the optional %%name%%.
	     */
	    static tuple(v, name) {
	        throw new Error("not implemented yet");
	    }
	    /**
	     *  Return a new ``uint8`` type for %%v%%.
	     */
	    static overrides(v) {
	        return new Typed(_gaurd, "overrides", Object.assign({}, v));
	    }
	    /**
	     *  Returns true only if %%value%% is a [[Typed]] instance.
	     */
	    static isTyped(value) {
	        return (value
	            && typeof (value) === "object"
	            && "_typedSymbol" in value
	            && value._typedSymbol === _typedSymbol);
	    }
	    /**
	     *  If the value is a [[Typed]] instance, validates the underlying value
	     *  and returns it, otherwise returns value directly.
	     *
	     *  This is useful for functions that with to accept either a [[Typed]]
	     *  object or values.
	     */
	    static dereference(value, type) {
	        if (Typed.isTyped(value)) {
	            if (value.type !== type) {
	                throw new Error(`invalid type: expecetd ${type}, got ${value.type}`);
	            }
	            return value.value;
	        }
	        return value;
	    }
	}
	typed.Typed = Typed;
	
	return typed;
}

var hasRequiredAddress$1;

function requireAddress$1 () {
	if (hasRequiredAddress$1) return address$4;
	hasRequiredAddress$1 = 1;
	Object.defineProperty(address$4, "__esModule", { value: true });
	address$4.AddressCoder = void 0;
	const index_js_1 = requireAddress$2();
	const maths_js_1 = requireMaths();
	const typed_js_1 = requireTyped();
	const abstract_coder_js_1 = requireAbstractCoder();
	/**
	 *  @_ignore
	 */
	class AddressCoder extends abstract_coder_js_1.Coder {
	    constructor(localName) {
	        super("address", "address", localName, false);
	    }
	    defaultValue() {
	        return "0x0000000000000000000000000000000000000000";
	    }
	    encode(writer, _value) {
	        let value = typed_js_1.Typed.dereference(_value, "string");
	        try {
	            value = (0, index_js_1.getAddress)(value);
	        }
	        catch (error) {
	            return this._throwError(error.message, _value);
	        }
	        return writer.writeValue(value);
	    }
	    decode(reader) {
	        return (0, index_js_1.getAddress)((0, maths_js_1.toBeHex)(reader.readValue(), 20));
	    }
	}
	address$4.AddressCoder = AddressCoder;
	
	return address$4;
}

var array = {};

var anonymous = {};

var hasRequiredAnonymous;

function requireAnonymous () {
	if (hasRequiredAnonymous) return anonymous;
	hasRequiredAnonymous = 1;
	Object.defineProperty(anonymous, "__esModule", { value: true });
	anonymous.AnonymousCoder = void 0;
	const abstract_coder_js_1 = requireAbstractCoder();
	/**
	 *  Clones the functionality of an existing Coder, but without a localName
	 *
	 *  @_ignore
	 */
	class AnonymousCoder extends abstract_coder_js_1.Coder {
	    coder;
	    constructor(coder) {
	        super(coder.name, coder.type, "_", coder.dynamic);
	        this.coder = coder;
	    }
	    defaultValue() {
	        return this.coder.defaultValue();
	    }
	    encode(writer, value) {
	        return this.coder.encode(writer, value);
	    }
	    decode(reader) {
	        return this.coder.decode(reader);
	    }
	}
	anonymous.AnonymousCoder = AnonymousCoder;
	
	return anonymous;
}

var hasRequiredArray;

function requireArray () {
	if (hasRequiredArray) return array;
	hasRequiredArray = 1;
	Object.defineProperty(array, "__esModule", { value: true });
	array.ArrayCoder = array.unpack = array.pack = void 0;
	const index_js_1 = requireUtils$3();
	const typed_js_1 = requireTyped();
	const abstract_coder_js_1 = requireAbstractCoder();
	const anonymous_js_1 = requireAnonymous();
	/**
	 *  @_ignore
	 */
	function pack(writer, coders, values) {
	    let arrayValues = [];
	    if (Array.isArray(values)) {
	        arrayValues = values;
	    }
	    else if (values && typeof (values) === "object") {
	        let unique = {};
	        arrayValues = coders.map((coder) => {
	            const name = coder.localName;
	            (0, index_js_1.assert)(name, "cannot encode object for signature with missing names", "INVALID_ARGUMENT", { argument: "values", info: { coder }, value: values });
	            (0, index_js_1.assert)(!unique[name], "cannot encode object for signature with duplicate names", "INVALID_ARGUMENT", { argument: "values", info: { coder }, value: values });
	            unique[name] = true;
	            return values[name];
	        });
	    }
	    else {
	        (0, index_js_1.assertArgument)(false, "invalid tuple value", "tuple", values);
	    }
	    (0, index_js_1.assertArgument)(coders.length === arrayValues.length, "types/value length mismatch", "tuple", values);
	    let staticWriter = new abstract_coder_js_1.Writer();
	    let dynamicWriter = new abstract_coder_js_1.Writer();
	    let updateFuncs = [];
	    coders.forEach((coder, index) => {
	        let value = arrayValues[index];
	        if (coder.dynamic) {
	            // Get current dynamic offset (for the future pointer)
	            let dynamicOffset = dynamicWriter.length;
	            // Encode the dynamic value into the dynamicWriter
	            coder.encode(dynamicWriter, value);
	            // Prepare to populate the correct offset once we are done
	            let updateFunc = staticWriter.writeUpdatableValue();
	            updateFuncs.push((baseOffset) => {
	                updateFunc(baseOffset + dynamicOffset);
	            });
	        }
	        else {
	            coder.encode(staticWriter, value);
	        }
	    });
	    // Backfill all the dynamic offsets, now that we know the static length
	    updateFuncs.forEach((func) => { func(staticWriter.length); });
	    let length = writer.appendWriter(staticWriter);
	    length += writer.appendWriter(dynamicWriter);
	    return length;
	}
	array.pack = pack;
	/**
	 *  @_ignore
	 */
	function unpack(reader, coders) {
	    let values = [];
	    let keys = [];
	    // A reader anchored to this base
	    let baseReader = reader.subReader(0);
	    coders.forEach((coder) => {
	        let value = null;
	        if (coder.dynamic) {
	            let offset = reader.readIndex();
	            let offsetReader = baseReader.subReader(offset);
	            try {
	                value = coder.decode(offsetReader);
	            }
	            catch (error) {
	                // Cannot recover from this
	                if ((0, index_js_1.isError)(error, "BUFFER_OVERRUN")) {
	                    throw error;
	                }
	                value = error;
	                value.baseType = coder.name;
	                value.name = coder.localName;
	                value.type = coder.type;
	            }
	        }
	        else {
	            try {
	                value = coder.decode(reader);
	            }
	            catch (error) {
	                // Cannot recover from this
	                if ((0, index_js_1.isError)(error, "BUFFER_OVERRUN")) {
	                    throw error;
	                }
	                value = error;
	                value.baseType = coder.name;
	                value.name = coder.localName;
	                value.type = coder.type;
	            }
	        }
	        if (value == undefined) {
	            throw new Error("investigate");
	        }
	        values.push(value);
	        keys.push(coder.localName || null);
	    });
	    return abstract_coder_js_1.Result.fromItems(values, keys);
	}
	array.unpack = unpack;
	/**
	 *  @_ignore
	 */
	class ArrayCoder extends abstract_coder_js_1.Coder {
	    coder;
	    length;
	    constructor(coder, length, localName) {
	        const type = (coder.type + "[" + (length >= 0 ? length : "") + "]");
	        const dynamic = (length === -1 || coder.dynamic);
	        super("array", type, localName, dynamic);
	        (0, index_js_1.defineProperties)(this, { coder, length });
	    }
	    defaultValue() {
	        // Verifies the child coder is valid (even if the array is dynamic or 0-length)
	        const defaultChild = this.coder.defaultValue();
	        const result = [];
	        for (let i = 0; i < this.length; i++) {
	            result.push(defaultChild);
	        }
	        return result;
	    }
	    encode(writer, _value) {
	        const value = typed_js_1.Typed.dereference(_value, "array");
	        if (!Array.isArray(value)) {
	            this._throwError("expected array value", value);
	        }
	        let count = this.length;
	        if (count === -1) {
	            count = value.length;
	            writer.writeValue(value.length);
	        }
	        (0, index_js_1.assertArgumentCount)(value.length, count, "coder array" + (this.localName ? (" " + this.localName) : ""));
	        let coders = [];
	        for (let i = 0; i < value.length; i++) {
	            coders.push(this.coder);
	        }
	        return pack(writer, coders, value);
	    }
	    decode(reader) {
	        let count = this.length;
	        if (count === -1) {
	            count = reader.readIndex();
	            // Check that there is *roughly* enough data to ensure
	            // stray random data is not being read as a length. Each
	            // slot requires at least 32 bytes for their value (or 32
	            // bytes as a link to the data). This could use a much
	            // tighter bound, but we are erroring on the side of safety.
	            (0, index_js_1.assert)(count * abstract_coder_js_1.WordSize <= reader.dataLength, "insufficient data length", "BUFFER_OVERRUN", { buffer: reader.bytes, offset: count * abstract_coder_js_1.WordSize, length: reader.dataLength });
	        }
	        let coders = [];
	        for (let i = 0; i < count; i++) {
	            coders.push(new anonymous_js_1.AnonymousCoder(this.coder));
	        }
	        return unpack(reader, coders);
	    }
	}
	array.ArrayCoder = ArrayCoder;
	
	return array;
}

var boolean = {};

var hasRequiredBoolean;

function requireBoolean () {
	if (hasRequiredBoolean) return boolean;
	hasRequiredBoolean = 1;
	Object.defineProperty(boolean, "__esModule", { value: true });
	boolean.BooleanCoder = void 0;
	const typed_js_1 = requireTyped();
	const abstract_coder_js_1 = requireAbstractCoder();
	/**
	 *  @_ignore
	 */
	class BooleanCoder extends abstract_coder_js_1.Coder {
	    constructor(localName) {
	        super("bool", "bool", localName, false);
	    }
	    defaultValue() {
	        return false;
	    }
	    encode(writer, _value) {
	        const value = typed_js_1.Typed.dereference(_value, "bool");
	        return writer.writeValue(value ? 1 : 0);
	    }
	    decode(reader) {
	        return !!reader.readValue();
	    }
	}
	boolean.BooleanCoder = BooleanCoder;
	
	return boolean;
}

var bytes$2 = {};

var hasRequiredBytes$1;

function requireBytes$1 () {
	if (hasRequiredBytes$1) return bytes$2;
	hasRequiredBytes$1 = 1;
	Object.defineProperty(bytes$2, "__esModule", { value: true });
	bytes$2.BytesCoder = bytes$2.DynamicBytesCoder = void 0;
	const index_js_1 = requireUtils$3();
	const abstract_coder_js_1 = requireAbstractCoder();
	/**
	 *  @_ignore
	 */
	class DynamicBytesCoder extends abstract_coder_js_1.Coder {
	    constructor(type, localName) {
	        super(type, type, localName, true);
	    }
	    defaultValue() {
	        return "0x";
	    }
	    encode(writer, value) {
	        value = (0, index_js_1.getBytesCopy)(value);
	        let length = writer.writeValue(value.length);
	        length += writer.writeBytes(value);
	        return length;
	    }
	    decode(reader) {
	        return reader.readBytes(reader.readIndex(), true);
	    }
	}
	bytes$2.DynamicBytesCoder = DynamicBytesCoder;
	/**
	 *  @_ignore
	 */
	class BytesCoder extends DynamicBytesCoder {
	    constructor(localName) {
	        super("bytes", localName);
	    }
	    decode(reader) {
	        return (0, index_js_1.hexlify)(super.decode(reader));
	    }
	}
	bytes$2.BytesCoder = BytesCoder;
	
	return bytes$2;
}

var fixedBytes = {};

var hasRequiredFixedBytes;

function requireFixedBytes () {
	if (hasRequiredFixedBytes) return fixedBytes;
	hasRequiredFixedBytes = 1;
	Object.defineProperty(fixedBytes, "__esModule", { value: true });
	fixedBytes.FixedBytesCoder = void 0;
	const index_js_1 = requireUtils$3();
	const typed_js_1 = requireTyped();
	const abstract_coder_js_1 = requireAbstractCoder();
	/**
	 *  @_ignore
	 */
	class FixedBytesCoder extends abstract_coder_js_1.Coder {
	    size;
	    constructor(size, localName) {
	        let name = "bytes" + String(size);
	        super(name, name, localName, false);
	        (0, index_js_1.defineProperties)(this, { size }, { size: "number" });
	    }
	    defaultValue() {
	        return ("0x0000000000000000000000000000000000000000000000000000000000000000").substring(0, 2 + this.size * 2);
	    }
	    encode(writer, _value) {
	        let data = (0, index_js_1.getBytesCopy)(typed_js_1.Typed.dereference(_value, this.type));
	        if (data.length !== this.size) {
	            this._throwError("incorrect data length", _value);
	        }
	        return writer.writeBytes(data);
	    }
	    decode(reader) {
	        return (0, index_js_1.hexlify)(reader.readBytes(this.size));
	    }
	}
	fixedBytes.FixedBytesCoder = FixedBytesCoder;
	
	return fixedBytes;
}

var _null = {};

var hasRequired_null;

function require_null () {
	if (hasRequired_null) return _null;
	hasRequired_null = 1;
	Object.defineProperty(_null, "__esModule", { value: true });
	_null.NullCoder = void 0;
	const abstract_coder_js_1 = requireAbstractCoder();
	const Empty = new Uint8Array([]);
	/**
	 *  @_ignore
	 */
	class NullCoder extends abstract_coder_js_1.Coder {
	    constructor(localName) {
	        super("null", "", localName, false);
	    }
	    defaultValue() {
	        return null;
	    }
	    encode(writer, value) {
	        if (value != null) {
	            this._throwError("not null", value);
	        }
	        return writer.writeBytes(Empty);
	    }
	    decode(reader) {
	        reader.readBytes(0);
	        return null;
	    }
	}
	_null.NullCoder = NullCoder;
	
	return _null;
}

var number$1 = {};

var hasRequiredNumber;

function requireNumber () {
	if (hasRequiredNumber) return number$1;
	hasRequiredNumber = 1;
	Object.defineProperty(number$1, "__esModule", { value: true });
	number$1.NumberCoder = void 0;
	const index_js_1 = requireUtils$3();
	const typed_js_1 = requireTyped();
	const abstract_coder_js_1 = requireAbstractCoder();
	const BN_0 = BigInt(0);
	const BN_1 = BigInt(1);
	const BN_MAX_UINT256 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
	/**
	 *  @_ignore
	 */
	class NumberCoder extends abstract_coder_js_1.Coder {
	    size;
	    signed;
	    constructor(size, signed, localName) {
	        const name = ((signed ? "int" : "uint") + (size * 8));
	        super(name, name, localName, false);
	        (0, index_js_1.defineProperties)(this, { size, signed }, { size: "number", signed: "boolean" });
	    }
	    defaultValue() {
	        return 0;
	    }
	    encode(writer, _value) {
	        let value = (0, index_js_1.getBigInt)(typed_js_1.Typed.dereference(_value, this.type));
	        // Check bounds are safe for encoding
	        let maxUintValue = (0, index_js_1.mask)(BN_MAX_UINT256, abstract_coder_js_1.WordSize * 8);
	        if (this.signed) {
	            let bounds = (0, index_js_1.mask)(maxUintValue, (this.size * 8) - 1);
	            if (value > bounds || value < -(bounds + BN_1)) {
	                this._throwError("value out-of-bounds", _value);
	            }
	            value = (0, index_js_1.toTwos)(value, 8 * abstract_coder_js_1.WordSize);
	        }
	        else if (value < BN_0 || value > (0, index_js_1.mask)(maxUintValue, this.size * 8)) {
	            this._throwError("value out-of-bounds", _value);
	        }
	        return writer.writeValue(value);
	    }
	    decode(reader) {
	        let value = (0, index_js_1.mask)(reader.readValue(), this.size * 8);
	        if (this.signed) {
	            value = (0, index_js_1.fromTwos)(value, this.size * 8);
	        }
	        return value;
	    }
	}
	number$1.NumberCoder = NumberCoder;
	
	return number$1;
}

var string = {};

var hasRequiredString;

function requireString () {
	if (hasRequiredString) return string;
	hasRequiredString = 1;
	Object.defineProperty(string, "__esModule", { value: true });
	string.StringCoder = void 0;
	const utf8_js_1 = requireUtf8();
	const typed_js_1 = requireTyped();
	const bytes_js_1 = requireBytes$1();
	/**
	 *  @_ignore
	 */
	class StringCoder extends bytes_js_1.DynamicBytesCoder {
	    constructor(localName) {
	        super("string", localName);
	    }
	    defaultValue() {
	        return "";
	    }
	    encode(writer, _value) {
	        return super.encode(writer, (0, utf8_js_1.toUtf8Bytes)(typed_js_1.Typed.dereference(_value, "string")));
	    }
	    decode(reader) {
	        return (0, utf8_js_1.toUtf8String)(super.decode(reader));
	    }
	}
	string.StringCoder = StringCoder;
	
	return string;
}

var tuple = {};

var hasRequiredTuple;

function requireTuple () {
	if (hasRequiredTuple) return tuple;
	hasRequiredTuple = 1;
	Object.defineProperty(tuple, "__esModule", { value: true });
	tuple.TupleCoder = void 0;
	const properties_js_1 = requireProperties();
	const typed_js_1 = requireTyped();
	const abstract_coder_js_1 = requireAbstractCoder();
	const array_js_1 = requireArray();
	/**
	 *  @_ignore
	 */
	class TupleCoder extends abstract_coder_js_1.Coder {
	    coders;
	    constructor(coders, localName) {
	        let dynamic = false;
	        const types = [];
	        coders.forEach((coder) => {
	            if (coder.dynamic) {
	                dynamic = true;
	            }
	            types.push(coder.type);
	        });
	        const type = ("tuple(" + types.join(",") + ")");
	        super("tuple", type, localName, dynamic);
	        (0, properties_js_1.defineProperties)(this, { coders: Object.freeze(coders.slice()) });
	    }
	    defaultValue() {
	        const values = [];
	        this.coders.forEach((coder) => {
	            values.push(coder.defaultValue());
	        });
	        // We only output named properties for uniquely named coders
	        const uniqueNames = this.coders.reduce((accum, coder) => {
	            const name = coder.localName;
	            if (name) {
	                if (!accum[name]) {
	                    accum[name] = 0;
	                }
	                accum[name]++;
	            }
	            return accum;
	        }, {});
	        // Add named values
	        this.coders.forEach((coder, index) => {
	            let name = coder.localName;
	            if (!name || uniqueNames[name] !== 1) {
	                return;
	            }
	            if (name === "length") {
	                name = "_length";
	            }
	            if (values[name] != null) {
	                return;
	            }
	            values[name] = values[index];
	        });
	        return Object.freeze(values);
	    }
	    encode(writer, _value) {
	        const value = typed_js_1.Typed.dereference(_value, "tuple");
	        return (0, array_js_1.pack)(writer, this.coders, value);
	    }
	    decode(reader) {
	        return (0, array_js_1.unpack)(reader, this.coders);
	    }
	}
	tuple.TupleCoder = TupleCoder;
	
	return tuple;
}

var fragments = {};

var hash$2 = {};

var id = {};

var hasRequiredId;

function requireId () {
	if (hasRequiredId) return id;
	hasRequiredId = 1;
	Object.defineProperty(id, "__esModule", { value: true });
	id.id = void 0;
	const index_js_1 = requireCrypto();
	const index_js_2 = requireUtils$3();
	/**
	 *  A simple hashing function which operates on UTF-8 strings to
	 *  compute an 32-byte identifier.
	 *
	 *  This simply computes the [UTF-8 bytes](toUtf8Bytes) and computes
	 *  the [[keccak256]].
	 *
	 *  @example:
	 *    id("hello world")
	 *    //_result:
	 */
	function id$1(value) {
	    return (0, index_js_1.keccak256)((0, index_js_2.toUtf8Bytes)(value));
	}
	id.id = id$1;
	
	return id;
}

var namehash = {};

var dist = {};

var hasRequiredDist;

function requireDist () {
	if (hasRequiredDist) return dist;
	hasRequiredDist = 1;

	// created 2023-09-25T01:01:55.148Z
	// compressed base64-encoded blob for include-ens data
	// source: https://github.com/adraffy/ens-normalize.js/blob/main/src/make.js
	// see: https://github.com/adraffy/ens-normalize.js#security
	// SHA-256: 0565ed049b9cf1614bb9e11ba7d8ac6a6fb96c893253d890f7e2b2884b9ded32
	var COMPRESSED$1 = '';
	const FENCED = new Map([[8217,"apostrophe"],[8260,"fraction slash"],[12539,"middle dot"]]);
	const NSM_MAX = 4;

	function decode_arithmetic(bytes) {
		let pos = 0;
		function u16() { return (bytes[pos++] << 8) | bytes[pos++]; }
		
		// decode the frequency table
		let symbol_count = u16();
		let total = 1;
		let acc = [0, 1]; // first symbol has frequency 1
		for (let i = 1; i < symbol_count; i++) {
			acc.push(total += u16());
		}

		// skip the sized-payload that the last 3 symbols index into
		let skip = u16();
		let pos_payload = pos;
		pos += skip;

		let read_width = 0;
		let read_buffer = 0; 
		function read_bit() {
			if (read_width == 0) {
				// this will read beyond end of buffer
				// but (undefined|0) => zero pad
				read_buffer = (read_buffer << 8) | bytes[pos++];
				read_width = 8;
			}
			return (read_buffer >> --read_width) & 1;
		}

		const N = 31;
		const FULL = 2**N;
		const HALF = FULL >>> 1;
		const QRTR = HALF >> 1;
		const MASK = FULL - 1;

		// fill register
		let register = 0;
		for (let i = 0; i < N; i++) register = (register << 1) | read_bit();

		let symbols = [];
		let low = 0;
		let range = FULL; // treat like a float
		while (true) {
			let value = Math.floor((((register - low + 1) * total) - 1) / range);
			let start = 0;
			let end = symbol_count;
			while (end - start > 1) { // binary search
				let mid = (start + end) >>> 1;
				if (value < acc[mid]) {
					end = mid;
				} else {
					start = mid;
				}
			}
			if (start == 0) break; // first symbol is end mark
			symbols.push(start);
			let a = low + Math.floor(range * acc[start]   / total);
			let b = low + Math.floor(range * acc[start+1] / total) - 1;
			while (((a ^ b) & HALF) == 0) {
				register = (register << 1) & MASK | read_bit();
				a = (a << 1) & MASK;
				b = (b << 1) & MASK | 1;
			}
			while (a & ~b & QRTR) {
				register = (register & HALF) | ((register << 1) & (MASK >>> 1)) | read_bit();
				a = (a << 1) ^ HALF;
				b = ((b ^ HALF) << 1) | HALF | 1;
			}
			low = a;
			range = 1 + b - a;
		}
		let offset = symbol_count - 4;
		return symbols.map(x => { // index into payload
			switch (x - offset) {
				case 3: return offset + 0x10100 + ((bytes[pos_payload++] << 16) | (bytes[pos_payload++] << 8) | bytes[pos_payload++]);
				case 2: return offset + 0x100 + ((bytes[pos_payload++] << 8) | bytes[pos_payload++]);
				case 1: return offset + bytes[pos_payload++];
				default: return x - 1;
			}
		});
	}	

	// returns an iterator which returns the next symbol
	function read_payload(v) {
		let pos = 0;
		return () => v[pos++];
	}
	function read_compressed_payload(s) {
		return read_payload(decode_arithmetic(unsafe_atob(s)));
	}

	// unsafe in the sense:
	// expected well-formed Base64 w/o padding 
	// 20220922: added for https://github.com/adraffy/ens-normalize.js/issues/4
	function unsafe_atob(s) {
		let lookup = [];
		[...'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'].forEach((c, i) => lookup[c.charCodeAt(0)] = i);
		let n = s.length;
		let ret = new Uint8Array((6 * n) >> 3);
		for (let i = 0, pos = 0, width = 0, carry = 0; i < n; i++) {
			carry = (carry << 6) | lookup[s.charCodeAt(i)];
			width += 6;
			if (width >= 8) {
				ret[pos++] = (carry >> (width -= 8));
			}
		}
		return ret;
	}

	// eg. [0,1,2,3...] => [0,-1,1,-2,...]
	function signed(i) { 
		return (i & 1) ? (~i >> 1) : (i >> 1);
	}

	function read_deltas(n, next) {
		let v = Array(n);
		for (let i = 0, x = 0; i < n; i++) v[i] = x += signed(next());
		return v;
	}

	// [123][5] => [0 3] [1 1] [0 0]
	function read_sorted(next, prev = 0) {
		let ret = [];
		while (true) {
			let x = next();
			let n = next();
			if (!n) break;
			prev += x;
			for (let i = 0; i < n; i++) {
				ret.push(prev + i);
			}
			prev += n + 1;
		}
		return ret;
	}

	function read_sorted_arrays(next) {
		return read_array_while(() => { 
			let v = read_sorted(next);
			if (v.length) return v;
		});
	}

	// returns map of x => ys
	function read_mapped(next) {
		let ret = [];
		while (true) {
			let w = next();
			if (w == 0) break;
			ret.push(read_linear_table(w, next));
		}
		while (true) {
			let w = next() - 1;
			if (w < 0) break;
			ret.push(read_replacement_table(w, next));
		}
		return ret.flat();
	}

	// read until next is falsy
	// return array of read values
	function read_array_while(next) {
		let v = [];
		while (true) {
			let x = next(v.length);
			if (!x) break;
			v.push(x);
		}
		return v;
	}

	// read w columns of length n
	// return as n rows of length w
	function read_transposed(n, w, next) {
		let m = Array(n).fill().map(() => []);
		for (let i = 0; i < w; i++) {
			read_deltas(n, next).forEach((x, j) => m[j].push(x));
		}
		return m;
	}
	 
	// returns [[x, ys], [x+dx, ys+dy], [x+2*dx, ys+2*dy], ...]
	// where dx/dy = steps, n = run size, w = length of y
	function read_linear_table(w, next) {
		let dx = 1 + next();
		let dy = next();
		let vN = read_array_while(next);
		let m = read_transposed(vN.length, 1+w, next);
		return m.flatMap((v, i) => {
			let [x, ...ys] = v;
			return Array(vN[i]).fill().map((_, j) => {
				let j_dy = j * dy;
				return [x + j * dx, ys.map(y => y + j_dy)];
			});
		});
	}

	// return [[x, ys...], ...]
	// where w = length of y
	function read_replacement_table(w, next) { 
		let n = 1 + next();
		let m = read_transposed(n, 1+w, next);
		return m.map(v => [v[0], v.slice(1)]);
	}


	function read_trie(next) {
		let ret = [];
		let sorted = read_sorted(next); 
		expand(decode([]), []);
		return ret; // not sorted
		function decode(Q) { // characters that lead into this node
			let S = next(); // state: valid, save, check
			let B = read_array_while(() => { // buckets leading to new nodes
				let cps = read_sorted(next).map(i => sorted[i]);
				if (cps.length) return decode(cps);
			});
			return {S, B, Q};
		}
		function expand({S, B}, cps, saved) {
			if (S & 4 && saved === cps[cps.length-1]) return;
			if (S & 2) saved = cps[cps.length-1];
			if (S & 1) ret.push(cps); 
			for (let br of B) {
				for (let cp of br.Q) {
					expand(br, [...cps, cp], saved);
				}
			}
		}
	}

	function hex_cp(cp) {
		return cp.toString(16).toUpperCase().padStart(2, '0');
	}

	function quote_cp(cp) {
		return `{${hex_cp(cp)}}`; // raffy convention: like "\u{X}" w/o the "\u"
	}

	/*
	export function explode_cp(s) {
		return [...s].map(c => c.codePointAt(0));
	}
	*/
	function explode_cp(s) { // this is about 2x faster
		let cps = [];
		for (let pos = 0, len = s.length; pos < len; ) {
			let cp = s.codePointAt(pos);
			pos += cp < 0x10000 ? 1 : 2;
			cps.push(cp);
		}
		return cps;
	}

	function str_from_cps(cps) {
		const chunk = 4096;
		let len = cps.length;
		if (len < chunk) return String.fromCodePoint(...cps);
		let buf = [];
		for (let i = 0; i < len; ) {
			buf.push(String.fromCodePoint(...cps.slice(i, i += chunk)));
		}
		return buf.join('');
	}

	function compare_arrays(a, b) {
		let n = a.length;
		let c = n - b.length;
		for (let i = 0; c == 0 && i < n; i++) c = a[i] - b[i];
		return c;
	}

	// created 2023-09-25T01:01:55.148Z
	// compressed base64-encoded blob for include-nf data
	// source: https://github.com/adraffy/ens-normalize.js/blob/main/src/make.js
	// see: https://github.com/adraffy/ens-normalize.js#security
	// SHA-256: a974b6f8541fc29d919bc85118af0a44015851fab5343f8679cb31be2bdb209e
	var COMPRESSED = 'AEUDTAHBCFQATQDRADAAcgAgADQAFAAsABQAHwAOACQADQARAAoAFwAHABIACAAPAAUACwAFAAwABAAQAAMABwAEAAoABQAIAAIACgABAAQAFAALAAIACwABAAIAAQAHAAMAAwAEAAsADAAMAAwACgANAA0AAwAKAAkABAAdAAYAZwDSAdsDJgC0CkMB8xhZAqfoC190UGcThgBurwf7PT09Pb09AjgJum8OjDllxHYUKXAPxzq6tABAxgK8ysUvWAgMPT09PT09PSs6LT2HcgWXWwFLoSMEEEl5RFVMKvO0XQ8ExDdJMnIgsj26PTQyy8FfEQ8AY8IPAGcEbwRwBHEEcgRzBHQEdQR2BHcEeAR6BHsEfAR+BIAEgfndBQoBYgULAWIFDAFiBNcE2ATZBRAFEQUvBdALFAsVDPcNBw13DYcOMA4xDjMB4BllHI0B2grbAMDpHLkQ7QHVAPRNQQFnGRUEg0yEB2uaJF8AJpIBpob5AERSMAKNoAXqaQLUBMCzEiACnwRZEkkVsS7tANAsBG0RuAQLEPABv9HICTUBXigPZwRBApMDOwAamhtaABqEAY8KvKx3LQ4ArAB8UhwEBAVSagD8AEFZADkBIadVj2UMUgx5Il4ANQC9AxIB1BlbEPMAs30CGxlXAhwZKQIECBc6EbsCoxngzv7UzRQA8M0BawL6ZwkN7wABAD33OQRcsgLJCjMCjqUChtw/km+NAsXPAoP2BT84PwURAK0RAvptb6cApQS/OMMey5HJS84UdxpxTPkCogVFITaTOwERAK5pAvkNBOVyA7q3BKlOJSALAgUIBRcEdASpBXqzABXFSWZOawLCOqw//AolCZdvv3dSBkEQGyelEPcMMwG1ATsN7UvYBPEGOwTJH30ZGQ/NlZwIpS3dDO0m4y6hgFoj9SqDBe1L9DzdC01RaA9ZC2UJ4zpjgU4DIQENIosK3Q05CG0Q8wrJaw3lEUUHOQPVSZoApQcBCxEdNRW1JhBirAsJOXcG+xr2C48mrxMpevwF0xohBk0BKRr/AM8u54WwWjFcHE9fBgMLJSPHFKhQIA0lQLd4SBobBxUlqQKRQ3BKh1E2HpMh9jw9DWYuE1F8B/U8BRlPC4E8nkarRQ4R0j6NPUgiSUwsBDV/LC8niwnPD4UMuXxyAVkJIQmxDHETMREXN8UIOQcZLZckJxUIIUaVYJoE958D8xPRAwsFPwlBBxMDtRwtEy4VKQUNgSTXAvM21S6zAo9WgAEXBcsPJR/fEFBH4A7pCJsCZQODJesALRUhABcimwhDYwBfj9hTBS7LCMdqbCN0A2cU52ERcweRDlcHpxwzFb8c4XDIXguGCCijrwlbAXUJmQFfBOMICTVbjKAgQWdTi1gYmyBhQT9d/AIxDGUVn0S9h3gCiw9rEhsBNQFzBzkNAQJ3Ee0RaxCVCOuGBDW1M/g6JQRPIYMgEQonA09szgsnJvkM+GkBoxJiAww0PXfuZ6tgtiQX/QcZMsVBYCHxC5JPzQycGsEYQlQuGeQHvwPzGvMn6kFXBf8DowMTOk0z7gS9C2kIiwk/AEkOoxcH1xhqCnGM0AExiwG3mQNXkYMCb48GNwcLAGcLhwV55QAdAqcIowAFAM8DVwA5Aq0HnQAZAIVBAT0DJy8BIeUCjwOTCDHLAZUvAfMpBBvDDBUA9zduSgLDsQKAamaiBd1YAo4CSTUBTSUEBU5HUQOvceEA2wBLBhPfRwEVq0rLGuNDAd9vKwDHAPsABTUHBUEBzQHzbQC3AV8LMQmis7UBTekpAIMAFWsB1wKJAN0ANQB/8QFTAE0FWfkF0wJPSQERMRgrV2EBuwMfATMBDQB5BsuNpckHHwRtB9MCEBsV4QLvLge1AQMi3xPNQsUCvd5VoWACZIECYkJbTa9bNyACofcCaJgCZgkCn4Q4GwsCZjsCZiYEbgR/A38TA36SOQY5dxc5gjojIwJsHQIyNjgKAm3HAm2u74ozZ0UrAWcA3gDhAEoFB5gMjQD+C8IADbUCdy8CdqI/AnlLQwJ4uh1c20WuRtcCfD8CesgCfQkCfPAFWQUgSABIfWMkAoFtAoAAAoAFAn+uSVhKWxUXSswC0QEC0MxLJwOITwOH5kTFkTIC8qFdAwMDrkvOTC0lA89NTE2vAos/AorYwRsHHUNnBbcCjjcCjlxAl4ECjtkCjlx4UbRTNQpS1FSFApP7ApMMAOkAHFUeVa9V0AYsGymVhjLheGZFOzkCl58C77JYIagAWSUClo8ClnycAKlZrFoJgU0AOwKWtQKWTlxEXNECmcsCmWRcyl0HGQKcmznCOp0CnBYCn5sCnriKAB0PMSoPAp3xAp6SALU9YTRh7wKe0wKgbgGpAp6fHwKeTqVjyGQnJSsCJ68CJn4CoPsCoEwCot0CocQCpi8Cpc4Cp/8AfQKn8mh8aLEAA0lqHGrRAqzjAqyuAq1nAq0CAlcdAlXcArHh1wMfTmyXArK9DQKy6Bds4G1jbUhfAyXNArZcOz9ukAMpRQK4XgK5RxUCuSp3cDZw4QK9GQK72nCWAzIRAr6IcgIDM3ECvhpzInNPAsPLAsMEc4J0SzVFdOADPKcDPJoDPb8CxXwCxkcCxhCJAshpUQLIRALJTwLJLgJknQLd0nh5YXiueSVL0AMYo2cCAmH0GfOVJHsLXpJeuxECz2sCz2wvS1PS8xOfAMatAs9zASnqA04SfksFAtwnAtuKAtJPA1JcA1NfAQEDVYyAiT8AyxbtYEWCHILTgs6DjQLaxwLZ3oQQhEmnPAOGpQAvA2QOhnFZ+QBVAt9lAt64c3cC4i/tFAHzMCcB9JsB8tKHAuvzAulweQLq+QLq5AD5RwG5Au6JAuuclqqXAwLuPwOF4Jh5cOBxoQLzAwBpA44WmZMC9xMDkW4DkocC95gC+dkC+GaaHJqruzebHgOdgwL++gEbADmfHJ+zAwWNA6ZqA6bZANHFAwZqoYiiBQkDDEkCwAA/AwDhQRdTARHzA2sHl2cFAJMtK7evvdsBiZkUfxEEOQH7KQUhDp0JnwCS/SlXxQL3AZ0AtwW5AG8LbUEuFCaNLgFDAYD8AbUmAHUDDgRtACwCFgyhAAAKAj0CagPdA34EkQEgRQUhfAoABQBEABMANhICdwEABdUDa+8KxQIA9wqfJ7+xt+UBkSFBQgHpFH8RNMCJAAQAGwBaAkUChIsABjpTOpSNbQC4Oo860ACNOME63AClAOgAywE6gTo7Ofw5+Tt2iTpbO56JOm85GAFWATMBbAUvNV01njWtNWY1dTW2NcU1gjWRNdI14TWeNa017jX9NbI1wTYCNhE1xjXVNhY2JzXeNe02LjY9Ni41LSE2OjY9Njw2yTcIBJA8VzY4Nt03IDcPNsogN4k3MAoEsDxnNiQ3GTdsOo03IULUQwdC4EMLHA8PCZsobShRVQYA6X8A6bABFCnXAukBowC9BbcAbwNzBL8MDAMMAQgDAAkKCwsLCQoGBAVVBI/DvwDz9b29kaUCb0QtsRTNLt4eGBcSHAMZFhYZEhYEARAEBUEcQRxBHEEcQRxBHEEaQRxBHEFCSTxBPElISUhBNkM2QTYbNklISVmBVIgBFLWZAu0BhQCjBcEAbykBvwGJAaQcEZ0ePCklMAAhMvAIMAL54gC7Bm8EescjzQMpARQpKgDUABavAj626xQAJP0A3etzuf4NNRA7efy2Z9NQrCnC0OSyANz5BBIbJ5IFDR6miIavYS6tprjjmuKebxm5C74Q225X1pkaYYPb6f1DK4k3xMEBb9S2WMjEibTNWhsRJIA+vwNVEiXTE5iXs/wezV66oFLfp9NZGYW+Gk19J2+bCT6Ye2w6LDYdgzKMUabk595eLBCXANz9HUpWbATq9vqXVx9XDg+Pc9Xp4+bsS005SVM/BJBM4687WUuf+Uj9dEi8aDNaPxtpbDxcG1THTImUMZq4UCaaNYpsVqraNyKLJXDYsFZ/5jl7bLRtO88t7P3xZaAxhb5OdPMXqsSkp1WCieG8jXm1U99+blvLlXzPCS+M93VnJCiK+09LfaSaBAVBomyDgJua8dfUzR7ga34IvR2Nvj+A9heJ6lsl1KG4NkI1032Cnff1m1wof2B9oHJK4bi6JkEdSqeNeiuo6QoZZincoc73/TH9SXF8sCE7XyuYyW8WSgbGFCjPV0ihLKhdPs08Tx82fYAkLLc4I2wdl4apY7GU5lHRFzRWJep7Ww3wbeA3qmd59/86P4xuNaqDpygXt6M85glSBHOCGgJDnt+pN9bK7HApMguX6+06RZNjzVmcZJ+wcUrJ9//bpRNxNuKpNl9uFds+S9tdx7LaM5ZkIrPj6nIU9mnbFtVbs9s/uLgl8MVczAwet+iOEzzBlYW7RCMgE6gyNLeq6+1tIx4dpgZnd0DksJS5f+JNDpwwcPNXaaVspq1fbQajOrJgK0ofKtJ1Ne90L6VO4MOl5S886p7u6xo7OLjG8TGL+HU1JXGJgppg4nNbNJ5nlzSpuPYy21JUEcUA94PoFiZfjZue+QnyQ80ekOuZVkxx4g+cvhJfHgNl4hy1/a6+RKcKlar/J29y//EztlbVPHVUeQ1zX86eQVAjR/M3dA9w4W8LfaXp4EgM85wOWasli837PzVMOnsLzR+k3o75/lRPAJSE1xAKQzEi5v10ke+VBvRt1cwQRMd+U5mLCTGVd6XiZtgBG5cDi0w22GKcVNvHiu5LQbZEDVtz0onn7k5+heuKXVsZtSzilkLRAUmjMXEMB3J9YC50XBxPiz53SC+EhnPl9WsKCv92SM/OFFIMJZYfl0WW8tIO3UxYcwdMAj7FSmgrsZ2aAZO03BOhP1bNNZItyXYQFTpC3SG1VuPDqH9GkiCDmE+JwxyIVSO5siDErAOpEXFgjy6PQtOVDj+s6e1r8heWVvmZnTciuf4EiNZzCAd7SOMhXERIOlsHIMG399i9aLTy3m2hRLZjJVDNLS53iGIK11dPqQt0zBDyg6qc7YqkDm2M5Ve6dCWCaCbTXX2rToaIgz6+zh4lYUi/+6nqcFMAkQJKHYLK0wYk5N9szV6xihDbDDFr45lN1K4aCXBq/FitPSud9gLt5ZVn+ZqGX7cwm2z5EGMgfFpIFyhGGuDPmso6TItTMwny+7uPnLCf4W6goFQFV0oQSsc9VfMmVLcLr6ZetDZbaSFTLqnSO/bIPjA3/zAUoqgGFAEQS4IhuMzEp2I3jJzbzkk/IEmyax+rhZTwd6f+CGtwPixu8IvzACquPWPREu9ZvGkUzpRwvRRuaNN6cr0W1wWits9ICdYJ7ltbgMiSL3sTPeufgNcVqMVWFkCPDH4jG2jA0XcVgQj62Cb29v9f/z/+2KbYvIv/zzjpQAPkliaVDzNrW57TZ/ZOyZD0nlfMmAIBIAGAI0D3k/mdN4xr9v85ZbZbbqfH2jGd5hUqNZWwl5SPfoGmfElmazUIeNL1j/mkF7VNAzTq4jNt8JoQ11NQOcmhprXoxSxfRGJ9LDEOAQ+dmxAQH90iti9e2u/MoeuaGcDTHoC+xsmEeWmxEKefQuIzHbpw5Tc5cEocboAD09oipWQhtTO1wivf/O+DRe2rpl/E9wlrzBorjJsOeG1B/XPW4EaJEFdNlECEZga5ZoGRHXgYouGRuVkm8tDESiEyFNo+3s5M5puSdTyUL2llnINVHEt91XUNW4ewdMgJ4boJfEyt/iY5WXqbA+A2Fkt5Z0lutiWhe9nZIyIUjyXDC3UsaG1t+eNx6z4W/OYoTB7A6x+dNSTOi9AInctbESqm5gvOLww7OWXPrmHwVZasrl4eD113pm+JtT7JVOvnCXqdzzdTRHgJ0PiGTFYW5Gvt9R9LD6Lzfs0v/TZZHSmyVNq7viIHE6DBK7Qp07Iz55EM8SYtQvZf/obBniTWi5C2/ovHfw4VndkE5XYdjOhCMRjDeOEfXeN/CwfGduiUIfsoFeUxXeQXba7c7972XNv8w+dTjjUM0QeNAReW+J014dKAD/McQYXT7c0GQPIkn3Ll6R7gGjuiQoZD0TEeEqQpKoZ15g/0OPQI17QiSv9AUROa/V/TQN3dvLArec3RrsYlvBm1b8LWzltdugsC50lNKYLEp2a+ZZYqPejULRlOJh5zj/LVMyTDvwKhMxxwuDkxJ1QpoNI0OTWLom4Z71SNzI9TV1iXJrIu9Wcnd+MCaAw8o1jSXd94YU/1gnkrC9BUEOtQvEIQ7g0i6h+KL2JKk8Ydl7HruvgWMSAmNe+LshGhV4qnWHhO9/RIPQzY1tHRj2VqOyNsDpK0cww+56AdDC4gsWwY0XxoucIWIqs/GcwnWqlaT0KPr8mbK5U94/301i1WLt4YINTVvCFBrFZbIbY8eycOdeJ2teD5IfPLCRg7jjcFTwlMFNl9zdh/o3E/hHPwj7BWg0MU09pPrBLbrCgm54A6H+I6v27+jL5gkjWg/iYdks9jbfVP5y/n0dlgWEMlKasl7JvFZd56LfybW1eeaVO0gxTfXZwD8G4SI116yx7UKVRgui6Ya1YpixqXeNLc8IxtAwCU5IhwQgn+NqHnRaDv61CxKhOq4pOX7M6pkA+Pmpd4j1vn6ACUALoLLc4vpXci8VidLxzm7qFBe7s+quuJs6ETYmnpgS3LwSZxPIltgBDXz8M1k/W2ySNv2f9/NPhxLGK2D21dkHeSGmenRT3Yqcdl0m/h3OYr8V+lXNYGf8aCCpd4bWjE4QIPj7vUKN4Nrfs7ML6Y2OyS830JCnofg/k7lpFpt4SqZc5HGg1HCOrHvOdC8bP6FGDbE/VV0mX4IakzbdS/op+Kt3G24/8QbBV7y86sGSQ/vZzU8FXs7u6jIvwchsEP2BpIhW3G8uWNwa3HmjfH/ZjhhCWvluAcF+nMf14ClKg5hGgtPLJ98ueNAkc5Hs2WZlk2QHvfreCK1CCGO6nMZVSb99VM/ajr8WHTte9JSmkXq/i/U943HEbdzW6Re/S88dKgg8pGOLlAeNiqrcLkUR3/aClFpMXcOUP3rmETcWSfMXZE3TUOi8i+fqRnTYLflVx/Vb/6GJ7eIRZUA6k3RYR3iFSK9c4iDdNwJuZL2FKz/IK5VimcNWEqdXjSoxSgmF0UPlDoUlNrPcM7ftmA8Y9gKiqKEHuWN+AZRIwtVSxye2Kf8rM3lhJ5XcBXU9n4v0Oy1RU2M+4qM8AQPVwse8ErNSob5oFPWxuqZnVzo1qB/IBxkM3EVUKFUUlO3e51259GgNcJbCmlvrdjtoTW7rChm1wyCKzpCTwozUUEOIcWLneRLgMXh+SjGSFkAllzbGS5HK7LlfCMRNRDSvbQPjcXaenNYxCvu2Qyznz6StuxVj66SgI0T8B6/sfHAJYZaZ78thjOSIFumNWLQbeZixDCCC+v0YBtkxiBB3jefHqZ/dFHU+crbj6OvS1x/JDD7vlm7zOVPwpUC01nhxZuY/63E7g';

	// https://unicode.org/reports/tr15/
	// for reference implementation
	// see: /derive/nf.js


	// algorithmic hangul
	// https://www.unicode.org/versions/Unicode15.0.0/ch03.pdf (page 144)
	const S0 = 0xAC00;
	const L0 = 0x1100;
	const V0 = 0x1161;
	const T0 = 0x11A7;
	const L_COUNT = 19;
	const V_COUNT = 21;
	const T_COUNT = 28;
	const N_COUNT = V_COUNT * T_COUNT;
	const S_COUNT = L_COUNT * N_COUNT;
	const S1 = S0 + S_COUNT;
	const L1 = L0 + L_COUNT;
	const V1 = V0 + V_COUNT;
	const T1 = T0 + T_COUNT;

	function unpack_cc(packed) {
		return (packed >> 24) & 0xFF;
	}
	function unpack_cp(packed) {
		return packed & 0xFFFFFF;
	}

	let SHIFTED_RANK, EXCLUSIONS, DECOMP, RECOMP;

	function init$1() {
		//console.time('nf');
		let r = read_compressed_payload(COMPRESSED);
		SHIFTED_RANK = new Map(read_sorted_arrays(r).flatMap((v, i) => v.map(x => [x, (i+1) << 24]))); // pre-shifted
		EXCLUSIONS = new Set(read_sorted(r));
		DECOMP = new Map();
		RECOMP = new Map();
		for (let [cp, cps] of read_mapped(r)) {
			if (!EXCLUSIONS.has(cp) && cps.length == 2) {
				let [a, b] = cps;
				let bucket = RECOMP.get(a);
				if (!bucket) {
					bucket = new Map();
					RECOMP.set(a, bucket);
				}
				bucket.set(b, cp);
			}
			DECOMP.set(cp, cps.reverse()); // stored reversed
		}
		//console.timeEnd('nf');
		// 20230905: 11ms
	}

	function is_hangul(cp) {
		return cp >= S0 && cp < S1;
	}

	function compose_pair(a, b) {
		if (a >= L0 && a < L1 && b >= V0 && b < V1) {
			return S0 + (a - L0) * N_COUNT + (b - V0) * T_COUNT;
		} else if (is_hangul(a) && b > T0 && b < T1 && (a - S0) % T_COUNT == 0) {
			return a + (b - T0);
		} else {
			let recomp = RECOMP.get(a);
			if (recomp) {
				recomp = recomp.get(b);
				if (recomp) {
					return recomp;
				}
			}
			return -1;
		}
	}

	function decomposed(cps) {
		if (!SHIFTED_RANK) init$1();
		let ret = [];
		let buf = [];
		let check_order = false;
		function add(cp) {
			let cc = SHIFTED_RANK.get(cp);
			if (cc) {
				check_order = true;
				cp |= cc;
			}
			ret.push(cp);
		}
		for (let cp of cps) {
			while (true) {
				if (cp < 0x80) {
					ret.push(cp);
				} else if (is_hangul(cp)) {
					let s_index = cp - S0;
					let l_index = s_index / N_COUNT | 0;
					let v_index = (s_index % N_COUNT) / T_COUNT | 0;
					let t_index = s_index % T_COUNT;
					add(L0 + l_index);
					add(V0 + v_index);
					if (t_index > 0) add(T0 + t_index);
				} else {
					let mapped = DECOMP.get(cp);
					if (mapped) {
						buf.push(...mapped);
					} else {
						add(cp);
					}
				}
				if (!buf.length) break;
				cp = buf.pop();
			}
		}
		if (check_order && ret.length > 1) {
			let prev_cc = unpack_cc(ret[0]);
			for (let i = 1; i < ret.length; i++) {
				let cc = unpack_cc(ret[i]);
				if (cc == 0 || prev_cc <= cc) {
					prev_cc = cc;
					continue;
				}
				let j = i-1;
				while (true) {
					let tmp = ret[j+1];
					ret[j+1] = ret[j];
					ret[j] = tmp;
					if (!j) break;
					prev_cc = unpack_cc(ret[--j]);
					if (prev_cc <= cc) break;
				}
				prev_cc = unpack_cc(ret[i]);
			}
		}
		return ret;
	}

	function composed_from_decomposed(v) {
		let ret = [];
		let stack = [];
		let prev_cp = -1;
		let prev_cc = 0;
		for (let packed of v) {
			let cc = unpack_cc(packed);
			let cp = unpack_cp(packed);
			if (prev_cp == -1) {
				if (cc == 0) {
					prev_cp = cp;
				} else {
					ret.push(cp);
				}
			} else if (prev_cc > 0 && prev_cc >= cc) {
				if (cc == 0) {
					ret.push(prev_cp, ...stack);
					stack.length = 0;
					prev_cp = cp;
				} else {
					stack.push(cp);
				}
				prev_cc = cc;
			} else {
				let composed = compose_pair(prev_cp, cp);
				if (composed >= 0) {
					prev_cp = composed;
				} else if (prev_cc == 0 && cc == 0) {
					ret.push(prev_cp);
					prev_cp = cp;
				} else {
					stack.push(cp);
					prev_cc = cc;
				}
			}
		}
		if (prev_cp >= 0) {
			ret.push(prev_cp, ...stack);	
		}
		return ret;
	}

	// note: cps can be iterable
	function nfd(cps) {
		return decomposed(cps).map(unpack_cp);
	}
	function nfc(cps) {
		return composed_from_decomposed(decomposed(cps));
	}

	const HYPHEN = 0x2D;
	const STOP = 0x2E;
	const STOP_CH = '.';
	const FE0F = 0xFE0F;
	const UNIQUE_PH = 1;

	// 20230913: replace [...v] with Array_from(v) to avoid large spreads
	const Array_from = x => Array.from(x); // Array.from.bind(Array);

	function group_has_cp(g, cp) {
		// 20230913: keep primary and secondary distinct instead of creating valid union
		return g.P.has(cp) || g.Q.has(cp);
	}

	class Emoji extends Array {
		get is_emoji() { return true; } // free tagging system
	}

	let MAPPED, IGNORED, CM, NSM, ESCAPE, NFC_CHECK, GROUPS, WHOLE_VALID, WHOLE_MAP, VALID, EMOJI_LIST, EMOJI_ROOT;

	function init() {
		if (MAPPED) return;
		
		let r = read_compressed_payload(COMPRESSED$1);
		const read_sorted_array = () => read_sorted(r);
		const read_sorted_set = () => new Set(read_sorted_array());
		const set_add_many = (set, v) => v.forEach(x => set.add(x));

		MAPPED = new Map(read_mapped(r)); 
		IGNORED = read_sorted_set(); // ignored characters are not valid, so just read raw codepoints

		/*
		// direct include from payload is smaller than the decompression code
		const FENCED = new Map(read_array_while(() => {
			let cp = r();
			if (cp) return [cp, read_str(r())];
		}));
		*/
		// 20230217: we still need all CM for proper error formatting
		// but norm only needs NSM subset that are potentially-valid
		CM = read_sorted_array();
		NSM = new Set(read_sorted_array().map(i => CM[i]));
		CM = new Set(CM);
		
		ESCAPE = read_sorted_set(); // characters that should not be printed
		NFC_CHECK = read_sorted_set(); // only needed to illustrate ens_tokenize() transformations

		let chunks = read_sorted_arrays(r);
		let unrestricted = r();
		//const read_chunked = () => new Set(read_sorted_array().flatMap(i => chunks[i]).concat(read_sorted_array()));
		const read_chunked = () => {
			// 20230921: build set in parts, 2x faster
			let set = new Set();
			read_sorted_array().forEach(i => set_add_many(set, chunks[i]));
			set_add_many(set, read_sorted_array());
			return set; 
		};
		GROUPS = read_array_while(i => {
			// minifier property mangling seems unsafe
			// so these are manually renamed to single chars
			let N = read_array_while(r).map(x => x+0x60);
			if (N.length) {
				let R = i >= unrestricted; // unrestricted then restricted
				N[0] -= 32; // capitalize
				N = str_from_cps(N);
				if (R) N=`Restricted[${N}]`;
				let P = read_chunked(); // primary
				let Q = read_chunked(); // secondary
				let M = !r(); // not-whitelisted, check for NSM
				// *** this code currently isn't needed ***
				/*
				let V = [...P, ...Q].sort((a, b) => a-b); // derive: sorted valid
				let M = r()-1; // number of combining mark
				if (M < 0) { // whitelisted
					M = new Map(read_array_while(() => {
						let i = r();
						if (i) return [V[i-1], read_array_while(() => {
							let v = read_array_while(r);
							if (v.length) return v.map(x => x-1);
						})];
					}));
				}*/
				return {N, P, Q, M, R};
			}
		});

		// decode compressed wholes
		WHOLE_VALID = read_sorted_set();
		WHOLE_MAP = new Map();
		let wholes = read_sorted_array().concat(Array_from(WHOLE_VALID)).sort((a, b) => a-b); // must be sorted
		wholes.forEach((cp, i) => {
			let d = r(); 
			let w = wholes[i] = d ? wholes[i-d] : {V: [], M: new Map()};
			w.V.push(cp); // add to member set
			if (!WHOLE_VALID.has(cp)) {
				WHOLE_MAP.set(cp, w);  // register with whole map
			}
		});

		// compute confusable-extent complements
		// usage: WHOLE_MAP.get(cp).M.get(cp) = complement set
		for (let {V, M} of new Set(WHOLE_MAP.values())) {
			// connect all groups that have each whole character
			let recs = [];
			for (let cp of V) {
				let gs = GROUPS.filter(g => group_has_cp(g, cp));
				let rec = recs.find(({G}) => gs.some(g => G.has(g)));
				if (!rec) {
					rec = {G: new Set(), V: []};
					recs.push(rec);
				}
				rec.V.push(cp);
				set_add_many(rec.G, gs);
			}
			// per character cache groups which are not a member of the extent
			let union = recs.flatMap(x => Array_from(x.G)); // all of the groups used by this whole
			for (let {G, V} of recs) {
				let complement = new Set(union.filter(g => !G.has(g))); // groups not covered by the extent
				for (let cp of V) {
					M.set(cp, complement); // this is the same reference
				}
			}
		}

		// compute valid set
		// 20230924: VALID was union but can be re-used
		VALID = new Set(); // exists in 1+ groups
		let multi = new Set(); // exists in 2+ groups
		const add_to_union = cp => VALID.has(cp) ? multi.add(cp) : VALID.add(cp);
		for (let g of GROUPS) {
			for (let cp of g.P) add_to_union(cp);
			for (let cp of g.Q) add_to_union(cp);
		}
		// dual purpose WHOLE_MAP: return placeholder if unique non-confusable
		for (let cp of VALID) {
			if (!WHOLE_MAP.has(cp) && !multi.has(cp)) {
				WHOLE_MAP.set(cp, UNIQUE_PH);
			}
		}
		// add all decomposed parts
		// see derive: "Valid is Closed (via Brute-force)"
		set_add_many(VALID, nfd(VALID));
		
		// decode emoji
		// 20230719: emoji are now fully-expanded to avoid quirk logic 
		EMOJI_LIST = read_trie(r).map(v => Emoji.from(v)).sort(compare_arrays);
		EMOJI_ROOT = new Map(); // this has approx 7K nodes (2+ per emoji)
		for (let cps of EMOJI_LIST) {
			// 20230719: change to *slightly* stricter algorithm which disallows 
			// insertion of misplaced FE0F in emoji sequences (matching ENSIP-15)
			// example: beautified [A B] (eg. flag emoji) 
			//  before: allow: [A FE0F B], error: [A FE0F FE0F B] 
			//   after: error: both
			// note: this code now matches ENSNormalize.{cs,java} logic
			let prev = [EMOJI_ROOT];
			for (let cp of cps) {
				let next = prev.map(node => {
					let child = node.get(cp);
					if (!child) {
						// should this be object? 
						// (most have 1-2 items, few have many)
						// 20230719: no, v8 default map is 4?
						child = new Map();
						node.set(cp, child);
					}
					return child;
				});
				if (cp === FE0F) {
					prev.push(...next); // less than 20 elements
				} else {
					prev = next;
				}
			}
			for (let x of prev) {
				x.V = cps;
			}
		}
	}

	// if escaped: {HEX}
	//       else: "x" {HEX}
	function quoted_cp(cp) {
		return (should_escape(cp) ? '' : `${bidi_qq(safe_str_from_cps([cp]))} `) + quote_cp(cp);
	}

	// 20230211: some messages can be mixed-directional and result in spillover
	// use 200E after a quoted string to force the remainder of a string from 
	// acquring the direction of the quote
	// https://www.w3.org/International/questions/qa-bidi-unicode-controls#exceptions
	function bidi_qq(s) {
		return `"${s}"\u200E`; // strong LTR
	}

	function check_label_extension(cps) {
		if (cps.length >= 4 && cps[2] == HYPHEN && cps[3] == HYPHEN) {
			throw new Error(`invalid label extension: "${str_from_cps(cps.slice(0, 4))}"`); // this can only be ascii so cant be bidi
		}
	}
	function check_leading_underscore(cps) {
		const UNDERSCORE = 0x5F;
		for (let i = cps.lastIndexOf(UNDERSCORE); i > 0; ) {
			if (cps[--i] !== UNDERSCORE) {
				throw new Error('underscore allowed only at start');
			}
		}
	}
	// check that a fenced cp is not leading, trailing, or touching another fenced cp
	function check_fenced(cps) {
		let cp = cps[0];
		let prev = FENCED.get(cp);
		if (prev) throw error_placement(`leading ${prev}`);
		let n = cps.length;
		let last = -1; // prevents trailing from throwing
		for (let i = 1; i < n; i++) {
			cp = cps[i];
			let match = FENCED.get(cp);
			if (match) {
				// since cps[0] isn't fenced, cps[1] cannot throw
				if (last == i) throw error_placement(`${prev} + ${match}`);
				last = i + 1;
				prev = match;
			}
		}
		if (last == n) throw error_placement(`trailing ${prev}`);
	}

	// create a safe to print string 
	// invisibles are escaped
	// leading cm uses placeholder
	// if cps exceed max, middle truncate with ellipsis
	// quoter(cp) => string, eg. 3000 => "{3000}"
	// note: in html, you'd call this function then replace [<>&] with entities
	function safe_str_from_cps(cps, max = Infinity, quoter = quote_cp) {
		//if (Number.isInteger(cps)) cps = [cps];
		//if (!Array.isArray(cps)) throw new TypeError(`expected codepoints`);
		let buf = [];
		if (is_combining_mark(cps[0])) buf.push('◌');
		if (cps.length > max) {
			max >>= 1;
			cps = [...cps.slice(0, max), 0x2026, ...cps.slice(-max)];
		}
		let prev = 0;
		let n = cps.length;
		for (let i = 0; i < n; i++) {
			let cp = cps[i];
			if (should_escape(cp)) {
				buf.push(str_from_cps(cps.slice(prev, i)));
				buf.push(quoter(cp));
				prev = i + 1;
			}
		}
		buf.push(str_from_cps(cps.slice(prev, n)));
		return buf.join('');
	}

	// note: set(s) cannot be exposed because they can be modified
	// note: Object.freeze() doesn't work
	function is_combining_mark(cp) {
		init();
		return CM.has(cp);
	}
	function should_escape(cp) {
		init();
		return ESCAPE.has(cp);
	}

	// return all supported emoji as fully-qualified emoji 
	// ordered by length then lexicographic 
	function ens_emoji() {
		init();
		return EMOJI_LIST.map(x => x.slice()); // emoji are exposed so copy
	}

	function ens_normalize_fragment(frag, decompose) {
		init();
		let nf = decompose ? nfd : nfc;
		return frag.split(STOP_CH).map(label => str_from_cps(tokens_from_str(explode_cp(label), nf, filter_fe0f).flat())).join(STOP_CH);
	}

	function ens_normalize(name) {
		return flatten(split(name, nfc, filter_fe0f));
	}

	function ens_beautify(name) {
		let labels = split(name, nfc, x => x); // emoji not exposed
		for (let {type, output, error} of labels) {
			if (error) break; // flatten will throw

			// replace leading/trailing hyphen
			// 20230121: consider beautifing all or leading/trailing hyphen to unicode variant
			// not exactly the same in every font, but very similar: "-" vs "‐"
			/*
			const UNICODE_HYPHEN = 0x2010;
			// maybe this should replace all for visual consistancy?
			// `node tools/reg-count.js regex ^-\{2,\}` => 592
			//for (let i = 0; i < output.length; i++) if (output[i] == 0x2D) output[i] = 0x2010;
			if (output[0] == HYPHEN) output[0] = UNICODE_HYPHEN;
			let end = output.length-1;
			if (output[end] == HYPHEN) output[end] = UNICODE_HYPHEN;
			*/
			// 20230123: WHATWG URL uses "CheckHyphens" false
			// https://url.spec.whatwg.org/#idna

			// update ethereum symbol
			// ξ => Ξ if not greek
			if (type !== 'Greek') array_replace(output, 0x3BE, 0x39E);

			// 20221213: fixes bidi subdomain issue, but breaks invariant (200E is disallowed)
			// could be fixed with special case for: 2D (.) + 200E (LTR)
			// https://discuss.ens.domains/t/bidi-label-ordering-spoof/15824
			//output.splice(0, 0, 0x200E);
		}
		return flatten(labels);
	}

	function array_replace(v, a, b) {
		let prev = 0;
		while (true) {
			let next = v.indexOf(a, prev);
			if (next < 0) break;
			v[next] = b; 
			prev = next + 1;
		}
	}

	function ens_split(name, preserve_emoji) {
		return split(name, nfc, preserve_emoji ? x => x.slice() : filter_fe0f); // emoji are exposed so copy
	}

	function split(name, nf, ef) {
		if (!name) return []; // 20230719: empty name allowance
		init();
		let offset = 0;
		// https://unicode.org/reports/tr46/#Validity_Criteria
		// 4.) "The label must not contain a U+002E ( . ) FULL STOP."
		return name.split(STOP_CH).map(label => {
			let input = explode_cp(label);
			let info = {
				input,
				offset, // codepoint, not substring!
			};
			offset += input.length + 1; // + stop
			try {
				// 1.) "The label must be in Unicode Normalization Form NFC"
				let tokens = info.tokens = tokens_from_str(input, nf, ef);
				let token_count = tokens.length;
				let type;
				if (!token_count) { // the label was effectively empty (could of had ignored characters)
					//norm = [];
					//type = 'None'; // use this instead of next match, "ASCII"
					// 20230120: change to strict
					// https://discuss.ens.domains/t/ens-name-normalization-2nd/14564/59
					throw new Error(`empty label`);
				} 
				let norm = info.output = tokens.flat();
				check_leading_underscore(norm);
				let emoji = info.emoji = token_count > 1 || tokens[0].is_emoji; // same as: tokens.some(x => x.is_emoji);
				if (!emoji && norm.every(cp => cp < 0x80)) { // special case for ascii
					// 20230123: matches matches WHATWG, see note 3.3
					check_label_extension(norm); // only needed for ascii
					// cant have fenced
					// cant have cm
					// cant have wholes
					// see derive: "Fastpath ASCII"
					type = 'ASCII';
				} else {
					let chars = tokens.flatMap(x => x.is_emoji ? [] : x); // all of the nfc tokens concat together
					if (!chars.length) { // theres no text, just emoji
						type = 'Emoji';
					} else {
						// 5.) "The label must not begin with a combining mark, that is: General_Category=Mark."
						if (CM.has(norm[0])) throw error_placement('leading combining mark');
						for (let i = 1; i < token_count; i++) { // we've already checked the first token
							let cps = tokens[i];
							if (!cps.is_emoji && CM.has(cps[0])) { // every text token has emoji neighbors, eg. EtEEEtEt...
								// bidi_qq() not needed since emoji is LTR and cps is a CM
								throw error_placement(`emoji + combining mark: "${str_from_cps(tokens[i-1])} + ${safe_str_from_cps([cps[0]])}"`); 
							}
						}
						check_fenced(norm);
						let unique = Array_from(new Set(chars));
						let [g] = determine_group(unique); // take the first match
						// see derive: "Matching Groups have Same CM Style"
						// alternative: could form a hybrid type: Latin/Japanese/...	
						check_group(g, chars); // need text in order
						check_whole(g, unique); // only need unique text (order would be required for multiple-char confusables)
						type = g.N;
						// 20230121: consider exposing restricted flag
						// it's simpler to just check for 'Restricted'
						// or even better: type.endsWith(']')
						//if (g.R) info.restricted = true;
					}
				}
				info.type = type;
			} catch (err) {
				info.error = err; // use full error object
			}
			return info;
		});
	}

	function check_whole(group, unique) {
		let maker;
		let shared = [];
		for (let cp of unique) {
			let whole = WHOLE_MAP.get(cp);
			if (whole === UNIQUE_PH) return; // unique, non-confusable
			if (whole) {
				let set = whole.M.get(cp); // groups which have a character that look-like this character
				maker = maker ? maker.filter(g => set.has(g)) : Array_from(set);
				if (!maker.length) return; // confusable intersection is empty
			} else {
				shared.push(cp); 
			}
		}
		if (maker) {
			// we have 1+ confusable
			// check if any of the remaining groups
			// contain the shared characters too
			for (let g of maker) {
				if (shared.every(cp => group_has_cp(g, cp))) {
					throw new Error(`whole-script confusable: ${group.N}/${g.N}`);
				}
			}
		}
	}

	// assumption: unique.size > 0
	// returns list of matching groups
	function determine_group(unique) {
		let groups = GROUPS;
		for (let cp of unique) {
			// note: we need to dodge CM that are whitelisted
			// but that code isn't currently necessary
			let gs = groups.filter(g => group_has_cp(g, cp));
			if (!gs.length) {
				if (!GROUPS.some(g => group_has_cp(g, cp))) { 
					// the character was composed of valid parts
					// but it's NFC form is invalid
					// 20230716: change to more exact statement, see: ENSNormalize.{cs,java}
					// note: this doesn't have to be a composition
					// 20230720: change to full check
					throw error_disallowed(cp); // this should be rare
				} else {
					// there is no group that contains all these characters
					// throw using the highest priority group that matched
					// https://www.unicode.org/reports/tr39/#mixed_script_confusables
					throw error_group_member(groups[0], cp);
				}
			}
			groups = gs;
			if (gs.length == 1) break; // there is only one group left
		}
		// there are at least 1 group(s) with all of these characters
		return groups;
	}

	// throw on first error
	function flatten(split) {
		return split.map(({input, error, output}) => {
			if (error) {
				// don't print label again if just a single label
				let msg = error.message;
				// bidi_qq() only necessary if msg is digits
				throw new Error(split.length == 1 ? msg : `Invalid label ${bidi_qq(safe_str_from_cps(input, 63))}: ${msg}`); 
			}
			return str_from_cps(output);
		}).join(STOP_CH);
	}

	function error_disallowed(cp) {
		// TODO: add cp to error?
		return new Error(`disallowed character: ${quoted_cp(cp)}`); 
	}
	function error_group_member(g, cp) {
		let quoted = quoted_cp(cp);
		let gg = GROUPS.find(g => g.P.has(cp)); // only check primary
		if (gg) {
			quoted = `${gg.N} ${quoted}`;
		}
		return new Error(`illegal mixture: ${g.N} + ${quoted}`);
	}
	function error_placement(where) {
		return new Error(`illegal placement: ${where}`);
	}

	// assumption: cps.length > 0
	// assumption: cps[0] isn't a CM
	// assumption: the previous character isn't an emoji
	function check_group(g, cps) {
		for (let cp of cps) {
			if (!group_has_cp(g, cp)) {
				// for whitelisted scripts, this will throw illegal mixture on invalid cm, eg. "e{300}{300}"
				// at the moment, it's unnecessary to introduce an extra error type
				// until there exists a whitelisted multi-character
				//   eg. if (M < 0 && is_combining_mark(cp)) { ... }
				// there are 3 cases:
				//   1. illegal cm for wrong group => mixture error
				//   2. illegal cm for same group => cm error
				//       requires set of whitelist cm per group: 
				//        eg. new Set([...g.P, ...g.Q].flatMap(nfc).filter(cp => CM.has(cp)))
				//   3. wrong group => mixture error
				throw error_group_member(g, cp);
			}
		}
		//if (M >= 0) { // we have a known fixed cm count
		if (g.M) { // we need to check for NSM
			let decomposed = nfd(cps);
			for (let i = 1, e = decomposed.length; i < e; i++) { // see: assumption
				// 20230210: bugfix: using cps instead of decomposed h/t Carbon225
				/*
				if (CM.has(decomposed[i])) {
					let j = i + 1;
					while (j < e && CM.has(decomposed[j])) j++;
					if (j - i > M) {
						throw new Error(`too many combining marks: ${g.N} ${bidi_qq(str_from_cps(decomposed.slice(i-1, j)))} (${j-i}/${M})`);
					}
					i = j;
				}
				*/
				// 20230217: switch to NSM counting
				// https://www.unicode.org/reports/tr39/#Optional_Detection
				if (NSM.has(decomposed[i])) {
					let j = i + 1;
					for (let cp; j < e && NSM.has(cp = decomposed[j]); j++) {
						// a. Forbid sequences of the same nonspacing mark.
						for (let k = i; k < j; k++) { // O(n^2) but n < 100
							if (decomposed[k] == cp) {
								throw new Error(`duplicate non-spacing marks: ${quoted_cp(cp)}`);
							}
						}
					}
					// parse to end so we have full nsm count
					// b. Forbid sequences of more than 4 nonspacing marks (gc=Mn or gc=Me).
					if (j - i > NSM_MAX) {
						// note: this slice starts with a base char or spacing-mark cm
						throw new Error(`excessive non-spacing marks: ${bidi_qq(safe_str_from_cps(decomposed.slice(i-1, j)))} (${j-i}/${NSM_MAX})`);
					}
					i = j;
				}
			}
		}
		// *** this code currently isn't needed ***
		/*
		let cm_whitelist = M instanceof Map;
		for (let i = 0, e = cps.length; i < e; ) {
			let cp = cps[i++];
			let seqs = cm_whitelist && M.get(cp);
			if (seqs) { 
				// list of codepoints that can follow
				// if this exists, this will always be 1+
				let j = i;
				while (j < e && CM.has(cps[j])) j++;
				let cms = cps.slice(i, j);
				let match = seqs.find(seq => !compare_arrays(seq, cms));
				if (!match) throw new Error(`disallowed combining mark sequence: "${safe_str_from_cps([cp, ...cms])}"`);
				i = j;
			} else if (!V.has(cp)) {
				// https://www.unicode.org/reports/tr39/#mixed_script_confusables
				let quoted = quoted_cp(cp);
				for (let cp of cps) {
					let u = UNIQUE.get(cp);
					if (u && u !== g) {
						// if both scripts are restricted this error is confusing
						// because we don't differentiate RestrictedA from RestrictedB 
						if (!u.R) quoted = `${quoted} is ${u.N}`;
						break;
					}
				}
				throw new Error(`disallowed ${g.N} character: ${quoted}`);
				//throw new Error(`disallowed character: ${quoted} (expected ${g.N})`);
				//throw new Error(`${g.N} does not allow: ${quoted}`);
			}
		}
		if (!cm_whitelist) {
			let decomposed = nfd(cps);
			for (let i = 1, e = decomposed.length; i < e; i++) { // we know it can't be cm leading
				if (CM.has(decomposed[i])) {
					let j = i + 1;
					while (j < e && CM.has(decomposed[j])) j++;
					if (j - i > M) {
						throw new Error(`too many combining marks: "${str_from_cps(decomposed.slice(i-1, j))}" (${j-i}/${M})`);
					}
					i = j;
				}
			}
		}
		*/
	}

	// given a list of codepoints
	// returns a list of lists, where emoji are a fully-qualified (as Array subclass)
	// eg. explode_cp("abc💩d") => [[61, 62, 63], Emoji[1F4A9, FE0F], [64]]
	// 20230818: rename for 'process' name collision h/t Javarome
	// https://github.com/adraffy/ens-normalize.js/issues/23
	function tokens_from_str(input, nf, ef) {
		let ret = [];
		let chars = [];
		input = input.slice().reverse(); // flip so we can pop
		while (input.length) {
			let emoji = consume_emoji_reversed(input);
			if (emoji) {
				if (chars.length) {
					ret.push(nf(chars));
					chars = [];
				}
				ret.push(ef(emoji));
			} else {
				let cp = input.pop();
				if (VALID.has(cp)) {
					chars.push(cp);
				} else {
					let cps = MAPPED.get(cp);
					if (cps) {
						chars.push(...cps); // less than 10 elements
					} else if (!IGNORED.has(cp)) {
						// 20230912: unicode 15.1 changed the order of processing such that
						// disallowed parts are only rejected after NFC
						// https://unicode.org/reports/tr46/#Validity_Criteria
						// this doesn't impact normalization as of today
						// technically, this error can be removed as the group logic will apply similar logic
						// however the error type might be less clear
						throw error_disallowed(cp);
					}
				}
			}
		}
		if (chars.length) {
			ret.push(nf(chars));
		}
		return ret;
	}

	function filter_fe0f(cps) {
		return cps.filter(cp => cp != FE0F);
	}

	// given array of codepoints
	// returns the longest valid emoji sequence (or undefined if no match)
	// *MUTATES* the supplied array
	// disallows interleaved ignored characters
	// fills (optional) eaten array with matched codepoints
	function consume_emoji_reversed(cps, eaten) {
		let node = EMOJI_ROOT;
		let emoji;
		let pos = cps.length;
		while (pos) {
			node = node.get(cps[--pos]);
			if (!node) break;
			let {V} = node;
			if (V) { // this is a valid emoji (so far)
				emoji = V;
				if (eaten) eaten.push(...cps.slice(pos).reverse()); // (optional) copy input, used for ens_tokenize()
				cps.length = pos; // truncate
			}
		}
		return emoji;
	}

	// ************************************************************
	// tokenizer 

	const TY_VALID = 'valid';
	const TY_MAPPED = 'mapped';
	const TY_IGNORED = 'ignored';
	const TY_DISALLOWED = 'disallowed';
	const TY_EMOJI = 'emoji';
	const TY_NFC = 'nfc';
	const TY_STOP = 'stop';

	function ens_tokenize(name, {
		nf = true, // collapse unnormalized runs into a single token
	} = {}) {
		init();
		let input = explode_cp(name).reverse();
		let eaten = [];
		let tokens = [];
		while (input.length) {
			let emoji = consume_emoji_reversed(input, eaten);
			if (emoji) {
				tokens.push({
					type: TY_EMOJI,
					emoji: emoji.slice(), // copy emoji
					input: eaten,
					cps: filter_fe0f(emoji)
				});
				eaten = []; // reset buffer
			} else {
				let cp = input.pop();
				if (cp == STOP) {
					tokens.push({type: TY_STOP, cp});
				} else if (VALID.has(cp)) {
					tokens.push({type: TY_VALID, cps: [cp]});
				} else if (IGNORED.has(cp)) {
					tokens.push({type: TY_IGNORED, cp});
				} else {
					let cps = MAPPED.get(cp);
					if (cps) {
						tokens.push({type: TY_MAPPED, cp, cps: cps.slice()});
					} else {
						tokens.push({type: TY_DISALLOWED, cp});
					}
				}
			}
		}
		if (nf) {
			for (let i = 0, start = -1; i < tokens.length; i++) {
				let token = tokens[i];
				if (is_valid_or_mapped(token.type)) {
					if (requires_check(token.cps)) { // normalization might be needed
						let end = i + 1;
						for (let pos = end; pos < tokens.length; pos++) { // find adjacent text
							let {type, cps} = tokens[pos];
							if (is_valid_or_mapped(type)) {
								if (!requires_check(cps)) break;
								end = pos + 1;
							} else if (type !== TY_IGNORED) { // || type !== TY_DISALLOWED) { 
								break;
							}
						}
						if (start < 0) start = i;
						let slice = tokens.slice(start, end);
						let cps0 = slice.flatMap(x => is_valid_or_mapped(x.type) ? x.cps : []); // strip junk tokens
						let cps = nfc(cps0);
						if (compare_arrays(cps, cps0)) { // bundle into an nfc token
							tokens.splice(start, end - start, {
								type: TY_NFC, 
								input: cps0, // there are 3 states: tokens0 ==(process)=> input ==(nfc)=> tokens/cps
								cps, 
								tokens0: collapse_valid_tokens(slice),
								tokens: ens_tokenize(str_from_cps(cps), {nf: false})
							});
							i = start;
						} else { 
							i = end - 1; // skip to end of slice
						}
						start = -1; // reset
					} else {
						start = i; // remember last
					}
				} else if (token.type !== TY_IGNORED) { // 20221024: is this correct?
					start = -1; // reset
				}
			}
		}
		return collapse_valid_tokens(tokens);
	}

	function is_valid_or_mapped(type) {
		return type == TY_VALID || type == TY_MAPPED;
	}

	function requires_check(cps) {
		return cps.some(cp => NFC_CHECK.has(cp));
	}

	function collapse_valid_tokens(tokens) {
		for (let i = 0; i < tokens.length; i++) {
			if (tokens[i].type == TY_VALID) {
				let j = i + 1;
				while (j < tokens.length && tokens[j].type == TY_VALID) j++;
				tokens.splice(i, j - i, {type: TY_VALID, cps: tokens.slice(i, j).flatMap(x => x.cps)});
			}
		}
		return tokens;
	}

	dist.ens_beautify = ens_beautify;
	dist.ens_emoji = ens_emoji;
	dist.ens_normalize = ens_normalize;
	dist.ens_normalize_fragment = ens_normalize_fragment;
	dist.ens_split = ens_split;
	dist.ens_tokenize = ens_tokenize;
	dist.is_combining_mark = is_combining_mark;
	dist.nfc = nfc;
	dist.nfd = nfd;
	dist.safe_str_from_cps = safe_str_from_cps;
	dist.should_escape = should_escape;
	return dist;
}

var hasRequiredNamehash;

function requireNamehash () {
	if (hasRequiredNamehash) return namehash;
	hasRequiredNamehash = 1;
	Object.defineProperty(namehash, "__esModule", { value: true });
	namehash.dnsEncode = namehash.namehash = namehash.isValidName = namehash.ensNormalize = void 0;
	const index_js_1 = requireCrypto();
	const index_js_2 = requireUtils$3();
	const ens_normalize_1 = requireDist();
	const Zeros = new Uint8Array(32);
	Zeros.fill(0);
	function checkComponent(comp) {
	    (0, index_js_2.assertArgument)(comp.length !== 0, "invalid ENS name; empty component", "comp", comp);
	    return comp;
	}
	function ensNameSplit(name) {
	    const bytes = (0, index_js_2.toUtf8Bytes)(ensNormalize(name));
	    const comps = [];
	    if (name.length === 0) {
	        return comps;
	    }
	    let last = 0;
	    for (let i = 0; i < bytes.length; i++) {
	        const d = bytes[i];
	        // A separator (i.e. "."); copy this component
	        if (d === 0x2e) {
	            comps.push(checkComponent(bytes.slice(last, i)));
	            last = i + 1;
	        }
	    }
	    // There was a stray separator at the end of the name
	    (0, index_js_2.assertArgument)(last < bytes.length, "invalid ENS name; empty component", "name", name);
	    comps.push(checkComponent(bytes.slice(last)));
	    return comps;
	}
	/**
	 *  Returns the ENS %%name%% normalized.
	 */
	function ensNormalize(name) {
	    try {
	        if (name.length === 0) {
	            throw new Error("empty label");
	        }
	        return (0, ens_normalize_1.ens_normalize)(name);
	    }
	    catch (error) {
	        (0, index_js_2.assertArgument)(false, `invalid ENS name (${error.message})`, "name", name);
	    }
	}
	namehash.ensNormalize = ensNormalize;
	/**
	 *  Returns ``true`` if %%name%% is a valid ENS name.
	 */
	function isValidName(name) {
	    try {
	        return (ensNameSplit(name).length !== 0);
	    }
	    catch (error) { }
	    return false;
	}
	namehash.isValidName = isValidName;
	/**
	 *  Returns the [[link-namehash]] for %%name%%.
	 */
	function namehash$1(name) {
	    (0, index_js_2.assertArgument)(typeof (name) === "string", "invalid ENS name; not a string", "name", name);
	    (0, index_js_2.assertArgument)(name.length, `invalid ENS name (empty label)`, "name", name);
	    let result = Zeros;
	    const comps = ensNameSplit(name);
	    while (comps.length) {
	        result = (0, index_js_1.keccak256)((0, index_js_2.concat)([result, (0, index_js_1.keccak256)((comps.pop()))]));
	    }
	    return (0, index_js_2.hexlify)(result);
	}
	namehash.namehash = namehash$1;
	/**
	 *  Returns the DNS encoded %%name%%.
	 *
	 *  This is used for various parts of ENS name resolution, such
	 *  as the wildcard resolution.
	 */
	function dnsEncode(name, _maxLength) {
	    const length = (_maxLength != null) ? _maxLength : 63;
	    (0, index_js_2.assertArgument)(length <= 255, "DNS encoded label cannot exceed 255", "length", length);
	    return (0, index_js_2.hexlify)((0, index_js_2.concat)(ensNameSplit(name).map((comp) => {
	        (0, index_js_2.assertArgument)(comp.length <= length, `label ${JSON.stringify(name)} exceeds ${length} bytes`, "name", name);
	        const bytes = new Uint8Array(comp.length + 1);
	        bytes.set(comp, 1);
	        bytes[0] = bytes.length - 1;
	        return bytes;
	    }))) + "00";
	}
	namehash.dnsEncode = dnsEncode;
	
	return namehash;
}

var message = {};

var transaction$1 = {};

var accesslist = {};

var hasRequiredAccesslist;

function requireAccesslist () {
	if (hasRequiredAccesslist) return accesslist;
	hasRequiredAccesslist = 1;
	Object.defineProperty(accesslist, "__esModule", { value: true });
	accesslist.accessListify = void 0;
	const index_js_1 = requireAddress$2();
	const index_js_2 = requireUtils$3();
	function accessSetify(addr, storageKeys) {
	    return {
	        address: (0, index_js_1.getAddress)(addr),
	        storageKeys: storageKeys.map((storageKey, index) => {
	            (0, index_js_2.assertArgument)((0, index_js_2.isHexString)(storageKey, 32), "invalid slot", `storageKeys[${index}]`, storageKey);
	            return storageKey.toLowerCase();
	        })
	    };
	}
	/**
	 *  Returns a [[AccessList]] from any ethers-supported access-list structure.
	 */
	function accessListify(value) {
	    if (Array.isArray(value)) {
	        return value.map((set, index) => {
	            if (Array.isArray(set)) {
	                (0, index_js_2.assertArgument)(set.length === 2, "invalid slot set", `value[${index}]`, set);
	                return accessSetify(set[0], set[1]);
	            }
	            (0, index_js_2.assertArgument)(set != null && typeof (set) === "object", "invalid address-slot set", "value", value);
	            return accessSetify(set.address, set.storageKeys);
	        });
	    }
	    (0, index_js_2.assertArgument)(value != null && typeof (value) === "object", "invalid access list", "value", value);
	    const result = Object.keys(value).map((addr) => {
	        const storageKeys = value[addr].reduce((accum, storageKey) => {
	            accum[storageKey] = true;
	            return accum;
	        }, {});
	        return accessSetify(addr, Object.keys(storageKeys).sort());
	    });
	    result.sort((a, b) => (a.address.localeCompare(b.address)));
	    return result;
	}
	accesslist.accessListify = accessListify;
	
	return accesslist;
}

var address$1 = {};

var hasRequiredAddress;

function requireAddress () {
	if (hasRequiredAddress) return address$1;
	hasRequiredAddress = 1;
	Object.defineProperty(address$1, "__esModule", { value: true });
	address$1.recoverAddress = address$1.computeAddress = void 0;
	const index_js_1 = requireAddress$2();
	const index_js_2 = requireCrypto();
	/**
	 *  Returns the address for the %%key%%.
	 *
	 *  The key may be any standard form of public key or a private key.
	 */
	function computeAddress(key) {
	    let pubkey;
	    if (typeof (key) === "string") {
	        pubkey = index_js_2.SigningKey.computePublicKey(key, false);
	    }
	    else {
	        pubkey = key.publicKey;
	    }
	    return (0, index_js_1.getAddress)((0, index_js_2.keccak256)("0x" + pubkey.substring(4)).substring(26));
	}
	address$1.computeAddress = computeAddress;
	/**
	 *  Returns the recovered address for the private key that was
	 *  used to sign %%digest%% that resulted in %%signature%%.
	 */
	function recoverAddress(digest, signature) {
	    return computeAddress(index_js_2.SigningKey.recoverPublicKey(digest, signature));
	}
	address$1.recoverAddress = recoverAddress;
	
	return address$1;
}

var transaction = {};

var hasRequiredTransaction$1;

function requireTransaction$1 () {
	if (hasRequiredTransaction$1) return transaction;
	hasRequiredTransaction$1 = 1;
	Object.defineProperty(transaction, "__esModule", { value: true });
	transaction.Transaction = void 0;
	const index_js_1 = requireAddress$2();
	const addresses_js_1 = requireAddresses();
	const index_js_2 = requireCrypto();
	const index_js_3 = requireUtils$3();
	const accesslist_js_1 = requireAccesslist();
	const address_js_1 = requireAddress();
	const BN_0 = BigInt(0);
	const BN_2 = BigInt(2);
	const BN_27 = BigInt(27);
	const BN_28 = BigInt(28);
	const BN_35 = BigInt(35);
	const BN_MAX_UINT = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
	function handleAddress(value) {
	    if (value === "0x") {
	        return null;
	    }
	    return (0, index_js_1.getAddress)(value);
	}
	function handleAccessList(value, param) {
	    try {
	        return (0, accesslist_js_1.accessListify)(value);
	    }
	    catch (error) {
	        (0, index_js_3.assertArgument)(false, error.message, param, value);
	    }
	}
	function handleNumber(_value, param) {
	    if (_value === "0x") {
	        return 0;
	    }
	    return (0, index_js_3.getNumber)(_value, param);
	}
	function handleUint(_value, param) {
	    if (_value === "0x") {
	        return BN_0;
	    }
	    const value = (0, index_js_3.getBigInt)(_value, param);
	    (0, index_js_3.assertArgument)(value <= BN_MAX_UINT, "value exceeds uint size", param, value);
	    return value;
	}
	function formatNumber(_value, name) {
	    const value = (0, index_js_3.getBigInt)(_value, "value");
	    const result = (0, index_js_3.toBeArray)(value);
	    (0, index_js_3.assertArgument)(result.length <= 32, `value too large`, `tx.${name}`, value);
	    return result;
	}
	function formatAccessList(value) {
	    return (0, accesslist_js_1.accessListify)(value).map((set) => [set.address, set.storageKeys]);
	}
	function formatHashes(value, param) {
	    (0, index_js_3.assertArgument)(Array.isArray(value), `invalid ${param}`, "value", value);
	    for (let i = 0; i < value.length; i++) {
	        (0, index_js_3.assertArgument)((0, index_js_3.isHexString)(value[i], 32), "invalid ${ param } hash", `value[${i}]`, value[i]);
	    }
	    return value;
	}
	function _parseLegacy(data) {
	    const fields = (0, index_js_3.decodeRlp)(data);
	    (0, index_js_3.assertArgument)(Array.isArray(fields) && (fields.length === 9 || fields.length === 6), "invalid field count for legacy transaction", "data", data);
	    const tx = {
	        type: 0,
	        nonce: handleNumber(fields[0], "nonce"),
	        gasPrice: handleUint(fields[1], "gasPrice"),
	        gasLimit: handleUint(fields[2], "gasLimit"),
	        to: handleAddress(fields[3]),
	        value: handleUint(fields[4], "value"),
	        data: (0, index_js_3.hexlify)(fields[5]),
	        chainId: BN_0
	    };
	    // Legacy unsigned transaction
	    if (fields.length === 6) {
	        return tx;
	    }
	    const v = handleUint(fields[6], "v");
	    const r = handleUint(fields[7], "r");
	    const s = handleUint(fields[8], "s");
	    if (r === BN_0 && s === BN_0) {
	        // EIP-155 unsigned transaction
	        tx.chainId = v;
	    }
	    else {
	        // Compute the EIP-155 chain ID (or 0 for legacy)
	        let chainId = (v - BN_35) / BN_2;
	        if (chainId < BN_0) {
	            chainId = BN_0;
	        }
	        tx.chainId = chainId;
	        // Signed Legacy Transaction
	        (0, index_js_3.assertArgument)(chainId !== BN_0 || (v === BN_27 || v === BN_28), "non-canonical legacy v", "v", fields[6]);
	        tx.signature = index_js_2.Signature.from({
	            r: (0, index_js_3.zeroPadValue)(fields[7], 32),
	            s: (0, index_js_3.zeroPadValue)(fields[8], 32),
	            v
	        });
	        tx.hash = (0, index_js_2.keccak256)(data);
	    }
	    return tx;
	}
	function _serializeLegacy(tx, sig) {
	    const fields = [
	        formatNumber(tx.nonce, "nonce"),
	        formatNumber(tx.gasPrice || 0, "gasPrice"),
	        formatNumber(tx.gasLimit, "gasLimit"),
	        (tx.to || "0x"),
	        formatNumber(tx.value, "value"),
	        tx.data,
	    ];
	    let chainId = BN_0;
	    if (tx.chainId != BN_0) {
	        // A chainId was provided; if non-zero we'll use EIP-155
	        chainId = (0, index_js_3.getBigInt)(tx.chainId, "tx.chainId");
	        // We have a chainId in the tx and an EIP-155 v in the signature,
	        // make sure they agree with each other
	        (0, index_js_3.assertArgument)(!sig || sig.networkV == null || sig.legacyChainId === chainId, "tx.chainId/sig.v mismatch", "sig", sig);
	    }
	    else if (tx.signature) {
	        // No explicit chainId, but EIP-155 have a derived implicit chainId
	        const legacy = tx.signature.legacyChainId;
	        if (legacy != null) {
	            chainId = legacy;
	        }
	    }
	    // Requesting an unsigned transaction
	    if (!sig) {
	        // We have an EIP-155 transaction (chainId was specified and non-zero)
	        if (chainId !== BN_0) {
	            fields.push((0, index_js_3.toBeArray)(chainId));
	            fields.push("0x");
	            fields.push("0x");
	        }
	        return (0, index_js_3.encodeRlp)(fields);
	    }
	    // @TODO: We should probably check that tx.signature, chainId, and sig
	    //        match but that logic could break existing code, so schedule
	    //        this for the next major bump.
	    // Compute the EIP-155 v
	    let v = BigInt(27 + sig.yParity);
	    if (chainId !== BN_0) {
	        v = index_js_2.Signature.getChainIdV(chainId, sig.v);
	    }
	    else if (BigInt(sig.v) !== v) {
	        (0, index_js_3.assertArgument)(false, "tx.chainId/sig.v mismatch", "sig", sig);
	    }
	    // Add the signature
	    fields.push((0, index_js_3.toBeArray)(v));
	    fields.push((0, index_js_3.toBeArray)(sig.r));
	    fields.push((0, index_js_3.toBeArray)(sig.s));
	    return (0, index_js_3.encodeRlp)(fields);
	}
	function _parseEipSignature(tx, fields) {
	    let yParity;
	    try {
	        yParity = handleNumber(fields[0], "yParity");
	        if (yParity !== 0 && yParity !== 1) {
	            throw new Error("bad yParity");
	        }
	    }
	    catch (error) {
	        (0, index_js_3.assertArgument)(false, "invalid yParity", "yParity", fields[0]);
	    }
	    const r = (0, index_js_3.zeroPadValue)(fields[1], 32);
	    const s = (0, index_js_3.zeroPadValue)(fields[2], 32);
	    const signature = index_js_2.Signature.from({ r, s, yParity });
	    tx.signature = signature;
	}
	function _parseEip1559(data) {
	    const fields = (0, index_js_3.decodeRlp)((0, index_js_3.getBytes)(data).slice(1));
	    (0, index_js_3.assertArgument)(Array.isArray(fields) && (fields.length === 9 || fields.length === 12), "invalid field count for transaction type: 2", "data", (0, index_js_3.hexlify)(data));
	    const tx = {
	        type: 2,
	        chainId: handleUint(fields[0], "chainId"),
	        nonce: handleNumber(fields[1], "nonce"),
	        maxPriorityFeePerGas: handleUint(fields[2], "maxPriorityFeePerGas"),
	        maxFeePerGas: handleUint(fields[3], "maxFeePerGas"),
	        gasPrice: null,
	        gasLimit: handleUint(fields[4], "gasLimit"),
	        to: handleAddress(fields[5]),
	        value: handleUint(fields[6], "value"),
	        data: (0, index_js_3.hexlify)(fields[7]),
	        accessList: handleAccessList(fields[8], "accessList"),
	    };
	    // Unsigned EIP-1559 Transaction
	    if (fields.length === 9) {
	        return tx;
	    }
	    tx.hash = (0, index_js_2.keccak256)(data);
	    _parseEipSignature(tx, fields.slice(9));
	    return tx;
	}
	function _serializeEip1559(tx, sig) {
	    const fields = [
	        formatNumber(tx.chainId, "chainId"),
	        formatNumber(tx.nonce, "nonce"),
	        formatNumber(tx.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
	        formatNumber(tx.maxFeePerGas || 0, "maxFeePerGas"),
	        formatNumber(tx.gasLimit, "gasLimit"),
	        (tx.to || "0x"),
	        formatNumber(tx.value, "value"),
	        tx.data,
	        formatAccessList(tx.accessList || [])
	    ];
	    if (sig) {
	        fields.push(formatNumber(sig.yParity, "yParity"));
	        fields.push((0, index_js_3.toBeArray)(sig.r));
	        fields.push((0, index_js_3.toBeArray)(sig.s));
	    }
	    return (0, index_js_3.concat)(["0x02", (0, index_js_3.encodeRlp)(fields)]);
	}
	function _parseEip2930(data) {
	    const fields = (0, index_js_3.decodeRlp)((0, index_js_3.getBytes)(data).slice(1));
	    (0, index_js_3.assertArgument)(Array.isArray(fields) && (fields.length === 8 || fields.length === 11), "invalid field count for transaction type: 1", "data", (0, index_js_3.hexlify)(data));
	    const tx = {
	        type: 1,
	        chainId: handleUint(fields[0], "chainId"),
	        nonce: handleNumber(fields[1], "nonce"),
	        gasPrice: handleUint(fields[2], "gasPrice"),
	        gasLimit: handleUint(fields[3], "gasLimit"),
	        to: handleAddress(fields[4]),
	        value: handleUint(fields[5], "value"),
	        data: (0, index_js_3.hexlify)(fields[6]),
	        accessList: handleAccessList(fields[7], "accessList")
	    };
	    // Unsigned EIP-2930 Transaction
	    if (fields.length === 8) {
	        return tx;
	    }
	    tx.hash = (0, index_js_2.keccak256)(data);
	    _parseEipSignature(tx, fields.slice(8));
	    return tx;
	}
	function _serializeEip2930(tx, sig) {
	    const fields = [
	        formatNumber(tx.chainId, "chainId"),
	        formatNumber(tx.nonce, "nonce"),
	        formatNumber(tx.gasPrice || 0, "gasPrice"),
	        formatNumber(tx.gasLimit, "gasLimit"),
	        (tx.to || "0x"),
	        formatNumber(tx.value, "value"),
	        tx.data,
	        formatAccessList(tx.accessList || [])
	    ];
	    if (sig) {
	        fields.push(formatNumber(sig.yParity, "recoveryParam"));
	        fields.push((0, index_js_3.toBeArray)(sig.r));
	        fields.push((0, index_js_3.toBeArray)(sig.s));
	    }
	    return (0, index_js_3.concat)(["0x01", (0, index_js_3.encodeRlp)(fields)]);
	}
	function _parseEip4844(data) {
	    const fields = (0, index_js_3.decodeRlp)((0, index_js_3.getBytes)(data).slice(1));
	    (0, index_js_3.assertArgument)(Array.isArray(fields) && (fields.length === 11 || fields.length === 14), "invalid field count for transaction type: 3", "data", (0, index_js_3.hexlify)(data));
	    const tx = {
	        type: 3,
	        chainId: handleUint(fields[0], "chainId"),
	        nonce: handleNumber(fields[1], "nonce"),
	        maxPriorityFeePerGas: handleUint(fields[2], "maxPriorityFeePerGas"),
	        maxFeePerGas: handleUint(fields[3], "maxFeePerGas"),
	        gasPrice: null,
	        gasLimit: handleUint(fields[4], "gasLimit"),
	        to: handleAddress(fields[5]),
	        value: handleUint(fields[6], "value"),
	        data: (0, index_js_3.hexlify)(fields[7]),
	        accessList: handleAccessList(fields[8], "accessList"),
	        maxFeePerBlobGas: handleUint(fields[9], "maxFeePerBlobGas"),
	        blobVersionedHashes: fields[10]
	    };
	    (0, index_js_3.assertArgument)(tx.to != null, "invalid address for transaction type: 3", "data", data);
	    (0, index_js_3.assertArgument)(Array.isArray(tx.blobVersionedHashes), "invalid blobVersionedHashes: must be an array", "data", data);
	    for (let i = 0; i < tx.blobVersionedHashes.length; i++) {
	        (0, index_js_3.assertArgument)((0, index_js_3.isHexString)(tx.blobVersionedHashes[i], 32), `invalid blobVersionedHash at index ${i}: must be length 32`, "data", data);
	    }
	    // Unsigned EIP-4844 Transaction
	    if (fields.length === 11) {
	        return tx;
	    }
	    tx.hash = (0, index_js_2.keccak256)(data);
	    _parseEipSignature(tx, fields.slice(11));
	    return tx;
	}
	function _serializeEip4844(tx, sig) {
	    const fields = [
	        formatNumber(tx.chainId, "chainId"),
	        formatNumber(tx.nonce, "nonce"),
	        formatNumber(tx.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
	        formatNumber(tx.maxFeePerGas || 0, "maxFeePerGas"),
	        formatNumber(tx.gasLimit, "gasLimit"),
	        (tx.to || addresses_js_1.ZeroAddress),
	        formatNumber(tx.value, "value"),
	        tx.data,
	        formatAccessList(tx.accessList || []),
	        formatNumber(tx.maxFeePerBlobGas || 0, "maxFeePerBlobGas"),
	        formatHashes(tx.blobVersionedHashes || [], "blobVersionedHashes")
	    ];
	    if (sig) {
	        fields.push(formatNumber(sig.yParity, "yParity"));
	        fields.push((0, index_js_3.toBeArray)(sig.r));
	        fields.push((0, index_js_3.toBeArray)(sig.s));
	    }
	    return (0, index_js_3.concat)(["0x03", (0, index_js_3.encodeRlp)(fields)]);
	}
	/**
	 *  A **Transaction** describes an operation to be executed on
	 *  Ethereum by an Externally Owned Account (EOA). It includes
	 *  who (the [[to]] address), what (the [[data]]) and how much (the
	 *  [[value]] in ether) the operation should entail.
	 *
	 *  @example:
	 *    tx = new Transaction()
	 *    //_result:
	 *
	 *    tx.data = "0x1234";
	 *    //_result:
	 */
	class Transaction {
	    #type;
	    #to;
	    #data;
	    #nonce;
	    #gasLimit;
	    #gasPrice;
	    #maxPriorityFeePerGas;
	    #maxFeePerGas;
	    #value;
	    #chainId;
	    #sig;
	    #accessList;
	    #maxFeePerBlobGas;
	    #blobVersionedHashes;
	    /**
	     *  The transaction type.
	     *
	     *  If null, the type will be automatically inferred based on
	     *  explicit properties.
	     */
	    get type() { return this.#type; }
	    set type(value) {
	        switch (value) {
	            case null:
	                this.#type = null;
	                break;
	            case 0:
	            case "legacy":
	                this.#type = 0;
	                break;
	            case 1:
	            case "berlin":
	            case "eip-2930":
	                this.#type = 1;
	                break;
	            case 2:
	            case "london":
	            case "eip-1559":
	                this.#type = 2;
	                break;
	            case 3:
	            case "cancun":
	            case "eip-4844":
	                this.#type = 3;
	                break;
	            default:
	                (0, index_js_3.assertArgument)(false, "unsupported transaction type", "type", value);
	        }
	    }
	    /**
	     *  The name of the transaction type.
	     */
	    get typeName() {
	        switch (this.type) {
	            case 0: return "legacy";
	            case 1: return "eip-2930";
	            case 2: return "eip-1559";
	            case 3: return "eip-4844";
	        }
	        return null;
	    }
	    /**
	     *  The ``to`` address for the transaction or ``null`` if the
	     *  transaction is an ``init`` transaction.
	     */
	    get to() {
	        const value = this.#to;
	        if (value == null && this.type === 3) {
	            return addresses_js_1.ZeroAddress;
	        }
	        return value;
	    }
	    set to(value) {
	        this.#to = (value == null) ? null : (0, index_js_1.getAddress)(value);
	    }
	    /**
	     *  The transaction nonce.
	     */
	    get nonce() { return this.#nonce; }
	    set nonce(value) { this.#nonce = (0, index_js_3.getNumber)(value, "value"); }
	    /**
	     *  The gas limit.
	     */
	    get gasLimit() { return this.#gasLimit; }
	    set gasLimit(value) { this.#gasLimit = (0, index_js_3.getBigInt)(value); }
	    /**
	     *  The gas price.
	     *
	     *  On legacy networks this defines the fee that will be paid. On
	     *  EIP-1559 networks, this should be ``null``.
	     */
	    get gasPrice() {
	        const value = this.#gasPrice;
	        if (value == null && (this.type === 0 || this.type === 1)) {
	            return BN_0;
	        }
	        return value;
	    }
	    set gasPrice(value) {
	        this.#gasPrice = (value == null) ? null : (0, index_js_3.getBigInt)(value, "gasPrice");
	    }
	    /**
	     *  The maximum priority fee per unit of gas to pay. On legacy
	     *  networks this should be ``null``.
	     */
	    get maxPriorityFeePerGas() {
	        const value = this.#maxPriorityFeePerGas;
	        if (value == null) {
	            if (this.type === 2 || this.type === 3) {
	                return BN_0;
	            }
	            return null;
	        }
	        return value;
	    }
	    set maxPriorityFeePerGas(value) {
	        this.#maxPriorityFeePerGas = (value == null) ? null : (0, index_js_3.getBigInt)(value, "maxPriorityFeePerGas");
	    }
	    /**
	     *  The maximum total fee per unit of gas to pay. On legacy
	     *  networks this should be ``null``.
	     */
	    get maxFeePerGas() {
	        const value = this.#maxFeePerGas;
	        if (value == null) {
	            if (this.type === 2 || this.type === 3) {
	                return BN_0;
	            }
	            return null;
	        }
	        return value;
	    }
	    set maxFeePerGas(value) {
	        this.#maxFeePerGas = (value == null) ? null : (0, index_js_3.getBigInt)(value, "maxFeePerGas");
	    }
	    /**
	     *  The transaction data. For ``init`` transactions this is the
	     *  deployment code.
	     */
	    get data() { return this.#data; }
	    set data(value) { this.#data = (0, index_js_3.hexlify)(value); }
	    /**
	     *  The amount of ether (in wei) to send in this transactions.
	     */
	    get value() { return this.#value; }
	    set value(value) {
	        this.#value = (0, index_js_3.getBigInt)(value, "value");
	    }
	    /**
	     *  The chain ID this transaction is valid on.
	     */
	    get chainId() { return this.#chainId; }
	    set chainId(value) { this.#chainId = (0, index_js_3.getBigInt)(value); }
	    /**
	     *  If signed, the signature for this transaction.
	     */
	    get signature() { return this.#sig || null; }
	    set signature(value) {
	        this.#sig = (value == null) ? null : index_js_2.Signature.from(value);
	    }
	    /**
	     *  The access list.
	     *
	     *  An access list permits discounted (but pre-paid) access to
	     *  bytecode and state variable access within contract execution.
	     */
	    get accessList() {
	        const value = this.#accessList || null;
	        if (value == null) {
	            if (this.type === 1 || this.type === 2 || this.type === 3) {
	                // @TODO: in v7, this should assign the value or become
	                // a live object itself, otherwise mutation is inconsistent
	                return [];
	            }
	            return null;
	        }
	        return value;
	    }
	    set accessList(value) {
	        this.#accessList = (value == null) ? null : (0, accesslist_js_1.accessListify)(value);
	    }
	    /**
	     *  The max fee per blob gas for Cancun transactions.
	     */
	    get maxFeePerBlobGas() {
	        const value = this.#maxFeePerBlobGas;
	        if (value == null && this.type === 3) {
	            return BN_0;
	        }
	        return value;
	    }
	    set maxFeePerBlobGas(value) {
	        this.#maxFeePerBlobGas = (value == null) ? null : (0, index_js_3.getBigInt)(value, "maxFeePerBlobGas");
	    }
	    /**
	     *  The BLOB versioned hashes for Cancun transactions.
	     */
	    get blobVersionedHashes() {
	        // @TODO: Mutation is inconsistent; if unset, the returned value
	        // cannot mutate the object, if set it can
	        let value = this.#blobVersionedHashes;
	        if (value == null && this.type === 3) {
	            return [];
	        }
	        return value;
	    }
	    set blobVersionedHashes(value) {
	        if (value != null) {
	            (0, index_js_3.assertArgument)(Array.isArray(value), "blobVersionedHashes must be an Array", "value", value);
	            value = value.slice();
	            for (let i = 0; i < value.length; i++) {
	                (0, index_js_3.assertArgument)((0, index_js_3.isHexString)(value[i], 32), "invalid blobVersionedHash", `value[${i}]`, value[i]);
	            }
	        }
	        this.#blobVersionedHashes = value;
	    }
	    /**
	     *  Creates a new Transaction with default values.
	     */
	    constructor() {
	        this.#type = null;
	        this.#to = null;
	        this.#nonce = 0;
	        this.#gasLimit = BN_0;
	        this.#gasPrice = null;
	        this.#maxPriorityFeePerGas = null;
	        this.#maxFeePerGas = null;
	        this.#data = "0x";
	        this.#value = BN_0;
	        this.#chainId = BN_0;
	        this.#sig = null;
	        this.#accessList = null;
	        this.#maxFeePerBlobGas = null;
	        this.#blobVersionedHashes = null;
	    }
	    /**
	     *  The transaction hash, if signed. Otherwise, ``null``.
	     */
	    get hash() {
	        if (this.signature == null) {
	            return null;
	        }
	        return (0, index_js_2.keccak256)(this.serialized);
	    }
	    /**
	     *  The pre-image hash of this transaction.
	     *
	     *  This is the digest that a [[Signer]] must sign to authorize
	     *  this transaction.
	     */
	    get unsignedHash() {
	        return (0, index_js_2.keccak256)(this.unsignedSerialized);
	    }
	    /**
	     *  The sending address, if signed. Otherwise, ``null``.
	     */
	    get from() {
	        if (this.signature == null) {
	            return null;
	        }
	        return (0, address_js_1.recoverAddress)(this.unsignedHash, this.signature);
	    }
	    /**
	     *  The public key of the sender, if signed. Otherwise, ``null``.
	     */
	    get fromPublicKey() {
	        if (this.signature == null) {
	            return null;
	        }
	        return index_js_2.SigningKey.recoverPublicKey(this.unsignedHash, this.signature);
	    }
	    /**
	     *  Returns true if signed.
	     *
	     *  This provides a Type Guard that properties requiring a signed
	     *  transaction are non-null.
	     */
	    isSigned() {
	        return this.signature != null;
	    }
	    /**
	     *  The serialized transaction.
	     *
	     *  This throws if the transaction is unsigned. For the pre-image,
	     *  use [[unsignedSerialized]].
	     */
	    get serialized() {
	        (0, index_js_3.assert)(this.signature != null, "cannot serialize unsigned transaction; maybe you meant .unsignedSerialized", "UNSUPPORTED_OPERATION", { operation: ".serialized" });
	        switch (this.inferType()) {
	            case 0:
	                return _serializeLegacy(this, this.signature);
	            case 1:
	                return _serializeEip2930(this, this.signature);
	            case 2:
	                return _serializeEip1559(this, this.signature);
	            case 3:
	                return _serializeEip4844(this, this.signature);
	        }
	        (0, index_js_3.assert)(false, "unsupported transaction type", "UNSUPPORTED_OPERATION", { operation: ".serialized" });
	    }
	    /**
	     *  The transaction pre-image.
	     *
	     *  The hash of this is the digest which needs to be signed to
	     *  authorize this transaction.
	     */
	    get unsignedSerialized() {
	        switch (this.inferType()) {
	            case 0:
	                return _serializeLegacy(this);
	            case 1:
	                return _serializeEip2930(this);
	            case 2:
	                return _serializeEip1559(this);
	            case 3:
	                return _serializeEip4844(this);
	        }
	        (0, index_js_3.assert)(false, "unsupported transaction type", "UNSUPPORTED_OPERATION", { operation: ".unsignedSerialized" });
	    }
	    /**
	     *  Return the most "likely" type; currently the highest
	     *  supported transaction type.
	     */
	    inferType() {
	        const types = this.inferTypes();
	        // Prefer London (EIP-1559) over Cancun (BLOb)
	        if (types.indexOf(2) >= 0) {
	            return 2;
	        }
	        // Return the highest inferred type
	        return (types.pop());
	    }
	    /**
	     *  Validates the explicit properties and returns a list of compatible
	     *  transaction types.
	     */
	    inferTypes() {
	        // Checks that there are no conflicting properties set
	        const hasGasPrice = this.gasPrice != null;
	        const hasFee = (this.maxFeePerGas != null || this.maxPriorityFeePerGas != null);
	        const hasAccessList = (this.accessList != null);
	        const hasBlob = (this.#maxFeePerBlobGas != null || this.#blobVersionedHashes);
	        //if (hasGasPrice && hasFee) {
	        //    throw new Error("transaction cannot have gasPrice and maxFeePerGas");
	        //}
	        if (this.maxFeePerGas != null && this.maxPriorityFeePerGas != null) {
	            (0, index_js_3.assert)(this.maxFeePerGas >= this.maxPriorityFeePerGas, "priorityFee cannot be more than maxFee", "BAD_DATA", { value: this });
	        }
	        //if (this.type === 2 && hasGasPrice) {
	        //    throw new Error("eip-1559 transaction cannot have gasPrice");
	        //}
	        (0, index_js_3.assert)(!hasFee || (this.type !== 0 && this.type !== 1), "transaction type cannot have maxFeePerGas or maxPriorityFeePerGas", "BAD_DATA", { value: this });
	        (0, index_js_3.assert)(this.type !== 0 || !hasAccessList, "legacy transaction cannot have accessList", "BAD_DATA", { value: this });
	        const types = [];
	        // Explicit type
	        if (this.type != null) {
	            types.push(this.type);
	        }
	        else {
	            if (hasFee) {
	                types.push(2);
	            }
	            else if (hasGasPrice) {
	                types.push(1);
	                if (!hasAccessList) {
	                    types.push(0);
	                }
	            }
	            else if (hasAccessList) {
	                types.push(1);
	                types.push(2);
	            }
	            else if (hasBlob && this.to) {
	                types.push(3);
	            }
	            else {
	                types.push(0);
	                types.push(1);
	                types.push(2);
	                types.push(3);
	            }
	        }
	        types.sort();
	        return types;
	    }
	    /**
	     *  Returns true if this transaction is a legacy transaction (i.e.
	     *  ``type === 0``).
	     *
	     *  This provides a Type Guard that the related properties are
	     *  non-null.
	     */
	    isLegacy() {
	        return (this.type === 0);
	    }
	    /**
	     *  Returns true if this transaction is berlin hardform transaction (i.e.
	     *  ``type === 1``).
	     *
	     *  This provides a Type Guard that the related properties are
	     *  non-null.
	     */
	    isBerlin() {
	        return (this.type === 1);
	    }
	    /**
	     *  Returns true if this transaction is london hardform transaction (i.e.
	     *  ``type === 2``).
	     *
	     *  This provides a Type Guard that the related properties are
	     *  non-null.
	     */
	    isLondon() {
	        return (this.type === 2);
	    }
	    /**
	     *  Returns true if this transaction is an [[link-eip-4844]] BLOB
	     *  transaction.
	     *
	     *  This provides a Type Guard that the related properties are
	     *  non-null.
	     */
	    isCancun() {
	        return (this.type === 3);
	    }
	    /**
	     *  Create a copy of this transaciton.
	     */
	    clone() {
	        return Transaction.from(this);
	    }
	    /**
	     *  Return a JSON-friendly object.
	     */
	    toJSON() {
	        const s = (v) => {
	            if (v == null) {
	                return null;
	            }
	            return v.toString();
	        };
	        return {
	            type: this.type,
	            to: this.to,
	            //            from: this.from,
	            data: this.data,
	            nonce: this.nonce,
	            gasLimit: s(this.gasLimit),
	            gasPrice: s(this.gasPrice),
	            maxPriorityFeePerGas: s(this.maxPriorityFeePerGas),
	            maxFeePerGas: s(this.maxFeePerGas),
	            value: s(this.value),
	            chainId: s(this.chainId),
	            sig: this.signature ? this.signature.toJSON() : null,
	            accessList: this.accessList
	        };
	    }
	    /**
	     *  Create a **Transaction** from a serialized transaction or a
	     *  Transaction-like object.
	     */
	    static from(tx) {
	        if (tx == null) {
	            return new Transaction();
	        }
	        if (typeof (tx) === "string") {
	            const payload = (0, index_js_3.getBytes)(tx);
	            if (payload[0] >= 0x7f) { // @TODO: > vs >= ??
	                return Transaction.from(_parseLegacy(payload));
	            }
	            switch (payload[0]) {
	                case 1: return Transaction.from(_parseEip2930(payload));
	                case 2: return Transaction.from(_parseEip1559(payload));
	                case 3: return Transaction.from(_parseEip4844(payload));
	            }
	            (0, index_js_3.assert)(false, "unsupported transaction type", "UNSUPPORTED_OPERATION", { operation: "from" });
	        }
	        const result = new Transaction();
	        if (tx.type != null) {
	            result.type = tx.type;
	        }
	        if (tx.to != null) {
	            result.to = tx.to;
	        }
	        if (tx.nonce != null) {
	            result.nonce = tx.nonce;
	        }
	        if (tx.gasLimit != null) {
	            result.gasLimit = tx.gasLimit;
	        }
	        if (tx.gasPrice != null) {
	            result.gasPrice = tx.gasPrice;
	        }
	        if (tx.maxPriorityFeePerGas != null) {
	            result.maxPriorityFeePerGas = tx.maxPriorityFeePerGas;
	        }
	        if (tx.maxFeePerGas != null) {
	            result.maxFeePerGas = tx.maxFeePerGas;
	        }
	        if (tx.maxFeePerBlobGas != null) {
	            result.maxFeePerBlobGas = tx.maxFeePerBlobGas;
	        }
	        if (tx.data != null) {
	            result.data = tx.data;
	        }
	        if (tx.value != null) {
	            result.value = tx.value;
	        }
	        if (tx.chainId != null) {
	            result.chainId = tx.chainId;
	        }
	        if (tx.signature != null) {
	            result.signature = index_js_2.Signature.from(tx.signature);
	        }
	        if (tx.accessList != null) {
	            result.accessList = tx.accessList;
	        }
	        if (tx.blobVersionedHashes != null) {
	            result.blobVersionedHashes = tx.blobVersionedHashes;
	        }
	        if (tx.hash != null) {
	            (0, index_js_3.assertArgument)(result.isSigned(), "unsigned transaction cannot define hash", "tx", tx);
	            (0, index_js_3.assertArgument)(result.hash === tx.hash, "hash mismatch", "tx", tx);
	        }
	        if (tx.from != null) {
	            (0, index_js_3.assertArgument)(result.isSigned(), "unsigned transaction cannot define from", "tx", tx);
	            (0, index_js_3.assertArgument)(result.from.toLowerCase() === (tx.from || "").toLowerCase(), "from mismatch", "tx", tx);
	        }
	        return result;
	    }
	}
	transaction.Transaction = Transaction;
	
	return transaction;
}

var hasRequiredTransaction;

function requireTransaction () {
	if (hasRequiredTransaction) return transaction$1;
	hasRequiredTransaction = 1;
	(function (exports) {
		/**
		 *  Each state-changing operation on Ethereum requires a transaction.
		 *
		 *  @_section api/transaction:Transactions  [about-transactions]
		 */
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.Transaction = exports.recoverAddress = exports.computeAddress = exports.accessListify = void 0;
		var accesslist_js_1 = requireAccesslist();
		Object.defineProperty(exports, "accessListify", { enumerable: true, get: function () { return accesslist_js_1.accessListify; } });
		var address_js_1 = requireAddress();
		Object.defineProperty(exports, "computeAddress", { enumerable: true, get: function () { return address_js_1.computeAddress; } });
		Object.defineProperty(exports, "recoverAddress", { enumerable: true, get: function () { return address_js_1.recoverAddress; } });
		var transaction_js_1 = requireTransaction$1();
		Object.defineProperty(exports, "Transaction", { enumerable: true, get: function () { return transaction_js_1.Transaction; } });
		
	} (transaction$1));
	return transaction$1;
}

var hasRequiredMessage;

function requireMessage () {
	if (hasRequiredMessage) return message;
	hasRequiredMessage = 1;
	Object.defineProperty(message, "__esModule", { value: true });
	message.verifyMessage = message.hashMessage = void 0;
	const index_js_1 = requireCrypto();
	const index_js_2 = requireConstants$1();
	const index_js_3 = requireTransaction();
	const index_js_4 = requireUtils$3();
	/**
	 *  Computes the [[link-eip-191]] personal-sign message digest to sign.
	 *
	 *  This prefixes the message with [[MessagePrefix]] and the decimal length
	 *  of %%message%% and computes the [[keccak256]] digest.
	 *
	 *  If %%message%% is a string, it is converted to its UTF-8 bytes
	 *  first. To compute the digest of a [[DataHexString]], it must be converted
	 *  to [bytes](getBytes).
	 *
	 *  @example:
	 *    hashMessage("Hello World")
	 *    //_result:
	 *
	 *    // Hashes the SIX (6) string characters, i.e.
	 *    // [ "0", "x", "4", "2", "4", "3" ]
	 *    hashMessage("0x4243")
	 *    //_result:
	 *
	 *    // Hashes the TWO (2) bytes [ 0x42, 0x43 ]...
	 *    hashMessage(getBytes("0x4243"))
	 *    //_result:
	 *
	 *    // ...which is equal to using data
	 *    hashMessage(new Uint8Array([ 0x42, 0x43 ]))
	 *    //_result:
	 *
	 */
	function hashMessage(message) {
	    if (typeof (message) === "string") {
	        message = (0, index_js_4.toUtf8Bytes)(message);
	    }
	    return (0, index_js_1.keccak256)((0, index_js_4.concat)([
	        (0, index_js_4.toUtf8Bytes)(index_js_2.MessagePrefix),
	        (0, index_js_4.toUtf8Bytes)(String(message.length)),
	        message
	    ]));
	}
	message.hashMessage = hashMessage;
	/**
	 *  Return the address of the private key that produced
	 *  the signature %%sig%% during signing for %%message%%.
	 */
	function verifyMessage(message, sig) {
	    const digest = hashMessage(message);
	    return (0, index_js_3.recoverAddress)(digest, sig);
	}
	message.verifyMessage = verifyMessage;
	
	return message;
}

var solidity = {};

var hasRequiredSolidity;

function requireSolidity () {
	if (hasRequiredSolidity) return solidity;
	hasRequiredSolidity = 1;
	Object.defineProperty(solidity, "__esModule", { value: true });
	solidity.solidityPackedSha256 = solidity.solidityPackedKeccak256 = solidity.solidityPacked = void 0;
	const index_js_1 = requireAddress$2();
	const index_js_2 = requireCrypto();
	const index_js_3 = requireUtils$3();
	const regexBytes = new RegExp("^bytes([0-9]+)$");
	const regexNumber = new RegExp("^(u?int)([0-9]*)$");
	const regexArray = new RegExp("^(.*)\\[([0-9]*)\\]$");
	function _pack(type, value, isArray) {
	    switch (type) {
	        case "address":
	            if (isArray) {
	                return (0, index_js_3.getBytes)((0, index_js_3.zeroPadValue)(value, 32));
	            }
	            return (0, index_js_3.getBytes)((0, index_js_1.getAddress)(value));
	        case "string":
	            return (0, index_js_3.toUtf8Bytes)(value);
	        case "bytes":
	            return (0, index_js_3.getBytes)(value);
	        case "bool":
	            value = (!!value ? "0x01" : "0x00");
	            if (isArray) {
	                return (0, index_js_3.getBytes)((0, index_js_3.zeroPadValue)(value, 32));
	            }
	            return (0, index_js_3.getBytes)(value);
	    }
	    let match = type.match(regexNumber);
	    if (match) {
	        let signed = (match[1] === "int");
	        let size = parseInt(match[2] || "256");
	        (0, index_js_3.assertArgument)((!match[2] || match[2] === String(size)) && (size % 8 === 0) && size !== 0 && size <= 256, "invalid number type", "type", type);
	        if (isArray) {
	            size = 256;
	        }
	        if (signed) {
	            value = (0, index_js_3.toTwos)(value, size);
	        }
	        return (0, index_js_3.getBytes)((0, index_js_3.zeroPadValue)((0, index_js_3.toBeArray)(value), size / 8));
	    }
	    match = type.match(regexBytes);
	    if (match) {
	        const size = parseInt(match[1]);
	        (0, index_js_3.assertArgument)(String(size) === match[1] && size !== 0 && size <= 32, "invalid bytes type", "type", type);
	        (0, index_js_3.assertArgument)((0, index_js_3.dataLength)(value) === size, `invalid value for ${type}`, "value", value);
	        if (isArray) {
	            return (0, index_js_3.getBytes)((0, index_js_3.zeroPadBytes)(value, 32));
	        }
	        return value;
	    }
	    match = type.match(regexArray);
	    if (match && Array.isArray(value)) {
	        const baseType = match[1];
	        const count = parseInt(match[2] || String(value.length));
	        (0, index_js_3.assertArgument)(count === value.length, `invalid array length for ${type}`, "value", value);
	        const result = [];
	        value.forEach(function (value) {
	            result.push(_pack(baseType, value, true));
	        });
	        return (0, index_js_3.getBytes)((0, index_js_3.concat)(result));
	    }
	    (0, index_js_3.assertArgument)(false, "invalid type", "type", type);
	}
	// @TODO: Array Enum
	/**
	 *   Computes the [[link-solc-packed]] representation of %%values%%
	 *   respectively to their %%types%%.
	 *
	 *   @example:
	 *       addr = "0x8ba1f109551bd432803012645ac136ddd64dba72"
	 *       solidityPacked([ "address", "uint" ], [ addr, 45 ]);
	 *       //_result:
	 */
	function solidityPacked(types, values) {
	    (0, index_js_3.assertArgument)(types.length === values.length, "wrong number of values; expected ${ types.length }", "values", values);
	    const tight = [];
	    types.forEach(function (type, index) {
	        tight.push(_pack(type, values[index]));
	    });
	    return (0, index_js_3.hexlify)((0, index_js_3.concat)(tight));
	}
	solidity.solidityPacked = solidityPacked;
	/**
	 *   Computes the [[link-solc-packed]] [[keccak256]] hash of %%values%%
	 *   respectively to their %%types%%.
	 *
	 *   @example:
	 *       addr = "0x8ba1f109551bd432803012645ac136ddd64dba72"
	 *       solidityPackedKeccak256([ "address", "uint" ], [ addr, 45 ]);
	 *       //_result:
	 */
	function solidityPackedKeccak256(types, values) {
	    return (0, index_js_2.keccak256)(solidityPacked(types, values));
	}
	solidity.solidityPackedKeccak256 = solidityPackedKeccak256;
	/**
	 *   Computes the [[link-solc-packed]] [[sha256]] hash of %%values%%
	 *   respectively to their %%types%%.
	 *
	 *   @example:
	 *       addr = "0x8ba1f109551bd432803012645ac136ddd64dba72"
	 *       solidityPackedSha256([ "address", "uint" ], [ addr, 45 ]);
	 *       //_result:
	 */
	function solidityPackedSha256(types, values) {
	    return (0, index_js_2.sha256)(solidityPacked(types, values));
	}
	solidity.solidityPackedSha256 = solidityPackedSha256;
	
	return solidity;
}

var typedData = {};

var hasRequiredTypedData;

function requireTypedData () {
	if (hasRequiredTypedData) return typedData;
	hasRequiredTypedData = 1;
	Object.defineProperty(typedData, "__esModule", { value: true });
	typedData.verifyTypedData = typedData.TypedDataEncoder = void 0;
	//import { TypedDataDomain, TypedDataField } from "@ethersproject/providerabstract-signer";
	const index_js_1 = requireAddress$2();
	const index_js_2 = requireCrypto();
	const index_js_3 = requireTransaction();
	const index_js_4 = requireUtils$3();
	const id_js_1 = requireId();
	const padding = new Uint8Array(32);
	padding.fill(0);
	const BN__1 = BigInt(-1);
	const BN_0 = BigInt(0);
	const BN_1 = BigInt(1);
	const BN_MAX_UINT256 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
	function hexPadRight(value) {
	    const bytes = (0, index_js_4.getBytes)(value);
	    const padOffset = bytes.length % 32;
	    if (padOffset) {
	        return (0, index_js_4.concat)([bytes, padding.slice(padOffset)]);
	    }
	    return (0, index_js_4.hexlify)(bytes);
	}
	const hexTrue = (0, index_js_4.toBeHex)(BN_1, 32);
	const hexFalse = (0, index_js_4.toBeHex)(BN_0, 32);
	const domainFieldTypes = {
	    name: "string",
	    version: "string",
	    chainId: "uint256",
	    verifyingContract: "address",
	    salt: "bytes32"
	};
	const domainFieldNames = [
	    "name", "version", "chainId", "verifyingContract", "salt"
	];
	function checkString(key) {
	    return function (value) {
	        (0, index_js_4.assertArgument)(typeof (value) === "string", `invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);
	        return value;
	    };
	}
	const domainChecks = {
	    name: checkString("name"),
	    version: checkString("version"),
	    chainId: function (_value) {
	        const value = (0, index_js_4.getBigInt)(_value, "domain.chainId");
	        (0, index_js_4.assertArgument)(value >= 0, "invalid chain ID", "domain.chainId", _value);
	        if (Number.isSafeInteger(value)) {
	            return Number(value);
	        }
	        return (0, index_js_4.toQuantity)(value);
	    },
	    verifyingContract: function (value) {
	        try {
	            return (0, index_js_1.getAddress)(value).toLowerCase();
	        }
	        catch (error) { }
	        (0, index_js_4.assertArgument)(false, `invalid domain value "verifyingContract"`, "domain.verifyingContract", value);
	    },
	    salt: function (value) {
	        const bytes = (0, index_js_4.getBytes)(value, "domain.salt");
	        (0, index_js_4.assertArgument)(bytes.length === 32, `invalid domain value "salt"`, "domain.salt", value);
	        return (0, index_js_4.hexlify)(bytes);
	    }
	};
	function getBaseEncoder(type) {
	    // intXX and uintXX
	    {
	        const match = type.match(/^(u?)int(\d+)$/);
	        if (match) {
	            const signed = (match[1] === "");
	            const width = parseInt(match[2]);
	            (0, index_js_4.assertArgument)(width % 8 === 0 && width !== 0 && width <= 256 && match[2] === String(width), "invalid numeric width", "type", type);
	            const boundsUpper = (0, index_js_4.mask)(BN_MAX_UINT256, signed ? (width - 1) : width);
	            const boundsLower = signed ? ((boundsUpper + BN_1) * BN__1) : BN_0;
	            return function (_value) {
	                const value = (0, index_js_4.getBigInt)(_value, "value");
	                (0, index_js_4.assertArgument)(value >= boundsLower && value <= boundsUpper, `value out-of-bounds for ${type}`, "value", value);
	                return (0, index_js_4.toBeHex)(signed ? (0, index_js_4.toTwos)(value, 256) : value, 32);
	            };
	        }
	    }
	    // bytesXX
	    {
	        const match = type.match(/^bytes(\d+)$/);
	        if (match) {
	            const width = parseInt(match[1]);
	            (0, index_js_4.assertArgument)(width !== 0 && width <= 32 && match[1] === String(width), "invalid bytes width", "type", type);
	            return function (value) {
	                const bytes = (0, index_js_4.getBytes)(value);
	                (0, index_js_4.assertArgument)(bytes.length === width, `invalid length for ${type}`, "value", value);
	                return hexPadRight(value);
	            };
	        }
	    }
	    switch (type) {
	        case "address": return function (value) {
	            return (0, index_js_4.zeroPadValue)((0, index_js_1.getAddress)(value), 32);
	        };
	        case "bool": return function (value) {
	            return ((!value) ? hexFalse : hexTrue);
	        };
	        case "bytes": return function (value) {
	            return (0, index_js_2.keccak256)(value);
	        };
	        case "string": return function (value) {
	            return (0, id_js_1.id)(value);
	        };
	    }
	    return null;
	}
	function encodeType(name, fields) {
	    return `${name}(${fields.map(({ name, type }) => (type + " " + name)).join(",")})`;
	}
	// foo[][3] => { base: "foo", index: "[][3]", array: {
	//     base: "foo", prefix: "foo[]", count: 3 } }
	function splitArray(type) {
	    const match = type.match(/^([^\x5b]*)((\x5b\d*\x5d)*)(\x5b(\d*)\x5d)$/);
	    if (match) {
	        return {
	            base: match[1],
	            index: (match[2] + match[4]),
	            array: {
	                base: match[1],
	                prefix: (match[1] + match[2]),
	                count: (match[5] ? parseInt(match[5]) : -1),
	            }
	        };
	    }
	    return { base: type };
	}
	/**
	 *  A **TypedDataEncode** prepares and encodes [[link-eip-712]] payloads
	 *  for signed typed data.
	 *
	 *  This is useful for those that wish to compute various components of a
	 *  typed data hash, primary types, or sub-components, but generally the
	 *  higher level [[Signer-signTypedData]] is more useful.
	 */
	class TypedDataEncoder {
	    /**
	     *  The primary type for the structured [[types]].
	     *
	     *  This is derived automatically from the [[types]], since no
	     *  recursion is possible, once the DAG for the types is consturcted
	     *  internally, the primary type must be the only remaining type with
	     *  no parent nodes.
	     */
	    primaryType;
	    #types;
	    /**
	     *  The types.
	     */
	    get types() {
	        return JSON.parse(this.#types);
	    }
	    #fullTypes;
	    #encoderCache;
	    /**
	     *  Create a new **TypedDataEncoder** for %%types%%.
	     *
	     *  This performs all necessary checking that types are valid and
	     *  do not violate the [[link-eip-712]] structural constraints as
	     *  well as computes the [[primaryType]].
	     */
	    constructor(_types) {
	        this.#fullTypes = new Map();
	        this.#encoderCache = new Map();
	        // Link struct types to their direct child structs
	        const links = new Map();
	        // Link structs to structs which contain them as a child
	        const parents = new Map();
	        // Link all subtypes within a given struct
	        const subtypes = new Map();
	        const types = {};
	        Object.keys(_types).forEach((type) => {
	            types[type] = _types[type].map(({ name, type }) => {
	                // Normalize the base type (unless name conflict)
	                let { base, index } = splitArray(type);
	                if (base === "int" && !_types["int"]) {
	                    base = "int256";
	                }
	                if (base === "uint" && !_types["uint"]) {
	                    base = "uint256";
	                }
	                return { name, type: (base + (index || "")) };
	            });
	            links.set(type, new Set());
	            parents.set(type, []);
	            subtypes.set(type, new Set());
	        });
	        this.#types = JSON.stringify(types);
	        for (const name in types) {
	            const uniqueNames = new Set();
	            for (const field of types[name]) {
	                // Check each field has a unique name
	                (0, index_js_4.assertArgument)(!uniqueNames.has(field.name), `duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, "types", _types);
	                uniqueNames.add(field.name);
	                // Get the base type (drop any array specifiers)
	                const baseType = splitArray(field.type).base;
	                (0, index_js_4.assertArgument)(baseType !== name, `circular type reference to ${JSON.stringify(baseType)}`, "types", _types);
	                // Is this a base encoding type?
	                const encoder = getBaseEncoder(baseType);
	                if (encoder) {
	                    continue;
	                }
	                (0, index_js_4.assertArgument)(parents.has(baseType), `unknown type ${JSON.stringify(baseType)}`, "types", _types);
	                // Add linkage
	                parents.get(baseType).push(name);
	                links.get(name).add(baseType);
	            }
	        }
	        // Deduce the primary type
	        const primaryTypes = Array.from(parents.keys()).filter((n) => (parents.get(n).length === 0));
	        (0, index_js_4.assertArgument)(primaryTypes.length !== 0, "missing primary type", "types", _types);
	        (0, index_js_4.assertArgument)(primaryTypes.length === 1, `ambiguous primary types or unused types: ${primaryTypes.map((t) => (JSON.stringify(t))).join(", ")}`, "types", _types);
	        (0, index_js_4.defineProperties)(this, { primaryType: primaryTypes[0] });
	        // Check for circular type references
	        function checkCircular(type, found) {
	            (0, index_js_4.assertArgument)(!found.has(type), `circular type reference to ${JSON.stringify(type)}`, "types", _types);
	            found.add(type);
	            for (const child of links.get(type)) {
	                if (!parents.has(child)) {
	                    continue;
	                }
	                // Recursively check children
	                checkCircular(child, found);
	                // Mark all ancestors as having this decendant
	                for (const subtype of found) {
	                    subtypes.get(subtype).add(child);
	                }
	            }
	            found.delete(type);
	        }
	        checkCircular(this.primaryType, new Set());
	        // Compute each fully describe type
	        for (const [name, set] of subtypes) {
	            const st = Array.from(set);
	            st.sort();
	            this.#fullTypes.set(name, encodeType(name, types[name]) + st.map((t) => encodeType(t, types[t])).join(""));
	        }
	    }
	    /**
	     *  Returnthe encoder for the specific %%type%%.
	     */
	    getEncoder(type) {
	        let encoder = this.#encoderCache.get(type);
	        if (!encoder) {
	            encoder = this.#getEncoder(type);
	            this.#encoderCache.set(type, encoder);
	        }
	        return encoder;
	    }
	    #getEncoder(type) {
	        // Basic encoder type (address, bool, uint256, etc)
	        {
	            const encoder = getBaseEncoder(type);
	            if (encoder) {
	                return encoder;
	            }
	        }
	        // Array
	        const array = splitArray(type).array;
	        if (array) {
	            const subtype = array.prefix;
	            const subEncoder = this.getEncoder(subtype);
	            return (value) => {
	                (0, index_js_4.assertArgument)(array.count === -1 || array.count === value.length, `array length mismatch; expected length ${array.count}`, "value", value);
	                let result = value.map(subEncoder);
	                if (this.#fullTypes.has(subtype)) {
	                    result = result.map(index_js_2.keccak256);
	                }
	                return (0, index_js_2.keccak256)((0, index_js_4.concat)(result));
	            };
	        }
	        // Struct
	        const fields = this.types[type];
	        if (fields) {
	            const encodedType = (0, id_js_1.id)(this.#fullTypes.get(type));
	            return (value) => {
	                const values = fields.map(({ name, type }) => {
	                    const result = this.getEncoder(type)(value[name]);
	                    if (this.#fullTypes.has(type)) {
	                        return (0, index_js_2.keccak256)(result);
	                    }
	                    return result;
	                });
	                values.unshift(encodedType);
	                return (0, index_js_4.concat)(values);
	            };
	        }
	        (0, index_js_4.assertArgument)(false, `unknown type: ${type}`, "type", type);
	    }
	    /**
	     *  Return the full type for %%name%%.
	     */
	    encodeType(name) {
	        const result = this.#fullTypes.get(name);
	        (0, index_js_4.assertArgument)(result, `unknown type: ${JSON.stringify(name)}`, "name", name);
	        return result;
	    }
	    /**
	     *  Return the encoded %%value%% for the %%type%%.
	     */
	    encodeData(type, value) {
	        return this.getEncoder(type)(value);
	    }
	    /**
	     *  Returns the hash of %%value%% for the type of %%name%%.
	     */
	    hashStruct(name, value) {
	        return (0, index_js_2.keccak256)(this.encodeData(name, value));
	    }
	    /**
	     *  Return the fulled encoded %%value%% for the [[types]].
	     */
	    encode(value) {
	        return this.encodeData(this.primaryType, value);
	    }
	    /**
	     *  Return the hash of the fully encoded %%value%% for the [[types]].
	     */
	    hash(value) {
	        return this.hashStruct(this.primaryType, value);
	    }
	    /**
	     *  @_ignore:
	     */
	    _visit(type, value, callback) {
	        // Basic encoder type (address, bool, uint256, etc)
	        {
	            const encoder = getBaseEncoder(type);
	            if (encoder) {
	                return callback(type, value);
	            }
	        }
	        // Array
	        const array = splitArray(type).array;
	        if (array) {
	            (0, index_js_4.assertArgument)(array.count === -1 || array.count === value.length, `array length mismatch; expected length ${array.count}`, "value", value);
	            return value.map((v) => this._visit(array.prefix, v, callback));
	        }
	        // Struct
	        const fields = this.types[type];
	        if (fields) {
	            return fields.reduce((accum, { name, type }) => {
	                accum[name] = this._visit(type, value[name], callback);
	                return accum;
	            }, {});
	        }
	        (0, index_js_4.assertArgument)(false, `unknown type: ${type}`, "type", type);
	    }
	    /**
	     *  Call %%calback%% for each value in %%value%%, passing the type and
	     *  component within %%value%%.
	     *
	     *  This is useful for replacing addresses or other transformation that
	     *  may be desired on each component, based on its type.
	     */
	    visit(value, callback) {
	        return this._visit(this.primaryType, value, callback);
	    }
	    /**
	     *  Create a new **TypedDataEncoder** for %%types%%.
	     */
	    static from(types) {
	        return new TypedDataEncoder(types);
	    }
	    /**
	     *  Return the primary type for %%types%%.
	     */
	    static getPrimaryType(types) {
	        return TypedDataEncoder.from(types).primaryType;
	    }
	    /**
	     *  Return the hashed struct for %%value%% using %%types%% and %%name%%.
	     */
	    static hashStruct(name, types, value) {
	        return TypedDataEncoder.from(types).hashStruct(name, value);
	    }
	    /**
	     *  Return the domain hash for %%domain%%.
	     */
	    static hashDomain(domain) {
	        const domainFields = [];
	        for (const name in domain) {
	            if (domain[name] == null) {
	                continue;
	            }
	            const type = domainFieldTypes[name];
	            (0, index_js_4.assertArgument)(type, `invalid typed-data domain key: ${JSON.stringify(name)}`, "domain", domain);
	            domainFields.push({ name, type });
	        }
	        domainFields.sort((a, b) => {
	            return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);
	        });
	        return TypedDataEncoder.hashStruct("EIP712Domain", { EIP712Domain: domainFields }, domain);
	    }
	    /**
	     *  Return the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.
	     */
	    static encode(domain, types, value) {
	        return (0, index_js_4.concat)([
	            "0x1901",
	            TypedDataEncoder.hashDomain(domain),
	            TypedDataEncoder.from(types).hash(value)
	        ]);
	    }
	    /**
	     *  Return the hash of the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.
	     */
	    static hash(domain, types, value) {
	        return (0, index_js_2.keccak256)(TypedDataEncoder.encode(domain, types, value));
	    }
	    // Replaces all address types with ENS names with their looked up address
	    /**
	     * Resolves to the value from resolving all addresses in %%value%% for
	     * %%types%% and the %%domain%%.
	     */
	    static async resolveNames(domain, types, value, resolveName) {
	        // Make a copy to isolate it from the object passed in
	        domain = Object.assign({}, domain);
	        // Allow passing null to ignore value
	        for (const key in domain) {
	            if (domain[key] == null) {
	                delete domain[key];
	            }
	        }
	        // Look up all ENS names
	        const ensCache = {};
	        // Do we need to look up the domain's verifyingContract?
	        if (domain.verifyingContract && !(0, index_js_4.isHexString)(domain.verifyingContract, 20)) {
	            ensCache[domain.verifyingContract] = "0x";
	        }
	        // We are going to use the encoder to visit all the base values
	        const encoder = TypedDataEncoder.from(types);
	        // Get a list of all the addresses
	        encoder.visit(value, (type, value) => {
	            if (type === "address" && !(0, index_js_4.isHexString)(value, 20)) {
	                ensCache[value] = "0x";
	            }
	            return value;
	        });
	        // Lookup each name
	        for (const name in ensCache) {
	            ensCache[name] = await resolveName(name);
	        }
	        // Replace the domain verifyingContract if needed
	        if (domain.verifyingContract && ensCache[domain.verifyingContract]) {
	            domain.verifyingContract = ensCache[domain.verifyingContract];
	        }
	        // Replace all ENS names with their address
	        value = encoder.visit(value, (type, value) => {
	            if (type === "address" && ensCache[value]) {
	                return ensCache[value];
	            }
	            return value;
	        });
	        return { domain, value };
	    }
	    /**
	     *  Returns the JSON-encoded payload expected by nodes which implement
	     *  the JSON-RPC [[link-eip-712]] method.
	     */
	    static getPayload(domain, types, value) {
	        // Validate the domain fields
	        TypedDataEncoder.hashDomain(domain);
	        // Derive the EIP712Domain Struct reference type
	        const domainValues = {};
	        const domainTypes = [];
	        domainFieldNames.forEach((name) => {
	            const value = domain[name];
	            if (value == null) {
	                return;
	            }
	            domainValues[name] = domainChecks[name](value);
	            domainTypes.push({ name, type: domainFieldTypes[name] });
	        });
	        const encoder = TypedDataEncoder.from(types);
	        // Get the normalized types
	        types = encoder.types;
	        const typesWithDomain = Object.assign({}, types);
	        (0, index_js_4.assertArgument)(typesWithDomain.EIP712Domain == null, "types must not contain EIP712Domain type", "types.EIP712Domain", types);
	        typesWithDomain.EIP712Domain = domainTypes;
	        // Validate the data structures and types
	        encoder.encode(value);
	        return {
	            types: typesWithDomain,
	            domain: domainValues,
	            primaryType: encoder.primaryType,
	            message: encoder.visit(value, (type, value) => {
	                // bytes
	                if (type.match(/^bytes(\d*)/)) {
	                    return (0, index_js_4.hexlify)((0, index_js_4.getBytes)(value));
	                }
	                // uint or int
	                if (type.match(/^u?int/)) {
	                    return (0, index_js_4.getBigInt)(value).toString();
	                }
	                switch (type) {
	                    case "address":
	                        return value.toLowerCase();
	                    case "bool":
	                        return !!value;
	                    case "string":
	                        (0, index_js_4.assertArgument)(typeof (value) === "string", "invalid string", "value", value);
	                        return value;
	                }
	                (0, index_js_4.assertArgument)(false, "unsupported type", "type", type);
	            })
	        };
	    }
	}
	typedData.TypedDataEncoder = TypedDataEncoder;
	/**
	 *  Compute the address used to sign the typed data for the %%signature%%.
	 */
	function verifyTypedData(domain, types, value, signature) {
	    return (0, index_js_3.recoverAddress)(TypedDataEncoder.hash(domain, types, value), signature);
	}
	typedData.verifyTypedData = verifyTypedData;
	
	return typedData;
}

var hasRequiredHash;

function requireHash () {
	if (hasRequiredHash) return hash$2;
	hasRequiredHash = 1;
	(function (exports) {
		/**
		 *  Utilities for common tasks involving hashing. Also see
		 *  [cryptographic hashing](about-crypto-hashing).
		 *
		 *  @_section: api/hashing:Hashing Utilities  [about-hashing]
		 */
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.verifyTypedData = exports.TypedDataEncoder = exports.solidityPackedSha256 = exports.solidityPackedKeccak256 = exports.solidityPacked = exports.verifyMessage = exports.hashMessage = exports.dnsEncode = exports.namehash = exports.isValidName = exports.ensNormalize = exports.id = void 0;
		var id_js_1 = requireId();
		Object.defineProperty(exports, "id", { enumerable: true, get: function () { return id_js_1.id; } });
		var namehash_js_1 = requireNamehash();
		Object.defineProperty(exports, "ensNormalize", { enumerable: true, get: function () { return namehash_js_1.ensNormalize; } });
		Object.defineProperty(exports, "isValidName", { enumerable: true, get: function () { return namehash_js_1.isValidName; } });
		Object.defineProperty(exports, "namehash", { enumerable: true, get: function () { return namehash_js_1.namehash; } });
		Object.defineProperty(exports, "dnsEncode", { enumerable: true, get: function () { return namehash_js_1.dnsEncode; } });
		var message_js_1 = requireMessage();
		Object.defineProperty(exports, "hashMessage", { enumerable: true, get: function () { return message_js_1.hashMessage; } });
		Object.defineProperty(exports, "verifyMessage", { enumerable: true, get: function () { return message_js_1.verifyMessage; } });
		var solidity_js_1 = requireSolidity();
		Object.defineProperty(exports, "solidityPacked", { enumerable: true, get: function () { return solidity_js_1.solidityPacked; } });
		Object.defineProperty(exports, "solidityPackedKeccak256", { enumerable: true, get: function () { return solidity_js_1.solidityPackedKeccak256; } });
		Object.defineProperty(exports, "solidityPackedSha256", { enumerable: true, get: function () { return solidity_js_1.solidityPackedSha256; } });
		var typed_data_js_1 = requireTypedData();
		Object.defineProperty(exports, "TypedDataEncoder", { enumerable: true, get: function () { return typed_data_js_1.TypedDataEncoder; } });
		Object.defineProperty(exports, "verifyTypedData", { enumerable: true, get: function () { return typed_data_js_1.verifyTypedData; } });
		
	} (hash$2));
	return hash$2;
}

var hasRequiredFragments;

function requireFragments () {
	if (hasRequiredFragments) return fragments;
	hasRequiredFragments = 1;
	/**
	 *  A fragment is a single item from an ABI, which may represent any of:
	 *
	 *  - [Functions](FunctionFragment)
	 *  - [Events](EventFragment)
	 *  - [Constructors](ConstructorFragment)
	 *  - Custom [Errors](ErrorFragment)
	 *  - [Fallback or Receive](FallbackFragment) functions
	 *
	 *  @_subsection api/abi/abi-coder:Fragments  [about-fragments]
	 */
	Object.defineProperty(fragments, "__esModule", { value: true });
	fragments.StructFragment = fragments.FunctionFragment = fragments.FallbackFragment = fragments.ConstructorFragment = fragments.EventFragment = fragments.ErrorFragment = fragments.NamedFragment = fragments.Fragment = fragments.ParamType = void 0;
	const index_js_1 = requireUtils$3();
	const index_js_2 = requireHash();
	// [ "a", "b" ] => { "a": 1, "b": 1 }
	function setify(items) {
	    const result = new Set();
	    items.forEach((k) => result.add(k));
	    return Object.freeze(result);
	}
	const _kwVisibDeploy = "external public payable override";
	const KwVisibDeploy = setify(_kwVisibDeploy.split(" "));
	// Visibility Keywords
	const _kwVisib = "constant external internal payable private public pure view override";
	const KwVisib = setify(_kwVisib.split(" "));
	const _kwTypes = "constructor error event fallback function receive struct";
	const KwTypes = setify(_kwTypes.split(" "));
	const _kwModifiers = "calldata memory storage payable indexed";
	const KwModifiers = setify(_kwModifiers.split(" "));
	const _kwOther = "tuple returns";
	// All Keywords
	const _keywords = [_kwTypes, _kwModifiers, _kwOther, _kwVisib].join(" ");
	const Keywords = setify(_keywords.split(" "));
	// Single character tokens
	const SimpleTokens = {
	    "(": "OPEN_PAREN", ")": "CLOSE_PAREN",
	    "[": "OPEN_BRACKET", "]": "CLOSE_BRACKET",
	    ",": "COMMA", "@": "AT"
	};
	// Parser regexes to consume the next token
	const regexWhitespacePrefix = new RegExp("^(\\s*)");
	const regexNumberPrefix = new RegExp("^([0-9]+)");
	const regexIdPrefix = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)");
	// Parser regexs to check validity
	const regexId = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)$");
	const regexType = new RegExp("^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$");
	class TokenString {
	    #offset;
	    #tokens;
	    get offset() { return this.#offset; }
	    get length() { return this.#tokens.length - this.#offset; }
	    constructor(tokens) {
	        this.#offset = 0;
	        this.#tokens = tokens.slice();
	    }
	    clone() { return new TokenString(this.#tokens); }
	    reset() { this.#offset = 0; }
	    #subTokenString(from = 0, to = 0) {
	        return new TokenString(this.#tokens.slice(from, to).map((t) => {
	            return Object.freeze(Object.assign({}, t, {
	                match: (t.match - from),
	                linkBack: (t.linkBack - from),
	                linkNext: (t.linkNext - from),
	            }));
	        }));
	    }
	    // Pops and returns the value of the next token, if it is a keyword in allowed; throws if out of tokens
	    popKeyword(allowed) {
	        const top = this.peek();
	        if (top.type !== "KEYWORD" || !allowed.has(top.text)) {
	            throw new Error(`expected keyword ${top.text}`);
	        }
	        return this.pop().text;
	    }
	    // Pops and returns the value of the next token if it is `type`; throws if out of tokens
	    popType(type) {
	        if (this.peek().type !== type) {
	            const top = this.peek();
	            throw new Error(`expected ${type}; got ${top.type} ${JSON.stringify(top.text)}`);
	        }
	        return this.pop().text;
	    }
	    // Pops and returns a "(" TOKENS ")"
	    popParen() {
	        const top = this.peek();
	        if (top.type !== "OPEN_PAREN") {
	            throw new Error("bad start");
	        }
	        const result = this.#subTokenString(this.#offset + 1, top.match + 1);
	        this.#offset = top.match + 1;
	        return result;
	    }
	    // Pops and returns the items within "(" ITEM1 "," ITEM2 "," ... ")"
	    popParams() {
	        const top = this.peek();
	        if (top.type !== "OPEN_PAREN") {
	            throw new Error("bad start");
	        }
	        const result = [];
	        while (this.#offset < top.match - 1) {
	            const link = this.peek().linkNext;
	            result.push(this.#subTokenString(this.#offset + 1, link));
	            this.#offset = link;
	        }
	        this.#offset = top.match + 1;
	        return result;
	    }
	    // Returns the top Token, throwing if out of tokens
	    peek() {
	        if (this.#offset >= this.#tokens.length) {
	            throw new Error("out-of-bounds");
	        }
	        return this.#tokens[this.#offset];
	    }
	    // Returns the next value, if it is a keyword in `allowed`
	    peekKeyword(allowed) {
	        const top = this.peekType("KEYWORD");
	        return (top != null && allowed.has(top)) ? top : null;
	    }
	    // Returns the value of the next token if it is `type`
	    peekType(type) {
	        if (this.length === 0) {
	            return null;
	        }
	        const top = this.peek();
	        return (top.type === type) ? top.text : null;
	    }
	    // Returns the next token; throws if out of tokens
	    pop() {
	        const result = this.peek();
	        this.#offset++;
	        return result;
	    }
	    toString() {
	        const tokens = [];
	        for (let i = this.#offset; i < this.#tokens.length; i++) {
	            const token = this.#tokens[i];
	            tokens.push(`${token.type}:${token.text}`);
	        }
	        return `<TokenString ${tokens.join(" ")}>`;
	    }
	}
	function lex(text) {
	    const tokens = [];
	    const throwError = (message) => {
	        const token = (offset < text.length) ? JSON.stringify(text[offset]) : "$EOI";
	        throw new Error(`invalid token ${token} at ${offset}: ${message}`);
	    };
	    let brackets = [];
	    let commas = [];
	    let offset = 0;
	    while (offset < text.length) {
	        // Strip off any leading whitespace
	        let cur = text.substring(offset);
	        let match = cur.match(regexWhitespacePrefix);
	        if (match) {
	            offset += match[1].length;
	            cur = text.substring(offset);
	        }
	        const token = { depth: brackets.length, linkBack: -1, linkNext: -1, match: -1, type: "", text: "", offset, value: -1 };
	        tokens.push(token);
	        let type = (SimpleTokens[cur[0]] || "");
	        if (type) {
	            token.type = type;
	            token.text = cur[0];
	            offset++;
	            if (type === "OPEN_PAREN") {
	                brackets.push(tokens.length - 1);
	                commas.push(tokens.length - 1);
	            }
	            else if (type == "CLOSE_PAREN") {
	                if (brackets.length === 0) {
	                    throwError("no matching open bracket");
	                }
	                token.match = brackets.pop();
	                (tokens[token.match]).match = tokens.length - 1;
	                token.depth--;
	                token.linkBack = commas.pop();
	                (tokens[token.linkBack]).linkNext = tokens.length - 1;
	            }
	            else if (type === "COMMA") {
	                token.linkBack = commas.pop();
	                (tokens[token.linkBack]).linkNext = tokens.length - 1;
	                commas.push(tokens.length - 1);
	            }
	            else if (type === "OPEN_BRACKET") {
	                token.type = "BRACKET";
	            }
	            else if (type === "CLOSE_BRACKET") {
	                // Remove the CLOSE_BRACKET
	                let suffix = tokens.pop().text;
	                if (tokens.length > 0 && tokens[tokens.length - 1].type === "NUMBER") {
	                    const value = tokens.pop().text;
	                    suffix = value + suffix;
	                    (tokens[tokens.length - 1]).value = (0, index_js_1.getNumber)(value);
	                }
	                if (tokens.length === 0 || tokens[tokens.length - 1].type !== "BRACKET") {
	                    throw new Error("missing opening bracket");
	                }
	                (tokens[tokens.length - 1]).text += suffix;
	            }
	            continue;
	        }
	        match = cur.match(regexIdPrefix);
	        if (match) {
	            token.text = match[1];
	            offset += token.text.length;
	            if (Keywords.has(token.text)) {
	                token.type = "KEYWORD";
	                continue;
	            }
	            if (token.text.match(regexType)) {
	                token.type = "TYPE";
	                continue;
	            }
	            token.type = "ID";
	            continue;
	        }
	        match = cur.match(regexNumberPrefix);
	        if (match) {
	            token.text = match[1];
	            token.type = "NUMBER";
	            offset += token.text.length;
	            continue;
	        }
	        throw new Error(`unexpected token ${JSON.stringify(cur[0])} at position ${offset}`);
	    }
	    return new TokenString(tokens.map((t) => Object.freeze(t)));
	}
	// Check only one of `allowed` is in `set`
	function allowSingle(set, allowed) {
	    let included = [];
	    for (const key in allowed.keys()) {
	        if (set.has(key)) {
	            included.push(key);
	        }
	    }
	    if (included.length > 1) {
	        throw new Error(`conflicting types: ${included.join(", ")}`);
	    }
	}
	// Functions to process a Solidity Signature TokenString from left-to-right for...
	// ...the name with an optional type, returning the name
	function consumeName(type, tokens) {
	    if (tokens.peekKeyword(KwTypes)) {
	        const keyword = tokens.pop().text;
	        if (keyword !== type) {
	            throw new Error(`expected ${type}, got ${keyword}`);
	        }
	    }
	    return tokens.popType("ID");
	}
	// ...all keywords matching allowed, returning the keywords
	function consumeKeywords(tokens, allowed) {
	    const keywords = new Set();
	    while (true) {
	        const keyword = tokens.peekType("KEYWORD");
	        if (keyword == null || (allowed && !allowed.has(keyword))) {
	            break;
	        }
	        tokens.pop();
	        if (keywords.has(keyword)) {
	            throw new Error(`duplicate keywords: ${JSON.stringify(keyword)}`);
	        }
	        keywords.add(keyword);
	    }
	    return Object.freeze(keywords);
	}
	// ...all visibility keywords, returning the coalesced mutability
	function consumeMutability(tokens) {
	    let modifiers = consumeKeywords(tokens, KwVisib);
	    // Detect conflicting modifiers
	    allowSingle(modifiers, setify("constant payable nonpayable".split(" ")));
	    allowSingle(modifiers, setify("pure view payable nonpayable".split(" ")));
	    // Process mutability states
	    if (modifiers.has("view")) {
	        return "view";
	    }
	    if (modifiers.has("pure")) {
	        return "pure";
	    }
	    if (modifiers.has("payable")) {
	        return "payable";
	    }
	    if (modifiers.has("nonpayable")) {
	        return "nonpayable";
	    }
	    // Process legacy `constant` last
	    if (modifiers.has("constant")) {
	        return "view";
	    }
	    return "nonpayable";
	}
	// ...a parameter list, returning the ParamType list
	function consumeParams(tokens, allowIndexed) {
	    return tokens.popParams().map((t) => ParamType.from(t, allowIndexed));
	}
	// ...a gas limit, returning a BigNumber or null if none
	function consumeGas(tokens) {
	    if (tokens.peekType("AT")) {
	        tokens.pop();
	        if (tokens.peekType("NUMBER")) {
	            return (0, index_js_1.getBigInt)(tokens.pop().text);
	        }
	        throw new Error("invalid gas");
	    }
	    return null;
	}
	function consumeEoi(tokens) {
	    if (tokens.length) {
	        throw new Error(`unexpected tokens at offset ${tokens.offset}: ${tokens.toString()}`);
	    }
	}
	const regexArrayType = new RegExp(/^(.*)\[([0-9]*)\]$/);
	function verifyBasicType(type) {
	    const match = type.match(regexType);
	    (0, index_js_1.assertArgument)(match, "invalid type", "type", type);
	    if (type === "uint") {
	        return "uint256";
	    }
	    if (type === "int") {
	        return "int256";
	    }
	    if (match[2]) {
	        // bytesXX
	        const length = parseInt(match[2]);
	        (0, index_js_1.assertArgument)(length !== 0 && length <= 32, "invalid bytes length", "type", type);
	    }
	    else if (match[3]) {
	        // intXX or uintXX
	        const size = parseInt(match[3]);
	        (0, index_js_1.assertArgument)(size !== 0 && size <= 256 && (size % 8) === 0, "invalid numeric width", "type", type);
	    }
	    return type;
	}
	// Make the Fragment constructors effectively private
	const _guard = {};
	const internal = Symbol.for("_ethers_internal");
	const ParamTypeInternal = "_ParamTypeInternal";
	const ErrorFragmentInternal = "_ErrorInternal";
	const EventFragmentInternal = "_EventInternal";
	const ConstructorFragmentInternal = "_ConstructorInternal";
	const FallbackFragmentInternal = "_FallbackInternal";
	const FunctionFragmentInternal = "_FunctionInternal";
	const StructFragmentInternal = "_StructInternal";
	/**
	 *  Each input and output of a [[Fragment]] is an Array of **ParamType**.
	 */
	class ParamType {
	    /**
	     *  The local name of the parameter (or ``""`` if unbound)
	     */
	    name;
	    /**
	     *  The fully qualified type (e.g. ``"address"``, ``"tuple(address)"``,
	     *  ``"uint256[3][]"``)
	     */
	    type;
	    /**
	     *  The base type (e.g. ``"address"``, ``"tuple"``, ``"array"``)
	     */
	    baseType;
	    /**
	     *  True if the parameters is indexed.
	     *
	     *  For non-indexable types this is ``null``.
	     */
	    indexed;
	    /**
	     *  The components for the tuple.
	     *
	     *  For non-tuple types this is ``null``.
	     */
	    components;
	    /**
	     *  The array length, or ``-1`` for dynamic-lengthed arrays.
	     *
	     *  For non-array types this is ``null``.
	     */
	    arrayLength;
	    /**
	     *  The type of each child in the array.
	     *
	     *  For non-array types this is ``null``.
	     */
	    arrayChildren;
	    /**
	     *  @private
	     */
	    constructor(guard, name, type, baseType, indexed, components, arrayLength, arrayChildren) {
	        (0, index_js_1.assertPrivate)(guard, _guard, "ParamType");
	        Object.defineProperty(this, internal, { value: ParamTypeInternal });
	        if (components) {
	            components = Object.freeze(components.slice());
	        }
	        if (baseType === "array") {
	            if (arrayLength == null || arrayChildren == null) {
	                throw new Error("");
	            }
	        }
	        else if (arrayLength != null || arrayChildren != null) {
	            throw new Error("");
	        }
	        if (baseType === "tuple") {
	            if (components == null) {
	                throw new Error("");
	            }
	        }
	        else if (components != null) {
	            throw new Error("");
	        }
	        (0, index_js_1.defineProperties)(this, {
	            name, type, baseType, indexed, components, arrayLength, arrayChildren
	        });
	    }
	    /**
	     *  Return a string representation of this type.
	     *
	     *  For example,
	     *
	     *  ``sighash" => "(uint256,address)"``
	     *
	     *  ``"minimal" => "tuple(uint256,address) indexed"``
	     *
	     *  ``"full" => "tuple(uint256 foo, address bar) indexed baz"``
	     */
	    format(format) {
	        if (format == null) {
	            format = "sighash";
	        }
	        if (format === "json") {
	            const name = this.name || "";
	            if (this.isArray()) {
	                const result = JSON.parse(this.arrayChildren.format("json"));
	                result.name = name;
	                result.type += `[${(this.arrayLength < 0 ? "" : String(this.arrayLength))}]`;
	                return JSON.stringify(result);
	            }
	            const result = {
	                type: ((this.baseType === "tuple") ? "tuple" : this.type),
	                name
	            };
	            if (typeof (this.indexed) === "boolean") {
	                result.indexed = this.indexed;
	            }
	            if (this.isTuple()) {
	                result.components = this.components.map((c) => JSON.parse(c.format(format)));
	            }
	            return JSON.stringify(result);
	        }
	        let result = "";
	        // Array
	        if (this.isArray()) {
	            result += this.arrayChildren.format(format);
	            result += `[${(this.arrayLength < 0 ? "" : String(this.arrayLength))}]`;
	        }
	        else {
	            if (this.isTuple()) {
	                result += "(" + this.components.map((comp) => comp.format(format)).join((format === "full") ? ", " : ",") + ")";
	            }
	            else {
	                result += this.type;
	            }
	        }
	        if (format !== "sighash") {
	            if (this.indexed === true) {
	                result += " indexed";
	            }
	            if (format === "full" && this.name) {
	                result += " " + this.name;
	            }
	        }
	        return result;
	    }
	    /**
	     *  Returns true if %%this%% is an Array type.
	     *
	     *  This provides a type gaurd ensuring that [[arrayChildren]]
	     *  and [[arrayLength]] are non-null.
	     */
	    isArray() {
	        return (this.baseType === "array");
	    }
	    /**
	     *  Returns true if %%this%% is a Tuple type.
	     *
	     *  This provides a type gaurd ensuring that [[components]]
	     *  is non-null.
	     */
	    isTuple() {
	        return (this.baseType === "tuple");
	    }
	    /**
	     *  Returns true if %%this%% is an Indexable type.
	     *
	     *  This provides a type gaurd ensuring that [[indexed]]
	     *  is non-null.
	     */
	    isIndexable() {
	        return (this.indexed != null);
	    }
	    /**
	     *  Walks the **ParamType** with %%value%%, calling %%process%%
	     *  on each type, destructing the %%value%% recursively.
	     */
	    walk(value, process) {
	        if (this.isArray()) {
	            if (!Array.isArray(value)) {
	                throw new Error("invalid array value");
	            }
	            if (this.arrayLength !== -1 && value.length !== this.arrayLength) {
	                throw new Error("array is wrong length");
	            }
	            const _this = this;
	            return value.map((v) => (_this.arrayChildren.walk(v, process)));
	        }
	        if (this.isTuple()) {
	            if (!Array.isArray(value)) {
	                throw new Error("invalid tuple value");
	            }
	            if (value.length !== this.components.length) {
	                throw new Error("array is wrong length");
	            }
	            const _this = this;
	            return value.map((v, i) => (_this.components[i].walk(v, process)));
	        }
	        return process(this.type, value);
	    }
	    #walkAsync(promises, value, process, setValue) {
	        if (this.isArray()) {
	            if (!Array.isArray(value)) {
	                throw new Error("invalid array value");
	            }
	            if (this.arrayLength !== -1 && value.length !== this.arrayLength) {
	                throw new Error("array is wrong length");
	            }
	            const childType = this.arrayChildren;
	            const result = value.slice();
	            result.forEach((value, index) => {
	                childType.#walkAsync(promises, value, process, (value) => {
	                    result[index] = value;
	                });
	            });
	            setValue(result);
	            return;
	        }
	        if (this.isTuple()) {
	            const components = this.components;
	            // Convert the object into an array
	            let result;
	            if (Array.isArray(value)) {
	                result = value.slice();
	            }
	            else {
	                if (value == null || typeof (value) !== "object") {
	                    throw new Error("invalid tuple value");
	                }
	                result = components.map((param) => {
	                    if (!param.name) {
	                        throw new Error("cannot use object value with unnamed components");
	                    }
	                    if (!(param.name in value)) {
	                        throw new Error(`missing value for component ${param.name}`);
	                    }
	                    return value[param.name];
	                });
	            }
	            if (result.length !== this.components.length) {
	                throw new Error("array is wrong length");
	            }
	            result.forEach((value, index) => {
	                components[index].#walkAsync(promises, value, process, (value) => {
	                    result[index] = value;
	                });
	            });
	            setValue(result);
	            return;
	        }
	        const result = process(this.type, value);
	        if (result.then) {
	            promises.push((async function () { setValue(await result); })());
	        }
	        else {
	            setValue(result);
	        }
	    }
	    /**
	     *  Walks the **ParamType** with %%value%%, asynchronously calling
	     *  %%process%% on each type, destructing the %%value%% recursively.
	     *
	     *  This can be used to resolve ENS naes by walking and resolving each
	     *  ``"address"`` type.
	     */
	    async walkAsync(value, process) {
	        const promises = [];
	        const result = [value];
	        this.#walkAsync(promises, value, process, (value) => {
	            result[0] = value;
	        });
	        if (promises.length) {
	            await Promise.all(promises);
	        }
	        return result[0];
	    }
	    /**
	     *  Creates a new **ParamType** for %%obj%%.
	     *
	     *  If %%allowIndexed%% then the ``indexed`` keyword is permitted,
	     *  otherwise the ``indexed`` keyword will throw an error.
	     */
	    static from(obj, allowIndexed) {
	        if (ParamType.isParamType(obj)) {
	            return obj;
	        }
	        if (typeof (obj) === "string") {
	            try {
	                return ParamType.from(lex(obj), allowIndexed);
	            }
	            catch (error) {
	                (0, index_js_1.assertArgument)(false, "invalid param type", "obj", obj);
	            }
	        }
	        else if (obj instanceof TokenString) {
	            let type = "", baseType = "";
	            let comps = null;
	            if (consumeKeywords(obj, setify(["tuple"])).has("tuple") || obj.peekType("OPEN_PAREN")) {
	                // Tuple
	                baseType = "tuple";
	                comps = obj.popParams().map((t) => ParamType.from(t));
	                type = `tuple(${comps.map((c) => c.format()).join(",")})`;
	            }
	            else {
	                // Normal
	                type = verifyBasicType(obj.popType("TYPE"));
	                baseType = type;
	            }
	            // Check for Array
	            let arrayChildren = null;
	            let arrayLength = null;
	            while (obj.length && obj.peekType("BRACKET")) {
	                const bracket = obj.pop(); //arrays[i];
	                arrayChildren = new ParamType(_guard, "", type, baseType, null, comps, arrayLength, arrayChildren);
	                arrayLength = bracket.value;
	                type += bracket.text;
	                baseType = "array";
	                comps = null;
	            }
	            let indexed = null;
	            const keywords = consumeKeywords(obj, KwModifiers);
	            if (keywords.has("indexed")) {
	                if (!allowIndexed) {
	                    throw new Error("");
	                }
	                indexed = true;
	            }
	            const name = (obj.peekType("ID") ? obj.pop().text : "");
	            if (obj.length) {
	                throw new Error("leftover tokens");
	            }
	            return new ParamType(_guard, name, type, baseType, indexed, comps, arrayLength, arrayChildren);
	        }
	        const name = obj.name;
	        (0, index_js_1.assertArgument)(!name || (typeof (name) === "string" && name.match(regexId)), "invalid name", "obj.name", name);
	        let indexed = obj.indexed;
	        if (indexed != null) {
	            (0, index_js_1.assertArgument)(allowIndexed, "parameter cannot be indexed", "obj.indexed", obj.indexed);
	            indexed = !!indexed;
	        }
	        let type = obj.type;
	        let arrayMatch = type.match(regexArrayType);
	        if (arrayMatch) {
	            const arrayLength = parseInt(arrayMatch[2] || "-1");
	            const arrayChildren = ParamType.from({
	                type: arrayMatch[1],
	                components: obj.components
	            });
	            return new ParamType(_guard, name || "", type, "array", indexed, null, arrayLength, arrayChildren);
	        }
	        if (type === "tuple" || type.startsWith("tuple(" /* fix: ) */) || type.startsWith("(" /* fix: ) */)) {
	            const comps = (obj.components != null) ? obj.components.map((c) => ParamType.from(c)) : null;
	            const tuple = new ParamType(_guard, name || "", type, "tuple", indexed, comps, null, null);
	            // @TODO: use lexer to validate and normalize type
	            return tuple;
	        }
	        type = verifyBasicType(obj.type);
	        return new ParamType(_guard, name || "", type, type, indexed, null, null, null);
	    }
	    /**
	     *  Returns true if %%value%% is a **ParamType**.
	     */
	    static isParamType(value) {
	        return (value && value[internal] === ParamTypeInternal);
	    }
	}
	fragments.ParamType = ParamType;
	/**
	 *  An abstract class to represent An individual fragment from a parse ABI.
	 */
	class Fragment {
	    /**
	     *  The type of the fragment.
	     */
	    type;
	    /**
	     *  The inputs for the fragment.
	     */
	    inputs;
	    /**
	     *  @private
	     */
	    constructor(guard, type, inputs) {
	        (0, index_js_1.assertPrivate)(guard, _guard, "Fragment");
	        inputs = Object.freeze(inputs.slice());
	        (0, index_js_1.defineProperties)(this, { type, inputs });
	    }
	    /**
	     *  Creates a new **Fragment** for %%obj%%, wich can be any supported
	     *  ABI frgament type.
	     */
	    static from(obj) {
	        if (typeof (obj) === "string") {
	            // Try parsing JSON...
	            try {
	                Fragment.from(JSON.parse(obj));
	            }
	            catch (e) { }
	            // ...otherwise, use the human-readable lexer
	            return Fragment.from(lex(obj));
	        }
	        if (obj instanceof TokenString) {
	            // Human-readable ABI (already lexed)
	            const type = obj.peekKeyword(KwTypes);
	            switch (type) {
	                case "constructor": return ConstructorFragment.from(obj);
	                case "error": return ErrorFragment.from(obj);
	                case "event": return EventFragment.from(obj);
	                case "fallback":
	                case "receive":
	                    return FallbackFragment.from(obj);
	                case "function": return FunctionFragment.from(obj);
	                case "struct": return StructFragment.from(obj);
	            }
	        }
	        else if (typeof (obj) === "object") {
	            // JSON ABI
	            switch (obj.type) {
	                case "constructor": return ConstructorFragment.from(obj);
	                case "error": return ErrorFragment.from(obj);
	                case "event": return EventFragment.from(obj);
	                case "fallback":
	                case "receive":
	                    return FallbackFragment.from(obj);
	                case "function": return FunctionFragment.from(obj);
	                case "struct": return StructFragment.from(obj);
	            }
	            (0, index_js_1.assert)(false, `unsupported type: ${obj.type}`, "UNSUPPORTED_OPERATION", {
	                operation: "Fragment.from"
	            });
	        }
	        (0, index_js_1.assertArgument)(false, "unsupported frgament object", "obj", obj);
	    }
	    /**
	     *  Returns true if %%value%% is a [[ConstructorFragment]].
	     */
	    static isConstructor(value) {
	        return ConstructorFragment.isFragment(value);
	    }
	    /**
	     *  Returns true if %%value%% is an [[ErrorFragment]].
	     */
	    static isError(value) {
	        return ErrorFragment.isFragment(value);
	    }
	    /**
	     *  Returns true if %%value%% is an [[EventFragment]].
	     */
	    static isEvent(value) {
	        return EventFragment.isFragment(value);
	    }
	    /**
	     *  Returns true if %%value%% is a [[FunctionFragment]].
	     */
	    static isFunction(value) {
	        return FunctionFragment.isFragment(value);
	    }
	    /**
	     *  Returns true if %%value%% is a [[StructFragment]].
	     */
	    static isStruct(value) {
	        return StructFragment.isFragment(value);
	    }
	}
	fragments.Fragment = Fragment;
	/**
	 *  An abstract class to represent An individual fragment
	 *  which has a name from a parse ABI.
	 */
	class NamedFragment extends Fragment {
	    /**
	     *  The name of the fragment.
	     */
	    name;
	    /**
	     *  @private
	     */
	    constructor(guard, type, name, inputs) {
	        super(guard, type, inputs);
	        (0, index_js_1.assertArgument)(typeof (name) === "string" && name.match(regexId), "invalid identifier", "name", name);
	        inputs = Object.freeze(inputs.slice());
	        (0, index_js_1.defineProperties)(this, { name });
	    }
	}
	fragments.NamedFragment = NamedFragment;
	function joinParams(format, params) {
	    return "(" + params.map((p) => p.format(format)).join((format === "full") ? ", " : ",") + ")";
	}
	/**
	 *  A Fragment which represents a //Custom Error//.
	 */
	class ErrorFragment extends NamedFragment {
	    /**
	     *  @private
	     */
	    constructor(guard, name, inputs) {
	        super(guard, "error", name, inputs);
	        Object.defineProperty(this, internal, { value: ErrorFragmentInternal });
	    }
	    /**
	     *  The Custom Error selector.
	     */
	    get selector() {
	        return (0, index_js_2.id)(this.format("sighash")).substring(0, 10);
	    }
	    /**
	     *  Returns a string representation of this fragment as %%format%%.
	     */
	    format(format) {
	        if (format == null) {
	            format = "sighash";
	        }
	        if (format === "json") {
	            return JSON.stringify({
	                type: "error",
	                name: this.name,
	                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),
	            });
	        }
	        const result = [];
	        if (format !== "sighash") {
	            result.push("error");
	        }
	        result.push(this.name + joinParams(format, this.inputs));
	        return result.join(" ");
	    }
	    /**
	     *  Returns a new **ErrorFragment** for %%obj%%.
	     */
	    static from(obj) {
	        if (ErrorFragment.isFragment(obj)) {
	            return obj;
	        }
	        if (typeof (obj) === "string") {
	            return ErrorFragment.from(lex(obj));
	        }
	        else if (obj instanceof TokenString) {
	            const name = consumeName("error", obj);
	            const inputs = consumeParams(obj);
	            consumeEoi(obj);
	            return new ErrorFragment(_guard, name, inputs);
	        }
	        return new ErrorFragment(_guard, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);
	    }
	    /**
	     *  Returns ``true`` and provides a type guard if %%value%% is an
	     *  **ErrorFragment**.
	     */
	    static isFragment(value) {
	        return (value && value[internal] === ErrorFragmentInternal);
	    }
	}
	fragments.ErrorFragment = ErrorFragment;
	/**
	 *  A Fragment which represents an Event.
	 */
	class EventFragment extends NamedFragment {
	    /**
	     *  Whether this event is anonymous.
	     */
	    anonymous;
	    /**
	     *  @private
	     */
	    constructor(guard, name, inputs, anonymous) {
	        super(guard, "event", name, inputs);
	        Object.defineProperty(this, internal, { value: EventFragmentInternal });
	        (0, index_js_1.defineProperties)(this, { anonymous });
	    }
	    /**
	     *  The Event topic hash.
	     */
	    get topicHash() {
	        return (0, index_js_2.id)(this.format("sighash"));
	    }
	    /**
	     *  Returns a string representation of this event as %%format%%.
	     */
	    format(format) {
	        if (format == null) {
	            format = "sighash";
	        }
	        if (format === "json") {
	            return JSON.stringify({
	                type: "event",
	                anonymous: this.anonymous,
	                name: this.name,
	                inputs: this.inputs.map((i) => JSON.parse(i.format(format)))
	            });
	        }
	        const result = [];
	        if (format !== "sighash") {
	            result.push("event");
	        }
	        result.push(this.name + joinParams(format, this.inputs));
	        if (format !== "sighash" && this.anonymous) {
	            result.push("anonymous");
	        }
	        return result.join(" ");
	    }
	    /**
	     *  Return the topic hash for an event with %%name%% and %%params%%.
	     */
	    static getTopicHash(name, params) {
	        params = (params || []).map((p) => ParamType.from(p));
	        const fragment = new EventFragment(_guard, name, params, false);
	        return fragment.topicHash;
	    }
	    /**
	     *  Returns a new **EventFragment** for %%obj%%.
	     */
	    static from(obj) {
	        if (EventFragment.isFragment(obj)) {
	            return obj;
	        }
	        if (typeof (obj) === "string") {
	            try {
	                return EventFragment.from(lex(obj));
	            }
	            catch (error) {
	                (0, index_js_1.assertArgument)(false, "invalid event fragment", "obj", obj);
	            }
	        }
	        else if (obj instanceof TokenString) {
	            const name = consumeName("event", obj);
	            const inputs = consumeParams(obj, true);
	            const anonymous = !!consumeKeywords(obj, setify(["anonymous"])).has("anonymous");
	            consumeEoi(obj);
	            return new EventFragment(_guard, name, inputs, anonymous);
	        }
	        return new EventFragment(_guard, obj.name, obj.inputs ? obj.inputs.map((p) => ParamType.from(p, true)) : [], !!obj.anonymous);
	    }
	    /**
	     *  Returns ``true`` and provides a type guard if %%value%% is an
	     *  **EventFragment**.
	     */
	    static isFragment(value) {
	        return (value && value[internal] === EventFragmentInternal);
	    }
	}
	fragments.EventFragment = EventFragment;
	/**
	 *  A Fragment which represents a constructor.
	 */
	class ConstructorFragment extends Fragment {
	    /**
	     *  Whether the constructor can receive an endowment.
	     */
	    payable;
	    /**
	     *  The recommended gas limit for deployment or ``null``.
	     */
	    gas;
	    /**
	     *  @private
	     */
	    constructor(guard, type, inputs, payable, gas) {
	        super(guard, type, inputs);
	        Object.defineProperty(this, internal, { value: ConstructorFragmentInternal });
	        (0, index_js_1.defineProperties)(this, { payable, gas });
	    }
	    /**
	     *  Returns a string representation of this constructor as %%format%%.
	     */
	    format(format) {
	        (0, index_js_1.assert)(format != null && format !== "sighash", "cannot format a constructor for sighash", "UNSUPPORTED_OPERATION", { operation: "format(sighash)" });
	        if (format === "json") {
	            return JSON.stringify({
	                type: "constructor",
	                stateMutability: (this.payable ? "payable" : "undefined"),
	                payable: this.payable,
	                gas: ((this.gas != null) ? this.gas : undefined),
	                inputs: this.inputs.map((i) => JSON.parse(i.format(format)))
	            });
	        }
	        const result = [`constructor${joinParams(format, this.inputs)}`];
	        if (this.payable) {
	            result.push("payable");
	        }
	        if (this.gas != null) {
	            result.push(`@${this.gas.toString()}`);
	        }
	        return result.join(" ");
	    }
	    /**
	     *  Returns a new **ConstructorFragment** for %%obj%%.
	     */
	    static from(obj) {
	        if (ConstructorFragment.isFragment(obj)) {
	            return obj;
	        }
	        if (typeof (obj) === "string") {
	            try {
	                return ConstructorFragment.from(lex(obj));
	            }
	            catch (error) {
	                (0, index_js_1.assertArgument)(false, "invalid constuctor fragment", "obj", obj);
	            }
	        }
	        else if (obj instanceof TokenString) {
	            consumeKeywords(obj, setify(["constructor"]));
	            const inputs = consumeParams(obj);
	            const payable = !!consumeKeywords(obj, KwVisibDeploy).has("payable");
	            const gas = consumeGas(obj);
	            consumeEoi(obj);
	            return new ConstructorFragment(_guard, "constructor", inputs, payable, gas);
	        }
	        return new ConstructorFragment(_guard, "constructor", obj.inputs ? obj.inputs.map(ParamType.from) : [], !!obj.payable, (obj.gas != null) ? obj.gas : null);
	    }
	    /**
	     *  Returns ``true`` and provides a type guard if %%value%% is a
	     *  **ConstructorFragment**.
	     */
	    static isFragment(value) {
	        return (value && value[internal] === ConstructorFragmentInternal);
	    }
	}
	fragments.ConstructorFragment = ConstructorFragment;
	/**
	 *  A Fragment which represents a method.
	 */
	class FallbackFragment extends Fragment {
	    /**
	     *  If the function can be sent value during invocation.
	     */
	    payable;
	    constructor(guard, inputs, payable) {
	        super(guard, "fallback", inputs);
	        Object.defineProperty(this, internal, { value: FallbackFragmentInternal });
	        (0, index_js_1.defineProperties)(this, { payable });
	    }
	    /**
	     *  Returns a string representation of this fallback as %%format%%.
	     */
	    format(format) {
	        const type = ((this.inputs.length === 0) ? "receive" : "fallback");
	        if (format === "json") {
	            const stateMutability = (this.payable ? "payable" : "nonpayable");
	            return JSON.stringify({ type, stateMutability });
	        }
	        return `${type}()${this.payable ? " payable" : ""}`;
	    }
	    /**
	     *  Returns a new **FallbackFragment** for %%obj%%.
	     */
	    static from(obj) {
	        if (FallbackFragment.isFragment(obj)) {
	            return obj;
	        }
	        if (typeof (obj) === "string") {
	            try {
	                return FallbackFragment.from(lex(obj));
	            }
	            catch (error) {
	                (0, index_js_1.assertArgument)(false, "invalid fallback fragment", "obj", obj);
	            }
	        }
	        else if (obj instanceof TokenString) {
	            const errorObj = obj.toString();
	            const topIsValid = obj.peekKeyword(setify(["fallback", "receive"]));
	            (0, index_js_1.assertArgument)(topIsValid, "type must be fallback or receive", "obj", errorObj);
	            const type = obj.popKeyword(setify(["fallback", "receive"]));
	            // receive()
	            if (type === "receive") {
	                const inputs = consumeParams(obj);
	                (0, index_js_1.assertArgument)(inputs.length === 0, `receive cannot have arguments`, "obj.inputs", inputs);
	                consumeKeywords(obj, setify(["payable"]));
	                consumeEoi(obj);
	                return new FallbackFragment(_guard, [], true);
	            }
	            // fallback() [payable]
	            // fallback(bytes) [payable] returns (bytes)
	            let inputs = consumeParams(obj);
	            if (inputs.length) {
	                (0, index_js_1.assertArgument)(inputs.length === 1 && inputs[0].type === "bytes", "invalid fallback inputs", "obj.inputs", inputs.map((i) => i.format("minimal")).join(", "));
	            }
	            else {
	                inputs = [ParamType.from("bytes")];
	            }
	            const mutability = consumeMutability(obj);
	            (0, index_js_1.assertArgument)(mutability === "nonpayable" || mutability === "payable", "fallback cannot be constants", "obj.stateMutability", mutability);
	            if (consumeKeywords(obj, setify(["returns"])).has("returns")) {
	                const outputs = consumeParams(obj);
	                (0, index_js_1.assertArgument)(outputs.length === 1 && outputs[0].type === "bytes", "invalid fallback outputs", "obj.outputs", outputs.map((i) => i.format("minimal")).join(", "));
	            }
	            consumeEoi(obj);
	            return new FallbackFragment(_guard, inputs, mutability === "payable");
	        }
	        if (obj.type === "receive") {
	            return new FallbackFragment(_guard, [], true);
	        }
	        if (obj.type === "fallback") {
	            const inputs = [ParamType.from("bytes")];
	            const payable = (obj.stateMutability === "payable");
	            return new FallbackFragment(_guard, inputs, payable);
	        }
	        (0, index_js_1.assertArgument)(false, "invalid fallback description", "obj", obj);
	    }
	    /**
	     *  Returns ``true`` and provides a type guard if %%value%% is a
	     *  **FallbackFragment**.
	     */
	    static isFragment(value) {
	        return (value && value[internal] === FallbackFragmentInternal);
	    }
	}
	fragments.FallbackFragment = FallbackFragment;
	/**
	 *  A Fragment which represents a method.
	 */
	class FunctionFragment extends NamedFragment {
	    /**
	     *  If the function is constant (e.g. ``pure`` or ``view`` functions).
	     */
	    constant;
	    /**
	     *  The returned types for the result of calling this function.
	     */
	    outputs;
	    /**
	     *  The state mutability (e.g. ``payable``, ``nonpayable``, ``view``
	     *  or ``pure``)
	     */
	    stateMutability;
	    /**
	     *  If the function can be sent value during invocation.
	     */
	    payable;
	    /**
	     *  The recommended gas limit to send when calling this function.
	     */
	    gas;
	    /**
	     *  @private
	     */
	    constructor(guard, name, stateMutability, inputs, outputs, gas) {
	        super(guard, "function", name, inputs);
	        Object.defineProperty(this, internal, { value: FunctionFragmentInternal });
	        outputs = Object.freeze(outputs.slice());
	        const constant = (stateMutability === "view" || stateMutability === "pure");
	        const payable = (stateMutability === "payable");
	        (0, index_js_1.defineProperties)(this, { constant, gas, outputs, payable, stateMutability });
	    }
	    /**
	     *  The Function selector.
	     */
	    get selector() {
	        return (0, index_js_2.id)(this.format("sighash")).substring(0, 10);
	    }
	    /**
	     *  Returns a string representation of this function as %%format%%.
	     */
	    format(format) {
	        if (format == null) {
	            format = "sighash";
	        }
	        if (format === "json") {
	            return JSON.stringify({
	                type: "function",
	                name: this.name,
	                constant: this.constant,
	                stateMutability: ((this.stateMutability !== "nonpayable") ? this.stateMutability : undefined),
	                payable: this.payable,
	                gas: ((this.gas != null) ? this.gas : undefined),
	                inputs: this.inputs.map((i) => JSON.parse(i.format(format))),
	                outputs: this.outputs.map((o) => JSON.parse(o.format(format))),
	            });
	        }
	        const result = [];
	        if (format !== "sighash") {
	            result.push("function");
	        }
	        result.push(this.name + joinParams(format, this.inputs));
	        if (format !== "sighash") {
	            if (this.stateMutability !== "nonpayable") {
	                result.push(this.stateMutability);
	            }
	            if (this.outputs && this.outputs.length) {
	                result.push("returns");
	                result.push(joinParams(format, this.outputs));
	            }
	            if (this.gas != null) {
	                result.push(`@${this.gas.toString()}`);
	            }
	        }
	        return result.join(" ");
	    }
	    /**
	     *  Return the selector for a function with %%name%% and %%params%%.
	     */
	    static getSelector(name, params) {
	        params = (params || []).map((p) => ParamType.from(p));
	        const fragment = new FunctionFragment(_guard, name, "view", params, [], null);
	        return fragment.selector;
	    }
	    /**
	     *  Returns a new **FunctionFragment** for %%obj%%.
	     */
	    static from(obj) {
	        if (FunctionFragment.isFragment(obj)) {
	            return obj;
	        }
	        if (typeof (obj) === "string") {
	            try {
	                return FunctionFragment.from(lex(obj));
	            }
	            catch (error) {
	                (0, index_js_1.assertArgument)(false, "invalid function fragment", "obj", obj);
	            }
	        }
	        else if (obj instanceof TokenString) {
	            const name = consumeName("function", obj);
	            const inputs = consumeParams(obj);
	            const mutability = consumeMutability(obj);
	            let outputs = [];
	            if (consumeKeywords(obj, setify(["returns"])).has("returns")) {
	                outputs = consumeParams(obj);
	            }
	            const gas = consumeGas(obj);
	            consumeEoi(obj);
	            return new FunctionFragment(_guard, name, mutability, inputs, outputs, gas);
	        }
	        let stateMutability = obj.stateMutability;
	        // Use legacy Solidity ABI logic if stateMutability is missing
	        if (stateMutability == null) {
	            stateMutability = "payable";
	            if (typeof (obj.constant) === "boolean") {
	                stateMutability = "view";
	                if (!obj.constant) {
	                    stateMutability = "payable";
	                    if (typeof (obj.payable) === "boolean" && !obj.payable) {
	                        stateMutability = "nonpayable";
	                    }
	                }
	            }
	            else if (typeof (obj.payable) === "boolean" && !obj.payable) {
	                stateMutability = "nonpayable";
	            }
	        }
	        // @TODO: verifyState for stateMutability (e.g. throw if
	        //        payable: false but stateMutability is "nonpayable")
	        return new FunctionFragment(_guard, obj.name, stateMutability, obj.inputs ? obj.inputs.map(ParamType.from) : [], obj.outputs ? obj.outputs.map(ParamType.from) : [], (obj.gas != null) ? obj.gas : null);
	    }
	    /**
	     *  Returns ``true`` and provides a type guard if %%value%% is a
	     *  **FunctionFragment**.
	     */
	    static isFragment(value) {
	        return (value && value[internal] === FunctionFragmentInternal);
	    }
	}
	fragments.FunctionFragment = FunctionFragment;
	/**
	 *  A Fragment which represents a structure.
	 */
	class StructFragment extends NamedFragment {
	    /**
	     *  @private
	     */
	    constructor(guard, name, inputs) {
	        super(guard, "struct", name, inputs);
	        Object.defineProperty(this, internal, { value: StructFragmentInternal });
	    }
	    /**
	     *  Returns a string representation of this struct as %%format%%.
	     */
	    format() {
	        throw new Error("@TODO");
	    }
	    /**
	     *  Returns a new **StructFragment** for %%obj%%.
	     */
	    static from(obj) {
	        if (typeof (obj) === "string") {
	            try {
	                return StructFragment.from(lex(obj));
	            }
	            catch (error) {
	                (0, index_js_1.assertArgument)(false, "invalid struct fragment", "obj", obj);
	            }
	        }
	        else if (obj instanceof TokenString) {
	            const name = consumeName("struct", obj);
	            const inputs = consumeParams(obj);
	            consumeEoi(obj);
	            return new StructFragment(_guard, name, inputs);
	        }
	        return new StructFragment(_guard, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);
	    }
	    // @TODO: fix this return type
	    /**
	     *  Returns ``true`` and provides a type guard if %%value%% is a
	     *  **StructFragment**.
	     */
	    static isFragment(value) {
	        return (value && value[internal] === StructFragmentInternal);
	    }
	}
	fragments.StructFragment = StructFragment;
	
	return fragments;
}

var hasRequiredAbiCoder;

function requireAbiCoder () {
	if (hasRequiredAbiCoder) return abiCoder;
	hasRequiredAbiCoder = 1;
	/**
	 *  When sending values to or receiving values from a [[Contract]], the
	 *  data is generally encoded using the [ABI standard](link-solc-abi).
	 *
	 *  The AbiCoder provides a utility to encode values to ABI data and
	 *  decode values from ABI data.
	 *
	 *  Most of the time, developers should favour the [[Contract]] class,
	 *  which further abstracts a lot of the finer details of ABI data.
	 *
	 *  @_section api/abi/abi-coder:ABI Encoding
	 */
	Object.defineProperty(abiCoder, "__esModule", { value: true });
	abiCoder.AbiCoder = void 0;
	// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI
	const index_js_1 = requireUtils$3();
	const abstract_coder_js_1 = requireAbstractCoder();
	const address_js_1 = requireAddress$1();
	const array_js_1 = requireArray();
	const boolean_js_1 = requireBoolean();
	const bytes_js_1 = requireBytes$1();
	const fixed_bytes_js_1 = requireFixedBytes();
	const null_js_1 = require_null();
	const number_js_1 = requireNumber();
	const string_js_1 = requireString();
	const tuple_js_1 = requireTuple();
	const fragments_js_1 = requireFragments();
	const index_js_2 = requireAddress$2();
	const index_js_3 = requireUtils$3();
	// https://docs.soliditylang.org/en/v0.8.17/control-structures.html
	const PanicReasons = new Map();
	PanicReasons.set(0x00, "GENERIC_PANIC");
	PanicReasons.set(0x01, "ASSERT_FALSE");
	PanicReasons.set(0x11, "OVERFLOW");
	PanicReasons.set(0x12, "DIVIDE_BY_ZERO");
	PanicReasons.set(0x21, "ENUM_RANGE_ERROR");
	PanicReasons.set(0x22, "BAD_STORAGE_DATA");
	PanicReasons.set(0x31, "STACK_UNDERFLOW");
	PanicReasons.set(0x32, "ARRAY_RANGE_ERROR");
	PanicReasons.set(0x41, "OUT_OF_MEMORY");
	PanicReasons.set(0x51, "UNINITIALIZED_FUNCTION_CALL");
	const paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
	const paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
	let defaultCoder = null;
	let defaultMaxInflation = 1024;
	function getBuiltinCallException(action, tx, data, abiCoder) {
	    let message = "missing revert data";
	    let reason = null;
	    const invocation = null;
	    let revert = null;
	    if (data) {
	        message = "execution reverted";
	        const bytes = (0, index_js_3.getBytes)(data);
	        data = (0, index_js_3.hexlify)(data);
	        if (bytes.length === 0) {
	            message += " (no data present; likely require(false) occurred";
	            reason = "require(false)";
	        }
	        else if (bytes.length % 32 !== 4) {
	            message += " (could not decode reason; invalid data length)";
	        }
	        else if ((0, index_js_3.hexlify)(bytes.slice(0, 4)) === "0x08c379a0") {
	            // Error(string)
	            try {
	                reason = abiCoder.decode(["string"], bytes.slice(4))[0];
	                revert = {
	                    signature: "Error(string)",
	                    name: "Error",
	                    args: [reason]
	                };
	                message += `: ${JSON.stringify(reason)}`;
	            }
	            catch (error) {
	                message += " (could not decode reason; invalid string data)";
	            }
	        }
	        else if ((0, index_js_3.hexlify)(bytes.slice(0, 4)) === "0x4e487b71") {
	            // Panic(uint256)
	            try {
	                const code = Number(abiCoder.decode(["uint256"], bytes.slice(4))[0]);
	                revert = {
	                    signature: "Panic(uint256)",
	                    name: "Panic",
	                    args: [code]
	                };
	                reason = `Panic due to ${PanicReasons.get(code) || "UNKNOWN"}(${code})`;
	                message += `: ${reason}`;
	            }
	            catch (error) {
	                message += " (could not decode panic code)";
	            }
	        }
	        else {
	            message += " (unknown custom error)";
	        }
	    }
	    const transaction = {
	        to: (tx.to ? (0, index_js_2.getAddress)(tx.to) : null),
	        data: (tx.data || "0x")
	    };
	    if (tx.from) {
	        transaction.from = (0, index_js_2.getAddress)(tx.from);
	    }
	    return (0, index_js_3.makeError)(message, "CALL_EXCEPTION", {
	        action, data, reason, transaction, invocation, revert
	    });
	}
	/**
	 *  The **AbiCoder** is a low-level class responsible for encoding JavaScript
	 *  values into binary data and decoding binary data into JavaScript values.
	 */
	class AbiCoder {
	    #getCoder(param) {
	        if (param.isArray()) {
	            return new array_js_1.ArrayCoder(this.#getCoder(param.arrayChildren), param.arrayLength, param.name);
	        }
	        if (param.isTuple()) {
	            return new tuple_js_1.TupleCoder(param.components.map((c) => this.#getCoder(c)), param.name);
	        }
	        switch (param.baseType) {
	            case "address":
	                return new address_js_1.AddressCoder(param.name);
	            case "bool":
	                return new boolean_js_1.BooleanCoder(param.name);
	            case "string":
	                return new string_js_1.StringCoder(param.name);
	            case "bytes":
	                return new bytes_js_1.BytesCoder(param.name);
	            case "":
	                return new null_js_1.NullCoder(param.name);
	        }
	        // u?int[0-9]*
	        let match = param.type.match(paramTypeNumber);
	        if (match) {
	            let size = parseInt(match[2] || "256");
	            (0, index_js_1.assertArgument)(size !== 0 && size <= 256 && (size % 8) === 0, "invalid " + match[1] + " bit length", "param", param);
	            return new number_js_1.NumberCoder(size / 8, (match[1] === "int"), param.name);
	        }
	        // bytes[0-9]+
	        match = param.type.match(paramTypeBytes);
	        if (match) {
	            let size = parseInt(match[1]);
	            (0, index_js_1.assertArgument)(size !== 0 && size <= 32, "invalid bytes length", "param", param);
	            return new fixed_bytes_js_1.FixedBytesCoder(size, param.name);
	        }
	        (0, index_js_1.assertArgument)(false, "invalid type", "type", param.type);
	    }
	    /**
	     *  Get the default values for the given %%types%%.
	     *
	     *  For example, a ``uint`` is by default ``0`` and ``bool``
	     *  is by default ``false``.
	     */
	    getDefaultValue(types) {
	        const coders = types.map((type) => this.#getCoder(fragments_js_1.ParamType.from(type)));
	        const coder = new tuple_js_1.TupleCoder(coders, "_");
	        return coder.defaultValue();
	    }
	    /**
	     *  Encode the %%values%% as the %%types%% into ABI data.
	     *
	     *  @returns DataHexstring
	     */
	    encode(types, values) {
	        (0, index_js_1.assertArgumentCount)(values.length, types.length, "types/values length mismatch");
	        const coders = types.map((type) => this.#getCoder(fragments_js_1.ParamType.from(type)));
	        const coder = (new tuple_js_1.TupleCoder(coders, "_"));
	        const writer = new abstract_coder_js_1.Writer();
	        coder.encode(writer, values);
	        return writer.data;
	    }
	    /**
	     *  Decode the ABI %%data%% as the %%types%% into values.
	     *
	     *  If %%loose%% decoding is enabled, then strict padding is
	     *  not enforced. Some older versions of Solidity incorrectly
	     *  padded event data emitted from ``external`` functions.
	     */
	    decode(types, data, loose) {
	        const coders = types.map((type) => this.#getCoder(fragments_js_1.ParamType.from(type)));
	        const coder = new tuple_js_1.TupleCoder(coders, "_");
	        return coder.decode(new abstract_coder_js_1.Reader(data, loose, defaultMaxInflation));
	    }
	    static _setDefaultMaxInflation(value) {
	        (0, index_js_1.assertArgument)(typeof (value) === "number" && Number.isInteger(value), "invalid defaultMaxInflation factor", "value", value);
	        defaultMaxInflation = value;
	    }
	    /**
	     *  Returns the shared singleton instance of a default [[AbiCoder]].
	     *
	     *  On the first call, the instance is created internally.
	     */
	    static defaultAbiCoder() {
	        if (defaultCoder == null) {
	            defaultCoder = new AbiCoder();
	        }
	        return defaultCoder;
	    }
	    /**
	     *  Returns an ethers-compatible [[CallExceptionError]] Error for the given
	     *  result %%data%% for the [[CallExceptionAction]] %%action%% against
	     *  the Transaction %%tx%%.
	     */
	    static getBuiltinCallException(action, tx, data) {
	        return getBuiltinCallException(action, tx, data, AbiCoder.defaultAbiCoder());
	    }
	}
	abiCoder.AbiCoder = AbiCoder;
	
	return abiCoder;
}

var bytes32 = {};

var hasRequiredBytes32;

function requireBytes32 () {
	if (hasRequiredBytes32) return bytes32;
	hasRequiredBytes32 = 1;
	/**
	 *  About bytes32 strings...
	 *
	 *  @_docloc: api/utils:Bytes32 Strings
	 */
	Object.defineProperty(bytes32, "__esModule", { value: true });
	bytes32.decodeBytes32String = bytes32.encodeBytes32String = void 0;
	const index_js_1 = requireUtils$3();
	/**
	 *  Encodes %%text%% as a Bytes32 string.
	 */
	function encodeBytes32String(text) {
	    // Get the bytes
	    const bytes = (0, index_js_1.toUtf8Bytes)(text);
	    // Check we have room for null-termination
	    if (bytes.length > 31) {
	        throw new Error("bytes32 string must be less than 32 bytes");
	    }
	    // Zero-pad (implicitly null-terminates)
	    return (0, index_js_1.zeroPadBytes)(bytes, 32);
	}
	bytes32.encodeBytes32String = encodeBytes32String;
	/**
	 *  Encodes the Bytes32-encoded %%bytes%% into a string.
	 */
	function decodeBytes32String(_bytes) {
	    const data = (0, index_js_1.getBytes)(_bytes, "bytes");
	    // Must be 32 bytes with a null-termination
	    if (data.length !== 32) {
	        throw new Error("invalid bytes32 - not 32 bytes long");
	    }
	    if (data[31] !== 0) {
	        throw new Error("invalid bytes32 string - no null terminator");
	    }
	    // Find the null termination
	    let length = 31;
	    while (data[length - 1] === 0) {
	        length--;
	    }
	    // Determine the string value
	    return (0, index_js_1.toUtf8String)(data.slice(0, length));
	}
	bytes32.decodeBytes32String = decodeBytes32String;
	
	return bytes32;
}

var _interface = {};

var hasRequired_interface;

function require_interface () {
	if (hasRequired_interface) return _interface;
	hasRequired_interface = 1;
	(function (exports) {
		/**
		 *  The Interface class is a low-level class that accepts an
		 *  ABI and provides all the necessary functionality to encode
		 *  and decode paramaters to and results from methods, events
		 *  and errors.
		 *
		 *  It also provides several convenience methods to automatically
		 *  search and find matching transactions and events to parse them.
		 *
		 *  @_subsection api/abi:Interfaces  [interfaces]
		 */
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.Interface = exports.Indexed = exports.ErrorDescription = exports.TransactionDescription = exports.LogDescription = exports.Result = exports.checkResultErrors = void 0;
		const index_js_1 = requireCrypto();
		const index_js_2 = requireHash();
		const index_js_3 = requireUtils$3();
		const abi_coder_js_1 = requireAbiCoder();
		const abstract_coder_js_1 = requireAbstractCoder();
		Object.defineProperty(exports, "checkResultErrors", { enumerable: true, get: function () { return abstract_coder_js_1.checkResultErrors; } });
		Object.defineProperty(exports, "Result", { enumerable: true, get: function () { return abstract_coder_js_1.Result; } });
		const fragments_js_1 = requireFragments();
		const typed_js_1 = requireTyped();
		/**
		 *  When using the [[Interface-parseLog]] to automatically match a Log to its event
		 *  for parsing, a **LogDescription** is returned.
		 */
		class LogDescription {
		    /**
		     *  The matching fragment for the ``topic0``.
		     */
		    fragment;
		    /**
		     *  The name of the Event.
		     */
		    name;
		    /**
		     *  The full Event signature.
		     */
		    signature;
		    /**
		     *  The topic hash for the Event.
		     */
		    topic;
		    /**
		     *  The arguments passed into the Event with ``emit``.
		     */
		    args;
		    /**
		     *  @_ignore:
		     */
		    constructor(fragment, topic, args) {
		        const name = fragment.name, signature = fragment.format();
		        (0, index_js_3.defineProperties)(this, {
		            fragment, name, signature, topic, args
		        });
		    }
		}
		exports.LogDescription = LogDescription;
		/**
		 *  When using the [[Interface-parseTransaction]] to automatically match
		 *  a transaction data to its function for parsing,
		 *  a **TransactionDescription** is returned.
		 */
		class TransactionDescription {
		    /**
		     *  The matching fragment from the transaction ``data``.
		     */
		    fragment;
		    /**
		     *  The name of the Function from the transaction ``data``.
		     */
		    name;
		    /**
		     *  The arguments passed to the Function from the transaction ``data``.
		     */
		    args;
		    /**
		     *  The full Function signature from the transaction ``data``.
		     */
		    signature;
		    /**
		     *  The selector for the Function from the transaction ``data``.
		     */
		    selector;
		    /**
		     *  The ``value`` (in wei) from the transaction.
		     */
		    value;
		    /**
		     *  @_ignore:
		     */
		    constructor(fragment, selector, args, value) {
		        const name = fragment.name, signature = fragment.format();
		        (0, index_js_3.defineProperties)(this, {
		            fragment, name, args, signature, selector, value
		        });
		    }
		}
		exports.TransactionDescription = TransactionDescription;
		/**
		 *  When using the [[Interface-parseError]] to automatically match an
		 *  error for a call result for parsing, an **ErrorDescription** is returned.
		 */
		class ErrorDescription {
		    /**
		     *  The matching fragment.
		     */
		    fragment;
		    /**
		     *  The name of the Error.
		     */
		    name;
		    /**
		     *  The arguments passed to the Error with ``revert``.
		     */
		    args;
		    /**
		     *  The full Error signature.
		     */
		    signature;
		    /**
		     *  The selector for the Error.
		     */
		    selector;
		    /**
		     *  @_ignore:
		     */
		    constructor(fragment, selector, args) {
		        const name = fragment.name, signature = fragment.format();
		        (0, index_js_3.defineProperties)(this, {
		            fragment, name, args, signature, selector
		        });
		    }
		}
		exports.ErrorDescription = ErrorDescription;
		/**
		 *  An **Indexed** is used as a value when a value that does not
		 *  fit within a topic (i.e. not a fixed-length, 32-byte type). It
		 *  is the ``keccak256`` of the value, and used for types such as
		 *  arrays, tuples, bytes and strings.
		 */
		class Indexed {
		    /**
		     *  The ``keccak256`` of the value logged.
		     */
		    hash;
		    /**
		     *  @_ignore:
		     */
		    _isIndexed;
		    /**
		     *  Returns ``true`` if %%value%% is an **Indexed**.
		     *
		     *  This provides a Type Guard for property access.
		     */
		    static isIndexed(value) {
		        return !!(value && value._isIndexed);
		    }
		    /**
		     *  @_ignore:
		     */
		    constructor(hash) {
		        (0, index_js_3.defineProperties)(this, { hash, _isIndexed: true });
		    }
		}
		exports.Indexed = Indexed;
		// https://docs.soliditylang.org/en/v0.8.13/control-structures.html?highlight=panic#panic-via-assert-and-error-via-require
		const PanicReasons = {
		    "0": "generic panic",
		    "1": "assert(false)",
		    "17": "arithmetic overflow",
		    "18": "division or modulo by zero",
		    "33": "enum overflow",
		    "34": "invalid encoded storage byte array accessed",
		    "49": "out-of-bounds array access; popping on an empty array",
		    "50": "out-of-bounds access of an array or bytesN",
		    "65": "out of memory",
		    "81": "uninitialized function",
		};
		const BuiltinErrors = {
		    "0x08c379a0": {
		        signature: "Error(string)",
		        name: "Error",
		        inputs: ["string"],
		        reason: (message) => {
		            return `reverted with reason string ${JSON.stringify(message)}`;
		        }
		    },
		    "0x4e487b71": {
		        signature: "Panic(uint256)",
		        name: "Panic",
		        inputs: ["uint256"],
		        reason: (code) => {
		            let reason = "unknown panic code";
		            if (code >= 0 && code <= 0xff && PanicReasons[code.toString()]) {
		                reason = PanicReasons[code.toString()];
		            }
		            return `reverted with panic code 0x${code.toString(16)} (${reason})`;
		        }
		    }
		};
		/**
		 *  An Interface abstracts many of the low-level details for
		 *  encoding and decoding the data on the blockchain.
		 *
		 *  An ABI provides information on how to encode data to send to
		 *  a Contract, how to decode the results and events and how to
		 *  interpret revert errors.
		 *
		 *  The ABI can be specified by [any supported format](InterfaceAbi).
		 */
		class Interface {
		    /**
		     *  All the Contract ABI members (i.e. methods, events, errors, etc).
		     */
		    fragments;
		    /**
		     *  The Contract constructor.
		     */
		    deploy;
		    /**
		     *  The Fallback method, if any.
		     */
		    fallback;
		    /**
		     *  If receiving ether is supported.
		     */
		    receive;
		    #errors;
		    #events;
		    #functions;
		    //    #structs: Map<string, StructFragment>;
		    #abiCoder;
		    /**
		     *  Create a new Interface for the %%fragments%%.
		     */
		    constructor(fragments) {
		        let abi = [];
		        if (typeof (fragments) === "string") {
		            abi = JSON.parse(fragments);
		        }
		        else {
		            abi = fragments;
		        }
		        this.#functions = new Map();
		        this.#errors = new Map();
		        this.#events = new Map();
		        //        this.#structs = new Map();
		        const frags = [];
		        for (const a of abi) {
		            try {
		                frags.push(fragments_js_1.Fragment.from(a));
		            }
		            catch (error) {
		                console.log(`[Warning] Invalid Fragment ${JSON.stringify(a)}:`, error.message);
		            }
		        }
		        (0, index_js_3.defineProperties)(this, {
		            fragments: Object.freeze(frags)
		        });
		        let fallback = null;
		        let receive = false;
		        this.#abiCoder = this.getAbiCoder();
		        // Add all fragments by their signature
		        this.fragments.forEach((fragment, index) => {
		            let bucket;
		            switch (fragment.type) {
		                case "constructor":
		                    if (this.deploy) {
		                        console.log("duplicate definition - constructor");
		                        return;
		                    }
		                    //checkNames(fragment, "input", fragment.inputs);
		                    (0, index_js_3.defineProperties)(this, { deploy: fragment });
		                    return;
		                case "fallback":
		                    if (fragment.inputs.length === 0) {
		                        receive = true;
		                    }
		                    else {
		                        (0, index_js_3.assertArgument)(!fallback || fragment.payable !== fallback.payable, "conflicting fallback fragments", `fragments[${index}]`, fragment);
		                        fallback = fragment;
		                        receive = fallback.payable;
		                    }
		                    return;
		                case "function":
		                    //checkNames(fragment, "input", fragment.inputs);
		                    //checkNames(fragment, "output", (<FunctionFragment>fragment).outputs);
		                    bucket = this.#functions;
		                    break;
		                case "event":
		                    //checkNames(fragment, "input", fragment.inputs);
		                    bucket = this.#events;
		                    break;
		                case "error":
		                    bucket = this.#errors;
		                    break;
		                default:
		                    return;
		            }
		            // Two identical entries; ignore it
		            const signature = fragment.format();
		            if (bucket.has(signature)) {
		                return;
		            }
		            bucket.set(signature, fragment);
		        });
		        // If we do not have a constructor add a default
		        if (!this.deploy) {
		            (0, index_js_3.defineProperties)(this, {
		                deploy: fragments_js_1.ConstructorFragment.from("constructor()")
		            });
		        }
		        (0, index_js_3.defineProperties)(this, { fallback, receive });
		    }
		    /**
		     *  Returns the entire Human-Readable ABI, as an array of
		     *  signatures, optionally as %%minimal%% strings, which
		     *  removes parameter names and unneceesary spaces.
		     */
		    format(minimal) {
		        const format = (minimal ? "minimal" : "full");
		        const abi = this.fragments.map((f) => f.format(format));
		        return abi;
		    }
		    /**
		     *  Return the JSON-encoded ABI. This is the format Solidiy
		     *  returns.
		     */
		    formatJson() {
		        const abi = this.fragments.map((f) => f.format("json"));
		        // We need to re-bundle the JSON fragments a bit
		        return JSON.stringify(abi.map((j) => JSON.parse(j)));
		    }
		    /**
		     *  The ABI coder that will be used to encode and decode binary
		     *  data.
		     */
		    getAbiCoder() {
		        return abi_coder_js_1.AbiCoder.defaultAbiCoder();
		    }
		    // Find a function definition by any means necessary (unless it is ambiguous)
		    #getFunction(key, values, forceUnique) {
		        // Selector
		        if ((0, index_js_3.isHexString)(key)) {
		            const selector = key.toLowerCase();
		            for (const fragment of this.#functions.values()) {
		                if (selector === fragment.selector) {
		                    return fragment;
		                }
		            }
		            return null;
		        }
		        // It is a bare name, look up the function (will return null if ambiguous)
		        if (key.indexOf("(") === -1) {
		            const matching = [];
		            for (const [name, fragment] of this.#functions) {
		                if (name.split("(" /* fix:) */)[0] === key) {
		                    matching.push(fragment);
		                }
		            }
		            if (values) {
		                const lastValue = (values.length > 0) ? values[values.length - 1] : null;
		                let valueLength = values.length;
		                let allowOptions = true;
		                if (typed_js_1.Typed.isTyped(lastValue) && lastValue.type === "overrides") {
		                    allowOptions = false;
		                    valueLength--;
		                }
		                // Remove all matches that don't have a compatible length. The args
		                // may contain an overrides, so the match may have n or n - 1 parameters
		                for (let i = matching.length - 1; i >= 0; i--) {
		                    const inputs = matching[i].inputs.length;
		                    if (inputs !== valueLength && (!allowOptions || inputs !== valueLength - 1)) {
		                        matching.splice(i, 1);
		                    }
		                }
		                // Remove all matches that don't match the Typed signature
		                for (let i = matching.length - 1; i >= 0; i--) {
		                    const inputs = matching[i].inputs;
		                    for (let j = 0; j < values.length; j++) {
		                        // Not a typed value
		                        if (!typed_js_1.Typed.isTyped(values[j])) {
		                            continue;
		                        }
		                        // We are past the inputs
		                        if (j >= inputs.length) {
		                            if (values[j].type === "overrides") {
		                                continue;
		                            }
		                            matching.splice(i, 1);
		                            break;
		                        }
		                        // Make sure the value type matches the input type
		                        if (values[j].type !== inputs[j].baseType) {
		                            matching.splice(i, 1);
		                            break;
		                        }
		                    }
		                }
		            }
		            // We found a single matching signature with an overrides, but the
		            // last value is something that cannot possibly be an options
		            if (matching.length === 1 && values && values.length !== matching[0].inputs.length) {
		                const lastArg = values[values.length - 1];
		                if (lastArg == null || Array.isArray(lastArg) || typeof (lastArg) !== "object") {
		                    matching.splice(0, 1);
		                }
		            }
		            if (matching.length === 0) {
		                return null;
		            }
		            if (matching.length > 1 && forceUnique) {
		                const matchStr = matching.map((m) => JSON.stringify(m.format())).join(", ");
		                (0, index_js_3.assertArgument)(false, `ambiguous function description (i.e. matches ${matchStr})`, "key", key);
		            }
		            return matching[0];
		        }
		        // Normalize the signature and lookup the function
		        const result = this.#functions.get(fragments_js_1.FunctionFragment.from(key).format());
		        if (result) {
		            return result;
		        }
		        return null;
		    }
		    /**
		     *  Get the function name for %%key%%, which may be a function selector,
		     *  function name or function signature that belongs to the ABI.
		     */
		    getFunctionName(key) {
		        const fragment = this.#getFunction(key, null, false);
		        (0, index_js_3.assertArgument)(fragment, "no matching function", "key", key);
		        return fragment.name;
		    }
		    /**
		     *  Returns true if %%key%% (a function selector, function name or
		     *  function signature) is present in the ABI.
		     *
		     *  In the case of a function name, the name may be ambiguous, so
		     *  accessing the [[FunctionFragment]] may require refinement.
		     */
		    hasFunction(key) {
		        return !!this.#getFunction(key, null, false);
		    }
		    /**
		     *  Get the [[FunctionFragment]] for %%key%%, which may be a function
		     *  selector, function name or function signature that belongs to the ABI.
		     *
		     *  If %%values%% is provided, it will use the Typed API to handle
		     *  ambiguous cases where multiple functions match by name.
		     *
		     *  If the %%key%% and %%values%% do not refine to a single function in
		     *  the ABI, this will throw.
		     */
		    getFunction(key, values) {
		        return this.#getFunction(key, values || null, true);
		    }
		    /**
		     *  Iterate over all functions, calling %%callback%%, sorted by their name.
		     */
		    forEachFunction(callback) {
		        const names = Array.from(this.#functions.keys());
		        names.sort((a, b) => a.localeCompare(b));
		        for (let i = 0; i < names.length; i++) {
		            const name = names[i];
		            callback((this.#functions.get(name)), i);
		        }
		    }
		    // Find an event definition by any means necessary (unless it is ambiguous)
		    #getEvent(key, values, forceUnique) {
		        // EventTopic
		        if ((0, index_js_3.isHexString)(key)) {
		            const eventTopic = key.toLowerCase();
		            for (const fragment of this.#events.values()) {
		                if (eventTopic === fragment.topicHash) {
		                    return fragment;
		                }
		            }
		            return null;
		        }
		        // It is a bare name, look up the function (will return null if ambiguous)
		        if (key.indexOf("(") === -1) {
		            const matching = [];
		            for (const [name, fragment] of this.#events) {
		                if (name.split("(" /* fix:) */)[0] === key) {
		                    matching.push(fragment);
		                }
		            }
		            if (values) {
		                // Remove all matches that don't have a compatible length.
		                for (let i = matching.length - 1; i >= 0; i--) {
		                    if (matching[i].inputs.length < values.length) {
		                        matching.splice(i, 1);
		                    }
		                }
		                // Remove all matches that don't match the Typed signature
		                for (let i = matching.length - 1; i >= 0; i--) {
		                    const inputs = matching[i].inputs;
		                    for (let j = 0; j < values.length; j++) {
		                        // Not a typed value
		                        if (!typed_js_1.Typed.isTyped(values[j])) {
		                            continue;
		                        }
		                        // Make sure the value type matches the input type
		                        if (values[j].type !== inputs[j].baseType) {
		                            matching.splice(i, 1);
		                            break;
		                        }
		                    }
		                }
		            }
		            if (matching.length === 0) {
		                return null;
		            }
		            if (matching.length > 1 && forceUnique) {
		                const matchStr = matching.map((m) => JSON.stringify(m.format())).join(", ");
		                (0, index_js_3.assertArgument)(false, `ambiguous event description (i.e. matches ${matchStr})`, "key", key);
		            }
		            return matching[0];
		        }
		        // Normalize the signature and lookup the function
		        const result = this.#events.get(fragments_js_1.EventFragment.from(key).format());
		        if (result) {
		            return result;
		        }
		        return null;
		    }
		    /**
		     *  Get the event name for %%key%%, which may be a topic hash,
		     *  event name or event signature that belongs to the ABI.
		     */
		    getEventName(key) {
		        const fragment = this.#getEvent(key, null, false);
		        (0, index_js_3.assertArgument)(fragment, "no matching event", "key", key);
		        return fragment.name;
		    }
		    /**
		     *  Returns true if %%key%% (an event topic hash, event name or
		     *  event signature) is present in the ABI.
		     *
		     *  In the case of an event name, the name may be ambiguous, so
		     *  accessing the [[EventFragment]] may require refinement.
		     */
		    hasEvent(key) {
		        return !!this.#getEvent(key, null, false);
		    }
		    /**
		     *  Get the [[EventFragment]] for %%key%%, which may be a topic hash,
		     *  event name or event signature that belongs to the ABI.
		     *
		     *  If %%values%% is provided, it will use the Typed API to handle
		     *  ambiguous cases where multiple events match by name.
		     *
		     *  If the %%key%% and %%values%% do not refine to a single event in
		     *  the ABI, this will throw.
		     */
		    getEvent(key, values) {
		        return this.#getEvent(key, values || null, true);
		    }
		    /**
		     *  Iterate over all events, calling %%callback%%, sorted by their name.
		     */
		    forEachEvent(callback) {
		        const names = Array.from(this.#events.keys());
		        names.sort((a, b) => a.localeCompare(b));
		        for (let i = 0; i < names.length; i++) {
		            const name = names[i];
		            callback((this.#events.get(name)), i);
		        }
		    }
		    /**
		     *  Get the [[ErrorFragment]] for %%key%%, which may be an error
		     *  selector, error name or error signature that belongs to the ABI.
		     *
		     *  If %%values%% is provided, it will use the Typed API to handle
		     *  ambiguous cases where multiple errors match by name.
		     *
		     *  If the %%key%% and %%values%% do not refine to a single error in
		     *  the ABI, this will throw.
		     */
		    getError(key, values) {
		        if ((0, index_js_3.isHexString)(key)) {
		            const selector = key.toLowerCase();
		            if (BuiltinErrors[selector]) {
		                return fragments_js_1.ErrorFragment.from(BuiltinErrors[selector].signature);
		            }
		            for (const fragment of this.#errors.values()) {
		                if (selector === fragment.selector) {
		                    return fragment;
		                }
		            }
		            return null;
		        }
		        // It is a bare name, look up the function (will return null if ambiguous)
		        if (key.indexOf("(") === -1) {
		            const matching = [];
		            for (const [name, fragment] of this.#errors) {
		                if (name.split("(" /* fix:) */)[0] === key) {
		                    matching.push(fragment);
		                }
		            }
		            if (matching.length === 0) {
		                if (key === "Error") {
		                    return fragments_js_1.ErrorFragment.from("error Error(string)");
		                }
		                if (key === "Panic") {
		                    return fragments_js_1.ErrorFragment.from("error Panic(uint256)");
		                }
		                return null;
		            }
		            else if (matching.length > 1) {
		                const matchStr = matching.map((m) => JSON.stringify(m.format())).join(", ");
		                (0, index_js_3.assertArgument)(false, `ambiguous error description (i.e. ${matchStr})`, "name", key);
		            }
		            return matching[0];
		        }
		        // Normalize the signature and lookup the function
		        key = fragments_js_1.ErrorFragment.from(key).format();
		        if (key === "Error(string)") {
		            return fragments_js_1.ErrorFragment.from("error Error(string)");
		        }
		        if (key === "Panic(uint256)") {
		            return fragments_js_1.ErrorFragment.from("error Panic(uint256)");
		        }
		        const result = this.#errors.get(key);
		        if (result) {
		            return result;
		        }
		        return null;
		    }
		    /**
		     *  Iterate over all errors, calling %%callback%%, sorted by their name.
		     */
		    forEachError(callback) {
		        const names = Array.from(this.#errors.keys());
		        names.sort((a, b) => a.localeCompare(b));
		        for (let i = 0; i < names.length; i++) {
		            const name = names[i];
		            callback((this.#errors.get(name)), i);
		        }
		    }
		    // Get the 4-byte selector used by Solidity to identify a function
		    /*
		getSelector(fragment: ErrorFragment | FunctionFragment): string {
		    if (typeof(fragment) === "string") {
		        const matches: Array<Fragment> = [ ];

		        try { matches.push(this.getFunction(fragment)); } catch (error) { }
		        try { matches.push(this.getError(<string>fragment)); } catch (_) { }

		        if (matches.length === 0) {
		            logger.throwArgumentError("unknown fragment", "key", fragment);
		        } else if (matches.length > 1) {
		            logger.throwArgumentError("ambiguous fragment matches function and error", "key", fragment);
		        }

		        fragment = matches[0];
		    }

		    return dataSlice(id(fragment.format()), 0, 4);
		}
		    */
		    // Get the 32-byte topic hash used by Solidity to identify an event
		    /*
		    getEventTopic(fragment: EventFragment): string {
		        //if (typeof(fragment) === "string") { fragment = this.getEvent(eventFragment); }
		        return id(fragment.format());
		    }
		    */
		    _decodeParams(params, data) {
		        return this.#abiCoder.decode(params, data);
		    }
		    _encodeParams(params, values) {
		        return this.#abiCoder.encode(params, values);
		    }
		    /**
		     *  Encodes a ``tx.data`` object for deploying the Contract with
		     *  the %%values%% as the constructor arguments.
		     */
		    encodeDeploy(values) {
		        return this._encodeParams(this.deploy.inputs, values || []);
		    }
		    /**
		     *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the
		     *  specified error (see [[getError]] for valid values for
		     *  %%key%%).
		     *
		     *  Most developers should prefer the [[parseCallResult]] method instead,
		     *  which will automatically detect a ``CALL_EXCEPTION`` and throw the
		     *  corresponding error.
		     */
		    decodeErrorResult(fragment, data) {
		        if (typeof (fragment) === "string") {
		            const f = this.getError(fragment);
		            (0, index_js_3.assertArgument)(f, "unknown error", "fragment", fragment);
		            fragment = f;
		        }
		        (0, index_js_3.assertArgument)((0, index_js_3.dataSlice)(data, 0, 4) === fragment.selector, `data signature does not match error ${fragment.name}.`, "data", data);
		        return this._decodeParams(fragment.inputs, (0, index_js_3.dataSlice)(data, 4));
		    }
		    /**
		     *  Encodes the transaction revert data for a call result that
		     *  reverted from the the Contract with the sepcified %%error%%
		     *  (see [[getError]] for valid values for %%fragment%%) with the %%values%%.
		     *
		     *  This is generally not used by most developers, unless trying to mock
		     *  a result from a Contract.
		     */
		    encodeErrorResult(fragment, values) {
		        if (typeof (fragment) === "string") {
		            const f = this.getError(fragment);
		            (0, index_js_3.assertArgument)(f, "unknown error", "fragment", fragment);
		            fragment = f;
		        }
		        return (0, index_js_3.concat)([
		            fragment.selector,
		            this._encodeParams(fragment.inputs, values || [])
		        ]);
		    }
		    /**
		     *  Decodes the %%data%% from a transaction ``tx.data`` for
		     *  the function specified (see [[getFunction]] for valid values
		     *  for %%fragment%%).
		     *
		     *  Most developers should prefer the [[parseTransaction]] method
		     *  instead, which will automatically detect the fragment.
		     */
		    decodeFunctionData(fragment, data) {
		        if (typeof (fragment) === "string") {
		            const f = this.getFunction(fragment);
		            (0, index_js_3.assertArgument)(f, "unknown function", "fragment", fragment);
		            fragment = f;
		        }
		        (0, index_js_3.assertArgument)((0, index_js_3.dataSlice)(data, 0, 4) === fragment.selector, `data signature does not match function ${fragment.name}.`, "data", data);
		        return this._decodeParams(fragment.inputs, (0, index_js_3.dataSlice)(data, 4));
		    }
		    /**
		     *  Encodes the ``tx.data`` for a transaction that calls the function
		     *  specified (see [[getFunction]] for valid values for %%fragment%%) with
		     *  the %%values%%.
		     */
		    encodeFunctionData(fragment, values) {
		        if (typeof (fragment) === "string") {
		            const f = this.getFunction(fragment);
		            (0, index_js_3.assertArgument)(f, "unknown function", "fragment", fragment);
		            fragment = f;
		        }
		        return (0, index_js_3.concat)([
		            fragment.selector,
		            this._encodeParams(fragment.inputs, values || [])
		        ]);
		    }
		    /**
		     *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the
		     *  specified function (see [[getFunction]] for valid values for
		     *  %%key%%).
		     *
		     *  Most developers should prefer the [[parseCallResult]] method instead,
		     *  which will automatically detect a ``CALL_EXCEPTION`` and throw the
		     *  corresponding error.
		     */
		    decodeFunctionResult(fragment, data) {
		        if (typeof (fragment) === "string") {
		            const f = this.getFunction(fragment);
		            (0, index_js_3.assertArgument)(f, "unknown function", "fragment", fragment);
		            fragment = f;
		        }
		        let message = "invalid length for result data";
		        const bytes = (0, index_js_3.getBytesCopy)(data);
		        if ((bytes.length % 32) === 0) {
		            try {
		                return this.#abiCoder.decode(fragment.outputs, bytes);
		            }
		            catch (error) {
		                message = "could not decode result data";
		            }
		        }
		        // Call returned data with no error, but the data is junk
		        (0, index_js_3.assert)(false, message, "BAD_DATA", {
		            value: (0, index_js_3.hexlify)(bytes),
		            info: { method: fragment.name, signature: fragment.format() }
		        });
		    }
		    makeError(_data, tx) {
		        const data = (0, index_js_3.getBytes)(_data, "data");
		        const error = abi_coder_js_1.AbiCoder.getBuiltinCallException("call", tx, data);
		        // Not a built-in error; try finding a custom error
		        const customPrefix = "execution reverted (unknown custom error)";
		        if (error.message.startsWith(customPrefix)) {
		            const selector = (0, index_js_3.hexlify)(data.slice(0, 4));
		            const ef = this.getError(selector);
		            if (ef) {
		                try {
		                    const args = this.#abiCoder.decode(ef.inputs, data.slice(4));
		                    error.revert = {
		                        name: ef.name, signature: ef.format(), args
		                    };
		                    error.reason = error.revert.signature;
		                    error.message = `execution reverted: ${error.reason}`;
		                }
		                catch (e) {
		                    error.message = `execution reverted (coult not decode custom error)`;
		                }
		            }
		        }
		        // Add the invocation, if available
		        const parsed = this.parseTransaction(tx);
		        if (parsed) {
		            error.invocation = {
		                method: parsed.name,
		                signature: parsed.signature,
		                args: parsed.args
		            };
		        }
		        return error;
		    }
		    /**
		     *  Encodes the result data (e.g. from an ``eth_call``) for the
		     *  specified function (see [[getFunction]] for valid values
		     *  for %%fragment%%) with %%values%%.
		     *
		     *  This is generally not used by most developers, unless trying to mock
		     *  a result from a Contract.
		     */
		    encodeFunctionResult(fragment, values) {
		        if (typeof (fragment) === "string") {
		            const f = this.getFunction(fragment);
		            (0, index_js_3.assertArgument)(f, "unknown function", "fragment", fragment);
		            fragment = f;
		        }
		        return (0, index_js_3.hexlify)(this.#abiCoder.encode(fragment.outputs, values || []));
		    }
		    /*
		        spelunk(inputs: Array<ParamType>, values: ReadonlyArray<any>, processfunc: (type: string, value: any) => Promise<any>): Promise<Array<any>> {
		            const promises: Array<Promise<>> = [ ];
		            const process = function(type: ParamType, value: any): any {
		                if (type.baseType === "array") {
		                    return descend(type.child
		                }
		                if (type. === "address") {
		                }
		            };
		    
		            const descend = function (inputs: Array<ParamType>, values: ReadonlyArray<any>) {
		                if (inputs.length !== values.length) { throw new Error("length mismatch"); }
		                
		            };
		    
		            const result: Array<any> = [ ];
		            values.forEach((value, index) => {
		                if (value == null) {
		                    topics.push(null);
		                } else if (param.baseType === "array" || param.baseType === "tuple") {
		                    logger.throwArgumentError("filtering with tuples or arrays not supported", ("contract." + param.name), value);
		                } else if (Array.isArray(value)) {
		                    topics.push(value.map((value) => encodeTopic(param, value)));
		                } else {
		                    topics.push(encodeTopic(param, value));
		                }
		            });
		        }
		    */
		    // Create the filter for the event with search criteria (e.g. for eth_filterLog)
		    encodeFilterTopics(fragment, values) {
		        if (typeof (fragment) === "string") {
		            const f = this.getEvent(fragment);
		            (0, index_js_3.assertArgument)(f, "unknown event", "eventFragment", fragment);
		            fragment = f;
		        }
		        (0, index_js_3.assert)(values.length <= fragment.inputs.length, `too many arguments for ${fragment.format()}`, "UNEXPECTED_ARGUMENT", { count: values.length, expectedCount: fragment.inputs.length });
		        const topics = [];
		        if (!fragment.anonymous) {
		            topics.push(fragment.topicHash);
		        }
		        // @TODO: Use the coders for this; to properly support tuples, etc.
		        const encodeTopic = (param, value) => {
		            if (param.type === "string") {
		                return (0, index_js_2.id)(value);
		            }
		            else if (param.type === "bytes") {
		                return (0, index_js_1.keccak256)((0, index_js_3.hexlify)(value));
		            }
		            if (param.type === "bool" && typeof (value) === "boolean") {
		                value = (value ? "0x01" : "0x00");
		            }
		            else if (param.type.match(/^u?int/)) {
		                value = (0, index_js_3.toBeHex)(value); // @TODO: Should this toTwos??
		            }
		            else if (param.type.match(/^bytes/)) {
		                value = (0, index_js_3.zeroPadBytes)(value, 32);
		            }
		            else if (param.type === "address") {
		                // Check addresses are valid
		                this.#abiCoder.encode(["address"], [value]);
		            }
		            return (0, index_js_3.zeroPadValue)((0, index_js_3.hexlify)(value), 32);
		        };
		        values.forEach((value, index) => {
		            const param = fragment.inputs[index];
		            if (!param.indexed) {
		                (0, index_js_3.assertArgument)(value == null, "cannot filter non-indexed parameters; must be null", ("contract." + param.name), value);
		                return;
		            }
		            if (value == null) {
		                topics.push(null);
		            }
		            else if (param.baseType === "array" || param.baseType === "tuple") {
		                (0, index_js_3.assertArgument)(false, "filtering with tuples or arrays not supported", ("contract." + param.name), value);
		            }
		            else if (Array.isArray(value)) {
		                topics.push(value.map((value) => encodeTopic(param, value)));
		            }
		            else {
		                topics.push(encodeTopic(param, value));
		            }
		        });
		        // Trim off trailing nulls
		        while (topics.length && topics[topics.length - 1] === null) {
		            topics.pop();
		        }
		        return topics;
		    }
		    encodeEventLog(fragment, values) {
		        if (typeof (fragment) === "string") {
		            const f = this.getEvent(fragment);
		            (0, index_js_3.assertArgument)(f, "unknown event", "eventFragment", fragment);
		            fragment = f;
		        }
		        const topics = [];
		        const dataTypes = [];
		        const dataValues = [];
		        if (!fragment.anonymous) {
		            topics.push(fragment.topicHash);
		        }
		        (0, index_js_3.assertArgument)(values.length === fragment.inputs.length, "event arguments/values mismatch", "values", values);
		        fragment.inputs.forEach((param, index) => {
		            const value = values[index];
		            if (param.indexed) {
		                if (param.type === "string") {
		                    topics.push((0, index_js_2.id)(value));
		                }
		                else if (param.type === "bytes") {
		                    topics.push((0, index_js_1.keccak256)(value));
		                }
		                else if (param.baseType === "tuple" || param.baseType === "array") {
		                    // @TODO
		                    throw new Error("not implemented");
		                }
		                else {
		                    topics.push(this.#abiCoder.encode([param.type], [value]));
		                }
		            }
		            else {
		                dataTypes.push(param);
		                dataValues.push(value);
		            }
		        });
		        return {
		            data: this.#abiCoder.encode(dataTypes, dataValues),
		            topics: topics
		        };
		    }
		    // Decode a filter for the event and the search criteria
		    decodeEventLog(fragment, data, topics) {
		        if (typeof (fragment) === "string") {
		            const f = this.getEvent(fragment);
		            (0, index_js_3.assertArgument)(f, "unknown event", "eventFragment", fragment);
		            fragment = f;
		        }
		        if (topics != null && !fragment.anonymous) {
		            const eventTopic = fragment.topicHash;
		            (0, index_js_3.assertArgument)((0, index_js_3.isHexString)(topics[0], 32) && topics[0].toLowerCase() === eventTopic, "fragment/topic mismatch", "topics[0]", topics[0]);
		            topics = topics.slice(1);
		        }
		        const indexed = [];
		        const nonIndexed = [];
		        const dynamic = [];
		        fragment.inputs.forEach((param, index) => {
		            if (param.indexed) {
		                if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
		                    indexed.push(fragments_js_1.ParamType.from({ type: "bytes32", name: param.name }));
		                    dynamic.push(true);
		                }
		                else {
		                    indexed.push(param);
		                    dynamic.push(false);
		                }
		            }
		            else {
		                nonIndexed.push(param);
		                dynamic.push(false);
		            }
		        });
		        const resultIndexed = (topics != null) ? this.#abiCoder.decode(indexed, (0, index_js_3.concat)(topics)) : null;
		        const resultNonIndexed = this.#abiCoder.decode(nonIndexed, data, true);
		        //const result: (Array<any> & { [ key: string ]: any }) = [ ];
		        const values = [];
		        const keys = [];
		        let nonIndexedIndex = 0, indexedIndex = 0;
		        fragment.inputs.forEach((param, index) => {
		            let value = null;
		            if (param.indexed) {
		                if (resultIndexed == null) {
		                    value = new Indexed(null);
		                }
		                else if (dynamic[index]) {
		                    value = new Indexed(resultIndexed[indexedIndex++]);
		                }
		                else {
		                    try {
		                        value = resultIndexed[indexedIndex++];
		                    }
		                    catch (error) {
		                        value = error;
		                    }
		                }
		            }
		            else {
		                try {
		                    value = resultNonIndexed[nonIndexedIndex++];
		                }
		                catch (error) {
		                    value = error;
		                }
		            }
		            values.push(value);
		            keys.push(param.name || null);
		        });
		        return abstract_coder_js_1.Result.fromItems(values, keys);
		    }
		    /**
		     *  Parses a transaction, finding the matching function and extracts
		     *  the parameter values along with other useful function details.
		     *
		     *  If the matching function cannot be found, return null.
		     */
		    parseTransaction(tx) {
		        const data = (0, index_js_3.getBytes)(tx.data, "tx.data");
		        const value = (0, index_js_3.getBigInt)((tx.value != null) ? tx.value : 0, "tx.value");
		        const fragment = this.getFunction((0, index_js_3.hexlify)(data.slice(0, 4)));
		        if (!fragment) {
		            return null;
		        }
		        const args = this.#abiCoder.decode(fragment.inputs, data.slice(4));
		        return new TransactionDescription(fragment, fragment.selector, args, value);
		    }
		    parseCallResult(data) {
		        throw new Error("@TODO");
		    }
		    /**
		     *  Parses a receipt log, finding the matching event and extracts
		     *  the parameter values along with other useful event details.
		     *
		     *  If the matching event cannot be found, returns null.
		     */
		    parseLog(log) {
		        const fragment = this.getEvent(log.topics[0]);
		        if (!fragment || fragment.anonymous) {
		            return null;
		        }
		        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?
		        //        Probably not, because just because it is the only event in the ABI does
		        //        not mean we have the full ABI; maybe just a fragment?
		        return new LogDescription(fragment, fragment.topicHash, this.decodeEventLog(fragment, log.data, log.topics));
		    }
		    /**
		     *  Parses a revert data, finding the matching error and extracts
		     *  the parameter values along with other useful error details.
		     *
		     *  If the matching error cannot be found, returns null.
		     */
		    parseError(data) {
		        const hexData = (0, index_js_3.hexlify)(data);
		        const fragment = this.getError((0, index_js_3.dataSlice)(hexData, 0, 4));
		        if (!fragment) {
		            return null;
		        }
		        const args = this.#abiCoder.decode(fragment.inputs, (0, index_js_3.dataSlice)(hexData, 4));
		        return new ErrorDescription(fragment, fragment.selector, args);
		    }
		    /**
		     *  Creates a new [[Interface]] from the ABI %%value%%.
		     *
		     *  The %%value%% may be provided as an existing [[Interface]] object,
		     *  a JSON-encoded ABI or any Human-Readable ABI format.
		     */
		    static from(value) {
		        // Already an Interface, which is immutable
		        if (value instanceof Interface) {
		            return value;
		        }
		        // JSON
		        if (typeof (value) === "string") {
		            return new Interface(JSON.parse(value));
		        }
		        // Maybe an interface from an older version, or from a symlinked copy
		        if (typeof (value.format) === "function") {
		            return new Interface(value.format("json"));
		        }
		        // Array of fragments
		        return new Interface(value);
		    }
		}
		exports.Interface = Interface;
		
	} (_interface));
	return _interface;
}

var hasRequiredAbi;

function requireAbi () {
	if (hasRequiredAbi) return abi;
	hasRequiredAbi = 1;
	(function (exports) {
		/**
		 *  The Application Binary Interface (ABI) describes how method input
		 *  parameters should be encoded, their results decoded, and how to
		 *  decode events and errors.
		 *
		 *  See [About ABIs](docs-abi) for more details how they are used.
		 *
		 *  @_section api/abi:Application Binary Interface  [about-abi]
		 *  @_navTitle: ABI
		 */
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.Typed = exports.Result = exports.TransactionDescription = exports.LogDescription = exports.ErrorDescription = exports.Interface = exports.Indexed = exports.checkResultErrors = exports.StructFragment = exports.ParamType = exports.NamedFragment = exports.FunctionFragment = exports.Fragment = exports.FallbackFragment = exports.EventFragment = exports.ErrorFragment = exports.ConstructorFragment = exports.encodeBytes32String = exports.decodeBytes32String = exports.AbiCoder = void 0;
		//////
		var abi_coder_js_1 = requireAbiCoder();
		Object.defineProperty(exports, "AbiCoder", { enumerable: true, get: function () { return abi_coder_js_1.AbiCoder; } });
		var bytes32_js_1 = requireBytes32();
		Object.defineProperty(exports, "decodeBytes32String", { enumerable: true, get: function () { return bytes32_js_1.decodeBytes32String; } });
		Object.defineProperty(exports, "encodeBytes32String", { enumerable: true, get: function () { return bytes32_js_1.encodeBytes32String; } });
		var fragments_js_1 = requireFragments();
		Object.defineProperty(exports, "ConstructorFragment", { enumerable: true, get: function () { return fragments_js_1.ConstructorFragment; } });
		Object.defineProperty(exports, "ErrorFragment", { enumerable: true, get: function () { return fragments_js_1.ErrorFragment; } });
		Object.defineProperty(exports, "EventFragment", { enumerable: true, get: function () { return fragments_js_1.EventFragment; } });
		Object.defineProperty(exports, "FallbackFragment", { enumerable: true, get: function () { return fragments_js_1.FallbackFragment; } });
		Object.defineProperty(exports, "Fragment", { enumerable: true, get: function () { return fragments_js_1.Fragment; } });
		Object.defineProperty(exports, "FunctionFragment", { enumerable: true, get: function () { return fragments_js_1.FunctionFragment; } });
		Object.defineProperty(exports, "NamedFragment", { enumerable: true, get: function () { return fragments_js_1.NamedFragment; } });
		Object.defineProperty(exports, "ParamType", { enumerable: true, get: function () { return fragments_js_1.ParamType; } });
		Object.defineProperty(exports, "StructFragment", { enumerable: true, get: function () { return fragments_js_1.StructFragment; } });
		var interface_js_1 = require_interface();
		Object.defineProperty(exports, "checkResultErrors", { enumerable: true, get: function () { return interface_js_1.checkResultErrors; } });
		Object.defineProperty(exports, "Indexed", { enumerable: true, get: function () { return interface_js_1.Indexed; } });
		Object.defineProperty(exports, "Interface", { enumerable: true, get: function () { return interface_js_1.Interface; } });
		Object.defineProperty(exports, "ErrorDescription", { enumerable: true, get: function () { return interface_js_1.ErrorDescription; } });
		Object.defineProperty(exports, "LogDescription", { enumerable: true, get: function () { return interface_js_1.LogDescription; } });
		Object.defineProperty(exports, "TransactionDescription", { enumerable: true, get: function () { return interface_js_1.TransactionDescription; } });
		Object.defineProperty(exports, "Result", { enumerable: true, get: function () { return interface_js_1.Result; } });
		var typed_js_1 = requireTyped();
		Object.defineProperty(exports, "Typed", { enumerable: true, get: function () { return typed_js_1.Typed; } });
		
	} (abi));
	return abi;
}

var contract$1 = {};

var contract = {};

var provider$1 = {};

var hasRequiredProvider;

function requireProvider () {
	if (hasRequiredProvider) return provider$1;
	hasRequiredProvider = 1;
	Object.defineProperty(provider$1, "__esModule", { value: true });
	provider$1.TransactionResponse = provider$1.TransactionReceipt = provider$1.Log = provider$1.Block = provider$1.copyRequest = provider$1.FeeData = void 0;
	//import { resolveAddress } from "@ethersproject/address";
	const index_js_1 = requireUtils$3();
	const index_js_2 = requireTransaction();
	const BN_0 = BigInt(0);
	// -----------------------
	function getValue(value) {
	    if (value == null) {
	        return null;
	    }
	    return value;
	}
	function toJson(value) {
	    if (value == null) {
	        return null;
	    }
	    return value.toString();
	}
	// @TODO? <T extends FeeData = { }> implements Required<T>
	/**
	 *  A **FeeData** wraps all the fee-related values associated with
	 *  the network.
	 */
	class FeeData {
	    /**
	     *  The gas price for legacy networks.
	     */
	    gasPrice;
	    /**
	     *  The maximum fee to pay per gas.
	     *
	     *  The base fee per gas is defined by the network and based on
	     *  congestion, increasing the cost during times of heavy load
	     *  and lowering when less busy.
	     *
	     *  The actual fee per gas will be the base fee for the block
	     *  and the priority fee, up to the max fee per gas.
	     *
	     *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))
	     */
	    maxFeePerGas;
	    /**
	     *  The additional amout to pay per gas to encourage a validator
	     *  to include the transaction.
	     *
	     *  The purpose of this is to compensate the validator for the
	     *  adjusted risk for including a given transaction.
	     *
	     *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))
	     */
	    maxPriorityFeePerGas;
	    /**
	     *  Creates a new FeeData for %%gasPrice%%, %%maxFeePerGas%% and
	     *  %%maxPriorityFeePerGas%%.
	     */
	    constructor(gasPrice, maxFeePerGas, maxPriorityFeePerGas) {
	        (0, index_js_1.defineProperties)(this, {
	            gasPrice: getValue(gasPrice),
	            maxFeePerGas: getValue(maxFeePerGas),
	            maxPriorityFeePerGas: getValue(maxPriorityFeePerGas)
	        });
	    }
	    /**
	     *  Returns a JSON-friendly value.
	     */
	    toJSON() {
	        const { gasPrice, maxFeePerGas, maxPriorityFeePerGas } = this;
	        return {
	            _type: "FeeData",
	            gasPrice: toJson(gasPrice),
	            maxFeePerGas: toJson(maxFeePerGas),
	            maxPriorityFeePerGas: toJson(maxPriorityFeePerGas),
	        };
	    }
	}
	provider$1.FeeData = FeeData;
	/**
	 *  Returns a copy of %%req%% with all properties coerced to their strict
	 *  types.
	 */
	function copyRequest(req) {
	    const result = {};
	    // These could be addresses, ENS names or Addressables
	    if (req.to) {
	        result.to = req.to;
	    }
	    if (req.from) {
	        result.from = req.from;
	    }
	    if (req.data) {
	        result.data = (0, index_js_1.hexlify)(req.data);
	    }
	    const bigIntKeys = "chainId,gasLimit,gasPrice,maxFeePerGas,maxPriorityFeePerGas,value".split(/,/);
	    for (const key of bigIntKeys) {
	        if (!(key in req) || req[key] == null) {
	            continue;
	        }
	        result[key] = (0, index_js_1.getBigInt)(req[key], `request.${key}`);
	    }
	    const numberKeys = "type,nonce".split(/,/);
	    for (const key of numberKeys) {
	        if (!(key in req) || req[key] == null) {
	            continue;
	        }
	        result[key] = (0, index_js_1.getNumber)(req[key], `request.${key}`);
	    }
	    if (req.accessList) {
	        result.accessList = (0, index_js_2.accessListify)(req.accessList);
	    }
	    if ("blockTag" in req) {
	        result.blockTag = req.blockTag;
	    }
	    if ("enableCcipRead" in req) {
	        result.enableCcipRead = !!req.enableCcipRead;
	    }
	    if ("customData" in req) {
	        result.customData = req.customData;
	    }
	    return result;
	}
	provider$1.copyRequest = copyRequest;
	/**
	 *  A **Block** represents the data associated with a full block on
	 *  Ethereum.
	 */
	class Block {
	    /**
	     *  The provider connected to the block used to fetch additional details
	     *  if necessary.
	     */
	    provider;
	    /**
	     *  The block number, sometimes called the block height. This is a
	     *  sequential number that is one higher than the parent block.
	     */
	    number;
	    /**
	     *  The block hash.
	     *
	     *  This hash includes all properties, so can be safely used to identify
	     *  an exact set of block properties.
	     */
	    hash;
	    /**
	     *  The timestamp for this block, which is the number of seconds since
	     *  epoch that this block was included.
	     */
	    timestamp;
	    /**
	     *  The block hash of the parent block.
	     */
	    parentHash;
	    /**
	     *  The hash tree root of the parent beacon block for the given
	     *  execution block. See [[link-eip-4788]].
	     */
	    parentBeaconBlockRoot;
	    /**
	     *  The nonce.
	     *
	     *  On legacy networks, this is the random number inserted which
	     *  permitted the difficulty target to be reached.
	     */
	    nonce;
	    /**
	     *  The difficulty target.
	     *
	     *  On legacy networks, this is the proof-of-work target required
	     *  for a block to meet the protocol rules to be included.
	     *
	     *  On modern networks, this is a random number arrived at using
	     *  randao.  @TODO: Find links?
	     */
	    difficulty;
	    /**
	     *  The total gas limit for this block.
	     */
	    gasLimit;
	    /**
	     *  The total gas used in this block.
	     */
	    gasUsed;
	    /**
	     *  The root hash for the global state after applying changes
	     *  in this block.
	     */
	    stateRoot;
	    /**
	     *  The hash of the transaction receipts trie.
	     */
	    receiptsRoot;
	    /**
	     *  The total amount of blob gas consumed by the transactions
	     *  within the block. See [[link-eip-4844]].
	     */
	    blobGasUsed;
	    /**
	     *  The running total of blob gas consumed in excess of the
	     *  target, prior to the block. See [[link-eip-4844]].
	     */
	    excessBlobGas;
	    /**
	     *  The miner coinbase address, wihch receives any subsidies for
	     *  including this block.
	     */
	    miner;
	    /**
	     *  Any extra data the validator wished to include.
	     */
	    extraData;
	    /**
	     *  The base fee per gas that all transactions in this block were
	     *  charged.
	     *
	     *  This adjusts after each block, depending on how congested the network
	     *  is.
	     */
	    baseFeePerGas;
	    #transactions;
	    /**
	     *  Create a new **Block** object.
	     *
	     *  This should generally not be necessary as the unless implementing a
	     *  low-level library.
	     */
	    constructor(block, provider) {
	        this.#transactions = block.transactions.map((tx) => {
	            if (typeof (tx) !== "string") {
	                return new TransactionResponse(tx, provider);
	            }
	            return tx;
	        });
	        (0, index_js_1.defineProperties)(this, {
	            provider,
	            hash: getValue(block.hash),
	            number: block.number,
	            timestamp: block.timestamp,
	            parentHash: block.parentHash,
	            parentBeaconBlockRoot: block.parentBeaconBlockRoot,
	            nonce: block.nonce,
	            difficulty: block.difficulty,
	            gasLimit: block.gasLimit,
	            gasUsed: block.gasUsed,
	            blobGasUsed: block.blobGasUsed,
	            excessBlobGas: block.excessBlobGas,
	            miner: block.miner,
	            extraData: block.extraData,
	            baseFeePerGas: getValue(block.baseFeePerGas),
	            stateRoot: block.stateRoot,
	            receiptsRoot: block.receiptsRoot,
	        });
	    }
	    /**
	     *  Returns the list of transaction hashes, in the order
	     *  they were executed within the block.
	     */
	    get transactions() {
	        return this.#transactions.map((tx) => {
	            if (typeof (tx) === "string") {
	                return tx;
	            }
	            return tx.hash;
	        });
	    }
	    /**
	     *  Returns the complete transactions, in the order they
	     *  were executed within the block.
	     *
	     *  This is only available for blocks which prefetched
	     *  transactions, by passing ``true`` to %%prefetchTxs%%
	     *  into [[Provider-getBlock]].
	     */
	    get prefetchedTransactions() {
	        const txs = this.#transactions.slice();
	        // Doesn't matter...
	        if (txs.length === 0) {
	            return [];
	        }
	        // Make sure we prefetched the transactions
	        (0, index_js_1.assert)(typeof (txs[0]) === "object", "transactions were not prefetched with block request", "UNSUPPORTED_OPERATION", {
	            operation: "transactionResponses()"
	        });
	        return txs;
	    }
	    /**
	     *  Returns a JSON-friendly value.
	     */
	    toJSON() {
	        const { baseFeePerGas, difficulty, extraData, gasLimit, gasUsed, hash, miner, nonce, number, parentHash, parentBeaconBlockRoot, stateRoot, receiptsRoot, timestamp, transactions } = this;
	        return {
	            _type: "Block",
	            baseFeePerGas: toJson(baseFeePerGas),
	            difficulty: toJson(difficulty),
	            extraData,
	            gasLimit: toJson(gasLimit),
	            gasUsed: toJson(gasUsed),
	            blobGasUsed: toJson(this.blobGasUsed),
	            excessBlobGas: toJson(this.excessBlobGas),
	            hash, miner, nonce, number, parentHash, timestamp,
	            parentBeaconBlockRoot, stateRoot, receiptsRoot,
	            transactions,
	        };
	    }
	    [Symbol.iterator]() {
	        let index = 0;
	        const txs = this.transactions;
	        return {
	            next: () => {
	                if (index < this.length) {
	                    return {
	                        value: txs[index++], done: false
	                    };
	                }
	                return { value: undefined, done: true };
	            }
	        };
	    }
	    /**
	     *  The number of transactions in this block.
	     */
	    get length() { return this.#transactions.length; }
	    /**
	     *  The [[link-js-date]] this block was included at.
	     */
	    get date() {
	        if (this.timestamp == null) {
	            return null;
	        }
	        return new Date(this.timestamp * 1000);
	    }
	    /**
	     *  Get the transaction at %%indexe%% within this block.
	     */
	    async getTransaction(indexOrHash) {
	        // Find the internal value by its index or hash
	        let tx = undefined;
	        if (typeof (indexOrHash) === "number") {
	            tx = this.#transactions[indexOrHash];
	        }
	        else {
	            const hash = indexOrHash.toLowerCase();
	            for (const v of this.#transactions) {
	                if (typeof (v) === "string") {
	                    if (v !== hash) {
	                        continue;
	                    }
	                    tx = v;
	                    break;
	                }
	                else {
	                    if (v.hash === hash) {
	                        continue;
	                    }
	                    tx = v;
	                    break;
	                }
	            }
	        }
	        if (tx == null) {
	            throw new Error("no such tx");
	        }
	        if (typeof (tx) === "string") {
	            return (await this.provider.getTransaction(tx));
	        }
	        else {
	            return tx;
	        }
	    }
	    /**
	     *  If a **Block** was fetched with a request to include the transactions
	     *  this will allow synchronous access to those transactions.
	     *
	     *  If the transactions were not prefetched, this will throw.
	     */
	    getPrefetchedTransaction(indexOrHash) {
	        const txs = this.prefetchedTransactions;
	        if (typeof (indexOrHash) === "number") {
	            return txs[indexOrHash];
	        }
	        indexOrHash = indexOrHash.toLowerCase();
	        for (const tx of txs) {
	            if (tx.hash === indexOrHash) {
	                return tx;
	            }
	        }
	        (0, index_js_1.assertArgument)(false, "no matching transaction", "indexOrHash", indexOrHash);
	    }
	    /**
	     *  Returns true if this block been mined. This provides a type guard
	     *  for all properties on a [[MinedBlock]].
	     */
	    isMined() { return !!this.hash; }
	    /**
	     *  Returns true if this block is an [[link-eip-2930]] block.
	     */
	    isLondon() {
	        return !!this.baseFeePerGas;
	    }
	    /**
	     *  @_ignore:
	     */
	    orphanedEvent() {
	        if (!this.isMined()) {
	            throw new Error("");
	        }
	        return createOrphanedBlockFilter(this);
	    }
	}
	provider$1.Block = Block;
	//////////////////////
	// Log
	/**
	 *  A **Log** in Ethereum represents an event that has been included in a
	 *  transaction using the ``LOG*`` opcodes, which are most commonly used by
	 *  Solidity's emit for announcing events.
	 */
	class Log {
	    /**
	     *  The provider connected to the log used to fetch additional details
	     *  if necessary.
	     */
	    provider;
	    /**
	     *  The transaction hash of the transaction this log occurred in. Use the
	     *  [[Log-getTransaction]] to get the [[TransactionResponse]].
	     */
	    transactionHash;
	    /**
	     *  The block hash of the block this log occurred in. Use the
	     *  [[Log-getBlock]] to get the [[Block]].
	     */
	    blockHash;
	    /**
	     *  The block number of the block this log occurred in. It is preferred
	     *  to use the [[Block-hash]] when fetching the related [[Block]],
	     *  since in the case of an orphaned block, the block at that height may
	     *  have changed.
	     */
	    blockNumber;
	    /**
	     *  If the **Log** represents a block that was removed due to an orphaned
	     *  block, this will be true.
	     *
	     *  This can only happen within an orphan event listener.
	     */
	    removed;
	    /**
	     *  The address of the contract that emitted this log.
	     */
	    address;
	    /**
	     *  The data included in this log when it was emitted.
	     */
	    data;
	    /**
	     *  The indexed topics included in this log when it was emitted.
	     *
	     *  All topics are included in the bloom filters, so they can be
	     *  efficiently filtered using the [[Provider-getLogs]] method.
	     */
	    topics;
	    /**
	     *  The index within the block this log occurred at. This is generally
	     *  not useful to developers, but can be used with the various roots
	     *  to proof inclusion within a block.
	     */
	    index;
	    /**
	     *  The index within the transaction of this log.
	     */
	    transactionIndex;
	    /**
	     *  @_ignore:
	     */
	    constructor(log, provider) {
	        this.provider = provider;
	        const topics = Object.freeze(log.topics.slice());
	        (0, index_js_1.defineProperties)(this, {
	            transactionHash: log.transactionHash,
	            blockHash: log.blockHash,
	            blockNumber: log.blockNumber,
	            removed: log.removed,
	            address: log.address,
	            data: log.data,
	            topics,
	            index: log.index,
	            transactionIndex: log.transactionIndex,
	        });
	    }
	    /**
	     *  Returns a JSON-compatible object.
	     */
	    toJSON() {
	        const { address, blockHash, blockNumber, data, index, removed, topics, transactionHash, transactionIndex } = this;
	        return {
	            _type: "log",
	            address, blockHash, blockNumber, data, index,
	            removed, topics, transactionHash, transactionIndex
	        };
	    }
	    /**
	     *  Returns the block that this log occurred in.
	     */
	    async getBlock() {
	        const block = await this.provider.getBlock(this.blockHash);
	        (0, index_js_1.assert)(!!block, "failed to find transaction", "UNKNOWN_ERROR", {});
	        return block;
	    }
	    /**
	     *  Returns the transaction that this log occurred in.
	     */
	    async getTransaction() {
	        const tx = await this.provider.getTransaction(this.transactionHash);
	        (0, index_js_1.assert)(!!tx, "failed to find transaction", "UNKNOWN_ERROR", {});
	        return tx;
	    }
	    /**
	     *  Returns the transaction receipt fot the transaction that this
	     *  log occurred in.
	     */
	    async getTransactionReceipt() {
	        const receipt = await this.provider.getTransactionReceipt(this.transactionHash);
	        (0, index_js_1.assert)(!!receipt, "failed to find transaction receipt", "UNKNOWN_ERROR", {});
	        return receipt;
	    }
	    /**
	     *  @_ignore:
	     */
	    removedEvent() {
	        return createRemovedLogFilter(this);
	    }
	}
	provider$1.Log = Log;
	//////////////////////
	// Transaction Receipt
	/*
	export interface LegacyTransactionReceipt {
	    byzantium: false;
	    status: null;
	    root: string;
	}

	export interface ByzantiumTransactionReceipt {
	    byzantium: true;
	    status: number;
	    root: null;
	}
	*/
	/**
	 *  A **TransactionReceipt** includes additional information about a
	 *  transaction that is only available after it has been mined.
	 */
	class TransactionReceipt {
	    /**
	     *  The provider connected to the log used to fetch additional details
	     *  if necessary.
	     */
	    provider;
	    /**
	     *  The address the transaction was sent to.
	     */
	    to;
	    /**
	     *  The sender of the transaction.
	     */
	    from;
	    /**
	     *  The address of the contract if the transaction was directly
	     *  responsible for deploying one.
	     *
	     *  This is non-null **only** if the ``to`` is empty and the ``data``
	     *  was successfully executed as initcode.
	     */
	    contractAddress;
	    /**
	     *  The transaction hash.
	     */
	    hash;
	    /**
	     *  The index of this transaction within the block transactions.
	     */
	    index;
	    /**
	     *  The block hash of the [[Block]] this transaction was included in.
	     */
	    blockHash;
	    /**
	     *  The block number of the [[Block]] this transaction was included in.
	     */
	    blockNumber;
	    /**
	     *  The bloom filter bytes that represent all logs that occurred within
	     *  this transaction. This is generally not useful for most developers,
	     *  but can be used to validate the included logs.
	     */
	    logsBloom;
	    /**
	     *  The actual amount of gas used by this transaction.
	     *
	     *  When creating a transaction, the amount of gas that will be used can
	     *  only be approximated, but the sender must pay the gas fee for the
	     *  entire gas limit. After the transaction, the difference is refunded.
	     */
	    gasUsed;
	    /**
	     *  The gas used for BLObs. See [[link-eip-4844]].
	     */
	    blobGasUsed;
	    /**
	     *  The amount of gas used by all transactions within the block for this
	     *  and all transactions with a lower ``index``.
	     *
	     *  This is generally not useful for developers but can be used to
	     *  validate certain aspects of execution.
	     */
	    cumulativeGasUsed;
	    /**
	     *  The actual gas price used during execution.
	     *
	     *  Due to the complexity of [[link-eip-1559]] this value can only
	     *  be caluclated after the transaction has been mined, snce the base
	     *  fee is protocol-enforced.
	     */
	    gasPrice;
	    /**
	     *  The price paid per BLOB in gas. See [[link-eip-4844]].
	     */
	    blobGasPrice;
	    /**
	     *  The [[link-eip-2718]] transaction type.
	     */
	    type;
	    //readonly byzantium!: boolean;
	    /**
	     *  The status of this transaction, indicating success (i.e. ``1``) or
	     *  a revert (i.e. ``0``).
	     *
	     *  This is available in post-byzantium blocks, but some backends may
	     *  backfill this value.
	     */
	    status;
	    /**
	     *  The root hash of this transaction.
	     *
	     *  This is no present and was only included in pre-byzantium blocks, but
	     *  could be used to validate certain parts of the receipt.
	     */
	    root;
	    #logs;
	    /**
	     *  @_ignore:
	     */
	    constructor(tx, provider) {
	        this.#logs = Object.freeze(tx.logs.map((log) => {
	            return new Log(log, provider);
	        }));
	        let gasPrice = BN_0;
	        if (tx.effectiveGasPrice != null) {
	            gasPrice = tx.effectiveGasPrice;
	        }
	        else if (tx.gasPrice != null) {
	            gasPrice = tx.gasPrice;
	        }
	        (0, index_js_1.defineProperties)(this, {
	            provider,
	            to: tx.to,
	            from: tx.from,
	            contractAddress: tx.contractAddress,
	            hash: tx.hash,
	            index: tx.index,
	            blockHash: tx.blockHash,
	            blockNumber: tx.blockNumber,
	            logsBloom: tx.logsBloom,
	            gasUsed: tx.gasUsed,
	            cumulativeGasUsed: tx.cumulativeGasUsed,
	            blobGasUsed: tx.blobGasUsed,
	            gasPrice,
	            blobGasPrice: tx.blobGasPrice,
	            type: tx.type,
	            //byzantium: tx.byzantium,
	            status: tx.status,
	            root: tx.root
	        });
	    }
	    /**
	     *  The logs for this transaction.
	     */
	    get logs() { return this.#logs; }
	    /**
	     *  Returns a JSON-compatible representation.
	     */
	    toJSON() {
	        const { to, from, contractAddress, hash, index, blockHash, blockNumber, logsBloom, logs, //byzantium, 
	        status, root } = this;
	        return {
	            _type: "TransactionReceipt",
	            blockHash, blockNumber,
	            //byzantium, 
	            contractAddress,
	            cumulativeGasUsed: toJson(this.cumulativeGasUsed),
	            from,
	            gasPrice: toJson(this.gasPrice),
	            blobGasUsed: toJson(this.blobGasUsed),
	            blobGasPrice: toJson(this.blobGasPrice),
	            gasUsed: toJson(this.gasUsed),
	            hash, index, logs, logsBloom, root, status, to
	        };
	    }
	    /**
	     *  @_ignore:
	     */
	    get length() { return this.logs.length; }
	    [Symbol.iterator]() {
	        let index = 0;
	        return {
	            next: () => {
	                if (index < this.length) {
	                    return { value: this.logs[index++], done: false };
	                }
	                return { value: undefined, done: true };
	            }
	        };
	    }
	    /**
	     *  The total fee for this transaction, in wei.
	     */
	    get fee() {
	        return this.gasUsed * this.gasPrice;
	    }
	    /**
	     *  Resolves to the block this transaction occurred in.
	     */
	    async getBlock() {
	        const block = await this.provider.getBlock(this.blockHash);
	        if (block == null) {
	            throw new Error("TODO");
	        }
	        return block;
	    }
	    /**
	     *  Resolves to the transaction this transaction occurred in.
	     */
	    async getTransaction() {
	        const tx = await this.provider.getTransaction(this.hash);
	        if (tx == null) {
	            throw new Error("TODO");
	        }
	        return tx;
	    }
	    /**
	     *  Resolves to the return value of the execution of this transaction.
	     *
	     *  Support for this feature is limited, as it requires an archive node
	     *  with the ``debug_`` or ``trace_`` API enabled.
	     */
	    async getResult() {
	        return (await this.provider.getTransactionResult(this.hash));
	    }
	    /**
	     *  Resolves to the number of confirmations this transaction has.
	     */
	    async confirmations() {
	        return (await this.provider.getBlockNumber()) - this.blockNumber + 1;
	    }
	    /**
	     *  @_ignore:
	     */
	    removedEvent() {
	        return createRemovedTransactionFilter(this);
	    }
	    /**
	     *  @_ignore:
	     */
	    reorderedEvent(other) {
	        (0, index_js_1.assert)(!other || other.isMined(), "unmined 'other' transction cannot be orphaned", "UNSUPPORTED_OPERATION", { operation: "reorderedEvent(other)" });
	        return createReorderedTransactionFilter(this, other);
	    }
	}
	provider$1.TransactionReceipt = TransactionReceipt;
	/**
	 *  A **TransactionResponse** includes all properties about a transaction
	 *  that was sent to the network, which may or may not be included in a
	 *  block.
	 *
	 *  The [[TransactionResponse-isMined]] can be used to check if the
	 *  transaction has been mined as well as type guard that the otherwise
	 *  possibly ``null`` properties are defined.
	 */
	class TransactionResponse {
	    /**
	     *  The provider this is connected to, which will influence how its
	     *  methods will resolve its async inspection methods.
	     */
	    provider;
	    /**
	     *  The block number of the block that this transaction was included in.
	     *
	     *  This is ``null`` for pending transactions.
	     */
	    blockNumber;
	    /**
	     *  The blockHash of the block that this transaction was included in.
	     *
	     *  This is ``null`` for pending transactions.
	     */
	    blockHash;
	    /**
	     *  The index within the block that this transaction resides at.
	     */
	    index;
	    /**
	     *  The transaction hash.
	     */
	    hash;
	    /**
	     *  The [[link-eip-2718]] transaction envelope type. This is
	     *  ``0`` for legacy transactions types.
	     */
	    type;
	    /**
	     *  The receiver of this transaction.
	     *
	     *  If ``null``, then the transaction is an initcode transaction.
	     *  This means the result of executing the [[data]] will be deployed
	     *  as a new contract on chain (assuming it does not revert) and the
	     *  address may be computed using [[getCreateAddress]].
	     */
	    to;
	    /**
	     *  The sender of this transaction. It is implicitly computed
	     *  from the transaction pre-image hash (as the digest) and the
	     *  [[signature]] using ecrecover.
	     */
	    from;
	    /**
	     *  The nonce, which is used to prevent replay attacks and offer
	     *  a method to ensure transactions from a given sender are explicitly
	     *  ordered.
	     *
	     *  When sending a transaction, this must be equal to the number of
	     *  transactions ever sent by [[from]].
	     */
	    nonce;
	    /**
	     *  The maximum units of gas this transaction can consume. If execution
	     *  exceeds this, the entries transaction is reverted and the sender
	     *  is charged for the full amount, despite not state changes being made.
	     */
	    gasLimit;
	    /**
	     *  The gas price can have various values, depending on the network.
	     *
	     *  In modern networks, for transactions that are included this is
	     *  the //effective gas price// (the fee per gas that was actually
	     *  charged), while for transactions that have not been included yet
	     *  is the [[maxFeePerGas]].
	     *
	     *  For legacy transactions, or transactions on legacy networks, this
	     *  is the fee that will be charged per unit of gas the transaction
	     *  consumes.
	     */
	    gasPrice;
	    /**
	     *  The maximum priority fee (per unit of gas) to allow a
	     *  validator to charge the sender. This is inclusive of the
	     *  [[maxFeeFeePerGas]].
	     */
	    maxPriorityFeePerGas;
	    /**
	     *  The maximum fee (per unit of gas) to allow this transaction
	     *  to charge the sender.
	     */
	    maxFeePerGas;
	    /**
	     *  The [[link-eip-4844]] max fee per BLOb gas.
	     */
	    maxFeePerBlobGas;
	    /**
	     *  The data.
	     */
	    data;
	    /**
	     *  The value, in wei. Use [[formatEther]] to format this value
	     *  as ether.
	     */
	    value;
	    /**
	     *  The chain ID.
	     */
	    chainId;
	    /**
	     *  The signature.
	     */
	    signature;
	    /**
	     *  The [[link-eip-2930]] access list for transaction types that
	     *  support it, otherwise ``null``.
	     */
	    accessList;
	    /**
	     *  The [[link-eip-4844]] BLOb versioned hashes.
	     */
	    blobVersionedHashes;
	    #startBlock;
	    /**
	     *  @_ignore:
	     */
	    constructor(tx, provider) {
	        this.provider = provider;
	        this.blockNumber = (tx.blockNumber != null) ? tx.blockNumber : null;
	        this.blockHash = (tx.blockHash != null) ? tx.blockHash : null;
	        this.hash = tx.hash;
	        this.index = tx.index;
	        this.type = tx.type;
	        this.from = tx.from;
	        this.to = tx.to || null;
	        this.gasLimit = tx.gasLimit;
	        this.nonce = tx.nonce;
	        this.data = tx.data;
	        this.value = tx.value;
	        this.gasPrice = tx.gasPrice;
	        this.maxPriorityFeePerGas = (tx.maxPriorityFeePerGas != null) ? tx.maxPriorityFeePerGas : null;
	        this.maxFeePerGas = (tx.maxFeePerGas != null) ? tx.maxFeePerGas : null;
	        this.maxFeePerBlobGas = (tx.maxFeePerBlobGas != null) ? tx.maxFeePerBlobGas : null;
	        this.chainId = tx.chainId;
	        this.signature = tx.signature;
	        this.accessList = (tx.accessList != null) ? tx.accessList : null;
	        this.blobVersionedHashes = (tx.blobVersionedHashes != null) ? tx.blobVersionedHashes : null;
	        this.#startBlock = -1;
	    }
	    /**
	     *  Returns a JSON-compatible representation of this transaction.
	     */
	    toJSON() {
	        const { blockNumber, blockHash, index, hash, type, to, from, nonce, data, signature, accessList, blobVersionedHashes } = this;
	        return {
	            _type: "TransactionResponse",
	            accessList, blockNumber, blockHash,
	            blobVersionedHashes,
	            chainId: toJson(this.chainId),
	            data, from,
	            gasLimit: toJson(this.gasLimit),
	            gasPrice: toJson(this.gasPrice),
	            hash,
	            maxFeePerGas: toJson(this.maxFeePerGas),
	            maxPriorityFeePerGas: toJson(this.maxPriorityFeePerGas),
	            maxFeePerBlobGas: toJson(this.maxFeePerBlobGas),
	            nonce, signature, to, index, type,
	            value: toJson(this.value),
	        };
	    }
	    /**
	     *  Resolves to the Block that this transaction was included in.
	     *
	     *  This will return null if the transaction has not been included yet.
	     */
	    async getBlock() {
	        let blockNumber = this.blockNumber;
	        if (blockNumber == null) {
	            const tx = await this.getTransaction();
	            if (tx) {
	                blockNumber = tx.blockNumber;
	            }
	        }
	        if (blockNumber == null) {
	            return null;
	        }
	        const block = this.provider.getBlock(blockNumber);
	        if (block == null) {
	            throw new Error("TODO");
	        }
	        return block;
	    }
	    /**
	     *  Resolves to this transaction being re-requested from the
	     *  provider. This can be used if you have an unmined transaction
	     *  and wish to get an up-to-date populated instance.
	     */
	    async getTransaction() {
	        return this.provider.getTransaction(this.hash);
	    }
	    /**
	     *  Resolve to the number of confirmations this transaction has.
	     */
	    async confirmations() {
	        if (this.blockNumber == null) {
	            const { tx, blockNumber } = await (0, index_js_1.resolveProperties)({
	                tx: this.getTransaction(),
	                blockNumber: this.provider.getBlockNumber()
	            });
	            // Not mined yet...
	            if (tx == null || tx.blockNumber == null) {
	                return 0;
	            }
	            return blockNumber - tx.blockNumber + 1;
	        }
	        const blockNumber = await this.provider.getBlockNumber();
	        return blockNumber - this.blockNumber + 1;
	    }
	    /**
	     *  Resolves once this transaction has been mined and has
	     *  %%confirms%% blocks including it (default: ``1``) with an
	     *  optional %%timeout%%.
	     *
	     *  This can resolve to ``null`` only if %%confirms%% is ``0``
	     *  and the transaction has not been mined, otherwise this will
	     *  wait until enough confirmations have completed.
	     */
	    async wait(_confirms, _timeout) {
	        const confirms = (_confirms == null) ? 1 : _confirms;
	        const timeout = (_timeout == null) ? 0 : _timeout;
	        let startBlock = this.#startBlock;
	        let nextScan = -1;
	        let stopScanning = (startBlock === -1) ? true : false;
	        const checkReplacement = async () => {
	            // Get the current transaction count for this sender
	            if (stopScanning) {
	                return null;
	            }
	            const { blockNumber, nonce } = await (0, index_js_1.resolveProperties)({
	                blockNumber: this.provider.getBlockNumber(),
	                nonce: this.provider.getTransactionCount(this.from)
	            });
	            // No transaction or our nonce has not been mined yet; but we
	            // can start scanning later when we do start
	            if (nonce < this.nonce) {
	                startBlock = blockNumber;
	                return;
	            }
	            // We were mined; no replacement
	            if (stopScanning) {
	                return null;
	            }
	            const mined = await this.getTransaction();
	            if (mined && mined.blockNumber != null) {
	                return;
	            }
	            // We were replaced; start scanning for that transaction
	            // Starting to scan; look back a few extra blocks for safety
	            if (nextScan === -1) {
	                nextScan = startBlock - 3;
	                if (nextScan < this.#startBlock) {
	                    nextScan = this.#startBlock;
	                }
	            }
	            while (nextScan <= blockNumber) {
	                // Get the next block to scan
	                if (stopScanning) {
	                    return null;
	                }
	                const block = await this.provider.getBlock(nextScan, true);
	                // This should not happen; but we'll try again shortly
	                if (block == null) {
	                    return;
	                }
	                // We were mined; no replacement
	                for (const hash of block) {
	                    if (hash === this.hash) {
	                        return;
	                    }
	                }
	                // Search for the transaction that replaced us
	                for (let i = 0; i < block.length; i++) {
	                    const tx = await block.getTransaction(i);
	                    if (tx.from === this.from && tx.nonce === this.nonce) {
	                        // Get the receipt
	                        if (stopScanning) {
	                            return null;
	                        }
	                        const receipt = await this.provider.getTransactionReceipt(tx.hash);
	                        // This should not happen; but we'll try again shortly
	                        if (receipt == null) {
	                            return;
	                        }
	                        // We will retry this on the next block (this case could be optimized)
	                        if ((blockNumber - receipt.blockNumber + 1) < confirms) {
	                            return;
	                        }
	                        // The reason we were replaced
	                        let reason = "replaced";
	                        if (tx.data === this.data && tx.to === this.to && tx.value === this.value) {
	                            reason = "repriced";
	                        }
	                        else if (tx.data === "0x" && tx.from === tx.to && tx.value === BN_0) {
	                            reason = "cancelled";
	                        }
	                        (0, index_js_1.assert)(false, "transaction was replaced", "TRANSACTION_REPLACED", {
	                            cancelled: (reason === "replaced" || reason === "cancelled"),
	                            reason,
	                            replacement: tx.replaceableTransaction(startBlock),
	                            hash: tx.hash,
	                            receipt
	                        });
	                    }
	                }
	                nextScan++;
	            }
	            return;
	        };
	        const checkReceipt = (receipt) => {
	            if (receipt == null || receipt.status !== 0) {
	                return receipt;
	            }
	            (0, index_js_1.assert)(false, "transaction execution reverted", "CALL_EXCEPTION", {
	                action: "sendTransaction",
	                data: null, reason: null, invocation: null, revert: null,
	                transaction: {
	                    to: receipt.to,
	                    from: receipt.from,
	                    data: "" // @TODO: in v7, split out sendTransaction properties
	                }, receipt
	            });
	        };
	        const receipt = await this.provider.getTransactionReceipt(this.hash);
	        if (confirms === 0) {
	            return checkReceipt(receipt);
	        }
	        if (receipt) {
	            if ((await receipt.confirmations()) >= confirms) {
	                return checkReceipt(receipt);
	            }
	        }
	        else {
	            // Check for a replacement; throws if a replacement was found
	            await checkReplacement();
	            // Allow null only when the confirms is 0
	            if (confirms === 0) {
	                return null;
	            }
	        }
	        const waiter = new Promise((resolve, reject) => {
	            // List of things to cancel when we have a result (one way or the other)
	            const cancellers = [];
	            const cancel = () => { cancellers.forEach((c) => c()); };
	            // On cancel, stop scanning for replacements
	            cancellers.push(() => { stopScanning = true; });
	            // Set up any timeout requested
	            if (timeout > 0) {
	                const timer = setTimeout(() => {
	                    cancel();
	                    reject((0, index_js_1.makeError)("wait for transaction timeout", "TIMEOUT"));
	                }, timeout);
	                cancellers.push(() => { clearTimeout(timer); });
	            }
	            const txListener = async (receipt) => {
	                // Done; return it!
	                if ((await receipt.confirmations()) >= confirms) {
	                    cancel();
	                    try {
	                        resolve(checkReceipt(receipt));
	                    }
	                    catch (error) {
	                        reject(error);
	                    }
	                }
	            };
	            cancellers.push(() => { this.provider.off(this.hash, txListener); });
	            this.provider.on(this.hash, txListener);
	            // We support replacement detection; start checking
	            if (startBlock >= 0) {
	                const replaceListener = async () => {
	                    try {
	                        // Check for a replacement; this throws only if one is found
	                        await checkReplacement();
	                    }
	                    catch (error) {
	                        // We were replaced (with enough confirms); re-throw the error
	                        if ((0, index_js_1.isError)(error, "TRANSACTION_REPLACED")) {
	                            cancel();
	                            reject(error);
	                            return;
	                        }
	                    }
	                    // Rescheudle a check on the next block
	                    if (!stopScanning) {
	                        this.provider.once("block", replaceListener);
	                    }
	                };
	                cancellers.push(() => { this.provider.off("block", replaceListener); });
	                this.provider.once("block", replaceListener);
	            }
	        });
	        return await waiter;
	    }
	    /**
	     *  Returns ``true`` if this transaction has been included.
	     *
	     *  This is effective only as of the time the TransactionResponse
	     *  was instantiated. To get up-to-date information, use
	     *  [[getTransaction]].
	     *
	     *  This provides a Type Guard that this transaction will have
	     *  non-null property values for properties that are null for
	     *  unmined transactions.
	     */
	    isMined() {
	        return (this.blockHash != null);
	    }
	    /**
	     *  Returns true if the transaction is a legacy (i.e. ``type == 0``)
	     *  transaction.
	     *
	     *  This provides a Type Guard that this transaction will have
	     *  the ``null``-ness for hardfork-specific properties set correctly.
	     */
	    isLegacy() {
	        return (this.type === 0);
	    }
	    /**
	     *  Returns true if the transaction is a Berlin (i.e. ``type == 1``)
	     *  transaction. See [[link-eip-2070]].
	     *
	     *  This provides a Type Guard that this transaction will have
	     *  the ``null``-ness for hardfork-specific properties set correctly.
	     */
	    isBerlin() {
	        return (this.type === 1);
	    }
	    /**
	     *  Returns true if the transaction is a London (i.e. ``type == 2``)
	     *  transaction. See [[link-eip-1559]].
	     *
	     *  This provides a Type Guard that this transaction will have
	     *  the ``null``-ness for hardfork-specific properties set correctly.
	     */
	    isLondon() {
	        return (this.type === 2);
	    }
	    /**
	     *  Returns true if hte transaction is a Cancun (i.e. ``type == 3``)
	     *  transaction. See [[link-eip-4844]].
	     */
	    isCancun() {
	        return (this.type === 3);
	    }
	    /**
	     *  Returns a filter which can be used to listen for orphan events
	     *  that evict this transaction.
	     */
	    removedEvent() {
	        (0, index_js_1.assert)(this.isMined(), "unmined transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" });
	        return createRemovedTransactionFilter(this);
	    }
	    /**
	     *  Returns a filter which can be used to listen for orphan events
	     *  that re-order this event against %%other%%.
	     */
	    reorderedEvent(other) {
	        (0, index_js_1.assert)(this.isMined(), "unmined transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" });
	        (0, index_js_1.assert)(!other || other.isMined(), "unmined 'other' transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" });
	        return createReorderedTransactionFilter(this, other);
	    }
	    /**
	     *  Returns a new TransactionResponse instance which has the ability to
	     *  detect (and throw an error) if the transaction is replaced, which
	     *  will begin scanning at %%startBlock%%.
	     *
	     *  This should generally not be used by developers and is intended
	     *  primarily for internal use. Setting an incorrect %%startBlock%% can
	     *  have devastating performance consequences if used incorrectly.
	     */
	    replaceableTransaction(startBlock) {
	        (0, index_js_1.assertArgument)(Number.isInteger(startBlock) && startBlock >= 0, "invalid startBlock", "startBlock", startBlock);
	        const tx = new TransactionResponse(this, this.provider);
	        tx.#startBlock = startBlock;
	        return tx;
	    }
	}
	provider$1.TransactionResponse = TransactionResponse;
	function createOrphanedBlockFilter(block) {
	    return { orphan: "drop-block", hash: block.hash, number: block.number };
	}
	function createReorderedTransactionFilter(tx, other) {
	    return { orphan: "reorder-transaction", tx, other };
	}
	function createRemovedTransactionFilter(tx) {
	    return { orphan: "drop-transaction", tx };
	}
	function createRemovedLogFilter(log) {
	    return { orphan: "drop-log", log: {
	            transactionHash: log.transactionHash,
	            blockHash: log.blockHash,
	            blockNumber: log.blockNumber,
	            address: log.address,
	            data: log.data,
	            topics: Object.freeze(log.topics.slice()),
	            index: log.index
	        } };
	}
	
	return provider$1;
}

var wrappers = {};

var hasRequiredWrappers;

function requireWrappers () {
	if (hasRequiredWrappers) return wrappers;
	hasRequiredWrappers = 1;
	Object.defineProperty(wrappers, "__esModule", { value: true });
	wrappers.ContractEventPayload = wrappers.ContractUnknownEventPayload = wrappers.ContractTransactionResponse = wrappers.ContractTransactionReceipt = wrappers.UndecodedEventLog = wrappers.EventLog = void 0;
	// import from provider.ts instead of index.ts to prevent circular dep
	// from EtherscanProvider
	const provider_js_1 = requireProvider();
	const index_js_1 = requireUtils$3();
	/**
	 *  An **EventLog** contains additional properties parsed from the [[Log]].
	 */
	class EventLog extends provider_js_1.Log {
	    /**
	     *  The Contract Interface.
	     */
	    interface;
	    /**
	     *  The matching event.
	     */
	    fragment;
	    /**
	     *  The parsed arguments passed to the event by ``emit``.
	     */
	    args;
	    /**
	     * @_ignore:
	     */
	    constructor(log, iface, fragment) {
	        super(log, log.provider);
	        const args = iface.decodeEventLog(fragment, log.data, log.topics);
	        (0, index_js_1.defineProperties)(this, { args, fragment, interface: iface });
	    }
	    /**
	     *  The name of the event.
	     */
	    get eventName() { return this.fragment.name; }
	    /**
	     *  The signature of the event.
	     */
	    get eventSignature() { return this.fragment.format(); }
	}
	wrappers.EventLog = EventLog;
	/**
	 *  An **EventLog** contains additional properties parsed from the [[Log]].
	 */
	class UndecodedEventLog extends provider_js_1.Log {
	    /**
	     *  The error encounted when trying to decode the log.
	     */
	    error;
	    /**
	     * @_ignore:
	     */
	    constructor(log, error) {
	        super(log, log.provider);
	        (0, index_js_1.defineProperties)(this, { error });
	    }
	}
	wrappers.UndecodedEventLog = UndecodedEventLog;
	/**
	 *  A **ContractTransactionReceipt** includes the parsed logs from a
	 *  [[TransactionReceipt]].
	 */
	class ContractTransactionReceipt extends provider_js_1.TransactionReceipt {
	    #iface;
	    /**
	     *  @_ignore:
	     */
	    constructor(iface, provider, tx) {
	        super(tx, provider);
	        this.#iface = iface;
	    }
	    /**
	     *  The parsed logs for any [[Log]] which has a matching event in the
	     *  Contract ABI.
	     */
	    get logs() {
	        return super.logs.map((log) => {
	            const fragment = log.topics.length ? this.#iface.getEvent(log.topics[0]) : null;
	            if (fragment) {
	                try {
	                    return new EventLog(log, this.#iface, fragment);
	                }
	                catch (error) {
	                    return new UndecodedEventLog(log, error);
	                }
	            }
	            return log;
	        });
	    }
	}
	wrappers.ContractTransactionReceipt = ContractTransactionReceipt;
	/**
	 *  A **ContractTransactionResponse** will return a
	 *  [[ContractTransactionReceipt]] when waited on.
	 */
	class ContractTransactionResponse extends provider_js_1.TransactionResponse {
	    #iface;
	    /**
	     *  @_ignore:
	     */
	    constructor(iface, provider, tx) {
	        super(tx, provider);
	        this.#iface = iface;
	    }
	    /**
	     *  Resolves once this transaction has been mined and has
	     *  %%confirms%% blocks including it (default: ``1``) with an
	     *  optional %%timeout%%.
	     *
	     *  This can resolve to ``null`` only if %%confirms%% is ``0``
	     *  and the transaction has not been mined, otherwise this will
	     *  wait until enough confirmations have completed.
	     */
	    async wait(confirms, timeout) {
	        const receipt = await super.wait(confirms, timeout);
	        if (receipt == null) {
	            return null;
	        }
	        return new ContractTransactionReceipt(this.#iface, this.provider, receipt);
	    }
	}
	wrappers.ContractTransactionResponse = ContractTransactionResponse;
	/**
	 *  A **ContractUnknownEventPayload** is included as the last parameter to
	 *  Contract Events when the event does not match any events in the ABI.
	 */
	class ContractUnknownEventPayload extends index_js_1.EventPayload {
	    /**
	     *  The log with no matching events.
	     */
	    log;
	    /**
	     *  @_event:
	     */
	    constructor(contract, listener, filter, log) {
	        super(contract, listener, filter);
	        (0, index_js_1.defineProperties)(this, { log });
	    }
	    /**
	     *  Resolves to the block the event occured in.
	     */
	    async getBlock() {
	        return await this.log.getBlock();
	    }
	    /**
	     *  Resolves to the transaction the event occured in.
	     */
	    async getTransaction() {
	        return await this.log.getTransaction();
	    }
	    /**
	     *  Resolves to the transaction receipt the event occured in.
	     */
	    async getTransactionReceipt() {
	        return await this.log.getTransactionReceipt();
	    }
	}
	wrappers.ContractUnknownEventPayload = ContractUnknownEventPayload;
	/**
	 *  A **ContractEventPayload** is included as the last parameter to
	 *  Contract Events when the event is known.
	 */
	class ContractEventPayload extends ContractUnknownEventPayload {
	    /**
	     *  @_ignore:
	     */
	    constructor(contract, listener, filter, fragment, _log) {
	        super(contract, listener, filter, new EventLog(_log, contract.interface, fragment));
	        const args = contract.interface.decodeEventLog(fragment, this.log.data, this.log.topics);
	        (0, index_js_1.defineProperties)(this, { args, fragment });
	    }
	    /**
	     *  The event name.
	     */
	    get eventName() {
	        return this.fragment.name;
	    }
	    /**
	     *  The event signature.
	     */
	    get eventSignature() {
	        return this.fragment.format();
	    }
	}
	wrappers.ContractEventPayload = ContractEventPayload;
	
	return wrappers;
}

var hasRequiredContract$1;

function requireContract$1 () {
	if (hasRequiredContract$1) return contract;
	hasRequiredContract$1 = 1;
	Object.defineProperty(contract, "__esModule", { value: true });
	contract.Contract = contract.BaseContract = contract.resolveArgs = contract.copyOverrides = void 0;
	const index_js_1 = requireAbi();
	const index_js_2 = requireAddress$2();
	// import from provider.ts instead of index.ts to prevent circular dep
	// from EtherscanProvider
	const provider_js_1 = requireProvider();
	const index_js_3 = requireUtils$3();
	const wrappers_js_1 = requireWrappers();
	const BN_0 = BigInt(0);
	function canCall(value) {
	    return (value && typeof (value.call) === "function");
	}
	function canEstimate(value) {
	    return (value && typeof (value.estimateGas) === "function");
	}
	function canResolve(value) {
	    return (value && typeof (value.resolveName) === "function");
	}
	function canSend(value) {
	    return (value && typeof (value.sendTransaction) === "function");
	}
	function getResolver(value) {
	    if (value != null) {
	        if (canResolve(value)) {
	            return value;
	        }
	        if (value.provider) {
	            return value.provider;
	        }
	    }
	    return undefined;
	}
	class PreparedTopicFilter {
	    #filter;
	    fragment;
	    constructor(contract, fragment, args) {
	        (0, index_js_3.defineProperties)(this, { fragment });
	        if (fragment.inputs.length < args.length) {
	            throw new Error("too many arguments");
	        }
	        // Recursively descend into args and resolve any addresses
	        const runner = getRunner(contract.runner, "resolveName");
	        const resolver = canResolve(runner) ? runner : null;
	        this.#filter = (async function () {
	            const resolvedArgs = await Promise.all(fragment.inputs.map((param, index) => {
	                const arg = args[index];
	                if (arg == null) {
	                    return null;
	                }
	                return param.walkAsync(args[index], (type, value) => {
	                    if (type === "address") {
	                        if (Array.isArray(value)) {
	                            return Promise.all(value.map((v) => (0, index_js_2.resolveAddress)(v, resolver)));
	                        }
	                        return (0, index_js_2.resolveAddress)(value, resolver);
	                    }
	                    return value;
	                });
	            }));
	            return contract.interface.encodeFilterTopics(fragment, resolvedArgs);
	        })();
	    }
	    getTopicFilter() {
	        return this.#filter;
	    }
	}
	// A = Arguments passed in as a tuple
	// R = The result type of the call (i.e. if only one return type,
	//     the qualified type, otherwise Result)
	// D = The type the default call will return (i.e. R for view/pure,
	//     TransactionResponse otherwise)
	//export interface ContractMethod<A extends Array<any> = Array<any>, R = any, D extends R | ContractTransactionResponse = ContractTransactionResponse> {
	function getRunner(value, feature) {
	    if (value == null) {
	        return null;
	    }
	    if (typeof (value[feature]) === "function") {
	        return value;
	    }
	    if (value.provider && typeof (value.provider[feature]) === "function") {
	        return value.provider;
	    }
	    return null;
	}
	function getProvider(value) {
	    if (value == null) {
	        return null;
	    }
	    return value.provider || null;
	}
	/**
	 *  @_ignore:
	 */
	async function copyOverrides(arg, allowed) {
	    // Make sure the overrides passed in are a valid overrides object
	    const _overrides = index_js_1.Typed.dereference(arg, "overrides");
	    (0, index_js_3.assertArgument)(typeof (_overrides) === "object", "invalid overrides parameter", "overrides", arg);
	    // Create a shallow copy (we'll deep-ify anything needed during normalizing)
	    const overrides = (0, provider_js_1.copyRequest)(_overrides);
	    (0, index_js_3.assertArgument)(overrides.to == null || (allowed || []).indexOf("to") >= 0, "cannot override to", "overrides.to", overrides.to);
	    (0, index_js_3.assertArgument)(overrides.data == null || (allowed || []).indexOf("data") >= 0, "cannot override data", "overrides.data", overrides.data);
	    // Resolve any from
	    if (overrides.from) {
	        overrides.from = overrides.from;
	    }
	    return overrides;
	}
	contract.copyOverrides = copyOverrides;
	/**
	 *  @_ignore:
	 */
	async function resolveArgs(_runner, inputs, args) {
	    // Recursively descend into args and resolve any addresses
	    const runner = getRunner(_runner, "resolveName");
	    const resolver = canResolve(runner) ? runner : null;
	    return await Promise.all(inputs.map((param, index) => {
	        return param.walkAsync(args[index], (type, value) => {
	            value = index_js_1.Typed.dereference(value, type);
	            if (type === "address") {
	                return (0, index_js_2.resolveAddress)(value, resolver);
	            }
	            return value;
	        });
	    }));
	}
	contract.resolveArgs = resolveArgs;
	function buildWrappedFallback(contract) {
	    const populateTransaction = async function (overrides) {
	        // If an overrides was passed in, copy it and normalize the values
	        const tx = (await copyOverrides(overrides, ["data"]));
	        tx.to = await contract.getAddress();
	        if (tx.from) {
	            tx.from = await (0, index_js_2.resolveAddress)(tx.from, getResolver(contract.runner));
	        }
	        const iface = contract.interface;
	        const noValue = ((0, index_js_3.getBigInt)((tx.value || BN_0), "overrides.value") === BN_0);
	        const noData = ((tx.data || "0x") === "0x");
	        if (iface.fallback && !iface.fallback.payable && iface.receive && !noData && !noValue) {
	            (0, index_js_3.assertArgument)(false, "cannot send data to receive or send value to non-payable fallback", "overrides", overrides);
	        }
	        (0, index_js_3.assertArgument)(iface.fallback || noData, "cannot send data to receive-only contract", "overrides.data", tx.data);
	        // Only allow payable contracts to set non-zero value
	        const payable = iface.receive || (iface.fallback && iface.fallback.payable);
	        (0, index_js_3.assertArgument)(payable || noValue, "cannot send value to non-payable fallback", "overrides.value", tx.value);
	        // Only allow fallback contracts to set non-empty data
	        (0, index_js_3.assertArgument)(iface.fallback || noData, "cannot send data to receive-only contract", "overrides.data", tx.data);
	        return tx;
	    };
	    const staticCall = async function (overrides) {
	        const runner = getRunner(contract.runner, "call");
	        (0, index_js_3.assert)(canCall(runner), "contract runner does not support calling", "UNSUPPORTED_OPERATION", { operation: "call" });
	        const tx = await populateTransaction(overrides);
	        try {
	            return await runner.call(tx);
	        }
	        catch (error) {
	            if ((0, index_js_3.isCallException)(error) && error.data) {
	                throw contract.interface.makeError(error.data, tx);
	            }
	            throw error;
	        }
	    };
	    const send = async function (overrides) {
	        const runner = contract.runner;
	        (0, index_js_3.assert)(canSend(runner), "contract runner does not support sending transactions", "UNSUPPORTED_OPERATION", { operation: "sendTransaction" });
	        const tx = await runner.sendTransaction(await populateTransaction(overrides));
	        const provider = getProvider(contract.runner);
	        // @TODO: the provider can be null; make a custom dummy provider that will throw a
	        // meaningful error
	        return new wrappers_js_1.ContractTransactionResponse(contract.interface, provider, tx);
	    };
	    const estimateGas = async function (overrides) {
	        const runner = getRunner(contract.runner, "estimateGas");
	        (0, index_js_3.assert)(canEstimate(runner), "contract runner does not support gas estimation", "UNSUPPORTED_OPERATION", { operation: "estimateGas" });
	        return await runner.estimateGas(await populateTransaction(overrides));
	    };
	    const method = async (overrides) => {
	        return await send(overrides);
	    };
	    (0, index_js_3.defineProperties)(method, {
	        _contract: contract,
	        estimateGas,
	        populateTransaction,
	        send, staticCall
	    });
	    return method;
	}
	function buildWrappedMethod(contract, key) {
	    const getFragment = function (...args) {
	        const fragment = contract.interface.getFunction(key, args);
	        (0, index_js_3.assert)(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
	            operation: "fragment",
	            info: { key, args }
	        });
	        return fragment;
	    };
	    const populateTransaction = async function (...args) {
	        const fragment = getFragment(...args);
	        // If an overrides was passed in, copy it and normalize the values
	        let overrides = {};
	        if (fragment.inputs.length + 1 === args.length) {
	            overrides = await copyOverrides(args.pop());
	            if (overrides.from) {
	                overrides.from = await (0, index_js_2.resolveAddress)(overrides.from, getResolver(contract.runner));
	            }
	        }
	        if (fragment.inputs.length !== args.length) {
	            throw new Error("internal error: fragment inputs doesn't match arguments; should not happen");
	        }
	        const resolvedArgs = await resolveArgs(contract.runner, fragment.inputs, args);
	        return Object.assign({}, overrides, await (0, index_js_3.resolveProperties)({
	            to: contract.getAddress(),
	            data: contract.interface.encodeFunctionData(fragment, resolvedArgs)
	        }));
	    };
	    const staticCall = async function (...args) {
	        const result = await staticCallResult(...args);
	        if (result.length === 1) {
	            return result[0];
	        }
	        return result;
	    };
	    const send = async function (...args) {
	        const runner = contract.runner;
	        (0, index_js_3.assert)(canSend(runner), "contract runner does not support sending transactions", "UNSUPPORTED_OPERATION", { operation: "sendTransaction" });
	        const tx = await runner.sendTransaction(await populateTransaction(...args));
	        const provider = getProvider(contract.runner);
	        // @TODO: the provider can be null; make a custom dummy provider that will throw a
	        // meaningful error
	        return new wrappers_js_1.ContractTransactionResponse(contract.interface, provider, tx);
	    };
	    const estimateGas = async function (...args) {
	        const runner = getRunner(contract.runner, "estimateGas");
	        (0, index_js_3.assert)(canEstimate(runner), "contract runner does not support gas estimation", "UNSUPPORTED_OPERATION", { operation: "estimateGas" });
	        return await runner.estimateGas(await populateTransaction(...args));
	    };
	    const staticCallResult = async function (...args) {
	        const runner = getRunner(contract.runner, "call");
	        (0, index_js_3.assert)(canCall(runner), "contract runner does not support calling", "UNSUPPORTED_OPERATION", { operation: "call" });
	        const tx = await populateTransaction(...args);
	        let result = "0x";
	        try {
	            result = await runner.call(tx);
	        }
	        catch (error) {
	            if ((0, index_js_3.isCallException)(error) && error.data) {
	                throw contract.interface.makeError(error.data, tx);
	            }
	            throw error;
	        }
	        const fragment = getFragment(...args);
	        return contract.interface.decodeFunctionResult(fragment, result);
	    };
	    const method = async (...args) => {
	        const fragment = getFragment(...args);
	        if (fragment.constant) {
	            return await staticCall(...args);
	        }
	        return await send(...args);
	    };
	    (0, index_js_3.defineProperties)(method, {
	        name: contract.interface.getFunctionName(key),
	        _contract: contract, _key: key,
	        getFragment,
	        estimateGas,
	        populateTransaction,
	        send, staticCall, staticCallResult,
	    });
	    // Only works on non-ambiguous keys (refined fragment is always non-ambiguous)
	    Object.defineProperty(method, "fragment", {
	        configurable: false,
	        enumerable: true,
	        get: () => {
	            const fragment = contract.interface.getFunction(key);
	            (0, index_js_3.assert)(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
	                operation: "fragment",
	                info: { key }
	            });
	            return fragment;
	        }
	    });
	    return method;
	}
	function buildWrappedEvent(contract, key) {
	    const getFragment = function (...args) {
	        const fragment = contract.interface.getEvent(key, args);
	        (0, index_js_3.assert)(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
	            operation: "fragment",
	            info: { key, args }
	        });
	        return fragment;
	    };
	    const method = function (...args) {
	        return new PreparedTopicFilter(contract, getFragment(...args), args);
	    };
	    (0, index_js_3.defineProperties)(method, {
	        name: contract.interface.getEventName(key),
	        _contract: contract, _key: key,
	        getFragment
	    });
	    // Only works on non-ambiguous keys (refined fragment is always non-ambiguous)
	    Object.defineProperty(method, "fragment", {
	        configurable: false,
	        enumerable: true,
	        get: () => {
	            const fragment = contract.interface.getEvent(key);
	            (0, index_js_3.assert)(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
	                operation: "fragment",
	                info: { key }
	            });
	            return fragment;
	        }
	    });
	    return method;
	}
	// The combination of TypeScrype, Private Fields and Proxies makes
	// the world go boom; so we hide variables with some trickery keeping
	// a symbol attached to each BaseContract which its sub-class (even
	// via a Proxy) can reach and use to look up its internal values.
	const internal = Symbol.for("_ethersInternal_contract");
	const internalValues = new WeakMap();
	function setInternal(contract, values) {
	    internalValues.set(contract[internal], values);
	}
	function getInternal(contract) {
	    return internalValues.get(contract[internal]);
	}
	function isDeferred(value) {
	    return (value && typeof (value) === "object" && ("getTopicFilter" in value) &&
	        (typeof (value.getTopicFilter) === "function") && value.fragment);
	}
	async function getSubInfo(contract, event) {
	    let topics;
	    let fragment = null;
	    // Convert named events to topicHash and get the fragment for
	    // events which need deconstructing.
	    if (Array.isArray(event)) {
	        const topicHashify = function (name) {
	            if ((0, index_js_3.isHexString)(name, 32)) {
	                return name;
	            }
	            const fragment = contract.interface.getEvent(name);
	            (0, index_js_3.assertArgument)(fragment, "unknown fragment", "name", name);
	            return fragment.topicHash;
	        };
	        // Array of Topics and Names; e.g. `[ "0x1234...89ab", "Transfer(address)" ]`
	        topics = event.map((e) => {
	            if (e == null) {
	                return null;
	            }
	            if (Array.isArray(e)) {
	                return e.map(topicHashify);
	            }
	            return topicHashify(e);
	        });
	    }
	    else if (event === "*") {
	        topics = [null];
	    }
	    else if (typeof (event) === "string") {
	        if ((0, index_js_3.isHexString)(event, 32)) {
	            // Topic Hash
	            topics = [event];
	        }
	        else {
	            // Name or Signature; e.g. `"Transfer", `"Transfer(address)"`
	            fragment = contract.interface.getEvent(event);
	            (0, index_js_3.assertArgument)(fragment, "unknown fragment", "event", event);
	            topics = [fragment.topicHash];
	        }
	    }
	    else if (isDeferred(event)) {
	        // Deferred Topic Filter; e.g. `contract.filter.Transfer(from)`
	        topics = await event.getTopicFilter();
	    }
	    else if ("fragment" in event) {
	        // ContractEvent; e.g. `contract.filter.Transfer`
	        fragment = event.fragment;
	        topics = [fragment.topicHash];
	    }
	    else {
	        (0, index_js_3.assertArgument)(false, "unknown event name", "event", event);
	    }
	    // Normalize topics and sort TopicSets
	    topics = topics.map((t) => {
	        if (t == null) {
	            return null;
	        }
	        if (Array.isArray(t)) {
	            const items = Array.from(new Set(t.map((t) => t.toLowerCase())).values());
	            if (items.length === 1) {
	                return items[0];
	            }
	            items.sort();
	            return items;
	        }
	        return t.toLowerCase();
	    });
	    const tag = topics.map((t) => {
	        if (t == null) {
	            return "null";
	        }
	        if (Array.isArray(t)) {
	            return t.join("|");
	        }
	        return t;
	    }).join("&");
	    return { fragment, tag, topics };
	}
	async function hasSub(contract, event) {
	    const { subs } = getInternal(contract);
	    return subs.get((await getSubInfo(contract, event)).tag) || null;
	}
	async function getSub(contract, operation, event) {
	    // Make sure our runner can actually subscribe to events
	    const provider = getProvider(contract.runner);
	    (0, index_js_3.assert)(provider, "contract runner does not support subscribing", "UNSUPPORTED_OPERATION", { operation });
	    const { fragment, tag, topics } = await getSubInfo(contract, event);
	    const { addr, subs } = getInternal(contract);
	    let sub = subs.get(tag);
	    if (!sub) {
	        const address = (addr ? addr : contract);
	        const filter = { address, topics };
	        const listener = (log) => {
	            let foundFragment = fragment;
	            if (foundFragment == null) {
	                try {
	                    foundFragment = contract.interface.getEvent(log.topics[0]);
	                }
	                catch (error) { }
	            }
	            // If fragment is null, we do not deconstruct the args to emit
	            if (foundFragment) {
	                const _foundFragment = foundFragment;
	                const args = fragment ? contract.interface.decodeEventLog(fragment, log.data, log.topics) : [];
	                emit(contract, event, args, (listener) => {
	                    return new wrappers_js_1.ContractEventPayload(contract, listener, event, _foundFragment, log);
	                });
	            }
	            else {
	                emit(contract, event, [], (listener) => {
	                    return new wrappers_js_1.ContractUnknownEventPayload(contract, listener, event, log);
	                });
	            }
	        };
	        let starting = [];
	        const start = () => {
	            if (starting.length) {
	                return;
	            }
	            starting.push(provider.on(filter, listener));
	        };
	        const stop = async () => {
	            if (starting.length == 0) {
	                return;
	            }
	            let started = starting;
	            starting = [];
	            await Promise.all(started);
	            provider.off(filter, listener);
	        };
	        sub = { tag, listeners: [], start, stop };
	        subs.set(tag, sub);
	    }
	    return sub;
	}
	// We use this to ensure one emit resolves before firing the next to
	// ensure correct ordering (note this cannot throw and just adds the
	// notice to the event queu using setTimeout).
	let lastEmit = Promise.resolve();
	async function _emit(contract, event, args, payloadFunc) {
	    await lastEmit;
	    const sub = await hasSub(contract, event);
	    if (!sub) {
	        return false;
	    }
	    const count = sub.listeners.length;
	    sub.listeners = sub.listeners.filter(({ listener, once }) => {
	        const passArgs = Array.from(args);
	        if (payloadFunc) {
	            passArgs.push(payloadFunc(once ? null : listener));
	        }
	        try {
	            listener.call(contract, ...passArgs);
	        }
	        catch (error) { }
	        return !once;
	    });
	    if (sub.listeners.length === 0) {
	        sub.stop();
	        getInternal(contract).subs.delete(sub.tag);
	    }
	    return (count > 0);
	}
	async function emit(contract, event, args, payloadFunc) {
	    try {
	        await lastEmit;
	    }
	    catch (error) { }
	    const resultPromise = _emit(contract, event, args, payloadFunc);
	    lastEmit = resultPromise;
	    return await resultPromise;
	}
	const passProperties = ["then"];
	class BaseContract {
	    /**
	     *  The target to connect to.
	     *
	     *  This can be an address, ENS name or any [[Addressable]], such as
	     *  another contract. To get the resovled address, use the ``getAddress``
	     *  method.
	     */
	    target;
	    /**
	     *  The contract Interface.
	     */
	    interface;
	    /**
	     *  The connected runner. This is generally a [[Provider]] or a
	     *  [[Signer]], which dictates what operations are supported.
	     *
	     *  For example, a **Contract** connected to a [[Provider]] may
	     *  only execute read-only operations.
	     */
	    runner;
	    /**
	     *  All the Events available on this contract.
	     */
	    filters;
	    /**
	     *  @_ignore:
	     */
	    [internal];
	    /**
	     *  The fallback or receive function if any.
	     */
	    fallback;
	    /**
	     *  Creates a new contract connected to %%target%% with the %%abi%% and
	     *  optionally connected to a %%runner%% to perform operations on behalf
	     *  of.
	     */
	    constructor(target, abi, runner, _deployTx) {
	        (0, index_js_3.assertArgument)(typeof (target) === "string" || (0, index_js_2.isAddressable)(target), "invalid value for Contract target", "target", target);
	        if (runner == null) {
	            runner = null;
	        }
	        const iface = index_js_1.Interface.from(abi);
	        (0, index_js_3.defineProperties)(this, { target, runner, interface: iface });
	        Object.defineProperty(this, internal, { value: {} });
	        let addrPromise;
	        let addr = null;
	        let deployTx = null;
	        if (_deployTx) {
	            const provider = getProvider(runner);
	            // @TODO: the provider can be null; make a custom dummy provider that will throw a
	            // meaningful error
	            deployTx = new wrappers_js_1.ContractTransactionResponse(this.interface, provider, _deployTx);
	        }
	        let subs = new Map();
	        // Resolve the target as the address
	        if (typeof (target) === "string") {
	            if ((0, index_js_3.isHexString)(target)) {
	                addr = target;
	                addrPromise = Promise.resolve(target);
	            }
	            else {
	                const resolver = getRunner(runner, "resolveName");
	                if (!canResolve(resolver)) {
	                    throw (0, index_js_3.makeError)("contract runner does not support name resolution", "UNSUPPORTED_OPERATION", {
	                        operation: "resolveName"
	                    });
	                }
	                addrPromise = resolver.resolveName(target).then((addr) => {
	                    if (addr == null) {
	                        throw (0, index_js_3.makeError)("an ENS name used for a contract target must be correctly configured", "UNCONFIGURED_NAME", {
	                            value: target
	                        });
	                    }
	                    getInternal(this).addr = addr;
	                    return addr;
	                });
	            }
	        }
	        else {
	            addrPromise = target.getAddress().then((addr) => {
	                if (addr == null) {
	                    throw new Error("TODO");
	                }
	                getInternal(this).addr = addr;
	                return addr;
	            });
	        }
	        // Set our private values
	        setInternal(this, { addrPromise, addr, deployTx, subs });
	        // Add the event filters
	        const filters = new Proxy({}, {
	            get: (target, prop, receiver) => {
	                // Pass important checks (like `then` for Promise) through
	                if (typeof (prop) === "symbol" || passProperties.indexOf(prop) >= 0) {
	                    return Reflect.get(target, prop, receiver);
	                }
	                try {
	                    return this.getEvent(prop);
	                }
	                catch (error) {
	                    if (!(0, index_js_3.isError)(error, "INVALID_ARGUMENT") || error.argument !== "key") {
	                        throw error;
	                    }
	                }
	                return undefined;
	            },
	            has: (target, prop) => {
	                // Pass important checks (like `then` for Promise) through
	                if (passProperties.indexOf(prop) >= 0) {
	                    return Reflect.has(target, prop);
	                }
	                return Reflect.has(target, prop) || this.interface.hasEvent(String(prop));
	            }
	        });
	        (0, index_js_3.defineProperties)(this, { filters });
	        (0, index_js_3.defineProperties)(this, {
	            fallback: ((iface.receive || iface.fallback) ? (buildWrappedFallback(this)) : null)
	        });
	        // Return a Proxy that will respond to functions
	        return new Proxy(this, {
	            get: (target, prop, receiver) => {
	                if (typeof (prop) === "symbol" || prop in target || passProperties.indexOf(prop) >= 0) {
	                    return Reflect.get(target, prop, receiver);
	                }
	                // Undefined properties should return undefined
	                try {
	                    return target.getFunction(prop);
	                }
	                catch (error) {
	                    if (!(0, index_js_3.isError)(error, "INVALID_ARGUMENT") || error.argument !== "key") {
	                        throw error;
	                    }
	                }
	                return undefined;
	            },
	            has: (target, prop) => {
	                if (typeof (prop) === "symbol" || prop in target || passProperties.indexOf(prop) >= 0) {
	                    return Reflect.has(target, prop);
	                }
	                return target.interface.hasFunction(prop);
	            }
	        });
	    }
	    /**
	     *  Return a new Contract instance with the same target and ABI, but
	     *  a different %%runner%%.
	     */
	    connect(runner) {
	        return new BaseContract(this.target, this.interface, runner);
	    }
	    /**
	     *  Return a new Contract instance with the same ABI and runner, but
	     *  a different %%target%%.
	     */
	    attach(target) {
	        return new BaseContract(target, this.interface, this.runner);
	    }
	    /**
	     *  Return the resolved address of this Contract.
	     */
	    async getAddress() { return await getInternal(this).addrPromise; }
	    /**
	     *  Return the deployed bytecode or null if no bytecode is found.
	     */
	    async getDeployedCode() {
	        const provider = getProvider(this.runner);
	        (0, index_js_3.assert)(provider, "runner does not support .provider", "UNSUPPORTED_OPERATION", { operation: "getDeployedCode" });
	        const code = await provider.getCode(await this.getAddress());
	        if (code === "0x") {
	            return null;
	        }
	        return code;
	    }
	    /**
	     *  Resolve to this Contract once the bytecode has been deployed, or
	     *  resolve immediately if already deployed.
	     */
	    async waitForDeployment() {
	        // We have the deployement transaction; just use that (throws if deployement fails)
	        const deployTx = this.deploymentTransaction();
	        if (deployTx) {
	            await deployTx.wait();
	            return this;
	        }
	        // Check for code
	        const code = await this.getDeployedCode();
	        if (code != null) {
	            return this;
	        }
	        // Make sure we can subscribe to a provider event
	        const provider = getProvider(this.runner);
	        (0, index_js_3.assert)(provider != null, "contract runner does not support .provider", "UNSUPPORTED_OPERATION", { operation: "waitForDeployment" });
	        return new Promise((resolve, reject) => {
	            const checkCode = async () => {
	                try {
	                    const code = await this.getDeployedCode();
	                    if (code != null) {
	                        return resolve(this);
	                    }
	                    provider.once("block", checkCode);
	                }
	                catch (error) {
	                    reject(error);
	                }
	            };
	            checkCode();
	        });
	    }
	    /**
	     *  Return the transaction used to deploy this contract.
	     *
	     *  This is only available if this instance was returned from a
	     *  [[ContractFactory]].
	     */
	    deploymentTransaction() {
	        return getInternal(this).deployTx;
	    }
	    /**
	     *  Return the function for a given name. This is useful when a contract
	     *  method name conflicts with a JavaScript name such as ``prototype`` or
	     *  when using a Contract programatically.
	     */
	    getFunction(key) {
	        if (typeof (key) !== "string") {
	            key = key.format();
	        }
	        const func = buildWrappedMethod(this, key);
	        return func;
	    }
	    /**
	     *  Return the event for a given name. This is useful when a contract
	     *  event name conflicts with a JavaScript name such as ``prototype`` or
	     *  when using a Contract programatically.
	     */
	    getEvent(key) {
	        if (typeof (key) !== "string") {
	            key = key.format();
	        }
	        return buildWrappedEvent(this, key);
	    }
	    /**
	     *  @_ignore:
	     */
	    async queryTransaction(hash) {
	        throw new Error("@TODO");
	    }
	    /*
	    // @TODO: this is a non-backwards compatible change, but will be added
	    //        in v7 and in a potential SmartContract class in an upcoming
	    //        v6 release
	    async getTransactionReceipt(hash: string): Promise<null | ContractTransactionReceipt> {
	        const provider = getProvider(this.runner);
	        assert(provider, "contract runner does not have a provider",
	            "UNSUPPORTED_OPERATION", { operation: "queryTransaction" });

	        const receipt = await provider.getTransactionReceipt(hash);
	        if (receipt == null) { return null; }

	        return new ContractTransactionReceipt(this.interface, provider, receipt);
	    }
	    */
	    /**
	     *  Provide historic access to event data for %%event%% in the range
	     *  %%fromBlock%% (default: ``0``) to %%toBlock%% (default: ``"latest"``)
	     *  inclusive.
	     */
	    async queryFilter(event, fromBlock, toBlock) {
	        if (fromBlock == null) {
	            fromBlock = 0;
	        }
	        if (toBlock == null) {
	            toBlock = "latest";
	        }
	        const { addr, addrPromise } = getInternal(this);
	        const address = (addr ? addr : (await addrPromise));
	        const { fragment, topics } = await getSubInfo(this, event);
	        const filter = { address, topics, fromBlock, toBlock };
	        const provider = getProvider(this.runner);
	        (0, index_js_3.assert)(provider, "contract runner does not have a provider", "UNSUPPORTED_OPERATION", { operation: "queryFilter" });
	        return (await provider.getLogs(filter)).map((log) => {
	            let foundFragment = fragment;
	            if (foundFragment == null) {
	                try {
	                    foundFragment = this.interface.getEvent(log.topics[0]);
	                }
	                catch (error) { }
	            }
	            if (foundFragment) {
	                try {
	                    return new wrappers_js_1.EventLog(log, this.interface, foundFragment);
	                }
	                catch (error) {
	                    return new wrappers_js_1.UndecodedEventLog(log, error);
	                }
	            }
	            return new provider_js_1.Log(log, provider);
	        });
	    }
	    /**
	     *  Add an event %%listener%% for the %%event%%.
	     */
	    async on(event, listener) {
	        const sub = await getSub(this, "on", event);
	        sub.listeners.push({ listener, once: false });
	        sub.start();
	        return this;
	    }
	    /**
	     *  Add an event %%listener%% for the %%event%%, but remove the listener
	     *  after it is fired once.
	     */
	    async once(event, listener) {
	        const sub = await getSub(this, "once", event);
	        sub.listeners.push({ listener, once: true });
	        sub.start();
	        return this;
	    }
	    /**
	     *  Emit an %%event%% calling all listeners with %%args%%.
	     *
	     *  Resolves to ``true`` if any listeners were called.
	     */
	    async emit(event, ...args) {
	        return await emit(this, event, args, null);
	    }
	    /**
	     *  Resolves to the number of listeners of %%event%% or the total number
	     *  of listeners if unspecified.
	     */
	    async listenerCount(event) {
	        if (event) {
	            const sub = await hasSub(this, event);
	            if (!sub) {
	                return 0;
	            }
	            return sub.listeners.length;
	        }
	        const { subs } = getInternal(this);
	        let total = 0;
	        for (const { listeners } of subs.values()) {
	            total += listeners.length;
	        }
	        return total;
	    }
	    /**
	     *  Resolves to the listeners subscribed to %%event%% or all listeners
	     *  if unspecified.
	     */
	    async listeners(event) {
	        if (event) {
	            const sub = await hasSub(this, event);
	            if (!sub) {
	                return [];
	            }
	            return sub.listeners.map(({ listener }) => listener);
	        }
	        const { subs } = getInternal(this);
	        let result = [];
	        for (const { listeners } of subs.values()) {
	            result = result.concat(listeners.map(({ listener }) => listener));
	        }
	        return result;
	    }
	    /**
	     *  Remove the %%listener%% from the listeners for %%event%% or remove
	     *  all listeners if unspecified.
	     */
	    async off(event, listener) {
	        const sub = await hasSub(this, event);
	        if (!sub) {
	            return this;
	        }
	        if (listener) {
	            const index = sub.listeners.map(({ listener }) => listener).indexOf(listener);
	            if (index >= 0) {
	                sub.listeners.splice(index, 1);
	            }
	        }
	        if (listener == null || sub.listeners.length === 0) {
	            sub.stop();
	            getInternal(this).subs.delete(sub.tag);
	        }
	        return this;
	    }
	    /**
	     *  Remove all the listeners for %%event%% or remove all listeners if
	     *  unspecified.
	     */
	    async removeAllListeners(event) {
	        if (event) {
	            const sub = await hasSub(this, event);
	            if (!sub) {
	                return this;
	            }
	            sub.stop();
	            getInternal(this).subs.delete(sub.tag);
	        }
	        else {
	            const { subs } = getInternal(this);
	            for (const { tag, stop } of subs.values()) {
	                stop();
	                subs.delete(tag);
	            }
	        }
	        return this;
	    }
	    /**
	     *  Alias for [on].
	     */
	    async addListener(event, listener) {
	        return await this.on(event, listener);
	    }
	    /**
	     *  Alias for [off].
	     */
	    async removeListener(event, listener) {
	        return await this.off(event, listener);
	    }
	    /**
	     *  Create a new Class for the %%abi%%.
	     */
	    static buildClass(abi) {
	        class CustomContract extends BaseContract {
	            constructor(address, runner = null) {
	                super(address, abi, runner);
	            }
	        }
	        return CustomContract;
	    }
	    ;
	    /**
	     *  Create a new BaseContract with a specified Interface.
	     */
	    static from(target, abi, runner) {
	        if (runner == null) {
	            runner = null;
	        }
	        const contract = new this(target, abi, runner);
	        return contract;
	    }
	}
	contract.BaseContract = BaseContract;
	function _ContractBase() {
	    return BaseContract;
	}
	/**
	 *  A [[BaseContract]] with no type guards on its methods or events.
	 */
	class Contract extends _ContractBase() {
	}
	contract.Contract = Contract;
	
	return contract;
}

var factory = {};

var hasRequiredFactory;

function requireFactory () {
	if (hasRequiredFactory) return factory;
	hasRequiredFactory = 1;
	Object.defineProperty(factory, "__esModule", { value: true });
	factory.ContractFactory = void 0;
	const index_js_1 = requireAbi();
	const index_js_2 = requireAddress$2();
	const index_js_3 = requireUtils$3();
	const contract_js_1 = requireContract$1();
	// A = Arguments to the constructor
	// I = Interface of deployed contracts
	/**
	 *  A **ContractFactory** is used to deploy a Contract to the blockchain.
	 */
	class ContractFactory {
	    /**
	     *  The Contract Interface.
	     */
	    interface;
	    /**
	     *  The Contract deployment bytecode. Often called the initcode.
	     */
	    bytecode;
	    /**
	     *  The ContractRunner to deploy the Contract as.
	     */
	    runner;
	    /**
	     *  Create a new **ContractFactory** with %%abi%% and %%bytecode%%,
	     *  optionally connected to %%runner%%.
	     *
	     *  The %%bytecode%% may be the ``bytecode`` property within the
	     *  standard Solidity JSON output.
	     */
	    constructor(abi, bytecode, runner) {
	        const iface = index_js_1.Interface.from(abi);
	        // Dereference Solidity bytecode objects and allow a missing `0x`-prefix
	        if (bytecode instanceof Uint8Array) {
	            bytecode = (0, index_js_3.hexlify)((0, index_js_3.getBytes)(bytecode));
	        }
	        else {
	            if (typeof (bytecode) === "object") {
	                bytecode = bytecode.object;
	            }
	            if (!bytecode.startsWith("0x")) {
	                bytecode = "0x" + bytecode;
	            }
	            bytecode = (0, index_js_3.hexlify)((0, index_js_3.getBytes)(bytecode));
	        }
	        (0, index_js_3.defineProperties)(this, {
	            bytecode, interface: iface, runner: (runner || null)
	        });
	    }
	    attach(target) {
	        return new contract_js_1.BaseContract(target, this.interface, this.runner);
	    }
	    /**
	     *  Resolves to the transaction to deploy the contract, passing %%args%%
	     *  into the constructor.
	     */
	    async getDeployTransaction(...args) {
	        let overrides = {};
	        const fragment = this.interface.deploy;
	        if (fragment.inputs.length + 1 === args.length) {
	            overrides = await (0, contract_js_1.copyOverrides)(args.pop());
	        }
	        if (fragment.inputs.length !== args.length) {
	            throw new Error("incorrect number of arguments to constructor");
	        }
	        const resolvedArgs = await (0, contract_js_1.resolveArgs)(this.runner, fragment.inputs, args);
	        const data = (0, index_js_3.concat)([this.bytecode, this.interface.encodeDeploy(resolvedArgs)]);
	        return Object.assign({}, overrides, { data });
	    }
	    /**
	     *  Resolves to the Contract deployed by passing %%args%% into the
	     *  constructor.
	     *
	     *  This will resolve to the Contract before it has been deployed to the
	     *  network, so the [[BaseContract-waitForDeployment]] should be used before
	     *  sending any transactions to it.
	     */
	    async deploy(...args) {
	        const tx = await this.getDeployTransaction(...args);
	        (0, index_js_3.assert)(this.runner && typeof (this.runner.sendTransaction) === "function", "factory runner does not support sending transactions", "UNSUPPORTED_OPERATION", {
	            operation: "sendTransaction"
	        });
	        const sentTx = await this.runner.sendTransaction(tx);
	        const address = (0, index_js_2.getCreateAddress)(sentTx);
	        return new contract_js_1.BaseContract(address, this.interface, this.runner, sentTx);
	    }
	    /**
	     *  Return a new **ContractFactory** with the same ABI and bytecode,
	     *  but connected to %%runner%%.
	     */
	    connect(runner) {
	        return new ContractFactory(this.interface, this.bytecode, runner);
	    }
	    /**
	     *  Create a new **ContractFactory** from the standard Solidity JSON output.
	     */
	    static fromSolidity(output, runner) {
	        (0, index_js_3.assertArgument)(output != null, "bad compiler output", "output", output);
	        if (typeof (output) === "string") {
	            output = JSON.parse(output);
	        }
	        const abi = output.abi;
	        let bytecode = "";
	        if (output.bytecode) {
	            bytecode = output.bytecode;
	        }
	        else if (output.evm && output.evm.bytecode) {
	            bytecode = output.evm.bytecode;
	        }
	        return new this(abi, bytecode, runner);
	    }
	}
	factory.ContractFactory = ContractFactory;
	
	return factory;
}

var hasRequiredContract;

function requireContract () {
	if (hasRequiredContract) return contract$1;
	hasRequiredContract = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.UndecodedEventLog = exports.EventLog = exports.ContractTransactionResponse = exports.ContractTransactionReceipt = exports.ContractUnknownEventPayload = exports.ContractEventPayload = exports.ContractFactory = exports.Contract = exports.BaseContract = void 0;
		/**
		 *  A **Contract** object is a meta-class (a class whose definition is
		 *  defined at runtime), which communicates with a deployed smart contract
		 *  on the blockchain and provides a simple JavaScript interface to call
		 *  methods, send transaction, query historic logs and listen for its events.
		 *
		 *  @_section: api/contract:Contracts  [about-contracts]
		 */
		var contract_js_1 = requireContract$1();
		Object.defineProperty(exports, "BaseContract", { enumerable: true, get: function () { return contract_js_1.BaseContract; } });
		Object.defineProperty(exports, "Contract", { enumerable: true, get: function () { return contract_js_1.Contract; } });
		var factory_js_1 = requireFactory();
		Object.defineProperty(exports, "ContractFactory", { enumerable: true, get: function () { return factory_js_1.ContractFactory; } });
		var wrappers_js_1 = requireWrappers();
		Object.defineProperty(exports, "ContractEventPayload", { enumerable: true, get: function () { return wrappers_js_1.ContractEventPayload; } });
		Object.defineProperty(exports, "ContractUnknownEventPayload", { enumerable: true, get: function () { return wrappers_js_1.ContractUnknownEventPayload; } });
		Object.defineProperty(exports, "ContractTransactionReceipt", { enumerable: true, get: function () { return wrappers_js_1.ContractTransactionReceipt; } });
		Object.defineProperty(exports, "ContractTransactionResponse", { enumerable: true, get: function () { return wrappers_js_1.ContractTransactionResponse; } });
		Object.defineProperty(exports, "EventLog", { enumerable: true, get: function () { return wrappers_js_1.EventLog; } });
		Object.defineProperty(exports, "UndecodedEventLog", { enumerable: true, get: function () { return wrappers_js_1.UndecodedEventLog; } });
		
	} (contract$1));
	return contract$1;
}

var providers = {};

var abstractProvider = {};

var ensResolver = {};

var hasRequiredEnsResolver;

function requireEnsResolver () {
	if (hasRequiredEnsResolver) return ensResolver;
	hasRequiredEnsResolver = 1;
	/**
	 *  ENS is a service which allows easy-to-remember names to map to
	 *  network addresses.
	 *
	 *  @_section: api/providers/ens-resolver:ENS Resolver  [about-ens-rsolver]
	 */
	Object.defineProperty(ensResolver, "__esModule", { value: true });
	ensResolver.EnsResolver = ensResolver.BasicMulticoinProviderPlugin = ensResolver.MulticoinProviderPlugin = void 0;
	const index_js_1 = requireAddress$2();
	const index_js_2 = requireConstants$1();
	const index_js_3 = requireContract();
	const index_js_4 = requireHash();
	const index_js_5 = requireUtils$3();
	// @TODO: This should use the fetch-data:ipfs gateway
	// Trim off the ipfs:// prefix and return the default gateway URL
	function getIpfsLink(link) {
	    if (link.match(/^ipfs:\/\/ipfs\//i)) {
	        link = link.substring(12);
	    }
	    else if (link.match(/^ipfs:\/\//i)) {
	        link = link.substring(7);
	    }
	    else {
	        (0, index_js_5.assertArgument)(false, "unsupported IPFS format", "link", link);
	    }
	    return `https:/\/gateway.ipfs.io/ipfs/${link}`;
	}
	/**
	 *  A provider plugin super-class for processing multicoin address types.
	 */
	class MulticoinProviderPlugin {
	    /**
	     *  The name.
	     */
	    name;
	    /**
	     *  Creates a new **MulticoinProviderPluing** for %%name%%.
	     */
	    constructor(name) {
	        (0, index_js_5.defineProperties)(this, { name });
	    }
	    connect(proivder) {
	        return this;
	    }
	    /**
	     *  Returns ``true`` if %%coinType%% is supported by this plugin.
	     */
	    supportsCoinType(coinType) {
	        return false;
	    }
	    /**
	     *  Resovles to the encoded %%address%% for %%coinType%%.
	     */
	    async encodeAddress(coinType, address) {
	        throw new Error("unsupported coin");
	    }
	    /**
	     *  Resovles to the decoded %%data%% for %%coinType%%.
	     */
	    async decodeAddress(coinType, data) {
	        throw new Error("unsupported coin");
	    }
	}
	ensResolver.MulticoinProviderPlugin = MulticoinProviderPlugin;
	const BasicMulticoinPluginId = "org.ethers.plugins.provider.BasicMulticoin";
	/**
	 *  A **BasicMulticoinProviderPlugin** provides service for common
	 *  coin types, which do not require additional libraries to encode or
	 *  decode.
	 */
	class BasicMulticoinProviderPlugin extends MulticoinProviderPlugin {
	    /**
	     *  Creates a new **BasicMulticoinProviderPlugin**.
	     */
	    constructor() {
	        super(BasicMulticoinPluginId);
	    }
	}
	ensResolver.BasicMulticoinProviderPlugin = BasicMulticoinProviderPlugin;
	const matcherIpfs = new RegExp("^(ipfs):/\/(.*)$", "i");
	const matchers = [
	    new RegExp("^(https):/\/(.*)$", "i"),
	    new RegExp("^(data):(.*)$", "i"),
	    matcherIpfs,
	    new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i"),
	];
	/**
	 *  A connected object to a resolved ENS name resolver, which can be
	 *  used to query additional details.
	 */
	class EnsResolver {
	    /**
	     *  The connected provider.
	     */
	    provider;
	    /**
	     *  The address of the resolver.
	     */
	    address;
	    /**
	     *  The name this resolver was resolved against.
	     */
	    name;
	    // For EIP-2544 names, the ancestor that provided the resolver
	    #supports2544;
	    #resolver;
	    constructor(provider, address, name) {
	        (0, index_js_5.defineProperties)(this, { provider, address, name });
	        this.#supports2544 = null;
	        this.#resolver = new index_js_3.Contract(address, [
	            "function supportsInterface(bytes4) view returns (bool)",
	            "function resolve(bytes, bytes) view returns (bytes)",
	            "function addr(bytes32) view returns (address)",
	            "function addr(bytes32, uint) view returns (bytes)",
	            "function text(bytes32, string) view returns (string)",
	            "function contenthash(bytes32) view returns (bytes)",
	        ], provider);
	    }
	    /**
	     *  Resolves to true if the resolver supports wildcard resolution.
	     */
	    async supportsWildcard() {
	        if (this.#supports2544 == null) {
	            this.#supports2544 = (async () => {
	                try {
	                    return await this.#resolver.supportsInterface("0x9061b923");
	                }
	                catch (error) {
	                    // Wildcard resolvers must understand supportsInterface
	                    // and return true.
	                    if ((0, index_js_5.isError)(error, "CALL_EXCEPTION")) {
	                        return false;
	                    }
	                    // Let future attempts try again...
	                    this.#supports2544 = null;
	                    throw error;
	                }
	            })();
	        }
	        return await this.#supports2544;
	    }
	    async #fetch(funcName, params) {
	        params = (params || []).slice();
	        const iface = this.#resolver.interface;
	        // The first parameters is always the nodehash
	        params.unshift((0, index_js_4.namehash)(this.name));
	        let fragment = null;
	        if (await this.supportsWildcard()) {
	            fragment = iface.getFunction(funcName);
	            (0, index_js_5.assert)(fragment, "missing fragment", "UNKNOWN_ERROR", {
	                info: { funcName }
	            });
	            params = [
	                (0, index_js_4.dnsEncode)(this.name, 255),
	                iface.encodeFunctionData(fragment, params)
	            ];
	            funcName = "resolve(bytes,bytes)";
	        }
	        params.push({
	            enableCcipRead: true
	        });
	        try {
	            const result = await this.#resolver[funcName](...params);
	            if (fragment) {
	                return iface.decodeFunctionResult(fragment, result)[0];
	            }
	            return result;
	        }
	        catch (error) {
	            if (!(0, index_js_5.isError)(error, "CALL_EXCEPTION")) {
	                throw error;
	            }
	        }
	        return null;
	    }
	    /**
	     *  Resolves to the address for %%coinType%% or null if the
	     *  provided %%coinType%% has not been configured.
	     */
	    async getAddress(coinType) {
	        if (coinType == null) {
	            coinType = 60;
	        }
	        if (coinType === 60) {
	            try {
	                const result = await this.#fetch("addr(bytes32)");
	                // No address
	                if (result == null || result === index_js_2.ZeroAddress) {
	                    return null;
	                }
	                return result;
	            }
	            catch (error) {
	                if ((0, index_js_5.isError)(error, "CALL_EXCEPTION")) {
	                    return null;
	                }
	                throw error;
	            }
	        }
	        // Try decoding its EVM canonical chain as an EVM chain address first
	        if (coinType >= 0 && coinType < 0x80000000) {
	            let ethCoinType = coinType + 0x80000000;
	            const data = await this.#fetch("addr(bytes32,uint)", [ethCoinType]);
	            if ((0, index_js_5.isHexString)(data, 20)) {
	                return (0, index_js_1.getAddress)(data);
	            }
	        }
	        let coinPlugin = null;
	        for (const plugin of this.provider.plugins) {
	            if (!(plugin instanceof MulticoinProviderPlugin)) {
	                continue;
	            }
	            if (plugin.supportsCoinType(coinType)) {
	                coinPlugin = plugin;
	                break;
	            }
	        }
	        if (coinPlugin == null) {
	            return null;
	        }
	        // keccak256("addr(bytes32,uint256")
	        const data = await this.#fetch("addr(bytes32,uint)", [coinType]);
	        // No address
	        if (data == null || data === "0x") {
	            return null;
	        }
	        // Compute the address
	        const address = await coinPlugin.decodeAddress(coinType, data);
	        if (address != null) {
	            return address;
	        }
	        (0, index_js_5.assert)(false, `invalid coin data`, "UNSUPPORTED_OPERATION", {
	            operation: `getAddress(${coinType})`,
	            info: { coinType, data }
	        });
	    }
	    /**
	     *  Resolves to the EIP-634 text record for %%key%%, or ``null``
	     *  if unconfigured.
	     */
	    async getText(key) {
	        const data = await this.#fetch("text(bytes32,string)", [key]);
	        if (data == null || data === "0x") {
	            return null;
	        }
	        return data;
	    }
	    /**
	     *  Rsolves to the content-hash or ``null`` if unconfigured.
	     */
	    async getContentHash() {
	        // keccak256("contenthash()")
	        const data = await this.#fetch("contenthash(bytes32)");
	        // No contenthash
	        if (data == null || data === "0x") {
	            return null;
	        }
	        // IPFS (CID: 1, Type: 70=DAG-PB, 72=libp2p-key)
	        const ipfs = data.match(/^0x(e3010170|e5010172)(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
	        if (ipfs) {
	            const scheme = (ipfs[1] === "e3010170") ? "ipfs" : "ipns";
	            const length = parseInt(ipfs[4], 16);
	            if (ipfs[5].length === length * 2) {
	                return `${scheme}:/\/${(0, index_js_5.encodeBase58)("0x" + ipfs[2])}`;
	            }
	        }
	        // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)
	        const swarm = data.match(/^0xe40101fa011b20([0-9a-f]*)$/);
	        if (swarm && swarm[1].length === 64) {
	            return `bzz:/\/${swarm[1]}`;
	        }
	        (0, index_js_5.assert)(false, `invalid or unsupported content hash data`, "UNSUPPORTED_OPERATION", {
	            operation: "getContentHash()",
	            info: { data }
	        });
	    }
	    /**
	     *  Resolves to the avatar url or ``null`` if the avatar is either
	     *  unconfigured or incorrectly configured (e.g. references an NFT
	     *  not owned by the address).
	     *
	     *  If diagnosing issues with configurations, the [[_getAvatar]]
	     *  method may be useful.
	     */
	    async getAvatar() {
	        const avatar = await this._getAvatar();
	        return avatar.url;
	    }
	    /**
	     *  When resolving an avatar, there are many steps involved, such
	     *  fetching metadata and possibly validating ownership of an
	     *  NFT.
	     *
	     *  This method can be used to examine each step and the value it
	     *  was working from.
	     */
	    async _getAvatar() {
	        const linkage = [{ type: "name", value: this.name }];
	        try {
	            // test data for ricmoo.eth
	            //const avatar = "eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233";
	            const avatar = await this.getText("avatar");
	            if (avatar == null) {
	                linkage.push({ type: "!avatar", value: "" });
	                return { url: null, linkage };
	            }
	            linkage.push({ type: "avatar", value: avatar });
	            for (let i = 0; i < matchers.length; i++) {
	                const match = avatar.match(matchers[i]);
	                if (match == null) {
	                    continue;
	                }
	                const scheme = match[1].toLowerCase();
	                switch (scheme) {
	                    case "https":
	                    case "data":
	                        linkage.push({ type: "url", value: avatar });
	                        return { linkage, url: avatar };
	                    case "ipfs": {
	                        const url = getIpfsLink(avatar);
	                        linkage.push({ type: "ipfs", value: avatar });
	                        linkage.push({ type: "url", value: url });
	                        return { linkage, url };
	                    }
	                    case "erc721":
	                    case "erc1155": {
	                        // Depending on the ERC type, use tokenURI(uint256) or url(uint256)
	                        const selector = (scheme === "erc721") ? "tokenURI(uint256)" : "uri(uint256)";
	                        linkage.push({ type: scheme, value: avatar });
	                        // The owner of this name
	                        const owner = await this.getAddress();
	                        if (owner == null) {
	                            linkage.push({ type: "!owner", value: "" });
	                            return { url: null, linkage };
	                        }
	                        const comps = (match[2] || "").split("/");
	                        if (comps.length !== 2) {
	                            linkage.push({ type: `!${scheme}caip`, value: (match[2] || "") });
	                            return { url: null, linkage };
	                        }
	                        const tokenId = comps[1];
	                        const contract = new index_js_3.Contract(comps[0], [
	                            // ERC-721
	                            "function tokenURI(uint) view returns (string)",
	                            "function ownerOf(uint) view returns (address)",
	                            // ERC-1155
	                            "function uri(uint) view returns (string)",
	                            "function balanceOf(address, uint256) view returns (uint)"
	                        ], this.provider);
	                        // Check that this account owns the token
	                        if (scheme === "erc721") {
	                            const tokenOwner = await contract.ownerOf(tokenId);
	                            if (owner !== tokenOwner) {
	                                linkage.push({ type: "!owner", value: tokenOwner });
	                                return { url: null, linkage };
	                            }
	                            linkage.push({ type: "owner", value: tokenOwner });
	                        }
	                        else if (scheme === "erc1155") {
	                            const balance = await contract.balanceOf(owner, tokenId);
	                            if (!balance) {
	                                linkage.push({ type: "!balance", value: "0" });
	                                return { url: null, linkage };
	                            }
	                            linkage.push({ type: "balance", value: balance.toString() });
	                        }
	                        // Call the token contract for the metadata URL
	                        let metadataUrl = await contract[selector](tokenId);
	                        if (metadataUrl == null || metadataUrl === "0x") {
	                            linkage.push({ type: "!metadata-url", value: "" });
	                            return { url: null, linkage };
	                        }
	                        linkage.push({ type: "metadata-url-base", value: metadataUrl });
	                        // ERC-1155 allows a generic {id} in the URL
	                        if (scheme === "erc1155") {
	                            metadataUrl = metadataUrl.replace("{id}", (0, index_js_5.toBeHex)(tokenId, 32).substring(2));
	                            linkage.push({ type: "metadata-url-expanded", value: metadataUrl });
	                        }
	                        // Transform IPFS metadata links
	                        if (metadataUrl.match(/^ipfs:/i)) {
	                            metadataUrl = getIpfsLink(metadataUrl);
	                        }
	                        linkage.push({ type: "metadata-url", value: metadataUrl });
	                        // Get the token metadata
	                        let metadata = {};
	                        const response = await (new index_js_5.FetchRequest(metadataUrl)).send();
	                        response.assertOk();
	                        try {
	                            metadata = response.bodyJson;
	                        }
	                        catch (error) {
	                            try {
	                                linkage.push({ type: "!metadata", value: response.bodyText });
	                            }
	                            catch (error) {
	                                const bytes = response.body;
	                                if (bytes) {
	                                    linkage.push({ type: "!metadata", value: (0, index_js_5.hexlify)(bytes) });
	                                }
	                                return { url: null, linkage };
	                            }
	                            return { url: null, linkage };
	                        }
	                        if (!metadata) {
	                            linkage.push({ type: "!metadata", value: "" });
	                            return { url: null, linkage };
	                        }
	                        linkage.push({ type: "metadata", value: JSON.stringify(metadata) });
	                        // Pull the image URL out
	                        let imageUrl = metadata.image;
	                        if (typeof (imageUrl) !== "string") {
	                            linkage.push({ type: "!imageUrl", value: "" });
	                            return { url: null, linkage };
	                        }
	                        if (imageUrl.match(/^(https:\/\/|data:)/i)) {
	                            // Allow
	                        }
	                        else {
	                            // Transform IPFS link to gateway
	                            const ipfs = imageUrl.match(matcherIpfs);
	                            if (ipfs == null) {
	                                linkage.push({ type: "!imageUrl-ipfs", value: imageUrl });
	                                return { url: null, linkage };
	                            }
	                            linkage.push({ type: "imageUrl-ipfs", value: imageUrl });
	                            imageUrl = getIpfsLink(imageUrl);
	                        }
	                        linkage.push({ type: "url", value: imageUrl });
	                        return { linkage, url: imageUrl };
	                    }
	                }
	            }
	        }
	        catch (error) { }
	        return { linkage, url: null };
	    }
	    static async getEnsAddress(provider) {
	        const network = await provider.getNetwork();
	        const ensPlugin = network.getPlugin("org.ethers.plugins.network.Ens");
	        // No ENS...
	        (0, index_js_5.assert)(ensPlugin, "network does not support ENS", "UNSUPPORTED_OPERATION", {
	            operation: "getEnsAddress", info: { network }
	        });
	        return ensPlugin.address;
	    }
	    static async #getResolver(provider, name) {
	        const ensAddr = await EnsResolver.getEnsAddress(provider);
	        try {
	            const contract = new index_js_3.Contract(ensAddr, [
	                "function resolver(bytes32) view returns (address)"
	            ], provider);
	            const addr = await contract.resolver((0, index_js_4.namehash)(name), {
	                enableCcipRead: true
	            });
	            if (addr === index_js_2.ZeroAddress) {
	                return null;
	            }
	            return addr;
	        }
	        catch (error) {
	            // ENS registry cannot throw errors on resolver(bytes32),
	            // so probably a link error
	            throw error;
	        }
	        return null;
	    }
	    /**
	     *  Resolve to the ENS resolver for %%name%% using %%provider%% or
	     *  ``null`` if unconfigured.
	     */
	    static async fromName(provider, name) {
	        let currentName = name;
	        while (true) {
	            if (currentName === "" || currentName === ".") {
	                return null;
	            }
	            // Optimization since the eth node cannot change and does
	            // not have a wildcard resolver
	            if (name !== "eth" && currentName === "eth") {
	                return null;
	            }
	            // Check the current node for a resolver
	            const addr = await EnsResolver.#getResolver(provider, currentName);
	            // Found a resolver!
	            if (addr != null) {
	                const resolver = new EnsResolver(provider, addr, name);
	                // Legacy resolver found, using EIP-2544 so it isn't safe to use
	                if (currentName !== name && !(await resolver.supportsWildcard())) {
	                    return null;
	                }
	                return resolver;
	            }
	            // Get the parent node
	            currentName = currentName.split(".").slice(1).join(".");
	        }
	    }
	}
	ensResolver.EnsResolver = EnsResolver;
	
	return ensResolver;
}

var format = {};

var hasRequiredFormat;

function requireFormat () {
	if (hasRequiredFormat) return format;
	hasRequiredFormat = 1;
	Object.defineProperty(format, "__esModule", { value: true });
	format.formatTransactionResponse = format.formatTransactionReceipt = format.formatReceiptLog = format.formatBlock = format.formatLog = format.formatUint256 = format.formatHash = format.formatData = format.formatBoolean = format.object = format.arrayOf = format.allowNull = void 0;
	/**
	 *  @_ignore
	 */
	const index_js_1 = requireAddress$2();
	const index_js_2 = requireCrypto();
	const index_js_3 = requireTransaction();
	const index_js_4 = requireUtils$3();
	const BN_0 = BigInt(0);
	function allowNull(format, nullValue) {
	    return (function (value) {
	        if (value == null) {
	            return nullValue;
	        }
	        return format(value);
	    });
	}
	format.allowNull = allowNull;
	function arrayOf(format, allowNull) {
	    return ((array) => {
	        if (allowNull && array == null) {
	            return null;
	        }
	        if (!Array.isArray(array)) {
	            throw new Error("not an array");
	        }
	        return array.map((i) => format(i));
	    });
	}
	format.arrayOf = arrayOf;
	// Requires an object which matches a fleet of other formatters
	// Any FormatFunc may return `undefined` to have the value omitted
	// from the result object. Calls preserve `this`.
	function object(format, altNames) {
	    return ((value) => {
	        const result = {};
	        for (const key in format) {
	            let srcKey = key;
	            if (altNames && key in altNames && !(srcKey in value)) {
	                for (const altKey of altNames[key]) {
	                    if (altKey in value) {
	                        srcKey = altKey;
	                        break;
	                    }
	                }
	            }
	            try {
	                const nv = format[key](value[srcKey]);
	                if (nv !== undefined) {
	                    result[key] = nv;
	                }
	            }
	            catch (error) {
	                const message = (error instanceof Error) ? error.message : "not-an-error";
	                (0, index_js_4.assert)(false, `invalid value for value.${key} (${message})`, "BAD_DATA", { value });
	            }
	        }
	        return result;
	    });
	}
	format.object = object;
	function formatBoolean(value) {
	    switch (value) {
	        case true:
	        case "true":
	            return true;
	        case false:
	        case "false":
	            return false;
	    }
	    (0, index_js_4.assertArgument)(false, `invalid boolean; ${JSON.stringify(value)}`, "value", value);
	}
	format.formatBoolean = formatBoolean;
	function formatData(value) {
	    (0, index_js_4.assertArgument)((0, index_js_4.isHexString)(value, true), "invalid data", "value", value);
	    return value;
	}
	format.formatData = formatData;
	function formatHash(value) {
	    (0, index_js_4.assertArgument)((0, index_js_4.isHexString)(value, 32), "invalid hash", "value", value);
	    return value;
	}
	format.formatHash = formatHash;
	function formatUint256(value) {
	    if (!(0, index_js_4.isHexString)(value)) {
	        throw new Error("invalid uint256");
	    }
	    return (0, index_js_4.zeroPadValue)(value, 32);
	}
	format.formatUint256 = formatUint256;
	const _formatLog = object({
	    address: index_js_1.getAddress,
	    blockHash: formatHash,
	    blockNumber: index_js_4.getNumber,
	    data: formatData,
	    index: index_js_4.getNumber,
	    removed: allowNull(formatBoolean, false),
	    topics: arrayOf(formatHash),
	    transactionHash: formatHash,
	    transactionIndex: index_js_4.getNumber,
	}, {
	    index: ["logIndex"]
	});
	function formatLog(value) {
	    return _formatLog(value);
	}
	format.formatLog = formatLog;
	const _formatBlock = object({
	    hash: allowNull(formatHash),
	    parentHash: formatHash,
	    parentBeaconBlockRoot: allowNull(formatHash, null),
	    number: index_js_4.getNumber,
	    timestamp: index_js_4.getNumber,
	    nonce: allowNull(formatData),
	    difficulty: index_js_4.getBigInt,
	    gasLimit: index_js_4.getBigInt,
	    gasUsed: index_js_4.getBigInt,
	    stateRoot: allowNull(formatHash, null),
	    receiptsRoot: allowNull(formatHash, null),
	    blobGasUsed: allowNull(index_js_4.getBigInt, null),
	    excessBlobGas: allowNull(index_js_4.getBigInt, null),
	    miner: allowNull(index_js_1.getAddress),
	    extraData: formatData,
	    baseFeePerGas: allowNull(index_js_4.getBigInt)
	});
	function formatBlock(value) {
	    const result = _formatBlock(value);
	    result.transactions = value.transactions.map((tx) => {
	        if (typeof (tx) === "string") {
	            return tx;
	        }
	        return formatTransactionResponse(tx);
	    });
	    return result;
	}
	format.formatBlock = formatBlock;
	const _formatReceiptLog = object({
	    transactionIndex: index_js_4.getNumber,
	    blockNumber: index_js_4.getNumber,
	    transactionHash: formatHash,
	    address: index_js_1.getAddress,
	    topics: arrayOf(formatHash),
	    data: formatData,
	    index: index_js_4.getNumber,
	    blockHash: formatHash,
	}, {
	    index: ["logIndex"]
	});
	function formatReceiptLog(value) {
	    return _formatReceiptLog(value);
	}
	format.formatReceiptLog = formatReceiptLog;
	const _formatTransactionReceipt = object({
	    to: allowNull(index_js_1.getAddress, null),
	    from: allowNull(index_js_1.getAddress, null),
	    contractAddress: allowNull(index_js_1.getAddress, null),
	    // should be allowNull(hash), but broken-EIP-658 support is handled in receipt
	    index: index_js_4.getNumber,
	    root: allowNull(index_js_4.hexlify),
	    gasUsed: index_js_4.getBigInt,
	    blobGasUsed: allowNull(index_js_4.getBigInt, null),
	    logsBloom: allowNull(formatData),
	    blockHash: formatHash,
	    hash: formatHash,
	    logs: arrayOf(formatReceiptLog),
	    blockNumber: index_js_4.getNumber,
	    //confirmations: allowNull(getNumber, null),
	    cumulativeGasUsed: index_js_4.getBigInt,
	    effectiveGasPrice: allowNull(index_js_4.getBigInt),
	    blobGasPrice: allowNull(index_js_4.getBigInt, null),
	    status: allowNull(index_js_4.getNumber),
	    type: allowNull(index_js_4.getNumber, 0)
	}, {
	    effectiveGasPrice: ["gasPrice"],
	    hash: ["transactionHash"],
	    index: ["transactionIndex"],
	});
	function formatTransactionReceipt(value) {
	    return _formatTransactionReceipt(value);
	}
	format.formatTransactionReceipt = formatTransactionReceipt;
	function formatTransactionResponse(value) {
	    // Some clients (TestRPC) do strange things like return 0x0 for the
	    // 0 address; correct this to be a real address
	    if (value.to && (0, index_js_4.getBigInt)(value.to) === BN_0) {
	        value.to = "0x0000000000000000000000000000000000000000";
	    }
	    const result = object({
	        hash: formatHash,
	        // Some nodes do not return this, usually test nodes (like Ganache)
	        index: allowNull(index_js_4.getNumber, undefined),
	        type: (value) => {
	            if (value === "0x" || value == null) {
	                return 0;
	            }
	            return (0, index_js_4.getNumber)(value);
	        },
	        accessList: allowNull(index_js_3.accessListify, null),
	        blobVersionedHashes: allowNull(arrayOf(formatHash, true), null),
	        blockHash: allowNull(formatHash, null),
	        blockNumber: allowNull(index_js_4.getNumber, null),
	        transactionIndex: allowNull(index_js_4.getNumber, null),
	        from: index_js_1.getAddress,
	        // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas) must be set
	        gasPrice: allowNull(index_js_4.getBigInt),
	        maxPriorityFeePerGas: allowNull(index_js_4.getBigInt),
	        maxFeePerGas: allowNull(index_js_4.getBigInt),
	        maxFeePerBlobGas: allowNull(index_js_4.getBigInt, null),
	        gasLimit: index_js_4.getBigInt,
	        to: allowNull(index_js_1.getAddress, null),
	        value: index_js_4.getBigInt,
	        nonce: index_js_4.getNumber,
	        data: formatData,
	        creates: allowNull(index_js_1.getAddress, null),
	        chainId: allowNull(index_js_4.getBigInt, null)
	    }, {
	        data: ["input"],
	        gasLimit: ["gas"],
	        index: ["transactionIndex"]
	    })(value);
	    // If to and creates are empty, populate the creates from the value
	    if (result.to == null && result.creates == null) {
	        result.creates = (0, index_js_1.getCreateAddress)(result);
	    }
	    // @TODO: Check fee data
	    // Add an access list to supported transaction types
	    if ((value.type === 1 || value.type === 2) && value.accessList == null) {
	        result.accessList = [];
	    }
	    // Compute the signature
	    if (value.signature) {
	        result.signature = index_js_2.Signature.from(value.signature);
	    }
	    else {
	        result.signature = index_js_2.Signature.from(value);
	    }
	    // Some backends omit ChainId on legacy transactions, but we can compute it
	    if (result.chainId == null) {
	        const chainId = result.signature.legacyChainId;
	        if (chainId != null) {
	            result.chainId = chainId;
	        }
	    }
	    // @TODO: check chainID
	    /*
	    if (value.chainId != null) {
	        let chainId = value.chainId;

	        if (isHexString(chainId)) {
	            chainId = BigNumber.from(chainId).toNumber();
	        }

	        result.chainId = chainId;

	    } else {
	        let chainId = value.networkId;

	        // geth-etc returns chainId
	        if (chainId == null && result.v == null) {
	            chainId = value.chainId;
	        }

	        if (isHexString(chainId)) {
	            chainId = BigNumber.from(chainId).toNumber();
	        }

	        if (typeof(chainId) !== "number" && result.v != null) {
	            chainId = (result.v - 35) / 2;
	            if (chainId < 0) { chainId = 0; }
	            chainId = parseInt(chainId);
	        }

	        if (typeof(chainId) !== "number") { chainId = 0; }

	        result.chainId = chainId;
	    }
	    */
	    // 0x0000... should actually be null
	    if (result.blockHash && (0, index_js_4.getBigInt)(result.blockHash) === BN_0) {
	        result.blockHash = null;
	    }
	    return result;
	}
	format.formatTransactionResponse = formatTransactionResponse;
	
	return format;
}

var network = {};

var pluginsNetwork = {};

var hasRequiredPluginsNetwork;

function requirePluginsNetwork () {
	if (hasRequiredPluginsNetwork) return pluginsNetwork;
	hasRequiredPluginsNetwork = 1;
	Object.defineProperty(pluginsNetwork, "__esModule", { value: true });
	pluginsNetwork.FetchUrlFeeDataNetworkPlugin = pluginsNetwork.FeeDataNetworkPlugin = pluginsNetwork.EnsPlugin = pluginsNetwork.GasCostPlugin = pluginsNetwork.NetworkPlugin = void 0;
	const properties_js_1 = requireProperties();
	const index_js_1 = requireUtils$3();
	const EnsAddress = "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
	/**
	 *  A **NetworkPlugin** provides additional functionality on a [[Network]].
	 */
	class NetworkPlugin {
	    /**
	     *  The name of the plugin.
	     *
	     *  It is recommended to use reverse-domain-notation, which permits
	     *  unique names with a known authority as well as hierarchal entries.
	     */
	    name;
	    /**
	     *  Creates a new **NetworkPlugin**.
	     */
	    constructor(name) {
	        (0, properties_js_1.defineProperties)(this, { name });
	    }
	    /**
	     *  Creates a copy of this plugin.
	     */
	    clone() {
	        return new NetworkPlugin(this.name);
	    }
	}
	pluginsNetwork.NetworkPlugin = NetworkPlugin;
	/**
	 *  A **GasCostPlugin** allows a network to provide alternative values when
	 *  computing the intrinsic gas required for a transaction.
	 */
	class GasCostPlugin extends NetworkPlugin {
	    /**
	     *  The block number to treat these values as valid from.
	     *
	     *  This allows a hardfork to have updated values included as well as
	     *  mulutiple hardforks to be supported.
	     */
	    effectiveBlock;
	    /**
	     *  The transactions base fee.
	     */
	    txBase;
	    /**
	     *  The fee for creating a new account.
	     */
	    txCreate;
	    /**
	     *  The fee per zero-byte in the data.
	     */
	    txDataZero;
	    /**
	     *  The fee per non-zero-byte in the data.
	     */
	    txDataNonzero;
	    /**
	     *  The fee per storage key in the [[link-eip-2930]] access list.
	     */
	    txAccessListStorageKey;
	    /**
	     *  The fee per address in the [[link-eip-2930]] access list.
	     */
	    txAccessListAddress;
	    /**
	     *  Creates a new GasCostPlugin from %%effectiveBlock%% until the
	     *  latest block or another GasCostPlugin supercedes that block number,
	     *  with the associated %%costs%%.
	     */
	    constructor(effectiveBlock, costs) {
	        if (effectiveBlock == null) {
	            effectiveBlock = 0;
	        }
	        super(`org.ethers.network.plugins.GasCost#${(effectiveBlock || 0)}`);
	        const props = { effectiveBlock };
	        function set(name, nullish) {
	            let value = (costs || {})[name];
	            if (value == null) {
	                value = nullish;
	            }
	            (0, index_js_1.assertArgument)(typeof (value) === "number", `invalud value for ${name}`, "costs", costs);
	            props[name] = value;
	        }
	        set("txBase", 21000);
	        set("txCreate", 32000);
	        set("txDataZero", 4);
	        set("txDataNonzero", 16);
	        set("txAccessListStorageKey", 1900);
	        set("txAccessListAddress", 2400);
	        (0, properties_js_1.defineProperties)(this, props);
	    }
	    clone() {
	        return new GasCostPlugin(this.effectiveBlock, this);
	    }
	}
	pluginsNetwork.GasCostPlugin = GasCostPlugin;
	/**
	 *  An **EnsPlugin** allows a [[Network]] to specify the ENS Registry
	 *  Contract address and the target network to use when using that
	 *  contract.
	 *
	 *  Various testnets have their own instance of the contract to use, but
	 *  in general, the mainnet instance supports multi-chain addresses and
	 *  should be used.
	 */
	class EnsPlugin extends NetworkPlugin {
	    /**
	     *  The ENS Registrty Contract address.
	     */
	    address;
	    /**
	     *  The chain ID that the ENS contract lives on.
	     */
	    targetNetwork;
	    /**
	     *  Creates a new **EnsPlugin** connected to %%address%% on the
	     *  %%targetNetwork%%. The default ENS address and mainnet is used
	     *  if unspecified.
	     */
	    constructor(address, targetNetwork) {
	        super("org.ethers.plugins.network.Ens");
	        (0, properties_js_1.defineProperties)(this, {
	            address: (address || EnsAddress),
	            targetNetwork: ((targetNetwork == null) ? 1 : targetNetwork)
	        });
	    }
	    clone() {
	        return new EnsPlugin(this.address, this.targetNetwork);
	    }
	}
	pluginsNetwork.EnsPlugin = EnsPlugin;
	/**
	 *  A **FeeDataNetworkPlugin** allows a network to provide and alternate
	 *  means to specify its fee data.
	 *
	 *  For example, a network which does not support [[link-eip-1559]] may
	 *  choose to use a Gas Station site to approximate the gas price.
	 */
	class FeeDataNetworkPlugin extends NetworkPlugin {
	    #feeDataFunc;
	    /**
	     *  The fee data function provided to the constructor.
	     */
	    get feeDataFunc() {
	        return this.#feeDataFunc;
	    }
	    /**
	     *  Creates a new **FeeDataNetworkPlugin**.
	     */
	    constructor(feeDataFunc) {
	        super("org.ethers.plugins.network.FeeData");
	        this.#feeDataFunc = feeDataFunc;
	    }
	    /**
	     *  Resolves to the fee data.
	     */
	    async getFeeData(provider) {
	        return await this.#feeDataFunc(provider);
	    }
	    clone() {
	        return new FeeDataNetworkPlugin(this.#feeDataFunc);
	    }
	}
	pluginsNetwork.FeeDataNetworkPlugin = FeeDataNetworkPlugin;
	class FetchUrlFeeDataNetworkPlugin extends NetworkPlugin {
	    #url;
	    #processFunc;
	    /**
	     *  The URL to initialize the FetchRequest with in %%processFunc%%.
	     */
	    get url() { return this.#url; }
	    /**
	     *  The callback to use when computing the FeeData.
	     */
	    get processFunc() { return this.#processFunc; }
	    /**
	     *  Creates a new **FetchUrlFeeDataNetworkPlugin** which will
	     *  be used when computing the fee data for the network.
	     */
	    constructor(url, processFunc) {
	        super("org.ethers.plugins.network.FetchUrlFeeDataPlugin");
	        this.#url = url;
	        this.#processFunc = processFunc;
	    }
	    // We are immutable, so we can serve as our own clone
	    clone() { return this; }
	}
	pluginsNetwork.FetchUrlFeeDataNetworkPlugin = FetchUrlFeeDataNetworkPlugin;
	/*
	export class CustomBlockNetworkPlugin extends NetworkPlugin {
	    readonly #blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>;
	    readonly #blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>;

	    constructor(blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>, blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>) {
	        super("org.ethers.network-plugins.custom-block");
	        this.#blockFunc = blockFunc;
	        this.#blockWithTxsFunc = blockWithTxsFunc;
	    }

	    async getBlock(provider: Provider, block: BlockParams<string>): Promise<Block<string>> {
	        return await this.#blockFunc(provider, block);
	    }

	    async getBlockions(provider: Provider, block: BlockParams<TransactionResponseParams>): Promise<Block<TransactionResponse>> {
	        return await this.#blockWithTxsFunc(provider, block);
	    }

	    clone(): CustomBlockNetworkPlugin {
	        return new CustomBlockNetworkPlugin(this.#blockFunc, this.#blockWithTxsFunc);
	    }
	}
	*/
	
	return pluginsNetwork;
}

var hasRequiredNetwork;

function requireNetwork () {
	if (hasRequiredNetwork) return network;
	hasRequiredNetwork = 1;
	/**
	 *  A **Network** encapsulates the various properties required to
	 *  interact with a specific chain.
	 *
	 *  @_subsection: api/providers:Networks  [networks]
	 */
	Object.defineProperty(network, "__esModule", { value: true });
	network.Network = void 0;
	const index_js_1 = requireTransaction();
	const index_js_2 = requireUtils$3();
	const plugins_network_js_1 = requirePluginsNetwork();
	/* * * *
	// Networks which operation against an L2 can use this plugin to
	// specify how to access L1, for the purpose of resolving ENS,
	// for example.
	export class LayerOneConnectionPlugin extends NetworkPlugin {
	    readonly provider!: Provider;
	// @TODO: Rename to ChainAccess and allow for connecting to any chain
	    constructor(provider: Provider) {
	        super("org.ethers.plugins.layer-one-connection");
	        defineProperties<LayerOneConnectionPlugin>(this, { provider });
	    }

	    clone(): LayerOneConnectionPlugin {
	        return new LayerOneConnectionPlugin(this.provider);
	    }
	}
	*/
	const Networks = new Map();
	/**
	 *  A **Network** provides access to a chain's properties and allows
	 *  for plug-ins to extend functionality.
	 */
	class Network {
	    #name;
	    #chainId;
	    #plugins;
	    /**
	     *  Creates a new **Network** for %%name%% and %%chainId%%.
	     */
	    constructor(name, chainId) {
	        this.#name = name;
	        this.#chainId = (0, index_js_2.getBigInt)(chainId);
	        this.#plugins = new Map();
	    }
	    /**
	     *  Returns a JSON-compatible representation of a Network.
	     */
	    toJSON() {
	        return { name: this.name, chainId: String(this.chainId) };
	    }
	    /**
	     *  The network common name.
	     *
	     *  This is the canonical name, as networks migh have multiple
	     *  names.
	     */
	    get name() { return this.#name; }
	    set name(value) { this.#name = value; }
	    /**
	     *  The network chain ID.
	     */
	    get chainId() { return this.#chainId; }
	    set chainId(value) { this.#chainId = (0, index_js_2.getBigInt)(value, "chainId"); }
	    /**
	     *  Returns true if %%other%% matches this network. Any chain ID
	     *  must match, and if no chain ID is present, the name must match.
	     *
	     *  This method does not currently check for additional properties,
	     *  such as ENS address or plug-in compatibility.
	     */
	    matches(other) {
	        if (other == null) {
	            return false;
	        }
	        if (typeof (other) === "string") {
	            try {
	                return (this.chainId === (0, index_js_2.getBigInt)(other));
	            }
	            catch (error) { }
	            return (this.name === other);
	        }
	        if (typeof (other) === "number" || typeof (other) === "bigint") {
	            try {
	                return (this.chainId === (0, index_js_2.getBigInt)(other));
	            }
	            catch (error) { }
	            return false;
	        }
	        if (typeof (other) === "object") {
	            if (other.chainId != null) {
	                try {
	                    return (this.chainId === (0, index_js_2.getBigInt)(other.chainId));
	                }
	                catch (error) { }
	                return false;
	            }
	            if (other.name != null) {
	                return (this.name === other.name);
	            }
	            return false;
	        }
	        return false;
	    }
	    /**
	     *  Returns the list of plugins currently attached to this Network.
	     */
	    get plugins() {
	        return Array.from(this.#plugins.values());
	    }
	    /**
	     *  Attach a new %%plugin%% to this Network. The network name
	     *  must be unique, excluding any fragment.
	     */
	    attachPlugin(plugin) {
	        if (this.#plugins.get(plugin.name)) {
	            throw new Error(`cannot replace existing plugin: ${plugin.name} `);
	        }
	        this.#plugins.set(plugin.name, plugin.clone());
	        return this;
	    }
	    /**
	     *  Return the plugin, if any, matching %%name%% exactly. Plugins
	     *  with fragments will not be returned unless %%name%% includes
	     *  a fragment.
	     */
	    getPlugin(name) {
	        return (this.#plugins.get(name)) || null;
	    }
	    /**
	     *  Gets a list of all plugins that match %%name%%, with otr without
	     *  a fragment.
	     */
	    getPlugins(basename) {
	        return (this.plugins.filter((p) => (p.name.split("#")[0] === basename)));
	    }
	    /**
	     *  Create a copy of this Network.
	     */
	    clone() {
	        const clone = new Network(this.name, this.chainId);
	        this.plugins.forEach((plugin) => {
	            clone.attachPlugin(plugin.clone());
	        });
	        return clone;
	    }
	    /**
	     *  Compute the intrinsic gas required for a transaction.
	     *
	     *  A GasCostPlugin can be attached to override the default
	     *  values.
	     */
	    computeIntrinsicGas(tx) {
	        const costs = this.getPlugin("org.ethers.plugins.network.GasCost") || (new plugins_network_js_1.GasCostPlugin());
	        let gas = costs.txBase;
	        if (tx.to == null) {
	            gas += costs.txCreate;
	        }
	        if (tx.data) {
	            for (let i = 2; i < tx.data.length; i += 2) {
	                if (tx.data.substring(i, i + 2) === "00") {
	                    gas += costs.txDataZero;
	                }
	                else {
	                    gas += costs.txDataNonzero;
	                }
	            }
	        }
	        if (tx.accessList) {
	            const accessList = (0, index_js_1.accessListify)(tx.accessList);
	            for (const addr in accessList) {
	                gas += costs.txAccessListAddress + costs.txAccessListStorageKey * accessList[addr].storageKeys.length;
	            }
	        }
	        return gas;
	    }
	    /**
	     *  Returns a new Network for the %%network%% name or chainId.
	     */
	    static from(network) {
	        injectCommonNetworks();
	        // Default network
	        if (network == null) {
	            return Network.from("mainnet");
	        }
	        // Canonical name or chain ID
	        if (typeof (network) === "number") {
	            network = BigInt(network);
	        }
	        if (typeof (network) === "string" || typeof (network) === "bigint") {
	            const networkFunc = Networks.get(network);
	            if (networkFunc) {
	                return networkFunc();
	            }
	            if (typeof (network) === "bigint") {
	                return new Network("unknown", network);
	            }
	            (0, index_js_2.assertArgument)(false, "unknown network", "network", network);
	        }
	        // Clonable with network-like abilities
	        if (typeof (network.clone) === "function") {
	            const clone = network.clone();
	            //if (typeof(network.name) !== "string" || typeof(network.chainId) !== "number") {
	            //}
	            return clone;
	        }
	        // Networkish
	        if (typeof (network) === "object") {
	            (0, index_js_2.assertArgument)(typeof (network.name) === "string" && typeof (network.chainId) === "number", "invalid network object name or chainId", "network", network);
	            const custom = new Network((network.name), (network.chainId));
	            if (network.ensAddress || network.ensNetwork != null) {
	                custom.attachPlugin(new plugins_network_js_1.EnsPlugin(network.ensAddress, network.ensNetwork));
	            }
	            //if ((<any>network).layerOneConnection) {
	            //    custom.attachPlugin(new LayerOneConnectionPlugin((<any>network).layerOneConnection));
	            //}
	            return custom;
	        }
	        (0, index_js_2.assertArgument)(false, "invalid network", "network", network);
	    }
	    /**
	     *  Register %%nameOrChainId%% with a function which returns
	     *  an instance of a Network representing that chain.
	     */
	    static register(nameOrChainId, networkFunc) {
	        if (typeof (nameOrChainId) === "number") {
	            nameOrChainId = BigInt(nameOrChainId);
	        }
	        const existing = Networks.get(nameOrChainId);
	        if (existing) {
	            (0, index_js_2.assertArgument)(false, `conflicting network for ${JSON.stringify(existing.name)}`, "nameOrChainId", nameOrChainId);
	        }
	        Networks.set(nameOrChainId, networkFunc);
	    }
	}
	network.Network = Network;
	// We don't want to bring in formatUnits because it is backed by
	// FixedNumber and we want to keep Networks tiny. The values
	// included by the Gas Stations are also IEEE 754 with lots of
	// rounding issues and exceed the strict checks formatUnits has.
	function parseUnits(_value, decimals) {
	    const value = String(_value);
	    if (!value.match(/^[0-9.]+$/)) {
	        throw new Error(`invalid gwei value: ${_value}`);
	    }
	    // Break into [ whole, fraction ]
	    const comps = value.split(".");
	    if (comps.length === 1) {
	        comps.push("");
	    }
	    // More than 1 decimal point or too many fractional positions
	    if (comps.length !== 2) {
	        throw new Error(`invalid gwei value: ${_value}`);
	    }
	    // Pad the fraction to 9 decimalplaces
	    while (comps[1].length < decimals) {
	        comps[1] += "0";
	    }
	    // Too many decimals and some non-zero ending, take the ceiling
	    if (comps[1].length > 9) {
	        let frac = BigInt(comps[1].substring(0, 9));
	        if (!comps[1].substring(9).match(/^0+$/)) {
	            frac++;
	        }
	        comps[1] = frac.toString();
	    }
	    return BigInt(comps[0] + comps[1]);
	}
	// Used by Polygon to use a gas station for fee data
	function getGasStationPlugin(url) {
	    return new plugins_network_js_1.FetchUrlFeeDataNetworkPlugin(url, async (fetchFeeData, provider, request) => {
	        // Prevent Cloudflare from blocking our request in node.js
	        request.setHeader("User-Agent", "ethers");
	        let response;
	        try {
	            const [_response, _feeData] = await Promise.all([
	                request.send(), fetchFeeData()
	            ]);
	            response = _response;
	            const payload = response.bodyJson.standard;
	            const feeData = {
	                gasPrice: _feeData.gasPrice,
	                maxFeePerGas: parseUnits(payload.maxFee, 9),
	                maxPriorityFeePerGas: parseUnits(payload.maxPriorityFee, 9),
	            };
	            return feeData;
	        }
	        catch (error) {
	            (0, index_js_2.assert)(false, `error encountered with polygon gas station (${JSON.stringify(request.url)})`, "SERVER_ERROR", { request, response, error });
	        }
	    });
	}
	// See: https://chainlist.org
	let injected = false;
	function injectCommonNetworks() {
	    if (injected) {
	        return;
	    }
	    injected = true;
	    /// Register popular Ethereum networks
	    function registerEth(name, chainId, options) {
	        const func = function () {
	            const network = new Network(name, chainId);
	            // We use 0 to disable ENS
	            if (options.ensNetwork != null) {
	                network.attachPlugin(new plugins_network_js_1.EnsPlugin(null, options.ensNetwork));
	            }
	            network.attachPlugin(new plugins_network_js_1.GasCostPlugin());
	            (options.plugins || []).forEach((plugin) => {
	                network.attachPlugin(plugin);
	            });
	            return network;
	        };
	        // Register the network by name and chain ID
	        Network.register(name, func);
	        Network.register(chainId, func);
	        if (options.altNames) {
	            options.altNames.forEach((name) => {
	                Network.register(name, func);
	            });
	        }
	    }
	    registerEth("mainnet", 1, { ensNetwork: 1, altNames: ["homestead"] });
	    registerEth("ropsten", 3, { ensNetwork: 3 });
	    registerEth("rinkeby", 4, { ensNetwork: 4 });
	    registerEth("goerli", 5, { ensNetwork: 5 });
	    registerEth("kovan", 42, { ensNetwork: 42 });
	    registerEth("sepolia", 11155111, { ensNetwork: 11155111 });
	    registerEth("holesky", 17000, { ensNetwork: 17000 });
	    registerEth("classic", 61, {});
	    registerEth("classicKotti", 6, {});
	    registerEth("arbitrum", 42161, {
	        ensNetwork: 1,
	    });
	    registerEth("arbitrum-goerli", 421613, {});
	    registerEth("arbitrum-sepolia", 421614, {});
	    registerEth("base", 8453, { ensNetwork: 1 });
	    registerEth("base-goerli", 84531, {});
	    registerEth("base-sepolia", 84532, {});
	    registerEth("bnb", 56, { ensNetwork: 1 });
	    registerEth("bnbt", 97, {});
	    registerEth("linea", 59144, { ensNetwork: 1 });
	    registerEth("linea-goerli", 59140, {});
	    registerEth("matic", 137, {
	        ensNetwork: 1,
	        plugins: [
	            getGasStationPlugin("https:/\/gasstation.polygon.technology/v2")
	        ]
	    });
	    registerEth("matic-mumbai", 80001, {
	        altNames: ["maticMumbai", "maticmum"],
	        plugins: [
	            getGasStationPlugin("https:/\/gasstation-testnet.polygon.technology/v2")
	        ]
	    });
	    registerEth("optimism", 10, {
	        ensNetwork: 1,
	        plugins: []
	    });
	    registerEth("optimism-goerli", 420, {});
	    registerEth("optimism-sepolia", 11155420, {});
	    registerEth("xdai", 100, { ensNetwork: 1 });
	}
	
	return network;
}

var subscriberPolling = {};

var hasRequiredSubscriberPolling;

function requireSubscriberPolling () {
	if (hasRequiredSubscriberPolling) return subscriberPolling;
	hasRequiredSubscriberPolling = 1;
	Object.defineProperty(subscriberPolling, "__esModule", { value: true });
	subscriberPolling.PollingEventSubscriber = subscriberPolling.PollingTransactionSubscriber = subscriberPolling.PollingOrphanSubscriber = subscriberPolling.PollingBlockTagSubscriber = subscriberPolling.OnBlockSubscriber = subscriberPolling.PollingBlockSubscriber = subscriberPolling.getPollingSubscriber = void 0;
	const index_js_1 = requireUtils$3();
	function copy(obj) {
	    return JSON.parse(JSON.stringify(obj));
	}
	/**
	 *  Return the polling subscriber for common events.
	 *
	 *  @_docloc: api/providers/abstract-provider
	 */
	function getPollingSubscriber(provider, event) {
	    if (event === "block") {
	        return new PollingBlockSubscriber(provider);
	    }
	    if ((0, index_js_1.isHexString)(event, 32)) {
	        return new PollingTransactionSubscriber(provider, event);
	    }
	    (0, index_js_1.assert)(false, "unsupported polling event", "UNSUPPORTED_OPERATION", {
	        operation: "getPollingSubscriber", info: { event }
	    });
	}
	subscriberPolling.getPollingSubscriber = getPollingSubscriber;
	// @TODO: refactor this
	/**
	 *  A **PollingBlockSubscriber** polls at a regular interval for a change
	 *  in the block number.
	 *
	 *  @_docloc: api/providers/abstract-provider
	 */
	class PollingBlockSubscriber {
	    #provider;
	    #poller;
	    #interval;
	    // The most recent block we have scanned for events. The value -2
	    // indicates we still need to fetch an initial block number
	    #blockNumber;
	    /**
	     *  Create a new **PollingBlockSubscriber** attached to %%provider%%.
	     */
	    constructor(provider) {
	        this.#provider = provider;
	        this.#poller = null;
	        this.#interval = 4000;
	        this.#blockNumber = -2;
	    }
	    /**
	     *  The polling interval.
	     */
	    get pollingInterval() { return this.#interval; }
	    set pollingInterval(value) { this.#interval = value; }
	    async #poll() {
	        try {
	            const blockNumber = await this.#provider.getBlockNumber();
	            // Bootstrap poll to setup our initial block number
	            if (this.#blockNumber === -2) {
	                this.#blockNumber = blockNumber;
	                return;
	            }
	            // @TODO: Put a cap on the maximum number of events per loop?
	            if (blockNumber !== this.#blockNumber) {
	                for (let b = this.#blockNumber + 1; b <= blockNumber; b++) {
	                    // We have been stopped
	                    if (this.#poller == null) {
	                        return;
	                    }
	                    await this.#provider.emit("block", b);
	                }
	                this.#blockNumber = blockNumber;
	            }
	        }
	        catch (error) {
	            // @TODO: Minor bump, add an "error" event to let subscribers
	            //        know things went awry.
	            //console.log(error);
	        }
	        // We have been stopped
	        if (this.#poller == null) {
	            return;
	        }
	        this.#poller = this.#provider._setTimeout(this.#poll.bind(this), this.#interval);
	    }
	    start() {
	        if (this.#poller) {
	            return;
	        }
	        this.#poller = this.#provider._setTimeout(this.#poll.bind(this), this.#interval);
	        this.#poll();
	    }
	    stop() {
	        if (!this.#poller) {
	            return;
	        }
	        this.#provider._clearTimeout(this.#poller);
	        this.#poller = null;
	    }
	    pause(dropWhilePaused) {
	        this.stop();
	        if (dropWhilePaused) {
	            this.#blockNumber = -2;
	        }
	    }
	    resume() {
	        this.start();
	    }
	}
	subscriberPolling.PollingBlockSubscriber = PollingBlockSubscriber;
	/**
	 *  An **OnBlockSubscriber** can be sub-classed, with a [[_poll]]
	 *  implmentation which will be called on every new block.
	 *
	 *  @_docloc: api/providers/abstract-provider
	 */
	class OnBlockSubscriber {
	    #provider;
	    #poll;
	    #running;
	    /**
	     *  Create a new **OnBlockSubscriber** attached to %%provider%%.
	     */
	    constructor(provider) {
	        this.#provider = provider;
	        this.#running = false;
	        this.#poll = (blockNumber) => {
	            this._poll(blockNumber, this.#provider);
	        };
	    }
	    /**
	     *  Called on every new block.
	     */
	    async _poll(blockNumber, provider) {
	        throw new Error("sub-classes must override this");
	    }
	    start() {
	        if (this.#running) {
	            return;
	        }
	        this.#running = true;
	        this.#poll(-2);
	        this.#provider.on("block", this.#poll);
	    }
	    stop() {
	        if (!this.#running) {
	            return;
	        }
	        this.#running = false;
	        this.#provider.off("block", this.#poll);
	    }
	    pause(dropWhilePaused) { this.stop(); }
	    resume() { this.start(); }
	}
	subscriberPolling.OnBlockSubscriber = OnBlockSubscriber;
	class PollingBlockTagSubscriber extends OnBlockSubscriber {
	    #tag;
	    #lastBlock;
	    constructor(provider, tag) {
	        super(provider);
	        this.#tag = tag;
	        this.#lastBlock = -2;
	    }
	    pause(dropWhilePaused) {
	        if (dropWhilePaused) {
	            this.#lastBlock = -2;
	        }
	        super.pause(dropWhilePaused);
	    }
	    async _poll(blockNumber, provider) {
	        const block = await provider.getBlock(this.#tag);
	        if (block == null) {
	            return;
	        }
	        if (this.#lastBlock === -2) {
	            this.#lastBlock = block.number;
	        }
	        else if (block.number > this.#lastBlock) {
	            provider.emit(this.#tag, block.number);
	            this.#lastBlock = block.number;
	        }
	    }
	}
	subscriberPolling.PollingBlockTagSubscriber = PollingBlockTagSubscriber;
	/**
	 *  @_ignore:
	 *
	 *  @_docloc: api/providers/abstract-provider
	 */
	class PollingOrphanSubscriber extends OnBlockSubscriber {
	    #filter;
	    constructor(provider, filter) {
	        super(provider);
	        this.#filter = copy(filter);
	    }
	    async _poll(blockNumber, provider) {
	        throw new Error("@TODO");
	    }
	}
	subscriberPolling.PollingOrphanSubscriber = PollingOrphanSubscriber;
	/**
	 *  A **PollingTransactionSubscriber** will poll for a given transaction
	 *  hash for its receipt.
	 *
	 *  @_docloc: api/providers/abstract-provider
	 */
	class PollingTransactionSubscriber extends OnBlockSubscriber {
	    #hash;
	    /**
	     *  Create a new **PollingTransactionSubscriber** attached to
	     *  %%provider%%, listening for %%hash%%.
	     */
	    constructor(provider, hash) {
	        super(provider);
	        this.#hash = hash;
	    }
	    async _poll(blockNumber, provider) {
	        const tx = await provider.getTransactionReceipt(this.#hash);
	        if (tx) {
	            provider.emit(this.#hash, tx);
	        }
	    }
	}
	subscriberPolling.PollingTransactionSubscriber = PollingTransactionSubscriber;
	/**
	 *  A **PollingEventSubscriber** will poll for a given filter for its logs.
	 *
	 *  @_docloc: api/providers/abstract-provider
	 */
	class PollingEventSubscriber {
	    #provider;
	    #filter;
	    #poller;
	    #running;
	    // The most recent block we have scanned for events. The value -2
	    // indicates we still need to fetch an initial block number
	    #blockNumber;
	    /**
	     *  Create a new **PollingTransactionSubscriber** attached to
	     *  %%provider%%, listening for %%filter%%.
	     */
	    constructor(provider, filter) {
	        this.#provider = provider;
	        this.#filter = copy(filter);
	        this.#poller = this.#poll.bind(this);
	        this.#running = false;
	        this.#blockNumber = -2;
	    }
	    async #poll(blockNumber) {
	        // The initial block hasn't been determined yet
	        if (this.#blockNumber === -2) {
	            return;
	        }
	        const filter = copy(this.#filter);
	        filter.fromBlock = this.#blockNumber + 1;
	        filter.toBlock = blockNumber;
	        const logs = await this.#provider.getLogs(filter);
	        // No logs could just mean the node has not indexed them yet,
	        // so we keep a sliding window of 60 blocks to keep scanning
	        if (logs.length === 0) {
	            if (this.#blockNumber < blockNumber - 60) {
	                this.#blockNumber = blockNumber - 60;
	            }
	            return;
	        }
	        for (const log of logs) {
	            this.#provider.emit(this.#filter, log);
	            // Only advance the block number when logs were found to
	            // account for networks (like BNB and Polygon) which may
	            // sacrifice event consistency for block event speed
	            this.#blockNumber = log.blockNumber;
	        }
	    }
	    start() {
	        if (this.#running) {
	            return;
	        }
	        this.#running = true;
	        if (this.#blockNumber === -2) {
	            this.#provider.getBlockNumber().then((blockNumber) => {
	                this.#blockNumber = blockNumber;
	            });
	        }
	        this.#provider.on("block", this.#poller);
	    }
	    stop() {
	        if (!this.#running) {
	            return;
	        }
	        this.#running = false;
	        this.#provider.off("block", this.#poller);
	    }
	    pause(dropWhilePaused) {
	        this.stop();
	        if (dropWhilePaused) {
	            this.#blockNumber = -2;
	        }
	    }
	    resume() {
	        this.start();
	    }
	}
	subscriberPolling.PollingEventSubscriber = PollingEventSubscriber;
	
	return subscriberPolling;
}

var hasRequiredAbstractProvider;

function requireAbstractProvider () {
	if (hasRequiredAbstractProvider) return abstractProvider;
	hasRequiredAbstractProvider = 1;
	/**
	 *  The available providers should suffice for most developers purposes,
	 *  but the [[AbstractProvider]] class has many features which enable
	 *  sub-classing it for specific purposes.
	 *
	 *  @_section: api/providers/abstract-provider: Subclassing Provider  [abstract-provider]
	 */
	Object.defineProperty(abstractProvider, "__esModule", { value: true });
	abstractProvider.AbstractProvider = abstractProvider.UnmanagedSubscriber = void 0;
	// @TODO
	// Event coalescence
	//   When we register an event with an async value (e.g. address is a Signer
	//   or ENS name), we need to add it immeidately for the Event API, but also
	//   need time to resolve the address. Upon resolving the address, we need to
	//   migrate the listener to the static event. We also need to maintain a map
	//   of Signer/ENS name to address so we can sync respond to listenerCount.
	const index_js_1 = requireAddress$2();
	const index_js_2 = requireConstants$1();
	const index_js_3 = requireContract();
	const index_js_4 = requireHash();
	const index_js_5 = requireTransaction();
	const index_js_6 = requireUtils$3();
	const ens_resolver_js_1 = requireEnsResolver();
	const format_js_1 = requireFormat();
	const network_js_1 = requireNetwork();
	const provider_js_1 = requireProvider();
	const subscriber_polling_js_1 = requireSubscriberPolling();
	// Constants
	const BN_2 = BigInt(2);
	const MAX_CCIP_REDIRECTS = 10;
	function isPromise(value) {
	    return (value && typeof (value.then) === "function");
	}
	function getTag(prefix, value) {
	    return prefix + ":" + JSON.stringify(value, (k, v) => {
	        if (v == null) {
	            return "null";
	        }
	        if (typeof (v) === "bigint") {
	            return `bigint:${v.toString()}`;
	        }
	        if (typeof (v) === "string") {
	            return v.toLowerCase();
	        }
	        // Sort object keys
	        if (typeof (v) === "object" && !Array.isArray(v)) {
	            const keys = Object.keys(v);
	            keys.sort();
	            return keys.reduce((accum, key) => {
	                accum[key] = v[key];
	                return accum;
	            }, {});
	        }
	        return v;
	    });
	}
	/**
	 *  An **UnmanagedSubscriber** is useful for events which do not require
	 *  any additional management, such as ``"debug"`` which only requires
	 *  emit in synchronous event loop triggered calls.
	 */
	class UnmanagedSubscriber {
	    /**
	     *  The name fof the event.
	     */
	    name;
	    /**
	     *  Create a new UnmanagedSubscriber with %%name%%.
	     */
	    constructor(name) { (0, index_js_6.defineProperties)(this, { name }); }
	    start() { }
	    stop() { }
	    pause(dropWhilePaused) { }
	    resume() { }
	}
	abstractProvider.UnmanagedSubscriber = UnmanagedSubscriber;
	function copy(value) {
	    return JSON.parse(JSON.stringify(value));
	}
	function concisify(items) {
	    items = Array.from((new Set(items)).values());
	    items.sort();
	    return items;
	}
	async function getSubscription(_event, provider) {
	    if (_event == null) {
	        throw new Error("invalid event");
	    }
	    // Normalize topic array info an EventFilter
	    if (Array.isArray(_event)) {
	        _event = { topics: _event };
	    }
	    if (typeof (_event) === "string") {
	        switch (_event) {
	            case "block":
	            case "debug":
	            case "error":
	            case "finalized":
	            case "network":
	            case "pending":
	            case "safe": {
	                return { type: _event, tag: _event };
	            }
	        }
	    }
	    if ((0, index_js_6.isHexString)(_event, 32)) {
	        const hash = _event.toLowerCase();
	        return { type: "transaction", tag: getTag("tx", { hash }), hash };
	    }
	    if (_event.orphan) {
	        const event = _event;
	        // @TODO: Should lowercase and whatnot things here instead of copy...
	        return { type: "orphan", tag: getTag("orphan", event), filter: copy(event) };
	    }
	    if ((_event.address || _event.topics)) {
	        const event = _event;
	        const filter = {
	            topics: ((event.topics || []).map((t) => {
	                if (t == null) {
	                    return null;
	                }
	                if (Array.isArray(t)) {
	                    return concisify(t.map((t) => t.toLowerCase()));
	                }
	                return t.toLowerCase();
	            }))
	        };
	        if (event.address) {
	            const addresses = [];
	            const promises = [];
	            const addAddress = (addr) => {
	                if ((0, index_js_6.isHexString)(addr)) {
	                    addresses.push(addr);
	                }
	                else {
	                    promises.push((async () => {
	                        addresses.push(await (0, index_js_1.resolveAddress)(addr, provider));
	                    })());
	                }
	            };
	            if (Array.isArray(event.address)) {
	                event.address.forEach(addAddress);
	            }
	            else {
	                addAddress(event.address);
	            }
	            if (promises.length) {
	                await Promise.all(promises);
	            }
	            filter.address = concisify(addresses.map((a) => a.toLowerCase()));
	        }
	        return { filter, tag: getTag("event", filter), type: "event" };
	    }
	    (0, index_js_6.assertArgument)(false, "unknown ProviderEvent", "event", _event);
	}
	function getTime() { return (new Date()).getTime(); }
	const defaultOptions = {
	    cacheTimeout: 250,
	    pollingInterval: 4000
	};
	/**
	 *  An **AbstractProvider** provides a base class for other sub-classes to
	 *  implement the [[Provider]] API by normalizing input arguments and
	 *  formatting output results as well as tracking events for consistent
	 *  behaviour on an eventually-consistent network.
	 */
	class AbstractProvider {
	    #subs;
	    #plugins;
	    // null=unpaused, true=paused+dropWhilePaused, false=paused
	    #pausedState;
	    #destroyed;
	    #networkPromise;
	    #anyNetwork;
	    #performCache;
	    // The most recent block number if running an event or -1 if no "block" event
	    #lastBlockNumber;
	    #nextTimer;
	    #timers;
	    #disableCcipRead;
	    #options;
	    /**
	     *  Create a new **AbstractProvider** connected to %%network%%, or
	     *  use the various network detection capabilities to discover the
	     *  [[Network]] if necessary.
	     */
	    constructor(_network, options) {
	        this.#options = Object.assign({}, defaultOptions, options || {});
	        if (_network === "any") {
	            this.#anyNetwork = true;
	            this.#networkPromise = null;
	        }
	        else if (_network) {
	            const network = network_js_1.Network.from(_network);
	            this.#anyNetwork = false;
	            this.#networkPromise = Promise.resolve(network);
	            setTimeout(() => { this.emit("network", network, null); }, 0);
	        }
	        else {
	            this.#anyNetwork = false;
	            this.#networkPromise = null;
	        }
	        this.#lastBlockNumber = -1;
	        this.#performCache = new Map();
	        this.#subs = new Map();
	        this.#plugins = new Map();
	        this.#pausedState = null;
	        this.#destroyed = false;
	        this.#nextTimer = 1;
	        this.#timers = new Map();
	        this.#disableCcipRead = false;
	    }
	    get pollingInterval() { return this.#options.pollingInterval; }
	    /**
	     *  Returns ``this``, to allow an **AbstractProvider** to implement
	     *  the [[ContractRunner]] interface.
	     */
	    get provider() { return this; }
	    /**
	     *  Returns all the registered plug-ins.
	     */
	    get plugins() {
	        return Array.from(this.#plugins.values());
	    }
	    /**
	     *  Attach a new plug-in.
	     */
	    attachPlugin(plugin) {
	        if (this.#plugins.get(plugin.name)) {
	            throw new Error(`cannot replace existing plugin: ${plugin.name} `);
	        }
	        this.#plugins.set(plugin.name, plugin.connect(this));
	        return this;
	    }
	    /**
	     *  Get a plugin by name.
	     */
	    getPlugin(name) {
	        return (this.#plugins.get(name)) || null;
	    }
	    /**
	     *  Prevent any CCIP-read operation, regardless of whether requested
	     *  in a [[call]] using ``enableCcipRead``.
	     */
	    get disableCcipRead() { return this.#disableCcipRead; }
	    set disableCcipRead(value) { this.#disableCcipRead = !!value; }
	    // Shares multiple identical requests made during the same 250ms
	    async #perform(req) {
	        const timeout = this.#options.cacheTimeout;
	        // Caching disabled
	        if (timeout < 0) {
	            return await this._perform(req);
	        }
	        // Create a tag
	        const tag = getTag(req.method, req);
	        let perform = this.#performCache.get(tag);
	        if (!perform) {
	            perform = this._perform(req);
	            this.#performCache.set(tag, perform);
	            setTimeout(() => {
	                if (this.#performCache.get(tag) === perform) {
	                    this.#performCache.delete(tag);
	                }
	            }, timeout);
	        }
	        return await perform;
	    }
	    /**
	     *  Resolves to the data for executing the CCIP-read operations.
	     */
	    async ccipReadFetch(tx, calldata, urls) {
	        if (this.disableCcipRead || urls.length === 0 || tx.to == null) {
	            return null;
	        }
	        const sender = tx.to.toLowerCase();
	        const data = calldata.toLowerCase();
	        const errorMessages = [];
	        for (let i = 0; i < urls.length; i++) {
	            const url = urls[i];
	            // URL expansion
	            const href = url.replace("{sender}", sender).replace("{data}", data);
	            // If no {data} is present, use POST; otherwise GET
	            //const json: string | null = (url.indexOf("{data}") >= 0) ? null: JSON.stringify({ data, sender });
	            //const result = await fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {
	            //    value.status = response.statusCode;
	            //    return value;
	            //});
	            const request = new index_js_6.FetchRequest(href);
	            if (url.indexOf("{data}") === -1) {
	                request.body = { data, sender };
	            }
	            this.emit("debug", { action: "sendCcipReadFetchRequest", request, index: i, urls });
	            let errorMessage = "unknown error";
	            const resp = await request.send();
	            try {
	                const result = resp.bodyJson;
	                if (result.data) {
	                    this.emit("debug", { action: "receiveCcipReadFetchResult", request, result });
	                    return result.data;
	                }
	                if (result.message) {
	                    errorMessage = result.message;
	                }
	                this.emit("debug", { action: "receiveCcipReadFetchError", request, result });
	            }
	            catch (error) { }
	            // 4xx indicates the result is not present; stop
	            (0, index_js_6.assert)(resp.statusCode < 400 || resp.statusCode >= 500, `response not found during CCIP fetch: ${errorMessage}`, "OFFCHAIN_FAULT", { reason: "404_MISSING_RESOURCE", transaction: tx, info: { url, errorMessage } });
	            // 5xx indicates server issue; try the next url
	            errorMessages.push(errorMessage);
	        }
	        (0, index_js_6.assert)(false, `error encountered during CCIP fetch: ${errorMessages.map((m) => JSON.stringify(m)).join(", ")}`, "OFFCHAIN_FAULT", {
	            reason: "500_SERVER_ERROR",
	            transaction: tx, info: { urls, errorMessages }
	        });
	    }
	    /**
	     *  Provides the opportunity for a sub-class to wrap a block before
	     *  returning it, to add additional properties or an alternate
	     *  sub-class of [[Block]].
	     */
	    _wrapBlock(value, network) {
	        return new provider_js_1.Block((0, format_js_1.formatBlock)(value), this);
	    }
	    /**
	     *  Provides the opportunity for a sub-class to wrap a log before
	     *  returning it, to add additional properties or an alternate
	     *  sub-class of [[Log]].
	     */
	    _wrapLog(value, network) {
	        return new provider_js_1.Log((0, format_js_1.formatLog)(value), this);
	    }
	    /**
	     *  Provides the opportunity for a sub-class to wrap a transaction
	     *  receipt before returning it, to add additional properties or an
	     *  alternate sub-class of [[TransactionReceipt]].
	     */
	    _wrapTransactionReceipt(value, network) {
	        return new provider_js_1.TransactionReceipt((0, format_js_1.formatTransactionReceipt)(value), this);
	    }
	    /**
	     *  Provides the opportunity for a sub-class to wrap a transaction
	     *  response before returning it, to add additional properties or an
	     *  alternate sub-class of [[TransactionResponse]].
	     */
	    _wrapTransactionResponse(tx, network) {
	        return new provider_js_1.TransactionResponse((0, format_js_1.formatTransactionResponse)(tx), this);
	    }
	    /**
	     *  Resolves to the Network, forcing a network detection using whatever
	     *  technique the sub-class requires.
	     *
	     *  Sub-classes **must** override this.
	     */
	    _detectNetwork() {
	        (0, index_js_6.assert)(false, "sub-classes must implement this", "UNSUPPORTED_OPERATION", {
	            operation: "_detectNetwork"
	        });
	    }
	    /**
	     *  Sub-classes should use this to perform all built-in operations. All
	     *  methods sanitizes and normalizes the values passed into this.
	     *
	     *  Sub-classes **must** override this.
	     */
	    async _perform(req) {
	        (0, index_js_6.assert)(false, `unsupported method: ${req.method}`, "UNSUPPORTED_OPERATION", {
	            operation: req.method,
	            info: req
	        });
	    }
	    // State
	    async getBlockNumber() {
	        const blockNumber = (0, index_js_6.getNumber)(await this.#perform({ method: "getBlockNumber" }), "%response");
	        if (this.#lastBlockNumber >= 0) {
	            this.#lastBlockNumber = blockNumber;
	        }
	        return blockNumber;
	    }
	    /**
	     *  Returns or resolves to the address for %%address%%, resolving ENS
	     *  names and [[Addressable]] objects and returning if already an
	     *  address.
	     */
	    _getAddress(address) {
	        return (0, index_js_1.resolveAddress)(address, this);
	    }
	    /**
	     *  Returns or resolves to a valid block tag for %%blockTag%%, resolving
	     *  negative values and returning if already a valid block tag.
	     */
	    _getBlockTag(blockTag) {
	        if (blockTag == null) {
	            return "latest";
	        }
	        switch (blockTag) {
	            case "earliest":
	                return "0x0";
	            case "finalized":
	            case "latest":
	            case "pending":
	            case "safe":
	                return blockTag;
	        }
	        if ((0, index_js_6.isHexString)(blockTag)) {
	            if ((0, index_js_6.isHexString)(blockTag, 32)) {
	                return blockTag;
	            }
	            return (0, index_js_6.toQuantity)(blockTag);
	        }
	        if (typeof (blockTag) === "bigint") {
	            blockTag = (0, index_js_6.getNumber)(blockTag, "blockTag");
	        }
	        if (typeof (blockTag) === "number") {
	            if (blockTag >= 0) {
	                return (0, index_js_6.toQuantity)(blockTag);
	            }
	            if (this.#lastBlockNumber >= 0) {
	                return (0, index_js_6.toQuantity)(this.#lastBlockNumber + blockTag);
	            }
	            return this.getBlockNumber().then((b) => (0, index_js_6.toQuantity)(b + blockTag));
	        }
	        (0, index_js_6.assertArgument)(false, "invalid blockTag", "blockTag", blockTag);
	    }
	    /**
	     *  Returns or resolves to a filter for %%filter%%, resolving any ENS
	     *  names or [[Addressable]] object and returning if already a valid
	     *  filter.
	     */
	    _getFilter(filter) {
	        // Create a canonical representation of the topics
	        const topics = (filter.topics || []).map((t) => {
	            if (t == null) {
	                return null;
	            }
	            if (Array.isArray(t)) {
	                return concisify(t.map((t) => t.toLowerCase()));
	            }
	            return t.toLowerCase();
	        });
	        const blockHash = ("blockHash" in filter) ? filter.blockHash : undefined;
	        const resolve = (_address, fromBlock, toBlock) => {
	            let address = undefined;
	            switch (_address.length) {
	                case 0: break;
	                case 1:
	                    address = _address[0];
	                    break;
	                default:
	                    _address.sort();
	                    address = _address;
	            }
	            if (blockHash) {
	                if (fromBlock != null || toBlock != null) {
	                    throw new Error("invalid filter");
	                }
	            }
	            const filter = {};
	            if (address) {
	                filter.address = address;
	            }
	            if (topics.length) {
	                filter.topics = topics;
	            }
	            if (fromBlock) {
	                filter.fromBlock = fromBlock;
	            }
	            if (toBlock) {
	                filter.toBlock = toBlock;
	            }
	            if (blockHash) {
	                filter.blockHash = blockHash;
	            }
	            return filter;
	        };
	        // Addresses could be async (ENS names or Addressables)
	        let address = [];
	        if (filter.address) {
	            if (Array.isArray(filter.address)) {
	                for (const addr of filter.address) {
	                    address.push(this._getAddress(addr));
	                }
	            }
	            else {
	                address.push(this._getAddress(filter.address));
	            }
	        }
	        let fromBlock = undefined;
	        if ("fromBlock" in filter) {
	            fromBlock = this._getBlockTag(filter.fromBlock);
	        }
	        let toBlock = undefined;
	        if ("toBlock" in filter) {
	            toBlock = this._getBlockTag(filter.toBlock);
	        }
	        if (address.filter((a) => (typeof (a) !== "string")).length ||
	            (fromBlock != null && typeof (fromBlock) !== "string") ||
	            (toBlock != null && typeof (toBlock) !== "string")) {
	            return Promise.all([Promise.all(address), fromBlock, toBlock]).then((result) => {
	                return resolve(result[0], result[1], result[2]);
	            });
	        }
	        return resolve(address, fromBlock, toBlock);
	    }
	    /**
	     *  Returns or resovles to a transaction for %%request%%, resolving
	     *  any ENS names or [[Addressable]] and returning if already a valid
	     *  transaction.
	     */
	    _getTransactionRequest(_request) {
	        const request = (0, provider_js_1.copyRequest)(_request);
	        const promises = [];
	        ["to", "from"].forEach((key) => {
	            if (request[key] == null) {
	                return;
	            }
	            const addr = (0, index_js_1.resolveAddress)(request[key], this);
	            if (isPromise(addr)) {
	                promises.push((async function () { request[key] = await addr; })());
	            }
	            else {
	                request[key] = addr;
	            }
	        });
	        if (request.blockTag != null) {
	            const blockTag = this._getBlockTag(request.blockTag);
	            if (isPromise(blockTag)) {
	                promises.push((async function () { request.blockTag = await blockTag; })());
	            }
	            else {
	                request.blockTag = blockTag;
	            }
	        }
	        if (promises.length) {
	            return (async function () {
	                await Promise.all(promises);
	                return request;
	            })();
	        }
	        return request;
	    }
	    async getNetwork() {
	        // No explicit network was set and this is our first time
	        if (this.#networkPromise == null) {
	            // Detect the current network (shared with all calls)
	            const detectNetwork = (async () => {
	                try {
	                    const network = await this._detectNetwork();
	                    this.emit("network", network, null);
	                    return network;
	                }
	                catch (error) {
	                    if (this.#networkPromise === detectNetwork) {
	                        this.#networkPromise = null;
	                    }
	                    throw error;
	                }
	            })();
	            this.#networkPromise = detectNetwork;
	            return (await detectNetwork).clone();
	        }
	        const networkPromise = this.#networkPromise;
	        const [expected, actual] = await Promise.all([
	            networkPromise,
	            this._detectNetwork() // The actual connected network
	        ]);
	        if (expected.chainId !== actual.chainId) {
	            if (this.#anyNetwork) {
	                // The "any" network can change, so notify listeners
	                this.emit("network", actual, expected);
	                // Update the network if something else hasn't already changed it
	                if (this.#networkPromise === networkPromise) {
	                    this.#networkPromise = Promise.resolve(actual);
	                }
	            }
	            else {
	                // Otherwise, we do not allow changes to the underlying network
	                (0, index_js_6.assert)(false, `network changed: ${expected.chainId} => ${actual.chainId} `, "NETWORK_ERROR", {
	                    event: "changed"
	                });
	            }
	        }
	        return expected.clone();
	    }
	    async getFeeData() {
	        const network = await this.getNetwork();
	        const getFeeDataFunc = async () => {
	            const { _block, gasPrice, priorityFee } = await (0, index_js_6.resolveProperties)({
	                _block: this.#getBlock("latest", false),
	                gasPrice: ((async () => {
	                    try {
	                        const value = await this.#perform({ method: "getGasPrice" });
	                        return (0, index_js_6.getBigInt)(value, "%response");
	                    }
	                    catch (error) { }
	                    return null;
	                })()),
	                priorityFee: ((async () => {
	                    try {
	                        const value = await this.#perform({ method: "getPriorityFee" });
	                        return (0, index_js_6.getBigInt)(value, "%response");
	                    }
	                    catch (error) { }
	                    return null;
	                })())
	            });
	            let maxFeePerGas = null;
	            let maxPriorityFeePerGas = null;
	            // These are the recommended EIP-1559 heuristics for fee data
	            const block = this._wrapBlock(_block, network);
	            if (block && block.baseFeePerGas) {
	                maxPriorityFeePerGas = (priorityFee != null) ? priorityFee : BigInt("1000000000");
	                maxFeePerGas = (block.baseFeePerGas * BN_2) + maxPriorityFeePerGas;
	            }
	            return new provider_js_1.FeeData(gasPrice, maxFeePerGas, maxPriorityFeePerGas);
	        };
	        // Check for a FeeDataNetWorkPlugin
	        const plugin = network.getPlugin("org.ethers.plugins.network.FetchUrlFeeDataPlugin");
	        if (plugin) {
	            const req = new index_js_6.FetchRequest(plugin.url);
	            const feeData = await plugin.processFunc(getFeeDataFunc, this, req);
	            return new provider_js_1.FeeData(feeData.gasPrice, feeData.maxFeePerGas, feeData.maxPriorityFeePerGas);
	        }
	        return await getFeeDataFunc();
	    }
	    async estimateGas(_tx) {
	        let tx = this._getTransactionRequest(_tx);
	        if (isPromise(tx)) {
	            tx = await tx;
	        }
	        return (0, index_js_6.getBigInt)(await this.#perform({
	            method: "estimateGas", transaction: tx
	        }), "%response");
	    }
	    async #call(tx, blockTag, attempt) {
	        (0, index_js_6.assert)(attempt < MAX_CCIP_REDIRECTS, "CCIP read exceeded maximum redirections", "OFFCHAIN_FAULT", {
	            reason: "TOO_MANY_REDIRECTS",
	            transaction: Object.assign({}, tx, { blockTag, enableCcipRead: true })
	        });
	        // This came in as a PerformActionTransaction, so to/from are safe; we can cast
	        const transaction = (0, provider_js_1.copyRequest)(tx);
	        try {
	            return (0, index_js_6.hexlify)(await this._perform({ method: "call", transaction, blockTag }));
	        }
	        catch (error) {
	            // CCIP Read OffchainLookup
	            if (!this.disableCcipRead && (0, index_js_6.isCallException)(error) && error.data && attempt >= 0 && blockTag === "latest" && transaction.to != null && (0, index_js_6.dataSlice)(error.data, 0, 4) === "0x556f1830") {
	                const data = error.data;
	                const txSender = await (0, index_js_1.resolveAddress)(transaction.to, this);
	                // Parse the CCIP Read Arguments
	                let ccipArgs;
	                try {
	                    ccipArgs = parseOffchainLookup((0, index_js_6.dataSlice)(error.data, 4));
	                }
	                catch (error) {
	                    (0, index_js_6.assert)(false, error.message, "OFFCHAIN_FAULT", {
	                        reason: "BAD_DATA", transaction, info: { data }
	                    });
	                }
	                // Check the sender of the OffchainLookup matches the transaction
	                (0, index_js_6.assert)(ccipArgs.sender.toLowerCase() === txSender.toLowerCase(), "CCIP Read sender mismatch", "CALL_EXCEPTION", {
	                    action: "call",
	                    data,
	                    reason: "OffchainLookup",
	                    transaction: transaction,
	                    invocation: null,
	                    revert: {
	                        signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
	                        name: "OffchainLookup",
	                        args: ccipArgs.errorArgs
	                    }
	                });
	                const ccipResult = await this.ccipReadFetch(transaction, ccipArgs.calldata, ccipArgs.urls);
	                (0, index_js_6.assert)(ccipResult != null, "CCIP Read failed to fetch data", "OFFCHAIN_FAULT", {
	                    reason: "FETCH_FAILED", transaction, info: { data: error.data, errorArgs: ccipArgs.errorArgs }
	                });
	                const tx = {
	                    to: txSender,
	                    data: (0, index_js_6.concat)([ccipArgs.selector, encodeBytes([ccipResult, ccipArgs.extraData])])
	                };
	                this.emit("debug", { action: "sendCcipReadCall", transaction: tx });
	                try {
	                    const result = await this.#call(tx, blockTag, attempt + 1);
	                    this.emit("debug", { action: "receiveCcipReadCallResult", transaction: Object.assign({}, tx), result });
	                    return result;
	                }
	                catch (error) {
	                    this.emit("debug", { action: "receiveCcipReadCallError", transaction: Object.assign({}, tx), error });
	                    throw error;
	                }
	            }
	            throw error;
	        }
	    }
	    async #checkNetwork(promise) {
	        const { value } = await (0, index_js_6.resolveProperties)({
	            network: this.getNetwork(),
	            value: promise
	        });
	        return value;
	    }
	    async call(_tx) {
	        const { tx, blockTag } = await (0, index_js_6.resolveProperties)({
	            tx: this._getTransactionRequest(_tx),
	            blockTag: this._getBlockTag(_tx.blockTag)
	        });
	        return await this.#checkNetwork(this.#call(tx, blockTag, _tx.enableCcipRead ? 0 : -1));
	    }
	    // Account
	    async #getAccountValue(request, _address, _blockTag) {
	        let address = this._getAddress(_address);
	        let blockTag = this._getBlockTag(_blockTag);
	        if (typeof (address) !== "string" || typeof (blockTag) !== "string") {
	            [address, blockTag] = await Promise.all([address, blockTag]);
	        }
	        return await this.#checkNetwork(this.#perform(Object.assign(request, { address, blockTag })));
	    }
	    async getBalance(address, blockTag) {
	        return (0, index_js_6.getBigInt)(await this.#getAccountValue({ method: "getBalance" }, address, blockTag), "%response");
	    }
	    async getTransactionCount(address, blockTag) {
	        return (0, index_js_6.getNumber)(await this.#getAccountValue({ method: "getTransactionCount" }, address, blockTag), "%response");
	    }
	    async getCode(address, blockTag) {
	        return (0, index_js_6.hexlify)(await this.#getAccountValue({ method: "getCode" }, address, blockTag));
	    }
	    async getStorage(address, _position, blockTag) {
	        const position = (0, index_js_6.getBigInt)(_position, "position");
	        return (0, index_js_6.hexlify)(await this.#getAccountValue({ method: "getStorage", position }, address, blockTag));
	    }
	    // Write
	    async broadcastTransaction(signedTx) {
	        const { blockNumber, hash, network } = await (0, index_js_6.resolveProperties)({
	            blockNumber: this.getBlockNumber(),
	            hash: this._perform({
	                method: "broadcastTransaction",
	                signedTransaction: signedTx
	            }),
	            network: this.getNetwork()
	        });
	        const tx = index_js_5.Transaction.from(signedTx);
	        if (tx.hash !== hash) {
	            throw new Error("@TODO: the returned hash did not match");
	        }
	        return this._wrapTransactionResponse(tx, network).replaceableTransaction(blockNumber);
	    }
	    async #getBlock(block, includeTransactions) {
	        // @TODO: Add CustomBlockPlugin check
	        if ((0, index_js_6.isHexString)(block, 32)) {
	            return await this.#perform({
	                method: "getBlock", blockHash: block, includeTransactions
	            });
	        }
	        let blockTag = this._getBlockTag(block);
	        if (typeof (blockTag) !== "string") {
	            blockTag = await blockTag;
	        }
	        return await this.#perform({
	            method: "getBlock", blockTag, includeTransactions
	        });
	    }
	    // Queries
	    async getBlock(block, prefetchTxs) {
	        const { network, params } = await (0, index_js_6.resolveProperties)({
	            network: this.getNetwork(),
	            params: this.#getBlock(block, !!prefetchTxs)
	        });
	        if (params == null) {
	            return null;
	        }
	        return this._wrapBlock(params, network);
	    }
	    async getTransaction(hash) {
	        const { network, params } = await (0, index_js_6.resolveProperties)({
	            network: this.getNetwork(),
	            params: this.#perform({ method: "getTransaction", hash })
	        });
	        if (params == null) {
	            return null;
	        }
	        return this._wrapTransactionResponse(params, network);
	    }
	    async getTransactionReceipt(hash) {
	        const { network, params } = await (0, index_js_6.resolveProperties)({
	            network: this.getNetwork(),
	            params: this.#perform({ method: "getTransactionReceipt", hash })
	        });
	        if (params == null) {
	            return null;
	        }
	        // Some backends did not backfill the effectiveGasPrice into old transactions
	        // in the receipt, so we look it up manually and inject it.
	        if (params.gasPrice == null && params.effectiveGasPrice == null) {
	            const tx = await this.#perform({ method: "getTransaction", hash });
	            if (tx == null) {
	                throw new Error("report this; could not find tx or effectiveGasPrice");
	            }
	            params.effectiveGasPrice = tx.gasPrice;
	        }
	        return this._wrapTransactionReceipt(params, network);
	    }
	    async getTransactionResult(hash) {
	        const { result } = await (0, index_js_6.resolveProperties)({
	            network: this.getNetwork(),
	            result: this.#perform({ method: "getTransactionResult", hash })
	        });
	        if (result == null) {
	            return null;
	        }
	        return (0, index_js_6.hexlify)(result);
	    }
	    // Bloom-filter Queries
	    async getLogs(_filter) {
	        let filter = this._getFilter(_filter);
	        if (isPromise(filter)) {
	            filter = await filter;
	        }
	        const { network, params } = await (0, index_js_6.resolveProperties)({
	            network: this.getNetwork(),
	            params: this.#perform({ method: "getLogs", filter })
	        });
	        return params.map((p) => this._wrapLog(p, network));
	    }
	    // ENS
	    _getProvider(chainId) {
	        (0, index_js_6.assert)(false, "provider cannot connect to target network", "UNSUPPORTED_OPERATION", {
	            operation: "_getProvider()"
	        });
	    }
	    async getResolver(name) {
	        return await ens_resolver_js_1.EnsResolver.fromName(this, name);
	    }
	    async getAvatar(name) {
	        const resolver = await this.getResolver(name);
	        if (resolver) {
	            return await resolver.getAvatar();
	        }
	        return null;
	    }
	    async resolveName(name) {
	        const resolver = await this.getResolver(name);
	        if (resolver) {
	            return await resolver.getAddress();
	        }
	        return null;
	    }
	    async lookupAddress(address) {
	        address = (0, index_js_1.getAddress)(address);
	        const node = (0, index_js_4.namehash)(address.substring(2).toLowerCase() + ".addr.reverse");
	        try {
	            const ensAddr = await ens_resolver_js_1.EnsResolver.getEnsAddress(this);
	            const ensContract = new index_js_3.Contract(ensAddr, [
	                "function resolver(bytes32) view returns (address)"
	            ], this);
	            const resolver = await ensContract.resolver(node);
	            if (resolver == null || resolver === index_js_2.ZeroAddress) {
	                return null;
	            }
	            const resolverContract = new index_js_3.Contract(resolver, [
	                "function name(bytes32) view returns (string)"
	            ], this);
	            const name = await resolverContract.name(node);
	            // Failed forward resolution
	            const check = await this.resolveName(name);
	            if (check !== address) {
	                return null;
	            }
	            return name;
	        }
	        catch (error) {
	            // No data was returned from the resolver
	            if ((0, index_js_6.isError)(error, "BAD_DATA") && error.value === "0x") {
	                return null;
	            }
	            // Something reerted
	            if ((0, index_js_6.isError)(error, "CALL_EXCEPTION")) {
	                return null;
	            }
	            throw error;
	        }
	        return null;
	    }
	    async waitForTransaction(hash, _confirms, timeout) {
	        const confirms = (_confirms != null) ? _confirms : 1;
	        if (confirms === 0) {
	            return this.getTransactionReceipt(hash);
	        }
	        return new Promise(async (resolve, reject) => {
	            let timer = null;
	            const listener = (async (blockNumber) => {
	                try {
	                    const receipt = await this.getTransactionReceipt(hash);
	                    if (receipt != null) {
	                        if (blockNumber - receipt.blockNumber + 1 >= confirms) {
	                            resolve(receipt);
	                            //this.off("block", listener);
	                            if (timer) {
	                                clearTimeout(timer);
	                                timer = null;
	                            }
	                            return;
	                        }
	                    }
	                }
	                catch (error) {
	                    console.log("EEE", error);
	                }
	                this.once("block", listener);
	            });
	            if (timeout != null) {
	                timer = setTimeout(() => {
	                    if (timer == null) {
	                        return;
	                    }
	                    timer = null;
	                    this.off("block", listener);
	                    reject((0, index_js_6.makeError)("timeout", "TIMEOUT", { reason: "timeout" }));
	                }, timeout);
	            }
	            listener(await this.getBlockNumber());
	        });
	    }
	    async waitForBlock(blockTag) {
	        (0, index_js_6.assert)(false, "not implemented yet", "NOT_IMPLEMENTED", {
	            operation: "waitForBlock"
	        });
	    }
	    /**
	     *  Clear a timer created using the [[_setTimeout]] method.
	     */
	    _clearTimeout(timerId) {
	        const timer = this.#timers.get(timerId);
	        if (!timer) {
	            return;
	        }
	        if (timer.timer) {
	            clearTimeout(timer.timer);
	        }
	        this.#timers.delete(timerId);
	    }
	    /**
	     *  Create a timer that will execute %%func%% after at least %%timeout%%
	     *  (in ms). If %%timeout%% is unspecified, then %%func%% will execute
	     *  in the next event loop.
	     *
	     *  [Pausing](AbstractProvider-paused) the provider will pause any
	     *  associated timers.
	     */
	    _setTimeout(_func, timeout) {
	        if (timeout == null) {
	            timeout = 0;
	        }
	        const timerId = this.#nextTimer++;
	        const func = () => {
	            this.#timers.delete(timerId);
	            _func();
	        };
	        if (this.paused) {
	            this.#timers.set(timerId, { timer: null, func, time: timeout });
	        }
	        else {
	            const timer = setTimeout(func, timeout);
	            this.#timers.set(timerId, { timer, func, time: getTime() });
	        }
	        return timerId;
	    }
	    /**
	     *  Perform %%func%% on each subscriber.
	     */
	    _forEachSubscriber(func) {
	        for (const sub of this.#subs.values()) {
	            func(sub.subscriber);
	        }
	    }
	    /**
	     *  Sub-classes may override this to customize subscription
	     *  implementations.
	     */
	    _getSubscriber(sub) {
	        switch (sub.type) {
	            case "debug":
	            case "error":
	            case "network":
	                return new UnmanagedSubscriber(sub.type);
	            case "block": {
	                const subscriber = new subscriber_polling_js_1.PollingBlockSubscriber(this);
	                subscriber.pollingInterval = this.pollingInterval;
	                return subscriber;
	            }
	            case "safe":
	            case "finalized":
	                return new subscriber_polling_js_1.PollingBlockTagSubscriber(this, sub.type);
	            case "event":
	                return new subscriber_polling_js_1.PollingEventSubscriber(this, sub.filter);
	            case "transaction":
	                return new subscriber_polling_js_1.PollingTransactionSubscriber(this, sub.hash);
	            case "orphan":
	                return new subscriber_polling_js_1.PollingOrphanSubscriber(this, sub.filter);
	        }
	        throw new Error(`unsupported event: ${sub.type}`);
	    }
	    /**
	     *  If a [[Subscriber]] fails and needs to replace itself, this
	     *  method may be used.
	     *
	     *  For example, this is used for providers when using the
	     *  ``eth_getFilterChanges`` method, which can return null if state
	     *  filters are not supported by the backend, allowing the Subscriber
	     *  to swap in a [[PollingEventSubscriber]].
	     */
	    _recoverSubscriber(oldSub, newSub) {
	        for (const sub of this.#subs.values()) {
	            if (sub.subscriber === oldSub) {
	                if (sub.started) {
	                    sub.subscriber.stop();
	                }
	                sub.subscriber = newSub;
	                if (sub.started) {
	                    newSub.start();
	                }
	                if (this.#pausedState != null) {
	                    newSub.pause(this.#pausedState);
	                }
	                break;
	            }
	        }
	    }
	    async #hasSub(event, emitArgs) {
	        let sub = await getSubscription(event, this);
	        // This is a log that is removing an existing log; we actually want
	        // to emit an orphan event for the removed log
	        if (sub.type === "event" && emitArgs && emitArgs.length > 0 && emitArgs[0].removed === true) {
	            sub = await getSubscription({ orphan: "drop-log", log: emitArgs[0] }, this);
	        }
	        return this.#subs.get(sub.tag) || null;
	    }
	    async #getSub(event) {
	        const subscription = await getSubscription(event, this);
	        // Prevent tampering with our tag in any subclass' _getSubscriber
	        const tag = subscription.tag;
	        let sub = this.#subs.get(tag);
	        if (!sub) {
	            const subscriber = this._getSubscriber(subscription);
	            const addressableMap = new WeakMap();
	            const nameMap = new Map();
	            sub = { subscriber, tag, addressableMap, nameMap, started: false, listeners: [] };
	            this.#subs.set(tag, sub);
	        }
	        return sub;
	    }
	    async on(event, listener) {
	        const sub = await this.#getSub(event);
	        sub.listeners.push({ listener, once: false });
	        if (!sub.started) {
	            sub.subscriber.start();
	            sub.started = true;
	            if (this.#pausedState != null) {
	                sub.subscriber.pause(this.#pausedState);
	            }
	        }
	        return this;
	    }
	    async once(event, listener) {
	        const sub = await this.#getSub(event);
	        sub.listeners.push({ listener, once: true });
	        if (!sub.started) {
	            sub.subscriber.start();
	            sub.started = true;
	            if (this.#pausedState != null) {
	                sub.subscriber.pause(this.#pausedState);
	            }
	        }
	        return this;
	    }
	    async emit(event, ...args) {
	        const sub = await this.#hasSub(event, args);
	        // If there is not subscription or if a recent emit removed
	        // the last of them (which also deleted the sub) do nothing
	        if (!sub || sub.listeners.length === 0) {
	            return false;
	        }
	        const count = sub.listeners.length;
	        sub.listeners = sub.listeners.filter(({ listener, once }) => {
	            const payload = new index_js_6.EventPayload(this, (once ? null : listener), event);
	            try {
	                listener.call(this, ...args, payload);
	            }
	            catch (error) { }
	            return !once;
	        });
	        if (sub.listeners.length === 0) {
	            if (sub.started) {
	                sub.subscriber.stop();
	            }
	            this.#subs.delete(sub.tag);
	        }
	        return (count > 0);
	    }
	    async listenerCount(event) {
	        if (event) {
	            const sub = await this.#hasSub(event);
	            if (!sub) {
	                return 0;
	            }
	            return sub.listeners.length;
	        }
	        let total = 0;
	        for (const { listeners } of this.#subs.values()) {
	            total += listeners.length;
	        }
	        return total;
	    }
	    async listeners(event) {
	        if (event) {
	            const sub = await this.#hasSub(event);
	            if (!sub) {
	                return [];
	            }
	            return sub.listeners.map(({ listener }) => listener);
	        }
	        let result = [];
	        for (const { listeners } of this.#subs.values()) {
	            result = result.concat(listeners.map(({ listener }) => listener));
	        }
	        return result;
	    }
	    async off(event, listener) {
	        const sub = await this.#hasSub(event);
	        if (!sub) {
	            return this;
	        }
	        if (listener) {
	            const index = sub.listeners.map(({ listener }) => listener).indexOf(listener);
	            if (index >= 0) {
	                sub.listeners.splice(index, 1);
	            }
	        }
	        if (!listener || sub.listeners.length === 0) {
	            if (sub.started) {
	                sub.subscriber.stop();
	            }
	            this.#subs.delete(sub.tag);
	        }
	        return this;
	    }
	    async removeAllListeners(event) {
	        if (event) {
	            const { tag, started, subscriber } = await this.#getSub(event);
	            if (started) {
	                subscriber.stop();
	            }
	            this.#subs.delete(tag);
	        }
	        else {
	            for (const [tag, { started, subscriber }] of this.#subs) {
	                if (started) {
	                    subscriber.stop();
	                }
	                this.#subs.delete(tag);
	            }
	        }
	        return this;
	    }
	    // Alias for "on"
	    async addListener(event, listener) {
	        return await this.on(event, listener);
	    }
	    // Alias for "off"
	    async removeListener(event, listener) {
	        return this.off(event, listener);
	    }
	    /**
	     *  If this provider has been destroyed using the [[destroy]] method.
	     *
	     *  Once destroyed, all resources are reclaimed, internal event loops
	     *  and timers are cleaned up and no further requests may be sent to
	     *  the provider.
	     */
	    get destroyed() {
	        return this.#destroyed;
	    }
	    /**
	     *  Sub-classes may use this to shutdown any sockets or release their
	     *  resources and reject any pending requests.
	     *
	     *  Sub-classes **must** call ``super.destroy()``.
	     */
	    destroy() {
	        // Stop all listeners
	        this.removeAllListeners();
	        // Shut down all tiemrs
	        for (const timerId of this.#timers.keys()) {
	            this._clearTimeout(timerId);
	        }
	        this.#destroyed = true;
	    }
	    /**
	     *  Whether the provider is currently paused.
	     *
	     *  A paused provider will not emit any events, and generally should
	     *  not make any requests to the network, but that is up to sub-classes
	     *  to manage.
	     *
	     *  Setting ``paused = true`` is identical to calling ``.pause(false)``,
	     *  which will buffer any events that occur while paused until the
	     *  provider is unpaused.
	     */
	    get paused() { return (this.#pausedState != null); }
	    set paused(pause) {
	        if (!!pause === this.paused) {
	            return;
	        }
	        if (this.paused) {
	            this.resume();
	        }
	        else {
	            this.pause(false);
	        }
	    }
	    /**
	     *  Pause the provider. If %%dropWhilePaused%%, any events that occur
	     *  while paused are dropped, otherwise all events will be emitted once
	     *  the provider is unpaused.
	     */
	    pause(dropWhilePaused) {
	        this.#lastBlockNumber = -1;
	        if (this.#pausedState != null) {
	            if (this.#pausedState == !!dropWhilePaused) {
	                return;
	            }
	            (0, index_js_6.assert)(false, "cannot change pause type; resume first", "UNSUPPORTED_OPERATION", {
	                operation: "pause"
	            });
	        }
	        this._forEachSubscriber((s) => s.pause(dropWhilePaused));
	        this.#pausedState = !!dropWhilePaused;
	        for (const timer of this.#timers.values()) {
	            // Clear the timer
	            if (timer.timer) {
	                clearTimeout(timer.timer);
	            }
	            // Remaining time needed for when we become unpaused
	            timer.time = getTime() - timer.time;
	        }
	    }
	    /**
	     *  Resume the provider.
	     */
	    resume() {
	        if (this.#pausedState == null) {
	            return;
	        }
	        this._forEachSubscriber((s) => s.resume());
	        this.#pausedState = null;
	        for (const timer of this.#timers.values()) {
	            // Remaining time when we were paused
	            let timeout = timer.time;
	            if (timeout < 0) {
	                timeout = 0;
	            }
	            // Start time (in cause paused, so we con compute remaininf time)
	            timer.time = getTime();
	            // Start the timer
	            setTimeout(timer.func, timeout);
	        }
	    }
	}
	abstractProvider.AbstractProvider = AbstractProvider;
	function _parseString(result, start) {
	    try {
	        const bytes = _parseBytes(result, start);
	        if (bytes) {
	            return (0, index_js_6.toUtf8String)(bytes);
	        }
	    }
	    catch (error) { }
	    return null;
	}
	function _parseBytes(result, start) {
	    if (result === "0x") {
	        return null;
	    }
	    try {
	        const offset = (0, index_js_6.getNumber)((0, index_js_6.dataSlice)(result, start, start + 32));
	        const length = (0, index_js_6.getNumber)((0, index_js_6.dataSlice)(result, offset, offset + 32));
	        return (0, index_js_6.dataSlice)(result, offset + 32, offset + 32 + length);
	    }
	    catch (error) { }
	    return null;
	}
	function numPad(value) {
	    const result = (0, index_js_6.toBeArray)(value);
	    if (result.length > 32) {
	        throw new Error("internal; should not happen");
	    }
	    const padded = new Uint8Array(32);
	    padded.set(result, 32 - result.length);
	    return padded;
	}
	function bytesPad(value) {
	    if ((value.length % 32) === 0) {
	        return value;
	    }
	    const result = new Uint8Array(Math.ceil(value.length / 32) * 32);
	    result.set(value);
	    return result;
	}
	const empty = new Uint8Array([]);
	// ABI Encodes a series of (bytes, bytes, ...)
	function encodeBytes(datas) {
	    const result = [];
	    let byteCount = 0;
	    // Add place-holders for pointers as we add items
	    for (let i = 0; i < datas.length; i++) {
	        result.push(empty);
	        byteCount += 32;
	    }
	    for (let i = 0; i < datas.length; i++) {
	        const data = (0, index_js_6.getBytes)(datas[i]);
	        // Update the bytes offset
	        result[i] = numPad(byteCount);
	        // The length and padded value of data
	        result.push(numPad(data.length));
	        result.push(bytesPad(data));
	        byteCount += 32 + Math.ceil(data.length / 32) * 32;
	    }
	    return (0, index_js_6.concat)(result);
	}
	const zeros = "0x0000000000000000000000000000000000000000000000000000000000000000";
	function parseOffchainLookup(data) {
	    const result = {
	        sender: "", urls: [], calldata: "", selector: "", extraData: "", errorArgs: []
	    };
	    (0, index_js_6.assert)((0, index_js_6.dataLength)(data) >= 5 * 32, "insufficient OffchainLookup data", "OFFCHAIN_FAULT", {
	        reason: "insufficient OffchainLookup data"
	    });
	    const sender = (0, index_js_6.dataSlice)(data, 0, 32);
	    (0, index_js_6.assert)((0, index_js_6.dataSlice)(sender, 0, 12) === (0, index_js_6.dataSlice)(zeros, 0, 12), "corrupt OffchainLookup sender", "OFFCHAIN_FAULT", {
	        reason: "corrupt OffchainLookup sender"
	    });
	    result.sender = (0, index_js_6.dataSlice)(sender, 12);
	    // Read the URLs from the response
	    try {
	        const urls = [];
	        const urlsOffset = (0, index_js_6.getNumber)((0, index_js_6.dataSlice)(data, 32, 64));
	        const urlsLength = (0, index_js_6.getNumber)((0, index_js_6.dataSlice)(data, urlsOffset, urlsOffset + 32));
	        const urlsData = (0, index_js_6.dataSlice)(data, urlsOffset + 32);
	        for (let u = 0; u < urlsLength; u++) {
	            const url = _parseString(urlsData, u * 32);
	            if (url == null) {
	                throw new Error("abort");
	            }
	            urls.push(url);
	        }
	        result.urls = urls;
	    }
	    catch (error) {
	        (0, index_js_6.assert)(false, "corrupt OffchainLookup urls", "OFFCHAIN_FAULT", {
	            reason: "corrupt OffchainLookup urls"
	        });
	    }
	    // Get the CCIP calldata to forward
	    try {
	        const calldata = _parseBytes(data, 64);
	        if (calldata == null) {
	            throw new Error("abort");
	        }
	        result.calldata = calldata;
	    }
	    catch (error) {
	        (0, index_js_6.assert)(false, "corrupt OffchainLookup calldata", "OFFCHAIN_FAULT", {
	            reason: "corrupt OffchainLookup calldata"
	        });
	    }
	    // Get the callbackSelector (bytes4)
	    (0, index_js_6.assert)((0, index_js_6.dataSlice)(data, 100, 128) === (0, index_js_6.dataSlice)(zeros, 0, 28), "corrupt OffchainLookup callbaackSelector", "OFFCHAIN_FAULT", {
	        reason: "corrupt OffchainLookup callbaackSelector"
	    });
	    result.selector = (0, index_js_6.dataSlice)(data, 96, 100);
	    // Get the extra data to send back to the contract as context
	    try {
	        const extraData = _parseBytes(data, 128);
	        if (extraData == null) {
	            throw new Error("abort");
	        }
	        result.extraData = extraData;
	    }
	    catch (error) {
	        (0, index_js_6.assert)(false, "corrupt OffchainLookup extraData", "OFFCHAIN_FAULT", {
	            reason: "corrupt OffchainLookup extraData"
	        });
	    }
	    result.errorArgs = "sender,urls,calldata,selector,extraData".split(/,/).map((k) => result[k]);
	    return result;
	}
	
	return abstractProvider;
}

var abstractSigner = {};

var hasRequiredAbstractSigner;

function requireAbstractSigner () {
	if (hasRequiredAbstractSigner) return abstractSigner;
	hasRequiredAbstractSigner = 1;
	Object.defineProperty(abstractSigner, "__esModule", { value: true });
	abstractSigner.VoidSigner = abstractSigner.AbstractSigner = void 0;
	/**
	 *  Generally the [[Wallet]] and [[JsonRpcSigner]] and their sub-classes
	 *  are sufficent for most developers, but this is provided to
	 *  fascilitate more complex Signers.
	 *
	 *  @_section: api/providers/abstract-signer: Subclassing Signer [abstract-signer]
	 */
	const index_js_1 = requireAddress$2();
	const index_js_2 = requireTransaction();
	const index_js_3 = requireUtils$3();
	const provider_js_1 = requireProvider();
	function checkProvider(signer, operation) {
	    if (signer.provider) {
	        return signer.provider;
	    }
	    (0, index_js_3.assert)(false, "missing provider", "UNSUPPORTED_OPERATION", { operation });
	}
	async function populate(signer, tx) {
	    let pop = (0, provider_js_1.copyRequest)(tx);
	    if (pop.to != null) {
	        pop.to = (0, index_js_1.resolveAddress)(pop.to, signer);
	    }
	    if (pop.from != null) {
	        const from = pop.from;
	        pop.from = Promise.all([
	            signer.getAddress(),
	            (0, index_js_1.resolveAddress)(from, signer)
	        ]).then(([address, from]) => {
	            (0, index_js_3.assertArgument)(address.toLowerCase() === from.toLowerCase(), "transaction from mismatch", "tx.from", from);
	            return address;
	        });
	    }
	    else {
	        pop.from = signer.getAddress();
	    }
	    return await (0, index_js_3.resolveProperties)(pop);
	}
	/**
	 *  An **AbstractSigner** includes most of teh functionality required
	 *  to get a [[Signer]] working as expected, but requires a few
	 *  Signer-specific methods be overridden.
	 *
	 */
	class AbstractSigner {
	    /**
	     *  The provider this signer is connected to.
	     */
	    provider;
	    /**
	     *  Creates a new Signer connected to %%provider%%.
	     */
	    constructor(provider) {
	        (0, index_js_3.defineProperties)(this, { provider: (provider || null) });
	    }
	    async getNonce(blockTag) {
	        return checkProvider(this, "getTransactionCount").getTransactionCount(await this.getAddress(), blockTag);
	    }
	    async populateCall(tx) {
	        const pop = await populate(this, tx);
	        return pop;
	    }
	    async populateTransaction(tx) {
	        const provider = checkProvider(this, "populateTransaction");
	        const pop = await populate(this, tx);
	        if (pop.nonce == null) {
	            pop.nonce = await this.getNonce("pending");
	        }
	        if (pop.gasLimit == null) {
	            pop.gasLimit = await this.estimateGas(pop);
	        }
	        // Populate the chain ID
	        const network = await (this.provider).getNetwork();
	        if (pop.chainId != null) {
	            const chainId = (0, index_js_3.getBigInt)(pop.chainId);
	            (0, index_js_3.assertArgument)(chainId === network.chainId, "transaction chainId mismatch", "tx.chainId", tx.chainId);
	        }
	        else {
	            pop.chainId = network.chainId;
	        }
	        // Do not allow mixing pre-eip-1559 and eip-1559 properties
	        const hasEip1559 = (pop.maxFeePerGas != null || pop.maxPriorityFeePerGas != null);
	        if (pop.gasPrice != null && (pop.type === 2 || hasEip1559)) {
	            (0, index_js_3.assertArgument)(false, "eip-1559 transaction do not support gasPrice", "tx", tx);
	        }
	        else if ((pop.type === 0 || pop.type === 1) && hasEip1559) {
	            (0, index_js_3.assertArgument)(false, "pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "tx", tx);
	        }
	        if ((pop.type === 2 || pop.type == null) && (pop.maxFeePerGas != null && pop.maxPriorityFeePerGas != null)) {
	            // Fully-formed EIP-1559 transaction (skip getFeeData)
	            pop.type = 2;
	        }
	        else if (pop.type === 0 || pop.type === 1) {
	            // Explicit Legacy or EIP-2930 transaction
	            // We need to get fee data to determine things
	            const feeData = await provider.getFeeData();
	            (0, index_js_3.assert)(feeData.gasPrice != null, "network does not support gasPrice", "UNSUPPORTED_OPERATION", {
	                operation: "getGasPrice"
	            });
	            // Populate missing gasPrice
	            if (pop.gasPrice == null) {
	                pop.gasPrice = feeData.gasPrice;
	            }
	        }
	        else {
	            // We need to get fee data to determine things
	            const feeData = await provider.getFeeData();
	            if (pop.type == null) {
	                // We need to auto-detect the intended type of this transaction...
	                if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {
	                    // The network supports EIP-1559!
	                    // Upgrade transaction from null to eip-1559
	                    pop.type = 2;
	                    if (pop.gasPrice != null) {
	                        // Using legacy gasPrice property on an eip-1559 network,
	                        // so use gasPrice as both fee properties
	                        const gasPrice = pop.gasPrice;
	                        delete pop.gasPrice;
	                        pop.maxFeePerGas = gasPrice;
	                        pop.maxPriorityFeePerGas = gasPrice;
	                    }
	                    else {
	                        // Populate missing fee data
	                        if (pop.maxFeePerGas == null) {
	                            pop.maxFeePerGas = feeData.maxFeePerGas;
	                        }
	                        if (pop.maxPriorityFeePerGas == null) {
	                            pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
	                        }
	                    }
	                }
	                else if (feeData.gasPrice != null) {
	                    // Network doesn't support EIP-1559...
	                    // ...but they are trying to use EIP-1559 properties
	                    (0, index_js_3.assert)(!hasEip1559, "network does not support EIP-1559", "UNSUPPORTED_OPERATION", {
	                        operation: "populateTransaction"
	                    });
	                    // Populate missing fee data
	                    if (pop.gasPrice == null) {
	                        pop.gasPrice = feeData.gasPrice;
	                    }
	                    // Explicitly set untyped transaction to legacy
	                    // @TODO: Maybe this shold allow type 1?
	                    pop.type = 0;
	                }
	                else {
	                    // getFeeData has failed us.
	                    (0, index_js_3.assert)(false, "failed to get consistent fee data", "UNSUPPORTED_OPERATION", {
	                        operation: "signer.getFeeData"
	                    });
	                }
	            }
	            else if (pop.type === 2) {
	                // Explicitly using EIP-1559
	                // Populate missing fee data
	                if (pop.maxFeePerGas == null) {
	                    pop.maxFeePerGas = feeData.maxFeePerGas;
	                }
	                if (pop.maxPriorityFeePerGas == null) {
	                    pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
	                }
	            }
	        }
	        //@TOOD: Don't await all over the place; save them up for
	        // the end for better batching
	        return await (0, index_js_3.resolveProperties)(pop);
	    }
	    async estimateGas(tx) {
	        return checkProvider(this, "estimateGas").estimateGas(await this.populateCall(tx));
	    }
	    async call(tx) {
	        return checkProvider(this, "call").call(await this.populateCall(tx));
	    }
	    async resolveName(name) {
	        const provider = checkProvider(this, "resolveName");
	        return await provider.resolveName(name);
	    }
	    async sendTransaction(tx) {
	        const provider = checkProvider(this, "sendTransaction");
	        const pop = await this.populateTransaction(tx);
	        delete pop.from;
	        const txObj = index_js_2.Transaction.from(pop);
	        return await provider.broadcastTransaction(await this.signTransaction(txObj));
	    }
	}
	abstractSigner.AbstractSigner = AbstractSigner;
	/**
	 *  A **VoidSigner** is a class deisgned to allow an address to be used
	 *  in any API which accepts a Signer, but for which there are no
	 *  credentials available to perform any actual signing.
	 *
	 *  This for example allow impersonating an account for the purpose of
	 *  static calls or estimating gas, but does not allow sending transactions.
	 */
	class VoidSigner extends AbstractSigner {
	    /**
	     *  The signer address.
	     */
	    address;
	    /**
	     *  Creates a new **VoidSigner** with %%address%% attached to
	     *  %%provider%%.
	     */
	    constructor(address, provider) {
	        super(provider);
	        (0, index_js_3.defineProperties)(this, { address });
	    }
	    async getAddress() { return this.address; }
	    connect(provider) {
	        return new VoidSigner(this.address, provider);
	    }
	    #throwUnsupported(suffix, operation) {
	        (0, index_js_3.assert)(false, `VoidSigner cannot sign ${suffix}`, "UNSUPPORTED_OPERATION", { operation });
	    }
	    async signTransaction(tx) {
	        this.#throwUnsupported("transactions", "signTransaction");
	    }
	    async signMessage(message) {
	        this.#throwUnsupported("messages", "signMessage");
	    }
	    async signTypedData(domain, types, value) {
	        this.#throwUnsupported("typed-data", "signTypedData");
	    }
	}
	abstractSigner.VoidSigner = VoidSigner;
	
	return abstractSigner;
}

var community = {};

var hasRequiredCommunity;

function requireCommunity () {
	if (hasRequiredCommunity) return community;
	hasRequiredCommunity = 1;
	/**
	 *  There are many awesome community services that provide Ethereum
	 *  nodes both for developers just starting out and for large-scale
	 *  communities.
	 *
	 *  @_section: api/providers/thirdparty: Community Providers  [thirdparty]
	 */
	Object.defineProperty(community, "__esModule", { value: true });
	community.showThrottleMessage = void 0;
	// Show the throttle message only once per service
	const shown = new Set();
	/**
	 *  Displays a warning in tht console when the community resource is
	 *  being used too heavily by the app, recommending the developer
	 *  acquire their own credentials instead of using the community
	 *  credentials.
	 *
	 *  The notification will only occur once per service.
	 */
	function showThrottleMessage(service) {
	    if (shown.has(service)) {
	        return;
	    }
	    shown.add(service);
	    console.log("========= NOTICE =========");
	    console.log(`Request-Rate Exceeded for ${service} (this message will not be repeated)`);
	    console.log("");
	    console.log("The default API keys for each service are provided as a highly-throttled,");
	    console.log("community resource for low-traffic projects and early prototyping.");
	    console.log("");
	    console.log("While your application will continue to function, we highly recommended");
	    console.log("signing up for your own API keys to improve performance, increase your");
	    console.log("request rate/limit and enable other perks, such as metrics and advanced APIs.");
	    console.log("");
	    console.log("For more details: https:/\/docs.ethers.org/api-keys/");
	    console.log("==========================");
	}
	community.showThrottleMessage = showThrottleMessage;
	
	return community;
}

var defaultProvider = {};

var providerAnkr = {};

var providerJsonrpc = {};

var subscriberFilterid = {};

var hasRequiredSubscriberFilterid;

function requireSubscriberFilterid () {
	if (hasRequiredSubscriberFilterid) return subscriberFilterid;
	hasRequiredSubscriberFilterid = 1;
	Object.defineProperty(subscriberFilterid, "__esModule", { value: true });
	subscriberFilterid.FilterIdPendingSubscriber = subscriberFilterid.FilterIdEventSubscriber = subscriberFilterid.FilterIdSubscriber = void 0;
	const index_js_1 = requireUtils$3();
	const subscriber_polling_js_1 = requireSubscriberPolling();
	function copy(obj) {
	    return JSON.parse(JSON.stringify(obj));
	}
	/**
	 *  Some backends support subscribing to events using a Filter ID.
	 *
	 *  When subscribing with this technique, the node issues a unique
	 *  //Filter ID//. At this point the node dedicates resources to
	 *  the filter, so that periodic calls to follow up on the //Filter ID//
	 *  will receive any events since the last call.
	 *
	 *  @_docloc: api/providers/abstract-provider
	 */
	class FilterIdSubscriber {
	    #provider;
	    #filterIdPromise;
	    #poller;
	    #running;
	    #network;
	    #hault;
	    /**
	     *  Creates a new **FilterIdSubscriber** which will used [[_subscribe]]
	     *  and [[_emitResults]] to setup the subscription and provide the event
	     *  to the %%provider%%.
	     */
	    constructor(provider) {
	        this.#provider = provider;
	        this.#filterIdPromise = null;
	        this.#poller = this.#poll.bind(this);
	        this.#running = false;
	        this.#network = null;
	        this.#hault = false;
	    }
	    /**
	     *  Sub-classes **must** override this to begin the subscription.
	     */
	    _subscribe(provider) {
	        throw new Error("subclasses must override this");
	    }
	    /**
	     *  Sub-classes **must** override this handle the events.
	     */
	    _emitResults(provider, result) {
	        throw new Error("subclasses must override this");
	    }
	    /**
	     *  Sub-classes **must** override this handle recovery on errors.
	     */
	    _recover(provider) {
	        throw new Error("subclasses must override this");
	    }
	    async #poll(blockNumber) {
	        try {
	            // Subscribe if necessary
	            if (this.#filterIdPromise == null) {
	                this.#filterIdPromise = this._subscribe(this.#provider);
	            }
	            // Get the Filter ID
	            let filterId = null;
	            try {
	                filterId = await this.#filterIdPromise;
	            }
	            catch (error) {
	                if (!(0, index_js_1.isError)(error, "UNSUPPORTED_OPERATION") || error.operation !== "eth_newFilter") {
	                    throw error;
	                }
	            }
	            // The backend does not support Filter ID; downgrade to
	            // polling
	            if (filterId == null) {
	                this.#filterIdPromise = null;
	                this.#provider._recoverSubscriber(this, this._recover(this.#provider));
	                return;
	            }
	            const network = await this.#provider.getNetwork();
	            if (!this.#network) {
	                this.#network = network;
	            }
	            if (this.#network.chainId !== network.chainId) {
	                throw new Error("chaid changed");
	            }
	            if (this.#hault) {
	                return;
	            }
	            const result = await this.#provider.send("eth_getFilterChanges", [filterId]);
	            await this._emitResults(this.#provider, result);
	        }
	        catch (error) {
	            console.log("@TODO", error);
	        }
	        this.#provider.once("block", this.#poller);
	    }
	    #teardown() {
	        const filterIdPromise = this.#filterIdPromise;
	        if (filterIdPromise) {
	            this.#filterIdPromise = null;
	            filterIdPromise.then((filterId) => {
	                this.#provider.send("eth_uninstallFilter", [filterId]);
	            });
	        }
	    }
	    start() {
	        if (this.#running) {
	            return;
	        }
	        this.#running = true;
	        this.#poll(-2);
	    }
	    stop() {
	        if (!this.#running) {
	            return;
	        }
	        this.#running = false;
	        this.#hault = true;
	        this.#teardown();
	        this.#provider.off("block", this.#poller);
	    }
	    pause(dropWhilePaused) {
	        if (dropWhilePaused) {
	            this.#teardown();
	        }
	        this.#provider.off("block", this.#poller);
	    }
	    resume() { this.start(); }
	}
	subscriberFilterid.FilterIdSubscriber = FilterIdSubscriber;
	/**
	 *  A **FilterIdSubscriber** for receiving contract events.
	 *
	 *  @_docloc: api/providers/abstract-provider
	 */
	class FilterIdEventSubscriber extends FilterIdSubscriber {
	    #event;
	    /**
	     *  Creates a new **FilterIdEventSubscriber** attached to %%provider%%
	     *  listening for %%filter%%.
	     */
	    constructor(provider, filter) {
	        super(provider);
	        this.#event = copy(filter);
	    }
	    _recover(provider) {
	        return new subscriber_polling_js_1.PollingEventSubscriber(provider, this.#event);
	    }
	    async _subscribe(provider) {
	        const filterId = await provider.send("eth_newFilter", [this.#event]);
	        return filterId;
	    }
	    async _emitResults(provider, results) {
	        for (const result of results) {
	            provider.emit(this.#event, provider._wrapLog(result, provider._network));
	        }
	    }
	}
	subscriberFilterid.FilterIdEventSubscriber = FilterIdEventSubscriber;
	/**
	 *  A **FilterIdSubscriber** for receiving pending transactions events.
	 *
	 *  @_docloc: api/providers/abstract-provider
	 */
	class FilterIdPendingSubscriber extends FilterIdSubscriber {
	    async _subscribe(provider) {
	        return await provider.send("eth_newPendingTransactionFilter", []);
	    }
	    async _emitResults(provider, results) {
	        for (const result of results) {
	            provider.emit("pending", result);
	        }
	    }
	}
	subscriberFilterid.FilterIdPendingSubscriber = FilterIdPendingSubscriber;
	
	return subscriberFilterid;
}

var hasRequiredProviderJsonrpc;

function requireProviderJsonrpc () {
	if (hasRequiredProviderJsonrpc) return providerJsonrpc;
	hasRequiredProviderJsonrpc = 1;
	/**
	 *  One of the most common ways to interact with the blockchain is
	 *  by a node running a JSON-RPC interface which can be connected to,
	 *  based on the transport, using:
	 *
	 *  - HTTP or HTTPS - [[JsonRpcProvider]]
	 *  - WebSocket - [[WebSocketProvider]]
	 *  - IPC - [[IpcSocketProvider]]
	 *
	 * @_section: api/providers/jsonrpc:JSON-RPC Provider  [about-jsonrpcProvider]
	 */
	Object.defineProperty(providerJsonrpc, "__esModule", { value: true });
	providerJsonrpc.JsonRpcProvider = providerJsonrpc.JsonRpcApiPollingProvider = providerJsonrpc.JsonRpcApiProvider = providerJsonrpc.JsonRpcSigner = void 0;
	// @TODO:
	// - Add the batching API
	// https://playground.open-rpc.org/?schemaUrl=https://raw.githubusercontent.com/ethereum/eth1.0-apis/assembled-spec/openrpc.json&uiSchema%5BappBar%5D%5Bui:splitView%5D=true&uiSchema%5BappBar%5D%5Bui:input%5D=false&uiSchema%5BappBar%5D%5Bui:examplesDropdown%5D=false
	const index_js_1 = requireAbi();
	const index_js_2 = requireAddress$2();
	const index_js_3 = requireHash();
	const index_js_4 = requireTransaction();
	const index_js_5 = requireUtils$3();
	const abstract_provider_js_1 = requireAbstractProvider();
	const abstract_signer_js_1 = requireAbstractSigner();
	const network_js_1 = requireNetwork();
	const subscriber_filterid_js_1 = requireSubscriberFilterid();
	const subscriber_polling_js_1 = requireSubscriberPolling();
	const Primitive = "bigint,boolean,function,number,string,symbol".split(/,/g);
	//const Methods = "getAddress,then".split(/,/g);
	function deepCopy(value) {
	    if (value == null || Primitive.indexOf(typeof (value)) >= 0) {
	        return value;
	    }
	    // Keep any Addressable
	    if (typeof (value.getAddress) === "function") {
	        return value;
	    }
	    if (Array.isArray(value)) {
	        return (value.map(deepCopy));
	    }
	    if (typeof (value) === "object") {
	        return Object.keys(value).reduce((accum, key) => {
	            accum[key] = value[key];
	            return accum;
	        }, {});
	    }
	    throw new Error(`should not happen: ${value} (${typeof (value)})`);
	}
	function stall(duration) {
	    return new Promise((resolve) => { setTimeout(resolve, duration); });
	}
	function getLowerCase(value) {
	    if (value) {
	        return value.toLowerCase();
	    }
	    return value;
	}
	function isPollable(value) {
	    return (value && typeof (value.pollingInterval) === "number");
	}
	const defaultOptions = {
	    polling: false,
	    staticNetwork: null,
	    batchStallTime: 10,
	    batchMaxSize: (1 << 20),
	    batchMaxCount: 100,
	    cacheTimeout: 250,
	    pollingInterval: 4000
	};
	// @TODO: Unchecked Signers
	class JsonRpcSigner extends abstract_signer_js_1.AbstractSigner {
	    address;
	    constructor(provider, address) {
	        super(provider);
	        address = (0, index_js_2.getAddress)(address);
	        (0, index_js_5.defineProperties)(this, { address });
	    }
	    connect(provider) {
	        (0, index_js_5.assert)(false, "cannot reconnect JsonRpcSigner", "UNSUPPORTED_OPERATION", {
	            operation: "signer.connect"
	        });
	    }
	    async getAddress() {
	        return this.address;
	    }
	    // JSON-RPC will automatially fill in nonce, etc. so we just check from
	    async populateTransaction(tx) {
	        return await this.populateCall(tx);
	    }
	    // Returns just the hash of the transaction after sent, which is what
	    // the bare JSON-RPC API does;
	    async sendUncheckedTransaction(_tx) {
	        const tx = deepCopy(_tx);
	        const promises = [];
	        // Make sure the from matches the sender
	        if (tx.from) {
	            const _from = tx.from;
	            promises.push((async () => {
	                const from = await (0, index_js_2.resolveAddress)(_from, this.provider);
	                (0, index_js_5.assertArgument)(from != null && from.toLowerCase() === this.address.toLowerCase(), "from address mismatch", "transaction", _tx);
	                tx.from = from;
	            })());
	        }
	        else {
	            tx.from = this.address;
	        }
	        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user
	        // wishes to use this, it is easy to specify explicitly, otherwise
	        // we look it up for them.
	        if (tx.gasLimit == null) {
	            promises.push((async () => {
	                tx.gasLimit = await this.provider.estimateGas({ ...tx, from: this.address });
	            })());
	        }
	        // The address may be an ENS name or Addressable
	        if (tx.to != null) {
	            const _to = tx.to;
	            promises.push((async () => {
	                tx.to = await (0, index_js_2.resolveAddress)(_to, this.provider);
	            })());
	        }
	        // Wait until all of our properties are filled in
	        if (promises.length) {
	            await Promise.all(promises);
	        }
	        const hexTx = this.provider.getRpcTransaction(tx);
	        return this.provider.send("eth_sendTransaction", [hexTx]);
	    }
	    async sendTransaction(tx) {
	        // This cannot be mined any earlier than any recent block
	        const blockNumber = await this.provider.getBlockNumber();
	        // Send the transaction
	        const hash = await this.sendUncheckedTransaction(tx);
	        // Unfortunately, JSON-RPC only provides and opaque transaction hash
	        // for a response, and we need the actual transaction, so we poll
	        // for it; it should show up very quickly
	        return await (new Promise((resolve, reject) => {
	            const timeouts = [1000, 100];
	            let invalids = 0;
	            const checkTx = async () => {
	                try {
	                    // Try getting the transaction
	                    const tx = await this.provider.getTransaction(hash);
	                    if (tx != null) {
	                        resolve(tx.replaceableTransaction(blockNumber));
	                        return;
	                    }
	                }
	                catch (error) {
	                    // If we were cancelled: stop polling.
	                    // If the data is bad: the node returns bad transactions
	                    // If the network changed: calling again will also fail
	                    // If unsupported: likely destroyed
	                    if ((0, index_js_5.isError)(error, "CANCELLED") || (0, index_js_5.isError)(error, "BAD_DATA") ||
	                        (0, index_js_5.isError)(error, "NETWORK_ERROR" )) {
	                        if (error.info == null) {
	                            error.info = {};
	                        }
	                        error.info.sendTransactionHash = hash;
	                        reject(error);
	                        return;
	                    }
	                    // Stop-gap for misbehaving backends; see #4513
	                    if ((0, index_js_5.isError)(error, "INVALID_ARGUMENT")) {
	                        invalids++;
	                        if (error.info == null) {
	                            error.info = {};
	                        }
	                        error.info.sendTransactionHash = hash;
	                        if (invalids > 10) {
	                            reject(error);
	                            return;
	                        }
	                    }
	                    // Notify anyone that cares; but we will try again, since
	                    // it is likely an intermittent service error
	                    this.provider.emit("error", (0, index_js_5.makeError)("failed to fetch transation after sending (will try again)", "UNKNOWN_ERROR", { error }));
	                }
	                // Wait another 4 seconds
	                this.provider._setTimeout(() => { checkTx(); }, timeouts.pop() || 4000);
	            };
	            checkTx();
	        }));
	    }
	    async signTransaction(_tx) {
	        const tx = deepCopy(_tx);
	        // Make sure the from matches the sender
	        if (tx.from) {
	            const from = await (0, index_js_2.resolveAddress)(tx.from, this.provider);
	            (0, index_js_5.assertArgument)(from != null && from.toLowerCase() === this.address.toLowerCase(), "from address mismatch", "transaction", _tx);
	            tx.from = from;
	        }
	        else {
	            tx.from = this.address;
	        }
	        const hexTx = this.provider.getRpcTransaction(tx);
	        return await this.provider.send("eth_signTransaction", [hexTx]);
	    }
	    async signMessage(_message) {
	        const message = ((typeof (_message) === "string") ? (0, index_js_5.toUtf8Bytes)(_message) : _message);
	        return await this.provider.send("personal_sign", [
	            (0, index_js_5.hexlify)(message), this.address.toLowerCase()
	        ]);
	    }
	    async signTypedData(domain, types, _value) {
	        const value = deepCopy(_value);
	        // Populate any ENS names (in-place)
	        const populated = await index_js_3.TypedDataEncoder.resolveNames(domain, types, value, async (value) => {
	            const address = await (0, index_js_2.resolveAddress)(value);
	            (0, index_js_5.assertArgument)(address != null, "TypedData does not support null address", "value", value);
	            return address;
	        });
	        return await this.provider.send("eth_signTypedData_v4", [
	            this.address.toLowerCase(),
	            JSON.stringify(index_js_3.TypedDataEncoder.getPayload(populated.domain, types, populated.value))
	        ]);
	    }
	    async unlock(password) {
	        return this.provider.send("personal_unlockAccount", [
	            this.address.toLowerCase(), password, null
	        ]);
	    }
	    // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign
	    async _legacySignMessage(_message) {
	        const message = ((typeof (_message) === "string") ? (0, index_js_5.toUtf8Bytes)(_message) : _message);
	        return await this.provider.send("eth_sign", [
	            this.address.toLowerCase(), (0, index_js_5.hexlify)(message)
	        ]);
	    }
	}
	providerJsonrpc.JsonRpcSigner = JsonRpcSigner;
	/**
	 *  The JsonRpcApiProvider is an abstract class and **MUST** be
	 *  sub-classed.
	 *
	 *  It provides the base for all JSON-RPC-based Provider interaction.
	 *
	 *  Sub-classing Notes:
	 *  - a sub-class MUST override _send
	 *  - a sub-class MUST call the `_start()` method once connected
	 */
	class JsonRpcApiProvider extends abstract_provider_js_1.AbstractProvider {
	    #options;
	    // The next ID to use for the JSON-RPC ID field
	    #nextId;
	    // Payloads are queued and triggered in batches using the drainTimer
	    #payloads;
	    #drainTimer;
	    #notReady;
	    #network;
	    #pendingDetectNetwork;
	    #scheduleDrain() {
	        if (this.#drainTimer) {
	            return;
	        }
	        // If we aren't using batching, no harm in sending it immediately
	        const stallTime = (this._getOption("batchMaxCount") === 1) ? 0 : this._getOption("batchStallTime");
	        this.#drainTimer = setTimeout(() => {
	            this.#drainTimer = null;
	            const payloads = this.#payloads;
	            this.#payloads = [];
	            while (payloads.length) {
	                // Create payload batches that satisfy our batch constraints
	                const batch = [(payloads.shift())];
	                while (payloads.length) {
	                    if (batch.length === this.#options.batchMaxCount) {
	                        break;
	                    }
	                    batch.push((payloads.shift()));
	                    const bytes = JSON.stringify(batch.map((p) => p.payload));
	                    if (bytes.length > this.#options.batchMaxSize) {
	                        payloads.unshift((batch.pop()));
	                        break;
	                    }
	                }
	                // Process the result to each payload
	                (async () => {
	                    const payload = ((batch.length === 1) ? batch[0].payload : batch.map((p) => p.payload));
	                    this.emit("debug", { action: "sendRpcPayload", payload });
	                    try {
	                        const result = await this._send(payload);
	                        this.emit("debug", { action: "receiveRpcResult", result });
	                        // Process results in batch order
	                        for (const { resolve, reject, payload } of batch) {
	                            if (this.destroyed) {
	                                reject((0, index_js_5.makeError)("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: payload.method }));
	                                continue;
	                            }
	                            // Find the matching result
	                            const resp = result.filter((r) => (r.id === payload.id))[0];
	                            // No result; the node failed us in unexpected ways
	                            if (resp == null) {
	                                const error = (0, index_js_5.makeError)("missing response for request", "BAD_DATA", {
	                                    value: result, info: { payload }
	                                });
	                                this.emit("error", error);
	                                reject(error);
	                                continue;
	                            }
	                            // The response is an error
	                            if ("error" in resp) {
	                                reject(this.getRpcError(payload, resp));
	                                continue;
	                            }
	                            // All good; send the result
	                            resolve(resp.result);
	                        }
	                    }
	                    catch (error) {
	                        this.emit("debug", { action: "receiveRpcError", error });
	                        for (const { reject } of batch) {
	                            // @TODO: augment the error with the payload
	                            reject(error);
	                        }
	                    }
	                })();
	            }
	        }, stallTime);
	    }
	    constructor(network, options) {
	        super(network, options);
	        this.#nextId = 1;
	        this.#options = Object.assign({}, defaultOptions, options || {});
	        this.#payloads = [];
	        this.#drainTimer = null;
	        this.#network = null;
	        this.#pendingDetectNetwork = null;
	        {
	            let resolve = null;
	            const promise = new Promise((_resolve) => {
	                resolve = _resolve;
	            });
	            this.#notReady = { promise, resolve };
	        }
	        const staticNetwork = this._getOption("staticNetwork");
	        if (typeof (staticNetwork) === "boolean") {
	            (0, index_js_5.assertArgument)(!staticNetwork || network !== "any", "staticNetwork cannot be used on special network 'any'", "options", options);
	            if (staticNetwork && network != null) {
	                this.#network = network_js_1.Network.from(network);
	            }
	        }
	        else if (staticNetwork) {
	            // Make sure any static network is compatbile with the provided netwrok
	            (0, index_js_5.assertArgument)(network == null || staticNetwork.matches(network), "staticNetwork MUST match network object", "options", options);
	            this.#network = staticNetwork;
	        }
	    }
	    /**
	     *  Returns the value associated with the option %%key%%.
	     *
	     *  Sub-classes can use this to inquire about configuration options.
	     */
	    _getOption(key) {
	        return this.#options[key];
	    }
	    /**
	     *  Gets the [[Network]] this provider has committed to. On each call, the network
	     *  is detected, and if it has changed, the call will reject.
	     */
	    get _network() {
	        (0, index_js_5.assert)(this.#network, "network is not available yet", "NETWORK_ERROR");
	        return this.#network;
	    }
	    /**
	     *  Resolves to the non-normalized value by performing %%req%%.
	     *
	     *  Sub-classes may override this to modify behavior of actions,
	     *  and should generally call ``super._perform`` as a fallback.
	     */
	    async _perform(req) {
	        // Legacy networks do not like the type field being passed along (which
	        // is fair), so we delete type if it is 0 and a non-EIP-1559 network
	        if (req.method === "call" || req.method === "estimateGas") {
	            let tx = req.transaction;
	            if (tx && tx.type != null && (0, index_js_5.getBigInt)(tx.type)) {
	                // If there are no EIP-1559 properties, it might be non-EIP-a559
	                if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {
	                    const feeData = await this.getFeeData();
	                    if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {
	                        // Network doesn't know about EIP-1559 (and hence type)
	                        req = Object.assign({}, req, {
	                            transaction: Object.assign({}, tx, { type: undefined })
	                        });
	                    }
	                }
	            }
	        }
	        const request = this.getRpcRequest(req);
	        if (request != null) {
	            return await this.send(request.method, request.args);
	        }
	        return super._perform(req);
	    }
	    /**
	     *  Sub-classes may override this; it detects the *actual* network that
	     *  we are **currently** connected to.
	     *
	     *  Keep in mind that [[send]] may only be used once [[ready]], otherwise the
	     *  _send primitive must be used instead.
	     */
	    async _detectNetwork() {
	        const network = this._getOption("staticNetwork");
	        if (network) {
	            if (network === true) {
	                if (this.#network) {
	                    return this.#network;
	                }
	            }
	            else {
	                return network;
	            }
	        }
	        if (this.#pendingDetectNetwork) {
	            return await this.#pendingDetectNetwork;
	        }
	        // If we are ready, use ``send``, which enabled requests to be batched
	        if (this.ready) {
	            this.#pendingDetectNetwork = (async () => {
	                try {
	                    const result = network_js_1.Network.from((0, index_js_5.getBigInt)(await this.send("eth_chainId", [])));
	                    this.#pendingDetectNetwork = null;
	                    return result;
	                }
	                catch (error) {
	                    this.#pendingDetectNetwork = null;
	                    throw error;
	                }
	            })();
	            return await this.#pendingDetectNetwork;
	        }
	        // We are not ready yet; use the primitive _send
	        this.#pendingDetectNetwork = (async () => {
	            const payload = {
	                id: this.#nextId++, method: "eth_chainId", params: [], jsonrpc: "2.0"
	            };
	            this.emit("debug", { action: "sendRpcPayload", payload });
	            let result;
	            try {
	                result = (await this._send(payload))[0];
	                this.#pendingDetectNetwork = null;
	            }
	            catch (error) {
	                this.#pendingDetectNetwork = null;
	                this.emit("debug", { action: "receiveRpcError", error });
	                throw error;
	            }
	            this.emit("debug", { action: "receiveRpcResult", result });
	            if ("result" in result) {
	                return network_js_1.Network.from((0, index_js_5.getBigInt)(result.result));
	            }
	            throw this.getRpcError(payload, result);
	        })();
	        return await this.#pendingDetectNetwork;
	    }
	    /**
	     *  Sub-classes **MUST** call this. Until [[_start]] has been called, no calls
	     *  will be passed to [[_send]] from [[send]]. If it is overridden, then
	     *  ``super._start()`` **MUST** be called.
	     *
	     *  Calling it multiple times is safe and has no effect.
	     */
	    _start() {
	        if (this.#notReady == null || this.#notReady.resolve == null) {
	            return;
	        }
	        this.#notReady.resolve();
	        this.#notReady = null;
	        (async () => {
	            // Bootstrap the network
	            while (this.#network == null && !this.destroyed) {
	                try {
	                    this.#network = await this._detectNetwork();
	                }
	                catch (error) {
	                    if (this.destroyed) {
	                        break;
	                    }
	                    console.log("JsonRpcProvider failed to detect network and cannot start up; retry in 1s (perhaps the URL is wrong or the node is not started)");
	                    this.emit("error", (0, index_js_5.makeError)("failed to bootstrap network detection", "NETWORK_ERROR", { event: "initial-network-discovery", info: { error } }));
	                    await stall(1000);
	                }
	            }
	            // Start dispatching requests
	            this.#scheduleDrain();
	        })();
	    }
	    /**
	     *  Resolves once the [[_start]] has been called. This can be used in
	     *  sub-classes to defer sending data until the connection has been
	     *  established.
	     */
	    async _waitUntilReady() {
	        if (this.#notReady == null) {
	            return;
	        }
	        return await this.#notReady.promise;
	    }
	    /**
	     *  Return a Subscriber that will manage the %%sub%%.
	     *
	     *  Sub-classes may override this to modify the behavior of
	     *  subscription management.
	     */
	    _getSubscriber(sub) {
	        // Pending Filters aren't availble via polling
	        if (sub.type === "pending") {
	            return new subscriber_filterid_js_1.FilterIdPendingSubscriber(this);
	        }
	        if (sub.type === "event") {
	            if (this._getOption("polling")) {
	                return new subscriber_polling_js_1.PollingEventSubscriber(this, sub.filter);
	            }
	            return new subscriber_filterid_js_1.FilterIdEventSubscriber(this, sub.filter);
	        }
	        // Orphaned Logs are handled automatically, by the filter, since
	        // logs with removed are emitted by it
	        if (sub.type === "orphan" && sub.filter.orphan === "drop-log") {
	            return new abstract_provider_js_1.UnmanagedSubscriber("orphan");
	        }
	        return super._getSubscriber(sub);
	    }
	    /**
	     *  Returns true only if the [[_start]] has been called.
	     */
	    get ready() { return this.#notReady == null; }
	    /**
	     *  Returns %%tx%% as a normalized JSON-RPC transaction request,
	     *  which has all values hexlified and any numeric values converted
	     *  to Quantity values.
	     */
	    getRpcTransaction(tx) {
	        const result = {};
	        // JSON-RPC now requires numeric values to be "quantity" values
	        ["chainId", "gasLimit", "gasPrice", "type", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "value"].forEach((key) => {
	            if (tx[key] == null) {
	                return;
	            }
	            let dstKey = key;
	            if (key === "gasLimit") {
	                dstKey = "gas";
	            }
	            result[dstKey] = (0, index_js_5.toQuantity)((0, index_js_5.getBigInt)(tx[key], `tx.${key}`));
	        });
	        // Make sure addresses and data are lowercase
	        ["from", "to", "data"].forEach((key) => {
	            if (tx[key] == null) {
	                return;
	            }
	            result[key] = (0, index_js_5.hexlify)(tx[key]);
	        });
	        // Normalize the access list object
	        if (tx.accessList) {
	            result["accessList"] = (0, index_js_4.accessListify)(tx.accessList);
	        }
	        return result;
	    }
	    /**
	     *  Returns the request method and arguments required to perform
	     *  %%req%%.
	     */
	    getRpcRequest(req) {
	        switch (req.method) {
	            case "chainId":
	                return { method: "eth_chainId", args: [] };
	            case "getBlockNumber":
	                return { method: "eth_blockNumber", args: [] };
	            case "getGasPrice":
	                return { method: "eth_gasPrice", args: [] };
	            case "getPriorityFee":
	                return { method: "eth_maxPriorityFeePerGas", args: [] };
	            case "getBalance":
	                return {
	                    method: "eth_getBalance",
	                    args: [getLowerCase(req.address), req.blockTag]
	                };
	            case "getTransactionCount":
	                return {
	                    method: "eth_getTransactionCount",
	                    args: [getLowerCase(req.address), req.blockTag]
	                };
	            case "getCode":
	                return {
	                    method: "eth_getCode",
	                    args: [getLowerCase(req.address), req.blockTag]
	                };
	            case "getStorage":
	                return {
	                    method: "eth_getStorageAt",
	                    args: [
	                        getLowerCase(req.address),
	                        ("0x" + req.position.toString(16)),
	                        req.blockTag
	                    ]
	                };
	            case "broadcastTransaction":
	                return {
	                    method: "eth_sendRawTransaction",
	                    args: [req.signedTransaction]
	                };
	            case "getBlock":
	                if ("blockTag" in req) {
	                    return {
	                        method: "eth_getBlockByNumber",
	                        args: [req.blockTag, !!req.includeTransactions]
	                    };
	                }
	                else if ("blockHash" in req) {
	                    return {
	                        method: "eth_getBlockByHash",
	                        args: [req.blockHash, !!req.includeTransactions]
	                    };
	                }
	                break;
	            case "getTransaction":
	                return {
	                    method: "eth_getTransactionByHash",
	                    args: [req.hash]
	                };
	            case "getTransactionReceipt":
	                return {
	                    method: "eth_getTransactionReceipt",
	                    args: [req.hash]
	                };
	            case "call":
	                return {
	                    method: "eth_call",
	                    args: [this.getRpcTransaction(req.transaction), req.blockTag]
	                };
	            case "estimateGas": {
	                return {
	                    method: "eth_estimateGas",
	                    args: [this.getRpcTransaction(req.transaction)]
	                };
	            }
	            case "getLogs":
	                if (req.filter && req.filter.address != null) {
	                    if (Array.isArray(req.filter.address)) {
	                        req.filter.address = req.filter.address.map(getLowerCase);
	                    }
	                    else {
	                        req.filter.address = getLowerCase(req.filter.address);
	                    }
	                }
	                return { method: "eth_getLogs", args: [req.filter] };
	        }
	        return null;
	    }
	    /**
	     *  Returns an ethers-style Error for the given JSON-RPC error
	     *  %%payload%%, coalescing the various strings and error shapes
	     *  that different nodes return, coercing them into a machine-readable
	     *  standardized error.
	     */
	    getRpcError(payload, _error) {
	        const { method } = payload;
	        const { error } = _error;
	        if (method === "eth_estimateGas" && error.message) {
	            const msg = error.message;
	            if (!msg.match(/revert/i) && msg.match(/insufficient funds/i)) {
	                return (0, index_js_5.makeError)("insufficient funds", "INSUFFICIENT_FUNDS", {
	                    transaction: (payload.params[0]),
	                    info: { payload, error }
	                });
	            }
	        }
	        if (method === "eth_call" || method === "eth_estimateGas") {
	            const result = spelunkData(error);
	            const e = index_js_1.AbiCoder.getBuiltinCallException((method === "eth_call") ? "call" : "estimateGas", (payload.params[0]), (result ? result.data : null));
	            e.info = { error, payload };
	            return e;
	        }
	        // Only estimateGas and call can return arbitrary contract-defined text, so now we
	        // we can process text safely.
	        const message = JSON.stringify(spelunkMessage(error));
	        if (typeof (error.message) === "string" && error.message.match(/user denied|ethers-user-denied/i)) {
	            const actionMap = {
	                eth_sign: "signMessage",
	                personal_sign: "signMessage",
	                eth_signTypedData_v4: "signTypedData",
	                eth_signTransaction: "signTransaction",
	                eth_sendTransaction: "sendTransaction",
	                eth_requestAccounts: "requestAccess",
	                wallet_requestAccounts: "requestAccess",
	            };
	            return (0, index_js_5.makeError)(`user rejected action`, "ACTION_REJECTED", {
	                action: (actionMap[method] || "unknown"),
	                reason: "rejected",
	                info: { payload, error }
	            });
	        }
	        if (method === "eth_sendRawTransaction" || method === "eth_sendTransaction") {
	            const transaction = (payload.params[0]);
	            if (message.match(/insufficient funds|base fee exceeds gas limit/i)) {
	                return (0, index_js_5.makeError)("insufficient funds for intrinsic transaction cost", "INSUFFICIENT_FUNDS", {
	                    transaction, info: { error }
	                });
	            }
	            if (message.match(/nonce/i) && message.match(/too low/i)) {
	                return (0, index_js_5.makeError)("nonce has already been used", "NONCE_EXPIRED", { transaction, info: { error } });
	            }
	            // "replacement transaction underpriced"
	            if (message.match(/replacement transaction/i) && message.match(/underpriced/i)) {
	                return (0, index_js_5.makeError)("replacement fee too low", "REPLACEMENT_UNDERPRICED", { transaction, info: { error } });
	            }
	            if (message.match(/only replay-protected/i)) {
	                return (0, index_js_5.makeError)("legacy pre-eip-155 transactions not supported", "UNSUPPORTED_OPERATION", {
	                    operation: method, info: { transaction, info: { error } }
	                });
	            }
	        }
	        let unsupported = !!message.match(/the method .* does not exist/i);
	        if (!unsupported) {
	            if (error && error.details && error.details.startsWith("Unauthorized method:")) {
	                unsupported = true;
	            }
	        }
	        if (unsupported) {
	            return (0, index_js_5.makeError)("unsupported operation", "UNSUPPORTED_OPERATION", {
	                operation: payload.method, info: { error, payload }
	            });
	        }
	        return (0, index_js_5.makeError)("could not coalesce error", "UNKNOWN_ERROR", { error, payload });
	    }
	    /**
	     *  Requests the %%method%% with %%params%% via the JSON-RPC protocol
	     *  over the underlying channel. This can be used to call methods
	     *  on the backend that do not have a high-level API within the Provider
	     *  API.
	     *
	     *  This method queues requests according to the batch constraints
	     *  in the options, assigns the request a unique ID.
	     *
	     *  **Do NOT override** this method in sub-classes; instead
	     *  override [[_send]] or force the options values in the
	     *  call to the constructor to modify this method's behavior.
	     */
	    send(method, params) {
	        // @TODO: cache chainId?? purge on switch_networks
	        // We have been destroyed; no operations are supported anymore
	        if (this.destroyed) {
	            return Promise.reject((0, index_js_5.makeError)("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: method }));
	        }
	        const id = this.#nextId++;
	        const promise = new Promise((resolve, reject) => {
	            this.#payloads.push({
	                resolve, reject,
	                payload: { method, params, id, jsonrpc: "2.0" }
	            });
	        });
	        // If there is not a pending drainTimer, set one
	        this.#scheduleDrain();
	        return promise;
	    }
	    /**
	     *  Resolves to the [[Signer]] account for  %%address%% managed by
	     *  the client.
	     *
	     *  If the %%address%% is a number, it is used as an index in the
	     *  the accounts from [[listAccounts]].
	     *
	     *  This can only be used on clients which manage accounts (such as
	     *  Geth with imported account or MetaMask).
	     *
	     *  Throws if the account doesn't exist.
	     */
	    async getSigner(address) {
	        if (address == null) {
	            address = 0;
	        }
	        const accountsPromise = this.send("eth_accounts", []);
	        // Account index
	        if (typeof (address) === "number") {
	            const accounts = (await accountsPromise);
	            if (address >= accounts.length) {
	                throw new Error("no such account");
	            }
	            return new JsonRpcSigner(this, accounts[address]);
	        }
	        const { accounts } = await (0, index_js_5.resolveProperties)({
	            network: this.getNetwork(),
	            accounts: accountsPromise
	        });
	        // Account address
	        address = (0, index_js_2.getAddress)(address);
	        for (const account of accounts) {
	            if ((0, index_js_2.getAddress)(account) === address) {
	                return new JsonRpcSigner(this, address);
	            }
	        }
	        throw new Error("invalid account");
	    }
	    async listAccounts() {
	        const accounts = await this.send("eth_accounts", []);
	        return accounts.map((a) => new JsonRpcSigner(this, a));
	    }
	    destroy() {
	        // Stop processing requests
	        if (this.#drainTimer) {
	            clearTimeout(this.#drainTimer);
	            this.#drainTimer = null;
	        }
	        // Cancel all pending requests
	        for (const { payload, reject } of this.#payloads) {
	            reject((0, index_js_5.makeError)("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: payload.method }));
	        }
	        this.#payloads = [];
	        // Parent clean-up
	        super.destroy();
	    }
	}
	providerJsonrpc.JsonRpcApiProvider = JsonRpcApiProvider;
	// @TODO: remove this in v7, it is not exported because this functionality
	// is exposed in the JsonRpcApiProvider by setting polling to true. It should
	// be safe to remove regardless, because it isn't reachable, but just in case.
	/**
	 *  @_ignore:
	 */
	class JsonRpcApiPollingProvider extends JsonRpcApiProvider {
	    #pollingInterval;
	    constructor(network, options) {
	        super(network, options);
	        this.#pollingInterval = 4000;
	    }
	    _getSubscriber(sub) {
	        const subscriber = super._getSubscriber(sub);
	        if (isPollable(subscriber)) {
	            subscriber.pollingInterval = this.#pollingInterval;
	        }
	        return subscriber;
	    }
	    /**
	     *  The polling interval (default: 4000 ms)
	     */
	    get pollingInterval() { return this.#pollingInterval; }
	    set pollingInterval(value) {
	        if (!Number.isInteger(value) || value < 0) {
	            throw new Error("invalid interval");
	        }
	        this.#pollingInterval = value;
	        this._forEachSubscriber((sub) => {
	            if (isPollable(sub)) {
	                sub.pollingInterval = this.#pollingInterval;
	            }
	        });
	    }
	}
	providerJsonrpc.JsonRpcApiPollingProvider = JsonRpcApiPollingProvider;
	/**
	 *  The JsonRpcProvider is one of the most common Providers,
	 *  which performs all operations over HTTP (or HTTPS) requests.
	 *
	 *  Events are processed by polling the backend for the current block
	 *  number; when it advances, all block-base events are then checked
	 *  for updates.
	 */
	class JsonRpcProvider extends JsonRpcApiPollingProvider {
	    #connect;
	    constructor(url, network, options) {
	        if (url == null) {
	            url = "http:/\/localhost:8545";
	        }
	        super(network, options);
	        if (typeof (url) === "string") {
	            this.#connect = new index_js_5.FetchRequest(url);
	        }
	        else {
	            this.#connect = url.clone();
	        }
	    }
	    _getConnection() {
	        return this.#connect.clone();
	    }
	    async send(method, params) {
	        // All requests are over HTTP, so we can just start handling requests
	        // We do this here rather than the constructor so that we don't send any
	        // requests to the network (i.e. eth_chainId) until we absolutely have to.
	        await this._start();
	        return await super.send(method, params);
	    }
	    async _send(payload) {
	        // Configure a POST connection for the requested method
	        const request = this._getConnection();
	        request.body = JSON.stringify(payload);
	        request.setHeader("content-type", "application/json");
	        const response = await request.send();
	        response.assertOk();
	        let resp = response.bodyJson;
	        if (!Array.isArray(resp)) {
	            resp = [resp];
	        }
	        return resp;
	    }
	}
	providerJsonrpc.JsonRpcProvider = JsonRpcProvider;
	function spelunkData(value) {
	    if (value == null) {
	        return null;
	    }
	    // These *are* the droids we're looking for.
	    if (typeof (value.message) === "string" && value.message.match(/revert/i) && (0, index_js_5.isHexString)(value.data)) {
	        return { message: value.message, data: value.data };
	    }
	    // Spelunk further...
	    if (typeof (value) === "object") {
	        for (const key in value) {
	            const result = spelunkData(value[key]);
	            if (result) {
	                return result;
	            }
	        }
	        return null;
	    }
	    // Might be a JSON string we can further descend...
	    if (typeof (value) === "string") {
	        try {
	            return spelunkData(JSON.parse(value));
	        }
	        catch (error) { }
	    }
	    return null;
	}
	function _spelunkMessage(value, result) {
	    if (value == null) {
	        return;
	    }
	    // These *are* the droids we're looking for.
	    if (typeof (value.message) === "string") {
	        result.push(value.message);
	    }
	    // Spelunk further...
	    if (typeof (value) === "object") {
	        for (const key in value) {
	            _spelunkMessage(value[key], result);
	        }
	    }
	    // Might be a JSON string we can further descend...
	    if (typeof (value) === "string") {
	        try {
	            return _spelunkMessage(JSON.parse(value), result);
	        }
	        catch (error) { }
	    }
	}
	function spelunkMessage(value) {
	    const result = [];
	    _spelunkMessage(value, result);
	    return result;
	}
	
	return providerJsonrpc;
}

var hasRequiredProviderAnkr;

function requireProviderAnkr () {
	if (hasRequiredProviderAnkr) return providerAnkr;
	hasRequiredProviderAnkr = 1;
	Object.defineProperty(providerAnkr, "__esModule", { value: true });
	providerAnkr.AnkrProvider = void 0;
	/**
	 *  [[link-ankr]] provides a third-party service for connecting to
	 *  various blockchains over JSON-RPC.
	 *
	 *  **Supported Networks**
	 *
	 *  - Ethereum Mainnet (``mainnet``)
	 *  - Goerli Testnet (``goerli``)
	 *  - Sepolia Testnet (``sepolia``)
	 *  - Arbitrum (``arbitrum``)
	 *  - Base (``base``)
	 *  - Base Goerlia Testnet (``base-goerli``)
	 *  - Base Sepolia Testnet (``base-sepolia``)
	 *  - BNB (``bnb``)
	 *  - BNB Testnet (``bnbt``)
	 *  - Optimism (``optimism``)
	 *  - Optimism Goerli Testnet (``optimism-goerli``)
	 *  - Optimism Sepolia Testnet (``optimism-sepolia``)
	 *  - Polygon (``matic``)
	 *  - Polygon Mumbai Testnet (``matic-mumbai``)
	 *
	 *  @_subsection: api/providers/thirdparty:Ankr  [providers-ankr]
	 */
	const index_js_1 = requireUtils$3();
	const community_js_1 = requireCommunity();
	const network_js_1 = requireNetwork();
	const provider_jsonrpc_js_1 = requireProviderJsonrpc();
	const defaultApiKey = "9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972";
	function getHost(name) {
	    switch (name) {
	        case "mainnet":
	            return "rpc.ankr.com/eth";
	        case "goerli":
	            return "rpc.ankr.com/eth_goerli";
	        case "sepolia":
	            return "rpc.ankr.com/eth_sepolia";
	        case "arbitrum":
	            return "rpc.ankr.com/arbitrum";
	        case "base":
	            return "rpc.ankr.com/base";
	        case "base-goerli":
	            return "rpc.ankr.com/base_goerli";
	        case "base-sepolia":
	            return "rpc.ankr.com/base_sepolia";
	        case "bnb":
	            return "rpc.ankr.com/bsc";
	        case "bnbt":
	            return "rpc.ankr.com/bsc_testnet_chapel";
	        case "matic":
	            return "rpc.ankr.com/polygon";
	        case "matic-mumbai":
	            return "rpc.ankr.com/polygon_mumbai";
	        case "optimism":
	            return "rpc.ankr.com/optimism";
	        case "optimism-goerli":
	            return "rpc.ankr.com/optimism_testnet";
	        case "optimism-sepolia":
	            return "rpc.ankr.com/optimism_sepolia";
	    }
	    (0, index_js_1.assertArgument)(false, "unsupported network", "network", name);
	}
	/**
	 *  The **AnkrProvider** connects to the [[link-ankr]]
	 *  JSON-RPC end-points.
	 *
	 *  By default, a highly-throttled API key is used, which is
	 *  appropriate for quick prototypes and simple scripts. To
	 *  gain access to an increased rate-limit, it is highly
	 *  recommended to [sign up here](link-ankr-signup).
	 */
	class AnkrProvider extends provider_jsonrpc_js_1.JsonRpcProvider {
	    /**
	     *  The API key for the Ankr connection.
	     */
	    apiKey;
	    /**
	     *  Create a new **AnkrProvider**.
	     *
	     *  By default connecting to ``mainnet`` with a highly throttled
	     *  API key.
	     */
	    constructor(_network, apiKey) {
	        if (_network == null) {
	            _network = "mainnet";
	        }
	        const network = network_js_1.Network.from(_network);
	        if (apiKey == null) {
	            apiKey = defaultApiKey;
	        }
	        // Ankr does not support filterId, so we force polling
	        const options = { polling: true, staticNetwork: network };
	        const request = AnkrProvider.getRequest(network, apiKey);
	        super(request, network, options);
	        (0, index_js_1.defineProperties)(this, { apiKey });
	    }
	    _getProvider(chainId) {
	        try {
	            return new AnkrProvider(chainId, this.apiKey);
	        }
	        catch (error) { }
	        return super._getProvider(chainId);
	    }
	    /**
	     *  Returns a prepared request for connecting to %%network%% with
	     *  %%apiKey%%.
	     */
	    static getRequest(network, apiKey) {
	        if (apiKey == null) {
	            apiKey = defaultApiKey;
	        }
	        const request = new index_js_1.FetchRequest(`https:/\/${getHost(network.name)}/${apiKey}`);
	        request.allowGzip = true;
	        if (apiKey === defaultApiKey) {
	            request.retryFunc = async (request, response, attempt) => {
	                (0, community_js_1.showThrottleMessage)("AnkrProvider");
	                return true;
	            };
	        }
	        return request;
	    }
	    getRpcError(payload, error) {
	        if (payload.method === "eth_sendRawTransaction") {
	            if (error && error.error && error.error.message === "INTERNAL_ERROR: could not replace existing tx") {
	                error.error.message = "replacement transaction underpriced";
	            }
	        }
	        return super.getRpcError(payload, error);
	    }
	    isCommunityResource() {
	        return (this.apiKey === defaultApiKey);
	    }
	}
	providerAnkr.AnkrProvider = AnkrProvider;
	
	return providerAnkr;
}

var providerAlchemy = {};

var hasRequiredProviderAlchemy;

function requireProviderAlchemy () {
	if (hasRequiredProviderAlchemy) return providerAlchemy;
	hasRequiredProviderAlchemy = 1;
	/**
	 *  [[link-alchemy]] provides a third-party service for connecting to
	 *  various blockchains over JSON-RPC.
	 *
	 *  **Supported Networks**
	 *
	 *  - Ethereum Mainnet (``mainnet``)
	 *  - Goerli Testnet (``goerli``)
	 *  - Sepolia Testnet (``sepolia``)
	 *  - Arbitrum (``arbitrum``)
	 *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)
	 *  - Arbitrum Sepolia Testnet (``arbitrum-sepolia``)
	 *  - Base (``base``)
	 *  - Base Goerlia Testnet (``base-goerli``)
	 *  - Base Sepolia Testnet (``base-sepolia``)
	 *  - Optimism (``optimism``)
	 *  - Optimism Goerli Testnet (``optimism-goerli``)
	 *  - Optimism Sepolia Testnet (``optimism-sepolia``)
	 *  - Polygon (``matic``)
	 *  - Polygon Mumbai Testnet (``matic-mumbai``)
	 *
	 *  @_subsection: api/providers/thirdparty:Alchemy  [providers-alchemy]
	 */
	Object.defineProperty(providerAlchemy, "__esModule", { value: true });
	providerAlchemy.AlchemyProvider = void 0;
	const index_js_1 = requireUtils$3();
	const community_js_1 = requireCommunity();
	const network_js_1 = requireNetwork();
	const provider_jsonrpc_js_1 = requireProviderJsonrpc();
	const defaultApiKey = "_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";
	function getHost(name) {
	    switch (name) {
	        case "mainnet":
	            return "eth-mainnet.alchemyapi.io";
	        case "goerli":
	            return "eth-goerli.g.alchemy.com";
	        case "sepolia":
	            return "eth-sepolia.g.alchemy.com";
	        case "arbitrum":
	            return "arb-mainnet.g.alchemy.com";
	        case "arbitrum-goerli":
	            return "arb-goerli.g.alchemy.com";
	        case "arbitrum-sepolia":
	            return "arb-sepolia.g.alchemy.com";
	        case "base":
	            return "base-mainnet.g.alchemy.com";
	        case "base-goerli":
	            return "base-goerli.g.alchemy.com";
	        case "base-sepolia":
	            return "base-sepolia.g.alchemy.com";
	        case "matic":
	            return "polygon-mainnet.g.alchemy.com";
	        case "matic-mumbai":
	            return "polygon-mumbai.g.alchemy.com";
	        case "optimism":
	            return "opt-mainnet.g.alchemy.com";
	        case "optimism-goerli":
	            return "opt-goerli.g.alchemy.com";
	        case "optimism-sepolia":
	            return "opt-sepolia.g.alchemy.com";
	    }
	    (0, index_js_1.assertArgument)(false, "unsupported network", "network", name);
	}
	/**
	 *  The **AlchemyProvider** connects to the [[link-alchemy]]
	 *  JSON-RPC end-points.
	 *
	 *  By default, a highly-throttled API key is used, which is
	 *  appropriate for quick prototypes and simple scripts. To
	 *  gain access to an increased rate-limit, it is highly
	 *  recommended to [sign up here](link-alchemy-signup).
	 *
	 *  @_docloc: api/providers/thirdparty
	 */
	class AlchemyProvider extends provider_jsonrpc_js_1.JsonRpcProvider {
	    apiKey;
	    constructor(_network, apiKey) {
	        if (_network == null) {
	            _network = "mainnet";
	        }
	        const network = network_js_1.Network.from(_network);
	        if (apiKey == null) {
	            apiKey = defaultApiKey;
	        }
	        const request = AlchemyProvider.getRequest(network, apiKey);
	        super(request, network, { staticNetwork: network });
	        (0, index_js_1.defineProperties)(this, { apiKey });
	    }
	    _getProvider(chainId) {
	        try {
	            return new AlchemyProvider(chainId, this.apiKey);
	        }
	        catch (error) { }
	        return super._getProvider(chainId);
	    }
	    async _perform(req) {
	        // https://docs.alchemy.com/reference/trace-transaction
	        if (req.method === "getTransactionResult") {
	            const { trace, tx } = await (0, index_js_1.resolveProperties)({
	                trace: this.send("trace_transaction", [req.hash]),
	                tx: this.getTransaction(req.hash)
	            });
	            if (trace == null || tx == null) {
	                return null;
	            }
	            let data;
	            let error = false;
	            try {
	                data = trace[0].result.output;
	                error = (trace[0].error === "Reverted");
	            }
	            catch (error) { }
	            if (data) {
	                (0, index_js_1.assert)(!error, "an error occurred during transaction executions", "CALL_EXCEPTION", {
	                    action: "getTransactionResult",
	                    data,
	                    reason: null,
	                    transaction: tx,
	                    invocation: null,
	                    revert: null // @TODO
	                });
	                return data;
	            }
	            (0, index_js_1.assert)(false, "could not parse trace result", "BAD_DATA", { value: trace });
	        }
	        return await super._perform(req);
	    }
	    isCommunityResource() {
	        return (this.apiKey === defaultApiKey);
	    }
	    static getRequest(network, apiKey) {
	        if (apiKey == null) {
	            apiKey = defaultApiKey;
	        }
	        const request = new index_js_1.FetchRequest(`https:/\/${getHost(network.name)}/v2/${apiKey}`);
	        request.allowGzip = true;
	        if (apiKey === defaultApiKey) {
	            request.retryFunc = async (request, response, attempt) => {
	                (0, community_js_1.showThrottleMessage)("alchemy");
	                return true;
	            };
	        }
	        return request;
	    }
	}
	providerAlchemy.AlchemyProvider = AlchemyProvider;
	
	return providerAlchemy;
}

var providerCloudflare = {};

var hasRequiredProviderCloudflare;

function requireProviderCloudflare () {
	if (hasRequiredProviderCloudflare) return providerCloudflare;
	hasRequiredProviderCloudflare = 1;
	/**
	 *  About Cloudflare
	 *
	 *  @_subsection: api/providers/thirdparty:Cloudflare  [providers-cloudflare]
	 */
	Object.defineProperty(providerCloudflare, "__esModule", { value: true });
	providerCloudflare.CloudflareProvider = void 0;
	const index_js_1 = requireUtils$3();
	const network_js_1 = requireNetwork();
	const provider_jsonrpc_js_1 = requireProviderJsonrpc();
	/**
	 *  About Cloudflare...
	 */
	class CloudflareProvider extends provider_jsonrpc_js_1.JsonRpcProvider {
	    constructor(_network) {
	        if (_network == null) {
	            _network = "mainnet";
	        }
	        const network = network_js_1.Network.from(_network);
	        (0, index_js_1.assertArgument)(network.name === "mainnet", "unsupported network", "network", _network);
	        super("https:/\/cloudflare-eth.com/", network, { staticNetwork: network });
	    }
	}
	providerCloudflare.CloudflareProvider = CloudflareProvider;
	
	return providerCloudflare;
}

var providerEtherscan = {};

var hasRequiredProviderEtherscan;

function requireProviderEtherscan () {
	if (hasRequiredProviderEtherscan) return providerEtherscan;
	hasRequiredProviderEtherscan = 1;
	/**
	 *  [[link-etherscan]] provides a third-party service for connecting to
	 *  various blockchains over a combination of JSON-RPC and custom API
	 *  endpoints.
	 *
	 *  **Supported Networks**
	 *
	 *  - Ethereum Mainnet (``mainnet``)
	 *  - Goerli Testnet (``goerli``)
	 *  - Sepolia Testnet (``sepolia``)
	 *  - Sepolia Testnet (``holesky``)
	 *  - Arbitrum (``arbitrum``)
	 *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)
	 *  - BNB Smart Chain Mainnet (``bnb``)
	 *  - BNB Smart Chain Testnet (``bnbt``)
	 *  - Optimism (``optimism``)
	 *  - Optimism Goerli Testnet (``optimism-goerli``)
	 *  - Polygon (``matic``)
	 *  - Polygon Mumbai Testnet (``matic-mumbai``)
	 *
	 *  @_subsection api/providers/thirdparty:Etherscan  [providers-etherscan]
	 */
	Object.defineProperty(providerEtherscan, "__esModule", { value: true });
	providerEtherscan.EtherscanProvider = providerEtherscan.EtherscanPlugin = void 0;
	const index_js_1 = requireAbi();
	const index_js_2 = requireContract();
	const index_js_3 = requireTransaction();
	const index_js_4 = requireUtils$3();
	const abstract_provider_js_1 = requireAbstractProvider();
	const network_js_1 = requireNetwork();
	const plugins_network_js_1 = requirePluginsNetwork();
	const community_js_1 = requireCommunity();
	const THROTTLE = 2000;
	function isPromise(value) {
	    return (value && typeof (value.then) === "function");
	}
	const EtherscanPluginId = "org.ethers.plugins.provider.Etherscan";
	/**
	 *  A Network can include an **EtherscanPlugin** to provide
	 *  a custom base URL.
	 *
	 *  @_docloc: api/providers/thirdparty:Etherscan
	 */
	class EtherscanPlugin extends plugins_network_js_1.NetworkPlugin {
	    /**
	     *  The Etherscan API base URL.
	     */
	    baseUrl;
	    /**
	     *  Creates a new **EtherscanProvider** which will use
	     *  %%baseUrl%%.
	     */
	    constructor(baseUrl) {
	        super(EtherscanPluginId);
	        (0, index_js_4.defineProperties)(this, { baseUrl });
	    }
	    clone() {
	        return new EtherscanPlugin(this.baseUrl);
	    }
	}
	providerEtherscan.EtherscanPlugin = EtherscanPlugin;
	const skipKeys = ["enableCcipRead"];
	let nextId = 1;
	/**
	 *  The **EtherscanBaseProvider** is the super-class of
	 *  [[EtherscanProvider]], which should generally be used instead.
	 *
	 *  Since the **EtherscanProvider** includes additional code for
	 *  [[Contract]] access, in //rare cases// that contracts are not
	 *  used, this class can reduce code size.
	 *
	 *  @_docloc: api/providers/thirdparty:Etherscan
	 */
	class EtherscanProvider extends abstract_provider_js_1.AbstractProvider {
	    /**
	     *  The connected network.
	     */
	    network;
	    /**
	     *  The API key or null if using the community provided bandwidth.
	     */
	    apiKey;
	    #plugin;
	    /**
	     *  Creates a new **EtherscanBaseProvider**.
	     */
	    constructor(_network, _apiKey) {
	        const apiKey = (_apiKey != null) ? _apiKey : null;
	        super();
	        const network = network_js_1.Network.from(_network);
	        this.#plugin = network.getPlugin(EtherscanPluginId);
	        (0, index_js_4.defineProperties)(this, { apiKey, network });
	        // Test that the network is supported by Etherscan
	        this.getBaseUrl();
	    }
	    /**
	     *  Returns the base URL.
	     *
	     *  If an [[EtherscanPlugin]] is configured on the
	     *  [[EtherscanBaseProvider_network]], returns the plugin's
	     *  baseUrl.
	     */
	    getBaseUrl() {
	        if (this.#plugin) {
	            return this.#plugin.baseUrl;
	        }
	        switch (this.network.name) {
	            case "mainnet":
	                return "https:/\/api.etherscan.io";
	            case "goerli":
	                return "https:/\/api-goerli.etherscan.io";
	            case "sepolia":
	                return "https:/\/api-sepolia.etherscan.io";
	            case "holesky":
	                return "https:/\/api-holesky.etherscan.io";
	            case "arbitrum":
	                return "https:/\/api.arbiscan.io";
	            case "arbitrum-goerli":
	                return "https:/\/api-goerli.arbiscan.io";
	            case "bnb":
	                return "https:/\/api.bscscan.com";
	            case "bnbt":
	                return "https:/\/api-testnet.bscscan.com";
	            case "matic":
	                return "https:/\/api.polygonscan.com";
	            case "matic-mumbai":
	                return "https:/\/api-testnet.polygonscan.com";
	            case "optimism":
	                return "https:/\/api-optimistic.etherscan.io";
	            case "optimism-goerli":
	                return "https:/\/api-goerli-optimistic.etherscan.io";
	        }
	        (0, index_js_4.assertArgument)(false, "unsupported network", "network", this.network);
	    }
	    /**
	     *  Returns the URL for the %%module%% and %%params%%.
	     */
	    getUrl(module, params) {
	        const query = Object.keys(params).reduce((accum, key) => {
	            const value = params[key];
	            if (value != null) {
	                accum += `&${key}=${value}`;
	            }
	            return accum;
	        }, "");
	        const apiKey = ((this.apiKey) ? `&apikey=${this.apiKey}` : "");
	        return `${this.getBaseUrl()}/api?module=${module}${query}${apiKey}`;
	    }
	    /**
	     *  Returns the URL for using POST requests.
	     */
	    getPostUrl() {
	        return `${this.getBaseUrl()}/api`;
	    }
	    /**
	     *  Returns the parameters for using POST requests.
	     */
	    getPostData(module, params) {
	        params.module = module;
	        params.apikey = this.apiKey;
	        return params;
	    }
	    async detectNetwork() {
	        return this.network;
	    }
	    /**
	     *  Resolves to the result of calling %%module%% with %%params%%.
	     *
	     *  If %%post%%, the request is made as a POST request.
	     */
	    async fetch(module, params, post) {
	        const id = nextId++;
	        const url = (post ? this.getPostUrl() : this.getUrl(module, params));
	        const payload = (post ? this.getPostData(module, params) : null);
	        this.emit("debug", { action: "sendRequest", id, url, payload: payload });
	        const request = new index_js_4.FetchRequest(url);
	        request.setThrottleParams({ slotInterval: 1000 });
	        request.retryFunc = (req, resp, attempt) => {
	            if (this.isCommunityResource()) {
	                (0, community_js_1.showThrottleMessage)("Etherscan");
	            }
	            return Promise.resolve(true);
	        };
	        request.processFunc = async (request, response) => {
	            const result = response.hasBody() ? JSON.parse((0, index_js_4.toUtf8String)(response.body)) : {};
	            const throttle = ((typeof (result.result) === "string") ? result.result : "").toLowerCase().indexOf("rate limit") >= 0;
	            if (module === "proxy") {
	                // This JSON response indicates we are being throttled
	                if (result && result.status == 0 && result.message == "NOTOK" && throttle) {
	                    this.emit("debug", { action: "receiveError", id, reason: "proxy-NOTOK", error: result });
	                    response.throwThrottleError(result.result, THROTTLE);
	                }
	            }
	            else {
	                if (throttle) {
	                    this.emit("debug", { action: "receiveError", id, reason: "null result", error: result.result });
	                    response.throwThrottleError(result.result, THROTTLE);
	                }
	            }
	            return response;
	        };
	        if (payload) {
	            request.setHeader("content-type", "application/x-www-form-urlencoded; charset=UTF-8");
	            request.body = Object.keys(payload).map((k) => `${k}=${payload[k]}`).join("&");
	        }
	        const response = await request.send();
	        try {
	            response.assertOk();
	        }
	        catch (error) {
	            this.emit("debug", { action: "receiveError", id, error, reason: "assertOk" });
	            (0, index_js_4.assert)(false, "response error", "SERVER_ERROR", { request, response });
	        }
	        if (!response.hasBody()) {
	            this.emit("debug", { action: "receiveError", id, error: "missing body", reason: "null body" });
	            (0, index_js_4.assert)(false, "missing response", "SERVER_ERROR", { request, response });
	        }
	        const result = JSON.parse((0, index_js_4.toUtf8String)(response.body));
	        if (module === "proxy") {
	            if (result.jsonrpc != "2.0") {
	                this.emit("debug", { action: "receiveError", id, result, reason: "invalid JSON-RPC" });
	                (0, index_js_4.assert)(false, "invalid JSON-RPC response (missing jsonrpc='2.0')", "SERVER_ERROR", { request, response, info: { result } });
	            }
	            if (result.error) {
	                this.emit("debug", { action: "receiveError", id, result, reason: "JSON-RPC error" });
	                (0, index_js_4.assert)(false, "error response", "SERVER_ERROR", { request, response, info: { result } });
	            }
	            this.emit("debug", { action: "receiveRequest", id, result });
	            return result.result;
	        }
	        else {
	            // getLogs, getHistory have weird success responses
	            if (result.status == 0 && (result.message === "No records found" || result.message === "No transactions found")) {
	                this.emit("debug", { action: "receiveRequest", id, result });
	                return result.result;
	            }
	            if (result.status != 1 || (typeof (result.message) === "string" && !result.message.match(/^OK/))) {
	                this.emit("debug", { action: "receiveError", id, result });
	                (0, index_js_4.assert)(false, "error response", "SERVER_ERROR", { request, response, info: { result } });
	            }
	            this.emit("debug", { action: "receiveRequest", id, result });
	            return result.result;
	        }
	    }
	    /**
	     *  Returns %%transaction%% normalized for the Etherscan API.
	     */
	    _getTransactionPostData(transaction) {
	        const result = {};
	        for (let key in transaction) {
	            if (skipKeys.indexOf(key) >= 0) {
	                continue;
	            }
	            if (transaction[key] == null) {
	                continue;
	            }
	            let value = transaction[key];
	            if (key === "type" && value === 0) {
	                continue;
	            }
	            if (key === "blockTag" && value === "latest") {
	                continue;
	            }
	            // Quantity-types require no leading zero, unless 0
	            if ({ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true }[key]) {
	                value = (0, index_js_4.toQuantity)(value);
	            }
	            else if (key === "accessList") {
	                value = "[" + (0, index_js_3.accessListify)(value).map((set) => {
	                    return `{address:"${set.address}",storageKeys:["${set.storageKeys.join('","')}"]}`;
	                }).join(",") + "]";
	            }
	            else {
	                value = (0, index_js_4.hexlify)(value);
	            }
	            result[key] = value;
	        }
	        return result;
	    }
	    /**
	     *  Throws the normalized Etherscan error.
	     */
	    _checkError(req, error, transaction) {
	        // Pull any message out if, possible
	        let message = "";
	        if ((0, index_js_4.isError)(error, "SERVER_ERROR")) {
	            // Check for an error emitted by a proxy call
	            try {
	                message = error.info.result.error.message;
	            }
	            catch (e) { }
	            if (!message) {
	                try {
	                    message = error.info.message;
	                }
	                catch (e) { }
	            }
	        }
	        if (req.method === "estimateGas") {
	            if (!message.match(/revert/i) && message.match(/insufficient funds/i)) {
	                (0, index_js_4.assert)(false, "insufficient funds", "INSUFFICIENT_FUNDS", {
	                    transaction: req.transaction
	                });
	            }
	        }
	        if (req.method === "call" || req.method === "estimateGas") {
	            if (message.match(/execution reverted/i)) {
	                let data = "";
	                try {
	                    data = error.info.result.error.data;
	                }
	                catch (error) { }
	                const e = index_js_1.AbiCoder.getBuiltinCallException(req.method, req.transaction, data);
	                e.info = { request: req, error };
	                throw e;
	            }
	        }
	        if (message) {
	            if (req.method === "broadcastTransaction") {
	                const transaction = index_js_3.Transaction.from(req.signedTransaction);
	                if (message.match(/replacement/i) && message.match(/underpriced/i)) {
	                    (0, index_js_4.assert)(false, "replacement fee too low", "REPLACEMENT_UNDERPRICED", {
	                        transaction
	                    });
	                }
	                if (message.match(/insufficient funds/)) {
	                    (0, index_js_4.assert)(false, "insufficient funds for intrinsic transaction cost", "INSUFFICIENT_FUNDS", {
	                        transaction
	                    });
	                }
	                if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {
	                    (0, index_js_4.assert)(false, "nonce has already been used", "NONCE_EXPIRED", {
	                        transaction
	                    });
	                }
	            }
	        }
	        // Something we could not process
	        throw error;
	    }
	    async _detectNetwork() {
	        return this.network;
	    }
	    async _perform(req) {
	        switch (req.method) {
	            case "chainId":
	                return this.network.chainId;
	            case "getBlockNumber":
	                return this.fetch("proxy", { action: "eth_blockNumber" });
	            case "getGasPrice":
	                return this.fetch("proxy", { action: "eth_gasPrice" });
	            case "getPriorityFee":
	                // This is temporary until Etherscan completes support
	                if (this.network.name === "mainnet") {
	                    return "1000000000";
	                }
	                else if (this.network.name === "optimism") {
	                    return "1000000";
	                }
	                else {
	                    throw new Error("fallback onto the AbstractProvider default");
	                }
	            /* Working with Etherscan to get this added:
	            try {
	                const test = await this.fetch("proxy", {
	                    action: "eth_maxPriorityFeePerGas"
	                });
	                console.log(test);
	                return test;
	            } catch (e) {
	                console.log("DEBUG", e);
	                throw e;
	            }
	            */
	            /* This might be safe; but due to rounding neither myself
	               or Etherscan are necessarily comfortable with this. :)
	            try {
	                const result = await this.fetch("gastracker", { action: "gasoracle" });
	                console.log(result);
	                const gasPrice = parseUnits(result.SafeGasPrice, "gwei");
	                const baseFee = parseUnits(result.suggestBaseFee, "gwei");
	                const priorityFee = gasPrice - baseFee;
	                if (priorityFee < 0) { throw new Error("negative priority fee; defer to abstract provider default"); }
	                return priorityFee;
	            } catch (error) {
	                console.log("DEBUG", error);
	                throw error;
	            }
	            */
	            case "getBalance":
	                // Returns base-10 result
	                return this.fetch("account", {
	                    action: "balance",
	                    address: req.address,
	                    tag: req.blockTag
	                });
	            case "getTransactionCount":
	                return this.fetch("proxy", {
	                    action: "eth_getTransactionCount",
	                    address: req.address,
	                    tag: req.blockTag
	                });
	            case "getCode":
	                return this.fetch("proxy", {
	                    action: "eth_getCode",
	                    address: req.address,
	                    tag: req.blockTag
	                });
	            case "getStorage":
	                return this.fetch("proxy", {
	                    action: "eth_getStorageAt",
	                    address: req.address,
	                    position: req.position,
	                    tag: req.blockTag
	                });
	            case "broadcastTransaction":
	                return this.fetch("proxy", {
	                    action: "eth_sendRawTransaction",
	                    hex: req.signedTransaction
	                }, true).catch((error) => {
	                    return this._checkError(req, error, req.signedTransaction);
	                });
	            case "getBlock":
	                if ("blockTag" in req) {
	                    return this.fetch("proxy", {
	                        action: "eth_getBlockByNumber",
	                        tag: req.blockTag,
	                        boolean: (req.includeTransactions ? "true" : "false")
	                    });
	                }
	                (0, index_js_4.assert)(false, "getBlock by blockHash not supported by Etherscan", "UNSUPPORTED_OPERATION", {
	                    operation: "getBlock(blockHash)"
	                });
	            case "getTransaction":
	                return this.fetch("proxy", {
	                    action: "eth_getTransactionByHash",
	                    txhash: req.hash
	                });
	            case "getTransactionReceipt":
	                return this.fetch("proxy", {
	                    action: "eth_getTransactionReceipt",
	                    txhash: req.hash
	                });
	            case "call": {
	                if (req.blockTag !== "latest") {
	                    throw new Error("EtherscanProvider does not support blockTag for call");
	                }
	                const postData = this._getTransactionPostData(req.transaction);
	                postData.module = "proxy";
	                postData.action = "eth_call";
	                try {
	                    return await this.fetch("proxy", postData, true);
	                }
	                catch (error) {
	                    return this._checkError(req, error, req.transaction);
	                }
	            }
	            case "estimateGas": {
	                const postData = this._getTransactionPostData(req.transaction);
	                postData.module = "proxy";
	                postData.action = "eth_estimateGas";
	                try {
	                    return await this.fetch("proxy", postData, true);
	                }
	                catch (error) {
	                    return this._checkError(req, error, req.transaction);
	                }
	            }
	        }
	        return super._perform(req);
	    }
	    async getNetwork() {
	        return this.network;
	    }
	    /**
	     *  Resolves to the current price of ether.
	     *
	     *  This returns ``0`` on any network other than ``mainnet``.
	     */
	    async getEtherPrice() {
	        if (this.network.name !== "mainnet") {
	            return 0.0;
	        }
	        return parseFloat((await this.fetch("stats", { action: "ethprice" })).ethusd);
	    }
	    /**
	     *  Resolves to a [Contract]] for %%address%%, using the
	     *  Etherscan API to retreive the Contract ABI.
	     */
	    async getContract(_address) {
	        let address = this._getAddress(_address);
	        if (isPromise(address)) {
	            address = await address;
	        }
	        try {
	            const resp = await this.fetch("contract", {
	                action: "getabi", address
	            });
	            const abi = JSON.parse(resp);
	            return new index_js_2.Contract(address, abi, this);
	        }
	        catch (error) {
	            return null;
	        }
	    }
	    isCommunityResource() {
	        return (this.apiKey == null);
	    }
	}
	providerEtherscan.EtherscanProvider = EtherscanProvider;
	
	return providerEtherscan;
}

var providerInfura = {};

var providerWebsocket = {};

var ws$1 = {};

var bufferUtil = {exports: {}};

var constants$2;
var hasRequiredConstants;

function requireConstants () {
	if (hasRequiredConstants) return constants$2;
	hasRequiredConstants = 1;

	constants$2 = {
	  BINARY_TYPES: ['nodebuffer', 'arraybuffer', 'fragments'],
	  EMPTY_BUFFER: Buffer.alloc(0),
	  GUID: '258EAFA5-E914-47DA-95CA-C5AB0DC85B11',
	  kForOnEventAttribute: Symbol('kIsForOnEventAttribute'),
	  kListener: Symbol('kListener'),
	  kStatusCode: Symbol('status-code'),
	  kWebSocket: Symbol('websocket'),
	  NOOP: () => {}
	};
	return constants$2;
}

var hasRequiredBufferUtil;

function requireBufferUtil () {
	if (hasRequiredBufferUtil) return bufferUtil.exports;
	hasRequiredBufferUtil = 1;

	const { EMPTY_BUFFER } = requireConstants();

	/**
	 * Merges an array of buffers into a new buffer.
	 *
	 * @param {Buffer[]} list The array of buffers to concat
	 * @param {Number} totalLength The total length of buffers in the list
	 * @return {Buffer} The resulting buffer
	 * @public
	 */
	function concat(list, totalLength) {
	  if (list.length === 0) return EMPTY_BUFFER;
	  if (list.length === 1) return list[0];

	  const target = Buffer.allocUnsafe(totalLength);
	  let offset = 0;

	  for (let i = 0; i < list.length; i++) {
	    const buf = list[i];
	    target.set(buf, offset);
	    offset += buf.length;
	  }

	  if (offset < totalLength) return target.slice(0, offset);

	  return target;
	}

	/**
	 * Masks a buffer using the given mask.
	 *
	 * @param {Buffer} source The buffer to mask
	 * @param {Buffer} mask The mask to use
	 * @param {Buffer} output The buffer where to store the result
	 * @param {Number} offset The offset at which to start writing
	 * @param {Number} length The number of bytes to mask.
	 * @public
	 */
	function _mask(source, mask, output, offset, length) {
	  for (let i = 0; i < length; i++) {
	    output[offset + i] = source[i] ^ mask[i & 3];
	  }
	}

	/**
	 * Unmasks a buffer using the given mask.
	 *
	 * @param {Buffer} buffer The buffer to unmask
	 * @param {Buffer} mask The mask to use
	 * @public
	 */
	function _unmask(buffer, mask) {
	  for (let i = 0; i < buffer.length; i++) {
	    buffer[i] ^= mask[i & 3];
	  }
	}

	/**
	 * Converts a buffer to an `ArrayBuffer`.
	 *
	 * @param {Buffer} buf The buffer to convert
	 * @return {ArrayBuffer} Converted buffer
	 * @public
	 */
	function toArrayBuffer(buf) {
	  if (buf.byteLength === buf.buffer.byteLength) {
	    return buf.buffer;
	  }

	  return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
	}

	/**
	 * Converts `data` to a `Buffer`.
	 *
	 * @param {*} data The data to convert
	 * @return {Buffer} The buffer
	 * @throws {TypeError}
	 * @public
	 */
	function toBuffer(data) {
	  toBuffer.readOnly = true;

	  if (Buffer.isBuffer(data)) return data;

	  let buf;

	  if (data instanceof ArrayBuffer) {
	    buf = Buffer.from(data);
	  } else if (ArrayBuffer.isView(data)) {
	    buf = Buffer.from(data.buffer, data.byteOffset, data.byteLength);
	  } else {
	    buf = Buffer.from(data);
	    toBuffer.readOnly = false;
	  }

	  return buf;
	}

	try {
	  const bufferUtil$1 = require('bufferutil');

	  bufferUtil.exports = {
	    concat,
	    mask(source, mask, output, offset, length) {
	      if (length < 48) _mask(source, mask, output, offset, length);
	      else bufferUtil$1.mask(source, mask, output, offset, length);
	    },
	    toArrayBuffer,
	    toBuffer,
	    unmask(buffer, mask) {
	      if (buffer.length < 32) _unmask(buffer, mask);
	      else bufferUtil$1.unmask(buffer, mask);
	    }
	  };
	} catch (e) /* istanbul ignore next */ {
	  bufferUtil.exports = {
	    concat,
	    mask: _mask,
	    toArrayBuffer,
	    toBuffer,
	    unmask: _unmask
	  };
	}
	return bufferUtil.exports;
}

var limiter;
var hasRequiredLimiter;

function requireLimiter () {
	if (hasRequiredLimiter) return limiter;
	hasRequiredLimiter = 1;

	const kDone = Symbol('kDone');
	const kRun = Symbol('kRun');

	/**
	 * A very simple job queue with adjustable concurrency. Adapted from
	 * https://github.com/STRML/async-limiter
	 */
	class Limiter {
	  /**
	   * Creates a new `Limiter`.
	   *
	   * @param {Number} [concurrency=Infinity] The maximum number of jobs allowed
	   *     to run concurrently
	   */
	  constructor(concurrency) {
	    this[kDone] = () => {
	      this.pending--;
	      this[kRun]();
	    };
	    this.concurrency = concurrency || Infinity;
	    this.jobs = [];
	    this.pending = 0;
	  }

	  /**
	   * Adds a job to the queue.
	   *
	   * @param {Function} job The job to run
	   * @public
	   */
	  add(job) {
	    this.jobs.push(job);
	    this[kRun]();
	  }

	  /**
	   * Removes a job from the queue and runs it if possible.
	   *
	   * @private
	   */
	  [kRun]() {
	    if (this.pending === this.concurrency) return;

	    if (this.jobs.length) {
	      const job = this.jobs.shift();

	      this.pending++;
	      job(this[kDone]);
	    }
	  }
	}

	limiter = Limiter;
	return limiter;
}

var permessageDeflate;
var hasRequiredPermessageDeflate;

function requirePermessageDeflate () {
	if (hasRequiredPermessageDeflate) return permessageDeflate;
	hasRequiredPermessageDeflate = 1;

	const zlib = require$$3;

	const bufferUtil = requireBufferUtil();
	const Limiter = requireLimiter();
	const { kStatusCode } = requireConstants();

	const TRAILER = Buffer.from([0x00, 0x00, 0xff, 0xff]);
	const kPerMessageDeflate = Symbol('permessage-deflate');
	const kTotalLength = Symbol('total-length');
	const kCallback = Symbol('callback');
	const kBuffers = Symbol('buffers');
	const kError = Symbol('error');

	//
	// We limit zlib concurrency, which prevents severe memory fragmentation
	// as documented in https://github.com/nodejs/node/issues/8871#issuecomment-250915913
	// and https://github.com/websockets/ws/issues/1202
	//
	// Intentionally global; it's the global thread pool that's an issue.
	//
	let zlibLimiter;

	/**
	 * permessage-deflate implementation.
	 */
	class PerMessageDeflate {
	  /**
	   * Creates a PerMessageDeflate instance.
	   *
	   * @param {Object} [options] Configuration options
	   * @param {(Boolean|Number)} [options.clientMaxWindowBits] Advertise support
	   *     for, or request, a custom client window size
	   * @param {Boolean} [options.clientNoContextTakeover=false] Advertise/
	   *     acknowledge disabling of client context takeover
	   * @param {Number} [options.concurrencyLimit=10] The number of concurrent
	   *     calls to zlib
	   * @param {(Boolean|Number)} [options.serverMaxWindowBits] Request/confirm the
	   *     use of a custom server window size
	   * @param {Boolean} [options.serverNoContextTakeover=false] Request/accept
	   *     disabling of server context takeover
	   * @param {Number} [options.threshold=1024] Size (in bytes) below which
	   *     messages should not be compressed if context takeover is disabled
	   * @param {Object} [options.zlibDeflateOptions] Options to pass to zlib on
	   *     deflate
	   * @param {Object} [options.zlibInflateOptions] Options to pass to zlib on
	   *     inflate
	   * @param {Boolean} [isServer=false] Create the instance in either server or
	   *     client mode
	   * @param {Number} [maxPayload=0] The maximum allowed message length
	   */
	  constructor(options, isServer, maxPayload) {
	    this._maxPayload = maxPayload | 0;
	    this._options = options || {};
	    this._threshold =
	      this._options.threshold !== undefined ? this._options.threshold : 1024;
	    this._isServer = !!isServer;
	    this._deflate = null;
	    this._inflate = null;

	    this.params = null;

	    if (!zlibLimiter) {
	      const concurrency =
	        this._options.concurrencyLimit !== undefined
	          ? this._options.concurrencyLimit
	          : 10;
	      zlibLimiter = new Limiter(concurrency);
	    }
	  }

	  /**
	   * @type {String}
	   */
	  static get extensionName() {
	    return 'permessage-deflate';
	  }

	  /**
	   * Create an extension negotiation offer.
	   *
	   * @return {Object} Extension parameters
	   * @public
	   */
	  offer() {
	    const params = {};

	    if (this._options.serverNoContextTakeover) {
	      params.server_no_context_takeover = true;
	    }
	    if (this._options.clientNoContextTakeover) {
	      params.client_no_context_takeover = true;
	    }
	    if (this._options.serverMaxWindowBits) {
	      params.server_max_window_bits = this._options.serverMaxWindowBits;
	    }
	    if (this._options.clientMaxWindowBits) {
	      params.client_max_window_bits = this._options.clientMaxWindowBits;
	    } else if (this._options.clientMaxWindowBits == null) {
	      params.client_max_window_bits = true;
	    }

	    return params;
	  }

	  /**
	   * Accept an extension negotiation offer/response.
	   *
	   * @param {Array} configurations The extension negotiation offers/reponse
	   * @return {Object} Accepted configuration
	   * @public
	   */
	  accept(configurations) {
	    configurations = this.normalizeParams(configurations);

	    this.params = this._isServer
	      ? this.acceptAsServer(configurations)
	      : this.acceptAsClient(configurations);

	    return this.params;
	  }

	  /**
	   * Releases all resources used by the extension.
	   *
	   * @public
	   */
	  cleanup() {
	    if (this._inflate) {
	      this._inflate.close();
	      this._inflate = null;
	    }

	    if (this._deflate) {
	      const callback = this._deflate[kCallback];

	      this._deflate.close();
	      this._deflate = null;

	      if (callback) {
	        callback(
	          new Error(
	            'The deflate stream was closed while data was being processed'
	          )
	        );
	      }
	    }
	  }

	  /**
	   *  Accept an extension negotiation offer.
	   *
	   * @param {Array} offers The extension negotiation offers
	   * @return {Object} Accepted configuration
	   * @private
	   */
	  acceptAsServer(offers) {
	    const opts = this._options;
	    const accepted = offers.find((params) => {
	      if (
	        (opts.serverNoContextTakeover === false &&
	          params.server_no_context_takeover) ||
	        (params.server_max_window_bits &&
	          (opts.serverMaxWindowBits === false ||
	            (typeof opts.serverMaxWindowBits === 'number' &&
	              opts.serverMaxWindowBits > params.server_max_window_bits))) ||
	        (typeof opts.clientMaxWindowBits === 'number' &&
	          !params.client_max_window_bits)
	      ) {
	        return false;
	      }

	      return true;
	    });

	    if (!accepted) {
	      throw new Error('None of the extension offers can be accepted');
	    }

	    if (opts.serverNoContextTakeover) {
	      accepted.server_no_context_takeover = true;
	    }
	    if (opts.clientNoContextTakeover) {
	      accepted.client_no_context_takeover = true;
	    }
	    if (typeof opts.serverMaxWindowBits === 'number') {
	      accepted.server_max_window_bits = opts.serverMaxWindowBits;
	    }
	    if (typeof opts.clientMaxWindowBits === 'number') {
	      accepted.client_max_window_bits = opts.clientMaxWindowBits;
	    } else if (
	      accepted.client_max_window_bits === true ||
	      opts.clientMaxWindowBits === false
	    ) {
	      delete accepted.client_max_window_bits;
	    }

	    return accepted;
	  }

	  /**
	   * Accept the extension negotiation response.
	   *
	   * @param {Array} response The extension negotiation response
	   * @return {Object} Accepted configuration
	   * @private
	   */
	  acceptAsClient(response) {
	    const params = response[0];

	    if (
	      this._options.clientNoContextTakeover === false &&
	      params.client_no_context_takeover
	    ) {
	      throw new Error('Unexpected parameter "client_no_context_takeover"');
	    }

	    if (!params.client_max_window_bits) {
	      if (typeof this._options.clientMaxWindowBits === 'number') {
	        params.client_max_window_bits = this._options.clientMaxWindowBits;
	      }
	    } else if (
	      this._options.clientMaxWindowBits === false ||
	      (typeof this._options.clientMaxWindowBits === 'number' &&
	        params.client_max_window_bits > this._options.clientMaxWindowBits)
	    ) {
	      throw new Error(
	        'Unexpected or invalid parameter "client_max_window_bits"'
	      );
	    }

	    return params;
	  }

	  /**
	   * Normalize parameters.
	   *
	   * @param {Array} configurations The extension negotiation offers/reponse
	   * @return {Array} The offers/response with normalized parameters
	   * @private
	   */
	  normalizeParams(configurations) {
	    configurations.forEach((params) => {
	      Object.keys(params).forEach((key) => {
	        let value = params[key];

	        if (value.length > 1) {
	          throw new Error(`Parameter "${key}" must have only a single value`);
	        }

	        value = value[0];

	        if (key === 'client_max_window_bits') {
	          if (value !== true) {
	            const num = +value;
	            if (!Number.isInteger(num) || num < 8 || num > 15) {
	              throw new TypeError(
	                `Invalid value for parameter "${key}": ${value}`
	              );
	            }
	            value = num;
	          } else if (!this._isServer) {
	            throw new TypeError(
	              `Invalid value for parameter "${key}": ${value}`
	            );
	          }
	        } else if (key === 'server_max_window_bits') {
	          const num = +value;
	          if (!Number.isInteger(num) || num < 8 || num > 15) {
	            throw new TypeError(
	              `Invalid value for parameter "${key}": ${value}`
	            );
	          }
	          value = num;
	        } else if (
	          key === 'client_no_context_takeover' ||
	          key === 'server_no_context_takeover'
	        ) {
	          if (value !== true) {
	            throw new TypeError(
	              `Invalid value for parameter "${key}": ${value}`
	            );
	          }
	        } else {
	          throw new Error(`Unknown parameter "${key}"`);
	        }

	        params[key] = value;
	      });
	    });

	    return configurations;
	  }

	  /**
	   * Decompress data. Concurrency limited.
	   *
	   * @param {Buffer} data Compressed data
	   * @param {Boolean} fin Specifies whether or not this is the last fragment
	   * @param {Function} callback Callback
	   * @public
	   */
	  decompress(data, fin, callback) {
	    zlibLimiter.add((done) => {
	      this._decompress(data, fin, (err, result) => {
	        done();
	        callback(err, result);
	      });
	    });
	  }

	  /**
	   * Compress data. Concurrency limited.
	   *
	   * @param {(Buffer|String)} data Data to compress
	   * @param {Boolean} fin Specifies whether or not this is the last fragment
	   * @param {Function} callback Callback
	   * @public
	   */
	  compress(data, fin, callback) {
	    zlibLimiter.add((done) => {
	      this._compress(data, fin, (err, result) => {
	        done();
	        callback(err, result);
	      });
	    });
	  }

	  /**
	   * Decompress data.
	   *
	   * @param {Buffer} data Compressed data
	   * @param {Boolean} fin Specifies whether or not this is the last fragment
	   * @param {Function} callback Callback
	   * @private
	   */
	  _decompress(data, fin, callback) {
	    const endpoint = this._isServer ? 'client' : 'server';

	    if (!this._inflate) {
	      const key = `${endpoint}_max_window_bits`;
	      const windowBits =
	        typeof this.params[key] !== 'number'
	          ? zlib.Z_DEFAULT_WINDOWBITS
	          : this.params[key];

	      this._inflate = zlib.createInflateRaw({
	        ...this._options.zlibInflateOptions,
	        windowBits
	      });
	      this._inflate[kPerMessageDeflate] = this;
	      this._inflate[kTotalLength] = 0;
	      this._inflate[kBuffers] = [];
	      this._inflate.on('error', inflateOnError);
	      this._inflate.on('data', inflateOnData);
	    }

	    this._inflate[kCallback] = callback;

	    this._inflate.write(data);
	    if (fin) this._inflate.write(TRAILER);

	    this._inflate.flush(() => {
	      const err = this._inflate[kError];

	      if (err) {
	        this._inflate.close();
	        this._inflate = null;
	        callback(err);
	        return;
	      }

	      const data = bufferUtil.concat(
	        this._inflate[kBuffers],
	        this._inflate[kTotalLength]
	      );

	      if (this._inflate._readableState.endEmitted) {
	        this._inflate.close();
	        this._inflate = null;
	      } else {
	        this._inflate[kTotalLength] = 0;
	        this._inflate[kBuffers] = [];

	        if (fin && this.params[`${endpoint}_no_context_takeover`]) {
	          this._inflate.reset();
	        }
	      }

	      callback(null, data);
	    });
	  }

	  /**
	   * Compress data.
	   *
	   * @param {(Buffer|String)} data Data to compress
	   * @param {Boolean} fin Specifies whether or not this is the last fragment
	   * @param {Function} callback Callback
	   * @private
	   */
	  _compress(data, fin, callback) {
	    const endpoint = this._isServer ? 'server' : 'client';

	    if (!this._deflate) {
	      const key = `${endpoint}_max_window_bits`;
	      const windowBits =
	        typeof this.params[key] !== 'number'
	          ? zlib.Z_DEFAULT_WINDOWBITS
	          : this.params[key];

	      this._deflate = zlib.createDeflateRaw({
	        ...this._options.zlibDeflateOptions,
	        windowBits
	      });

	      this._deflate[kTotalLength] = 0;
	      this._deflate[kBuffers] = [];

	      this._deflate.on('data', deflateOnData);
	    }

	    this._deflate[kCallback] = callback;

	    this._deflate.write(data);
	    this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {
	      if (!this._deflate) {
	        //
	        // The deflate stream was closed while data was being processed.
	        //
	        return;
	      }

	      let data = bufferUtil.concat(
	        this._deflate[kBuffers],
	        this._deflate[kTotalLength]
	      );

	      if (fin) data = data.slice(0, data.length - 4);

	      //
	      // Ensure that the callback will not be called again in
	      // `PerMessageDeflate#cleanup()`.
	      //
	      this._deflate[kCallback] = null;

	      this._deflate[kTotalLength] = 0;
	      this._deflate[kBuffers] = [];

	      if (fin && this.params[`${endpoint}_no_context_takeover`]) {
	        this._deflate.reset();
	      }

	      callback(null, data);
	    });
	  }
	}

	permessageDeflate = PerMessageDeflate;

	/**
	 * The listener of the `zlib.DeflateRaw` stream `'data'` event.
	 *
	 * @param {Buffer} chunk A chunk of data
	 * @private
	 */
	function deflateOnData(chunk) {
	  this[kBuffers].push(chunk);
	  this[kTotalLength] += chunk.length;
	}

	/**
	 * The listener of the `zlib.InflateRaw` stream `'data'` event.
	 *
	 * @param {Buffer} chunk A chunk of data
	 * @private
	 */
	function inflateOnData(chunk) {
	  this[kTotalLength] += chunk.length;

	  if (
	    this[kPerMessageDeflate]._maxPayload < 1 ||
	    this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload
	  ) {
	    this[kBuffers].push(chunk);
	    return;
	  }

	  this[kError] = new RangeError('Max payload size exceeded');
	  this[kError].code = 'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH';
	  this[kError][kStatusCode] = 1009;
	  this.removeListener('data', inflateOnData);
	  this.reset();
	}

	/**
	 * The listener of the `zlib.InflateRaw` stream `'error'` event.
	 *
	 * @param {Error} err The emitted error
	 * @private
	 */
	function inflateOnError(err) {
	  //
	  // There is no need to call `Zlib#close()` as the handle is automatically
	  // closed when an error is emitted.
	  //
	  this[kPerMessageDeflate]._inflate = null;
	  err[kStatusCode] = 1007;
	  this[kCallback](err);
	}
	return permessageDeflate;
}

var validation = {exports: {}};

var hasRequiredValidation;

function requireValidation () {
	if (hasRequiredValidation) return validation.exports;
	hasRequiredValidation = 1;

	//
	// Allowed token characters:
	//
	// '!', '#', '$', '%', '&', ''', '*', '+', '-',
	// '.', 0-9, A-Z, '^', '_', '`', a-z, '|', '~'
	//
	// tokenChars[32] === 0 // ' '
	// tokenChars[33] === 1 // '!'
	// tokenChars[34] === 0 // '"'
	// ...
	//
	// prettier-ignore
	const tokenChars = [
	  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0 - 15
	  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16 - 31
	  0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, // 32 - 47
	  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 48 - 63
	  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 64 - 79
	  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, // 80 - 95
	  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 96 - 111
	  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0 // 112 - 127
	];

	/**
	 * Checks if a status code is allowed in a close frame.
	 *
	 * @param {Number} code The status code
	 * @return {Boolean} `true` if the status code is valid, else `false`
	 * @public
	 */
	function isValidStatusCode(code) {
	  return (
	    (code >= 1000 &&
	      code <= 1014 &&
	      code !== 1004 &&
	      code !== 1005 &&
	      code !== 1006) ||
	    (code >= 3000 && code <= 4999)
	  );
	}

	/**
	 * Checks if a given buffer contains only correct UTF-8.
	 * Ported from https://www.cl.cam.ac.uk/%7Emgk25/ucs/utf8_check.c by
	 * Markus Kuhn.
	 *
	 * @param {Buffer} buf The buffer to check
	 * @return {Boolean} `true` if `buf` contains only correct UTF-8, else `false`
	 * @public
	 */
	function _isValidUTF8(buf) {
	  const len = buf.length;
	  let i = 0;

	  while (i < len) {
	    if ((buf[i] & 0x80) === 0) {
	      // 0xxxxxxx
	      i++;
	    } else if ((buf[i] & 0xe0) === 0xc0) {
	      // 110xxxxx 10xxxxxx
	      if (
	        i + 1 === len ||
	        (buf[i + 1] & 0xc0) !== 0x80 ||
	        (buf[i] & 0xfe) === 0xc0 // Overlong
	      ) {
	        return false;
	      }

	      i += 2;
	    } else if ((buf[i] & 0xf0) === 0xe0) {
	      // 1110xxxx 10xxxxxx 10xxxxxx
	      if (
	        i + 2 >= len ||
	        (buf[i + 1] & 0xc0) !== 0x80 ||
	        (buf[i + 2] & 0xc0) !== 0x80 ||
	        (buf[i] === 0xe0 && (buf[i + 1] & 0xe0) === 0x80) || // Overlong
	        (buf[i] === 0xed && (buf[i + 1] & 0xe0) === 0xa0) // Surrogate (U+D800 - U+DFFF)
	      ) {
	        return false;
	      }

	      i += 3;
	    } else if ((buf[i] & 0xf8) === 0xf0) {
	      // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
	      if (
	        i + 3 >= len ||
	        (buf[i + 1] & 0xc0) !== 0x80 ||
	        (buf[i + 2] & 0xc0) !== 0x80 ||
	        (buf[i + 3] & 0xc0) !== 0x80 ||
	        (buf[i] === 0xf0 && (buf[i + 1] & 0xf0) === 0x80) || // Overlong
	        (buf[i] === 0xf4 && buf[i + 1] > 0x8f) ||
	        buf[i] > 0xf4 // > U+10FFFF
	      ) {
	        return false;
	      }

	      i += 4;
	    } else {
	      return false;
	    }
	  }

	  return true;
	}

	try {
	  const isValidUTF8 = require('utf-8-validate');

	  validation.exports = {
	    isValidStatusCode,
	    isValidUTF8(buf) {
	      return buf.length < 150 ? _isValidUTF8(buf) : isValidUTF8(buf);
	    },
	    tokenChars
	  };
	} catch (e) /* istanbul ignore next */ {
	  validation.exports = {
	    isValidStatusCode,
	    isValidUTF8: _isValidUTF8,
	    tokenChars
	  };
	}
	return validation.exports;
}

var receiver;
var hasRequiredReceiver;

function requireReceiver () {
	if (hasRequiredReceiver) return receiver;
	hasRequiredReceiver = 1;

	const { Writable } = require$$0$2;

	const PerMessageDeflate = requirePermessageDeflate();
	const {
	  BINARY_TYPES,
	  EMPTY_BUFFER,
	  kStatusCode,
	  kWebSocket
	} = requireConstants();
	const { concat, toArrayBuffer, unmask } = requireBufferUtil();
	const { isValidStatusCode, isValidUTF8 } = requireValidation();

	const GET_INFO = 0;
	const GET_PAYLOAD_LENGTH_16 = 1;
	const GET_PAYLOAD_LENGTH_64 = 2;
	const GET_MASK = 3;
	const GET_DATA = 4;
	const INFLATING = 5;

	/**
	 * HyBi Receiver implementation.
	 *
	 * @extends Writable
	 */
	class Receiver extends Writable {
	  /**
	   * Creates a Receiver instance.
	   *
	   * @param {Object} [options] Options object
	   * @param {String} [options.binaryType=nodebuffer] The type for binary data
	   * @param {Object} [options.extensions] An object containing the negotiated
	   *     extensions
	   * @param {Boolean} [options.isServer=false] Specifies whether to operate in
	   *     client or server mode
	   * @param {Number} [options.maxPayload=0] The maximum allowed message length
	   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or
	   *     not to skip UTF-8 validation for text and close messages
	   */
	  constructor(options = {}) {
	    super();

	    this._binaryType = options.binaryType || BINARY_TYPES[0];
	    this._extensions = options.extensions || {};
	    this._isServer = !!options.isServer;
	    this._maxPayload = options.maxPayload | 0;
	    this._skipUTF8Validation = !!options.skipUTF8Validation;
	    this[kWebSocket] = undefined;

	    this._bufferedBytes = 0;
	    this._buffers = [];

	    this._compressed = false;
	    this._payloadLength = 0;
	    this._mask = undefined;
	    this._fragmented = 0;
	    this._masked = false;
	    this._fin = false;
	    this._opcode = 0;

	    this._totalPayloadLength = 0;
	    this._messageLength = 0;
	    this._fragments = [];

	    this._state = GET_INFO;
	    this._loop = false;
	  }

	  /**
	   * Implements `Writable.prototype._write()`.
	   *
	   * @param {Buffer} chunk The chunk of data to write
	   * @param {String} encoding The character encoding of `chunk`
	   * @param {Function} cb Callback
	   * @private
	   */
	  _write(chunk, encoding, cb) {
	    if (this._opcode === 0x08 && this._state == GET_INFO) return cb();

	    this._bufferedBytes += chunk.length;
	    this._buffers.push(chunk);
	    this.startLoop(cb);
	  }

	  /**
	   * Consumes `n` bytes from the buffered data.
	   *
	   * @param {Number} n The number of bytes to consume
	   * @return {Buffer} The consumed bytes
	   * @private
	   */
	  consume(n) {
	    this._bufferedBytes -= n;

	    if (n === this._buffers[0].length) return this._buffers.shift();

	    if (n < this._buffers[0].length) {
	      const buf = this._buffers[0];
	      this._buffers[0] = buf.slice(n);
	      return buf.slice(0, n);
	    }

	    const dst = Buffer.allocUnsafe(n);

	    do {
	      const buf = this._buffers[0];
	      const offset = dst.length - n;

	      if (n >= buf.length) {
	        dst.set(this._buffers.shift(), offset);
	      } else {
	        dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n), offset);
	        this._buffers[0] = buf.slice(n);
	      }

	      n -= buf.length;
	    } while (n > 0);

	    return dst;
	  }

	  /**
	   * Starts the parsing loop.
	   *
	   * @param {Function} cb Callback
	   * @private
	   */
	  startLoop(cb) {
	    let err;
	    this._loop = true;

	    do {
	      switch (this._state) {
	        case GET_INFO:
	          err = this.getInfo();
	          break;
	        case GET_PAYLOAD_LENGTH_16:
	          err = this.getPayloadLength16();
	          break;
	        case GET_PAYLOAD_LENGTH_64:
	          err = this.getPayloadLength64();
	          break;
	        case GET_MASK:
	          this.getMask();
	          break;
	        case GET_DATA:
	          err = this.getData(cb);
	          break;
	        default:
	          // `INFLATING`
	          this._loop = false;
	          return;
	      }
	    } while (this._loop);

	    cb(err);
	  }

	  /**
	   * Reads the first two bytes of a frame.
	   *
	   * @return {(RangeError|undefined)} A possible error
	   * @private
	   */
	  getInfo() {
	    if (this._bufferedBytes < 2) {
	      this._loop = false;
	      return;
	    }

	    const buf = this.consume(2);

	    if ((buf[0] & 0x30) !== 0x00) {
	      this._loop = false;
	      return error(
	        RangeError,
	        'RSV2 and RSV3 must be clear',
	        true,
	        1002,
	        'WS_ERR_UNEXPECTED_RSV_2_3'
	      );
	    }

	    const compressed = (buf[0] & 0x40) === 0x40;

	    if (compressed && !this._extensions[PerMessageDeflate.extensionName]) {
	      this._loop = false;
	      return error(
	        RangeError,
	        'RSV1 must be clear',
	        true,
	        1002,
	        'WS_ERR_UNEXPECTED_RSV_1'
	      );
	    }

	    this._fin = (buf[0] & 0x80) === 0x80;
	    this._opcode = buf[0] & 0x0f;
	    this._payloadLength = buf[1] & 0x7f;

	    if (this._opcode === 0x00) {
	      if (compressed) {
	        this._loop = false;
	        return error(
	          RangeError,
	          'RSV1 must be clear',
	          true,
	          1002,
	          'WS_ERR_UNEXPECTED_RSV_1'
	        );
	      }

	      if (!this._fragmented) {
	        this._loop = false;
	        return error(
	          RangeError,
	          'invalid opcode 0',
	          true,
	          1002,
	          'WS_ERR_INVALID_OPCODE'
	        );
	      }

	      this._opcode = this._fragmented;
	    } else if (this._opcode === 0x01 || this._opcode === 0x02) {
	      if (this._fragmented) {
	        this._loop = false;
	        return error(
	          RangeError,
	          `invalid opcode ${this._opcode}`,
	          true,
	          1002,
	          'WS_ERR_INVALID_OPCODE'
	        );
	      }

	      this._compressed = compressed;
	    } else if (this._opcode > 0x07 && this._opcode < 0x0b) {
	      if (!this._fin) {
	        this._loop = false;
	        return error(
	          RangeError,
	          'FIN must be set',
	          true,
	          1002,
	          'WS_ERR_EXPECTED_FIN'
	        );
	      }

	      if (compressed) {
	        this._loop = false;
	        return error(
	          RangeError,
	          'RSV1 must be clear',
	          true,
	          1002,
	          'WS_ERR_UNEXPECTED_RSV_1'
	        );
	      }

	      if (this._payloadLength > 0x7d) {
	        this._loop = false;
	        return error(
	          RangeError,
	          `invalid payload length ${this._payloadLength}`,
	          true,
	          1002,
	          'WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH'
	        );
	      }
	    } else {
	      this._loop = false;
	      return error(
	        RangeError,
	        `invalid opcode ${this._opcode}`,
	        true,
	        1002,
	        'WS_ERR_INVALID_OPCODE'
	      );
	    }

	    if (!this._fin && !this._fragmented) this._fragmented = this._opcode;
	    this._masked = (buf[1] & 0x80) === 0x80;

	    if (this._isServer) {
	      if (!this._masked) {
	        this._loop = false;
	        return error(
	          RangeError,
	          'MASK must be set',
	          true,
	          1002,
	          'WS_ERR_EXPECTED_MASK'
	        );
	      }
	    } else if (this._masked) {
	      this._loop = false;
	      return error(
	        RangeError,
	        'MASK must be clear',
	        true,
	        1002,
	        'WS_ERR_UNEXPECTED_MASK'
	      );
	    }

	    if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;
	    else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;
	    else return this.haveLength();
	  }

	  /**
	   * Gets extended payload length (7+16).
	   *
	   * @return {(RangeError|undefined)} A possible error
	   * @private
	   */
	  getPayloadLength16() {
	    if (this._bufferedBytes < 2) {
	      this._loop = false;
	      return;
	    }

	    this._payloadLength = this.consume(2).readUInt16BE(0);
	    return this.haveLength();
	  }

	  /**
	   * Gets extended payload length (7+64).
	   *
	   * @return {(RangeError|undefined)} A possible error
	   * @private
	   */
	  getPayloadLength64() {
	    if (this._bufferedBytes < 8) {
	      this._loop = false;
	      return;
	    }

	    const buf = this.consume(8);
	    const num = buf.readUInt32BE(0);

	    //
	    // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned
	    // if payload length is greater than this number.
	    //
	    if (num > Math.pow(2, 53 - 32) - 1) {
	      this._loop = false;
	      return error(
	        RangeError,
	        'Unsupported WebSocket frame: payload length > 2^53 - 1',
	        false,
	        1009,
	        'WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH'
	      );
	    }

	    this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);
	    return this.haveLength();
	  }

	  /**
	   * Payload length has been read.
	   *
	   * @return {(RangeError|undefined)} A possible error
	   * @private
	   */
	  haveLength() {
	    if (this._payloadLength && this._opcode < 0x08) {
	      this._totalPayloadLength += this._payloadLength;
	      if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {
	        this._loop = false;
	        return error(
	          RangeError,
	          'Max payload size exceeded',
	          false,
	          1009,
	          'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'
	        );
	      }
	    }

	    if (this._masked) this._state = GET_MASK;
	    else this._state = GET_DATA;
	  }

	  /**
	   * Reads mask bytes.
	   *
	   * @private
	   */
	  getMask() {
	    if (this._bufferedBytes < 4) {
	      this._loop = false;
	      return;
	    }

	    this._mask = this.consume(4);
	    this._state = GET_DATA;
	  }

	  /**
	   * Reads data bytes.
	   *
	   * @param {Function} cb Callback
	   * @return {(Error|RangeError|undefined)} A possible error
	   * @private
	   */
	  getData(cb) {
	    let data = EMPTY_BUFFER;

	    if (this._payloadLength) {
	      if (this._bufferedBytes < this._payloadLength) {
	        this._loop = false;
	        return;
	      }

	      data = this.consume(this._payloadLength);

	      if (
	        this._masked &&
	        (this._mask[0] | this._mask[1] | this._mask[2] | this._mask[3]) !== 0
	      ) {
	        unmask(data, this._mask);
	      }
	    }

	    if (this._opcode > 0x07) return this.controlMessage(data);

	    if (this._compressed) {
	      this._state = INFLATING;
	      this.decompress(data, cb);
	      return;
	    }

	    if (data.length) {
	      //
	      // This message is not compressed so its length is the sum of the payload
	      // length of all fragments.
	      //
	      this._messageLength = this._totalPayloadLength;
	      this._fragments.push(data);
	    }

	    return this.dataMessage();
	  }

	  /**
	   * Decompresses data.
	   *
	   * @param {Buffer} data Compressed data
	   * @param {Function} cb Callback
	   * @private
	   */
	  decompress(data, cb) {
	    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];

	    perMessageDeflate.decompress(data, this._fin, (err, buf) => {
	      if (err) return cb(err);

	      if (buf.length) {
	        this._messageLength += buf.length;
	        if (this._messageLength > this._maxPayload && this._maxPayload > 0) {
	          return cb(
	            error(
	              RangeError,
	              'Max payload size exceeded',
	              false,
	              1009,
	              'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'
	            )
	          );
	        }

	        this._fragments.push(buf);
	      }

	      const er = this.dataMessage();
	      if (er) return cb(er);

	      this.startLoop(cb);
	    });
	  }

	  /**
	   * Handles a data message.
	   *
	   * @return {(Error|undefined)} A possible error
	   * @private
	   */
	  dataMessage() {
	    if (this._fin) {
	      const messageLength = this._messageLength;
	      const fragments = this._fragments;

	      this._totalPayloadLength = 0;
	      this._messageLength = 0;
	      this._fragmented = 0;
	      this._fragments = [];

	      if (this._opcode === 2) {
	        let data;

	        if (this._binaryType === 'nodebuffer') {
	          data = concat(fragments, messageLength);
	        } else if (this._binaryType === 'arraybuffer') {
	          data = toArrayBuffer(concat(fragments, messageLength));
	        } else {
	          data = fragments;
	        }

	        this.emit('message', data, true);
	      } else {
	        const buf = concat(fragments, messageLength);

	        if (!this._skipUTF8Validation && !isValidUTF8(buf)) {
	          this._loop = false;
	          return error(
	            Error,
	            'invalid UTF-8 sequence',
	            true,
	            1007,
	            'WS_ERR_INVALID_UTF8'
	          );
	        }

	        this.emit('message', buf, false);
	      }
	    }

	    this._state = GET_INFO;
	  }

	  /**
	   * Handles a control message.
	   *
	   * @param {Buffer} data Data to handle
	   * @return {(Error|RangeError|undefined)} A possible error
	   * @private
	   */
	  controlMessage(data) {
	    if (this._opcode === 0x08) {
	      this._loop = false;

	      if (data.length === 0) {
	        this.emit('conclude', 1005, EMPTY_BUFFER);
	        this.end();
	      } else if (data.length === 1) {
	        return error(
	          RangeError,
	          'invalid payload length 1',
	          true,
	          1002,
	          'WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH'
	        );
	      } else {
	        const code = data.readUInt16BE(0);

	        if (!isValidStatusCode(code)) {
	          return error(
	            RangeError,
	            `invalid status code ${code}`,
	            true,
	            1002,
	            'WS_ERR_INVALID_CLOSE_CODE'
	          );
	        }

	        const buf = data.slice(2);

	        if (!this._skipUTF8Validation && !isValidUTF8(buf)) {
	          return error(
	            Error,
	            'invalid UTF-8 sequence',
	            true,
	            1007,
	            'WS_ERR_INVALID_UTF8'
	          );
	        }

	        this.emit('conclude', code, buf);
	        this.end();
	      }
	    } else if (this._opcode === 0x09) {
	      this.emit('ping', data);
	    } else {
	      this.emit('pong', data);
	    }

	    this._state = GET_INFO;
	  }
	}

	receiver = Receiver;

	/**
	 * Builds an error object.
	 *
	 * @param {function(new:Error|RangeError)} ErrorCtor The error constructor
	 * @param {String} message The error message
	 * @param {Boolean} prefix Specifies whether or not to add a default prefix to
	 *     `message`
	 * @param {Number} statusCode The status code
	 * @param {String} errorCode The exposed error code
	 * @return {(Error|RangeError)} The error
	 * @private
	 */
	function error(ErrorCtor, message, prefix, statusCode, errorCode) {
	  const err = new ErrorCtor(
	    prefix ? `Invalid WebSocket frame: ${message}` : message
	  );

	  Error.captureStackTrace(err, error);
	  err.code = errorCode;
	  err[kStatusCode] = statusCode;
	  return err;
	}
	return receiver;
}

/* eslint no-unused-vars: ["error", { "varsIgnorePattern": "^net|tls$" }] */

var sender;
var hasRequiredSender;

function requireSender () {
	if (hasRequiredSender) return sender;
	hasRequiredSender = 1;
	const { randomFillSync } = require$$5;

	const PerMessageDeflate = requirePermessageDeflate();
	const { EMPTY_BUFFER } = requireConstants();
	const { isValidStatusCode } = requireValidation();
	const { mask: applyMask, toBuffer } = requireBufferUtil();

	const kByteLength = Symbol('kByteLength');
	const maskBuffer = Buffer.alloc(4);

	/**
	 * HyBi Sender implementation.
	 */
	class Sender {
	  /**
	   * Creates a Sender instance.
	   *
	   * @param {(net.Socket|tls.Socket)} socket The connection socket
	   * @param {Object} [extensions] An object containing the negotiated extensions
	   * @param {Function} [generateMask] The function used to generate the masking
	   *     key
	   */
	  constructor(socket, extensions, generateMask) {
	    this._extensions = extensions || {};

	    if (generateMask) {
	      this._generateMask = generateMask;
	      this._maskBuffer = Buffer.alloc(4);
	    }

	    this._socket = socket;

	    this._firstFragment = true;
	    this._compress = false;

	    this._bufferedBytes = 0;
	    this._deflating = false;
	    this._queue = [];
	  }

	  /**
	   * Frames a piece of data according to the HyBi WebSocket protocol.
	   *
	   * @param {(Buffer|String)} data The data to frame
	   * @param {Object} options Options object
	   * @param {Boolean} [options.fin=false] Specifies whether or not to set the
	   *     FIN bit
	   * @param {Function} [options.generateMask] The function used to generate the
	   *     masking key
	   * @param {Boolean} [options.mask=false] Specifies whether or not to mask
	   *     `data`
	   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking
	   *     key
	   * @param {Number} options.opcode The opcode
	   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be
	   *     modified
	   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the
	   *     RSV1 bit
	   * @return {(Buffer|String)[]} The framed data
	   * @public
	   */
	  static frame(data, options) {
	    let mask;
	    let merge = false;
	    let offset = 2;
	    let skipMasking = false;

	    if (options.mask) {
	      mask = options.maskBuffer || maskBuffer;

	      if (options.generateMask) {
	        options.generateMask(mask);
	      } else {
	        randomFillSync(mask, 0, 4);
	      }

	      skipMasking = (mask[0] | mask[1] | mask[2] | mask[3]) === 0;
	      offset = 6;
	    }

	    let dataLength;

	    if (typeof data === 'string') {
	      if (
	        (!options.mask || skipMasking) &&
	        options[kByteLength] !== undefined
	      ) {
	        dataLength = options[kByteLength];
	      } else {
	        data = Buffer.from(data);
	        dataLength = data.length;
	      }
	    } else {
	      dataLength = data.length;
	      merge = options.mask && options.readOnly && !skipMasking;
	    }

	    let payloadLength = dataLength;

	    if (dataLength >= 65536) {
	      offset += 8;
	      payloadLength = 127;
	    } else if (dataLength > 125) {
	      offset += 2;
	      payloadLength = 126;
	    }

	    const target = Buffer.allocUnsafe(merge ? dataLength + offset : offset);

	    target[0] = options.fin ? options.opcode | 0x80 : options.opcode;
	    if (options.rsv1) target[0] |= 0x40;

	    target[1] = payloadLength;

	    if (payloadLength === 126) {
	      target.writeUInt16BE(dataLength, 2);
	    } else if (payloadLength === 127) {
	      target[2] = target[3] = 0;
	      target.writeUIntBE(dataLength, 4, 6);
	    }

	    if (!options.mask) return [target, data];

	    target[1] |= 0x80;
	    target[offset - 4] = mask[0];
	    target[offset - 3] = mask[1];
	    target[offset - 2] = mask[2];
	    target[offset - 1] = mask[3];

	    if (skipMasking) return [target, data];

	    if (merge) {
	      applyMask(data, mask, target, offset, dataLength);
	      return [target];
	    }

	    applyMask(data, mask, data, 0, dataLength);
	    return [target, data];
	  }

	  /**
	   * Sends a close message to the other peer.
	   *
	   * @param {Number} [code] The status code component of the body
	   * @param {(String|Buffer)} [data] The message component of the body
	   * @param {Boolean} [mask=false] Specifies whether or not to mask the message
	   * @param {Function} [cb] Callback
	   * @public
	   */
	  close(code, data, mask, cb) {
	    let buf;

	    if (code === undefined) {
	      buf = EMPTY_BUFFER;
	    } else if (typeof code !== 'number' || !isValidStatusCode(code)) {
	      throw new TypeError('First argument must be a valid error code number');
	    } else if (data === undefined || !data.length) {
	      buf = Buffer.allocUnsafe(2);
	      buf.writeUInt16BE(code, 0);
	    } else {
	      const length = Buffer.byteLength(data);

	      if (length > 123) {
	        throw new RangeError('The message must not be greater than 123 bytes');
	      }

	      buf = Buffer.allocUnsafe(2 + length);
	      buf.writeUInt16BE(code, 0);

	      if (typeof data === 'string') {
	        buf.write(data, 2);
	      } else {
	        buf.set(data, 2);
	      }
	    }

	    const options = {
	      [kByteLength]: buf.length,
	      fin: true,
	      generateMask: this._generateMask,
	      mask,
	      maskBuffer: this._maskBuffer,
	      opcode: 0x08,
	      readOnly: false,
	      rsv1: false
	    };

	    if (this._deflating) {
	      this.enqueue([this.dispatch, buf, false, options, cb]);
	    } else {
	      this.sendFrame(Sender.frame(buf, options), cb);
	    }
	  }

	  /**
	   * Sends a ping message to the other peer.
	   *
	   * @param {*} data The message to send
	   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`
	   * @param {Function} [cb] Callback
	   * @public
	   */
	  ping(data, mask, cb) {
	    let byteLength;
	    let readOnly;

	    if (typeof data === 'string') {
	      byteLength = Buffer.byteLength(data);
	      readOnly = false;
	    } else {
	      data = toBuffer(data);
	      byteLength = data.length;
	      readOnly = toBuffer.readOnly;
	    }

	    if (byteLength > 125) {
	      throw new RangeError('The data size must not be greater than 125 bytes');
	    }

	    const options = {
	      [kByteLength]: byteLength,
	      fin: true,
	      generateMask: this._generateMask,
	      mask,
	      maskBuffer: this._maskBuffer,
	      opcode: 0x09,
	      readOnly,
	      rsv1: false
	    };

	    if (this._deflating) {
	      this.enqueue([this.dispatch, data, false, options, cb]);
	    } else {
	      this.sendFrame(Sender.frame(data, options), cb);
	    }
	  }

	  /**
	   * Sends a pong message to the other peer.
	   *
	   * @param {*} data The message to send
	   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`
	   * @param {Function} [cb] Callback
	   * @public
	   */
	  pong(data, mask, cb) {
	    let byteLength;
	    let readOnly;

	    if (typeof data === 'string') {
	      byteLength = Buffer.byteLength(data);
	      readOnly = false;
	    } else {
	      data = toBuffer(data);
	      byteLength = data.length;
	      readOnly = toBuffer.readOnly;
	    }

	    if (byteLength > 125) {
	      throw new RangeError('The data size must not be greater than 125 bytes');
	    }

	    const options = {
	      [kByteLength]: byteLength,
	      fin: true,
	      generateMask: this._generateMask,
	      mask,
	      maskBuffer: this._maskBuffer,
	      opcode: 0x0a,
	      readOnly,
	      rsv1: false
	    };

	    if (this._deflating) {
	      this.enqueue([this.dispatch, data, false, options, cb]);
	    } else {
	      this.sendFrame(Sender.frame(data, options), cb);
	    }
	  }

	  /**
	   * Sends a data message to the other peer.
	   *
	   * @param {*} data The message to send
	   * @param {Object} options Options object
	   * @param {Boolean} [options.binary=false] Specifies whether `data` is binary
	   *     or text
	   * @param {Boolean} [options.compress=false] Specifies whether or not to
	   *     compress `data`
	   * @param {Boolean} [options.fin=false] Specifies whether the fragment is the
	   *     last one
	   * @param {Boolean} [options.mask=false] Specifies whether or not to mask
	   *     `data`
	   * @param {Function} [cb] Callback
	   * @public
	   */
	  send(data, options, cb) {
	    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];
	    let opcode = options.binary ? 2 : 1;
	    let rsv1 = options.compress;

	    let byteLength;
	    let readOnly;

	    if (typeof data === 'string') {
	      byteLength = Buffer.byteLength(data);
	      readOnly = false;
	    } else {
	      data = toBuffer(data);
	      byteLength = data.length;
	      readOnly = toBuffer.readOnly;
	    }

	    if (this._firstFragment) {
	      this._firstFragment = false;
	      if (
	        rsv1 &&
	        perMessageDeflate &&
	        perMessageDeflate.params[
	          perMessageDeflate._isServer
	            ? 'server_no_context_takeover'
	            : 'client_no_context_takeover'
	        ]
	      ) {
	        rsv1 = byteLength >= perMessageDeflate._threshold;
	      }
	      this._compress = rsv1;
	    } else {
	      rsv1 = false;
	      opcode = 0;
	    }

	    if (options.fin) this._firstFragment = true;

	    if (perMessageDeflate) {
	      const opts = {
	        [kByteLength]: byteLength,
	        fin: options.fin,
	        generateMask: this._generateMask,
	        mask: options.mask,
	        maskBuffer: this._maskBuffer,
	        opcode,
	        readOnly,
	        rsv1
	      };

	      if (this._deflating) {
	        this.enqueue([this.dispatch, data, this._compress, opts, cb]);
	      } else {
	        this.dispatch(data, this._compress, opts, cb);
	      }
	    } else {
	      this.sendFrame(
	        Sender.frame(data, {
	          [kByteLength]: byteLength,
	          fin: options.fin,
	          generateMask: this._generateMask,
	          mask: options.mask,
	          maskBuffer: this._maskBuffer,
	          opcode,
	          readOnly,
	          rsv1: false
	        }),
	        cb
	      );
	    }
	  }

	  /**
	   * Dispatches a message.
	   *
	   * @param {(Buffer|String)} data The message to send
	   * @param {Boolean} [compress=false] Specifies whether or not to compress
	   *     `data`
	   * @param {Object} options Options object
	   * @param {Boolean} [options.fin=false] Specifies whether or not to set the
	   *     FIN bit
	   * @param {Function} [options.generateMask] The function used to generate the
	   *     masking key
	   * @param {Boolean} [options.mask=false] Specifies whether or not to mask
	   *     `data`
	   * @param {Buffer} [options.maskBuffer] The buffer used to store the masking
	   *     key
	   * @param {Number} options.opcode The opcode
	   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be
	   *     modified
	   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the
	   *     RSV1 bit
	   * @param {Function} [cb] Callback
	   * @private
	   */
	  dispatch(data, compress, options, cb) {
	    if (!compress) {
	      this.sendFrame(Sender.frame(data, options), cb);
	      return;
	    }

	    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];

	    this._bufferedBytes += options[kByteLength];
	    this._deflating = true;
	    perMessageDeflate.compress(data, options.fin, (_, buf) => {
	      if (this._socket.destroyed) {
	        const err = new Error(
	          'The socket was closed while data was being compressed'
	        );

	        if (typeof cb === 'function') cb(err);

	        for (let i = 0; i < this._queue.length; i++) {
	          const params = this._queue[i];
	          const callback = params[params.length - 1];

	          if (typeof callback === 'function') callback(err);
	        }

	        return;
	      }

	      this._bufferedBytes -= options[kByteLength];
	      this._deflating = false;
	      options.readOnly = false;
	      this.sendFrame(Sender.frame(buf, options), cb);
	      this.dequeue();
	    });
	  }

	  /**
	   * Executes queued send operations.
	   *
	   * @private
	   */
	  dequeue() {
	    while (!this._deflating && this._queue.length) {
	      const params = this._queue.shift();

	      this._bufferedBytes -= params[3][kByteLength];
	      Reflect.apply(params[0], this, params.slice(1));
	    }
	  }

	  /**
	   * Enqueues a send operation.
	   *
	   * @param {Array} params Send operation parameters.
	   * @private
	   */
	  enqueue(params) {
	    this._bufferedBytes += params[3][kByteLength];
	    this._queue.push(params);
	  }

	  /**
	   * Sends a frame.
	   *
	   * @param {Buffer[]} list The frame to send
	   * @param {Function} [cb] Callback
	   * @private
	   */
	  sendFrame(list, cb) {
	    if (list.length === 2) {
	      this._socket.cork();
	      this._socket.write(list[0]);
	      this._socket.write(list[1], cb);
	      this._socket.uncork();
	    } else {
	      this._socket.write(list[0], cb);
	    }
	  }
	}

	sender = Sender;
	return sender;
}

var eventTarget;
var hasRequiredEventTarget;

function requireEventTarget () {
	if (hasRequiredEventTarget) return eventTarget;
	hasRequiredEventTarget = 1;

	const { kForOnEventAttribute, kListener } = requireConstants();

	const kCode = Symbol('kCode');
	const kData = Symbol('kData');
	const kError = Symbol('kError');
	const kMessage = Symbol('kMessage');
	const kReason = Symbol('kReason');
	const kTarget = Symbol('kTarget');
	const kType = Symbol('kType');
	const kWasClean = Symbol('kWasClean');

	/**
	 * Class representing an event.
	 */
	class Event {
	  /**
	   * Create a new `Event`.
	   *
	   * @param {String} type The name of the event
	   * @throws {TypeError} If the `type` argument is not specified
	   */
	  constructor(type) {
	    this[kTarget] = null;
	    this[kType] = type;
	  }

	  /**
	   * @type {*}
	   */
	  get target() {
	    return this[kTarget];
	  }

	  /**
	   * @type {String}
	   */
	  get type() {
	    return this[kType];
	  }
	}

	Object.defineProperty(Event.prototype, 'target', { enumerable: true });
	Object.defineProperty(Event.prototype, 'type', { enumerable: true });

	/**
	 * Class representing a close event.
	 *
	 * @extends Event
	 */
	class CloseEvent extends Event {
	  /**
	   * Create a new `CloseEvent`.
	   *
	   * @param {String} type The name of the event
	   * @param {Object} [options] A dictionary object that allows for setting
	   *     attributes via object members of the same name
	   * @param {Number} [options.code=0] The status code explaining why the
	   *     connection was closed
	   * @param {String} [options.reason=''] A human-readable string explaining why
	   *     the connection was closed
	   * @param {Boolean} [options.wasClean=false] Indicates whether or not the
	   *     connection was cleanly closed
	   */
	  constructor(type, options = {}) {
	    super(type);

	    this[kCode] = options.code === undefined ? 0 : options.code;
	    this[kReason] = options.reason === undefined ? '' : options.reason;
	    this[kWasClean] = options.wasClean === undefined ? false : options.wasClean;
	  }

	  /**
	   * @type {Number}
	   */
	  get code() {
	    return this[kCode];
	  }

	  /**
	   * @type {String}
	   */
	  get reason() {
	    return this[kReason];
	  }

	  /**
	   * @type {Boolean}
	   */
	  get wasClean() {
	    return this[kWasClean];
	  }
	}

	Object.defineProperty(CloseEvent.prototype, 'code', { enumerable: true });
	Object.defineProperty(CloseEvent.prototype, 'reason', { enumerable: true });
	Object.defineProperty(CloseEvent.prototype, 'wasClean', { enumerable: true });

	/**
	 * Class representing an error event.
	 *
	 * @extends Event
	 */
	class ErrorEvent extends Event {
	  /**
	   * Create a new `ErrorEvent`.
	   *
	   * @param {String} type The name of the event
	   * @param {Object} [options] A dictionary object that allows for setting
	   *     attributes via object members of the same name
	   * @param {*} [options.error=null] The error that generated this event
	   * @param {String} [options.message=''] The error message
	   */
	  constructor(type, options = {}) {
	    super(type);

	    this[kError] = options.error === undefined ? null : options.error;
	    this[kMessage] = options.message === undefined ? '' : options.message;
	  }

	  /**
	   * @type {*}
	   */
	  get error() {
	    return this[kError];
	  }

	  /**
	   * @type {String}
	   */
	  get message() {
	    return this[kMessage];
	  }
	}

	Object.defineProperty(ErrorEvent.prototype, 'error', { enumerable: true });
	Object.defineProperty(ErrorEvent.prototype, 'message', { enumerable: true });

	/**
	 * Class representing a message event.
	 *
	 * @extends Event
	 */
	class MessageEvent extends Event {
	  /**
	   * Create a new `MessageEvent`.
	   *
	   * @param {String} type The name of the event
	   * @param {Object} [options] A dictionary object that allows for setting
	   *     attributes via object members of the same name
	   * @param {*} [options.data=null] The message content
	   */
	  constructor(type, options = {}) {
	    super(type);

	    this[kData] = options.data === undefined ? null : options.data;
	  }

	  /**
	   * @type {*}
	   */
	  get data() {
	    return this[kData];
	  }
	}

	Object.defineProperty(MessageEvent.prototype, 'data', { enumerable: true });

	/**
	 * This provides methods for emulating the `EventTarget` interface. It's not
	 * meant to be used directly.
	 *
	 * @mixin
	 */
	const EventTarget = {
	  /**
	   * Register an event listener.
	   *
	   * @param {String} type A string representing the event type to listen for
	   * @param {Function} listener The listener to add
	   * @param {Object} [options] An options object specifies characteristics about
	   *     the event listener
	   * @param {Boolean} [options.once=false] A `Boolean` indicating that the
	   *     listener should be invoked at most once after being added. If `true`,
	   *     the listener would be automatically removed when invoked.
	   * @public
	   */
	  addEventListener(type, listener, options = {}) {
	    let wrapper;

	    if (type === 'message') {
	      wrapper = function onMessage(data, isBinary) {
	        const event = new MessageEvent('message', {
	          data: isBinary ? data : data.toString()
	        });

	        event[kTarget] = this;
	        listener.call(this, event);
	      };
	    } else if (type === 'close') {
	      wrapper = function onClose(code, message) {
	        const event = new CloseEvent('close', {
	          code,
	          reason: message.toString(),
	          wasClean: this._closeFrameReceived && this._closeFrameSent
	        });

	        event[kTarget] = this;
	        listener.call(this, event);
	      };
	    } else if (type === 'error') {
	      wrapper = function onError(error) {
	        const event = new ErrorEvent('error', {
	          error,
	          message: error.message
	        });

	        event[kTarget] = this;
	        listener.call(this, event);
	      };
	    } else if (type === 'open') {
	      wrapper = function onOpen() {
	        const event = new Event('open');

	        event[kTarget] = this;
	        listener.call(this, event);
	      };
	    } else {
	      return;
	    }

	    wrapper[kForOnEventAttribute] = !!options[kForOnEventAttribute];
	    wrapper[kListener] = listener;

	    if (options.once) {
	      this.once(type, wrapper);
	    } else {
	      this.on(type, wrapper);
	    }
	  },

	  /**
	   * Remove an event listener.
	   *
	   * @param {String} type A string representing the event type to remove
	   * @param {Function} handler The listener to remove
	   * @public
	   */
	  removeEventListener(type, handler) {
	    for (const listener of this.listeners(type)) {
	      if (listener[kListener] === handler && !listener[kForOnEventAttribute]) {
	        this.removeListener(type, listener);
	        break;
	      }
	    }
	  }
	};

	eventTarget = {
	  CloseEvent,
	  ErrorEvent,
	  Event,
	  EventTarget,
	  MessageEvent
	};
	return eventTarget;
}

var extension;
var hasRequiredExtension;

function requireExtension () {
	if (hasRequiredExtension) return extension;
	hasRequiredExtension = 1;

	const { tokenChars } = requireValidation();

	/**
	 * Adds an offer to the map of extension offers or a parameter to the map of
	 * parameters.
	 *
	 * @param {Object} dest The map of extension offers or parameters
	 * @param {String} name The extension or parameter name
	 * @param {(Object|Boolean|String)} elem The extension parameters or the
	 *     parameter value
	 * @private
	 */
	function push(dest, name, elem) {
	  if (dest[name] === undefined) dest[name] = [elem];
	  else dest[name].push(elem);
	}

	/**
	 * Parses the `Sec-WebSocket-Extensions` header into an object.
	 *
	 * @param {String} header The field value of the header
	 * @return {Object} The parsed object
	 * @public
	 */
	function parse(header) {
	  const offers = Object.create(null);
	  let params = Object.create(null);
	  let mustUnescape = false;
	  let isEscaping = false;
	  let inQuotes = false;
	  let extensionName;
	  let paramName;
	  let start = -1;
	  let code = -1;
	  let end = -1;
	  let i = 0;

	  for (; i < header.length; i++) {
	    code = header.charCodeAt(i);

	    if (extensionName === undefined) {
	      if (end === -1 && tokenChars[code] === 1) {
	        if (start === -1) start = i;
	      } else if (
	        i !== 0 &&
	        (code === 0x20 /* ' ' */ || code === 0x09) /* '\t' */
	      ) {
	        if (end === -1 && start !== -1) end = i;
	      } else if (code === 0x3b /* ';' */ || code === 0x2c /* ',' */) {
	        if (start === -1) {
	          throw new SyntaxError(`Unexpected character at index ${i}`);
	        }

	        if (end === -1) end = i;
	        const name = header.slice(start, end);
	        if (code === 0x2c) {
	          push(offers, name, params);
	          params = Object.create(null);
	        } else {
	          extensionName = name;
	        }

	        start = end = -1;
	      } else {
	        throw new SyntaxError(`Unexpected character at index ${i}`);
	      }
	    } else if (paramName === undefined) {
	      if (end === -1 && tokenChars[code] === 1) {
	        if (start === -1) start = i;
	      } else if (code === 0x20 || code === 0x09) {
	        if (end === -1 && start !== -1) end = i;
	      } else if (code === 0x3b || code === 0x2c) {
	        if (start === -1) {
	          throw new SyntaxError(`Unexpected character at index ${i}`);
	        }

	        if (end === -1) end = i;
	        push(params, header.slice(start, end), true);
	        if (code === 0x2c) {
	          push(offers, extensionName, params);
	          params = Object.create(null);
	          extensionName = undefined;
	        }

	        start = end = -1;
	      } else if (code === 0x3d /* '=' */ && start !== -1 && end === -1) {
	        paramName = header.slice(start, i);
	        start = end = -1;
	      } else {
	        throw new SyntaxError(`Unexpected character at index ${i}`);
	      }
	    } else {
	      //
	      // The value of a quoted-string after unescaping must conform to the
	      // token ABNF, so only token characters are valid.
	      // Ref: https://tools.ietf.org/html/rfc6455#section-9.1
	      //
	      if (isEscaping) {
	        if (tokenChars[code] !== 1) {
	          throw new SyntaxError(`Unexpected character at index ${i}`);
	        }
	        if (start === -1) start = i;
	        else if (!mustUnescape) mustUnescape = true;
	        isEscaping = false;
	      } else if (inQuotes) {
	        if (tokenChars[code] === 1) {
	          if (start === -1) start = i;
	        } else if (code === 0x22 /* '"' */ && start !== -1) {
	          inQuotes = false;
	          end = i;
	        } else if (code === 0x5c /* '\' */) {
	          isEscaping = true;
	        } else {
	          throw new SyntaxError(`Unexpected character at index ${i}`);
	        }
	      } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3d) {
	        inQuotes = true;
	      } else if (end === -1 && tokenChars[code] === 1) {
	        if (start === -1) start = i;
	      } else if (start !== -1 && (code === 0x20 || code === 0x09)) {
	        if (end === -1) end = i;
	      } else if (code === 0x3b || code === 0x2c) {
	        if (start === -1) {
	          throw new SyntaxError(`Unexpected character at index ${i}`);
	        }

	        if (end === -1) end = i;
	        let value = header.slice(start, end);
	        if (mustUnescape) {
	          value = value.replace(/\\/g, '');
	          mustUnescape = false;
	        }
	        push(params, paramName, value);
	        if (code === 0x2c) {
	          push(offers, extensionName, params);
	          params = Object.create(null);
	          extensionName = undefined;
	        }

	        paramName = undefined;
	        start = end = -1;
	      } else {
	        throw new SyntaxError(`Unexpected character at index ${i}`);
	      }
	    }
	  }

	  if (start === -1 || inQuotes || code === 0x20 || code === 0x09) {
	    throw new SyntaxError('Unexpected end of input');
	  }

	  if (end === -1) end = i;
	  const token = header.slice(start, end);
	  if (extensionName === undefined) {
	    push(offers, token, params);
	  } else {
	    if (paramName === undefined) {
	      push(params, token, true);
	    } else if (mustUnescape) {
	      push(params, paramName, token.replace(/\\/g, ''));
	    } else {
	      push(params, paramName, token);
	    }
	    push(offers, extensionName, params);
	  }

	  return offers;
	}

	/**
	 * Builds the `Sec-WebSocket-Extensions` header field value.
	 *
	 * @param {Object} extensions The map of extensions and parameters to format
	 * @return {String} A string representing the given object
	 * @public
	 */
	function format(extensions) {
	  return Object.keys(extensions)
	    .map((extension) => {
	      let configurations = extensions[extension];
	      if (!Array.isArray(configurations)) configurations = [configurations];
	      return configurations
	        .map((params) => {
	          return [extension]
	            .concat(
	              Object.keys(params).map((k) => {
	                let values = params[k];
	                if (!Array.isArray(values)) values = [values];
	                return values
	                  .map((v) => (v === true ? k : `${k}=${v}`))
	                  .join('; ');
	              })
	            )
	            .join('; ');
	        })
	        .join(', ');
	    })
	    .join(', ');
	}

	extension = { format, parse };
	return extension;
}

/* eslint no-unused-vars: ["error", { "varsIgnorePattern": "^Readable$" }] */

var websocket;
var hasRequiredWebsocket;

function requireWebsocket () {
	if (hasRequiredWebsocket) return websocket;
	hasRequiredWebsocket = 1;

	const EventEmitter = require$$0$3;
	const https = require$$2;
	const http = require$$1;
	const net = require$$3$1;
	const tls = require$$4;
	const { randomBytes, createHash } = require$$5;
	const { URL } = require$$0$4;

	const PerMessageDeflate = requirePermessageDeflate();
	const Receiver = requireReceiver();
	const Sender = requireSender();
	const {
	  BINARY_TYPES,
	  EMPTY_BUFFER,
	  GUID,
	  kForOnEventAttribute,
	  kListener,
	  kStatusCode,
	  kWebSocket,
	  NOOP
	} = requireConstants();
	const {
	  EventTarget: { addEventListener, removeEventListener }
	} = requireEventTarget();
	const { format, parse } = requireExtension();
	const { toBuffer } = requireBufferUtil();

	const readyStates = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];
	const subprotocolRegex = /^[!#$%&'*+\-.0-9A-Z^_`|a-z~]+$/;
	const protocolVersions = [8, 13];
	const closeTimeout = 30 * 1000;

	/**
	 * Class representing a WebSocket.
	 *
	 * @extends EventEmitter
	 */
	class WebSocket extends EventEmitter {
	  /**
	   * Create a new `WebSocket`.
	   *
	   * @param {(String|URL)} address The URL to which to connect
	   * @param {(String|String[])} [protocols] The subprotocols
	   * @param {Object} [options] Connection options
	   */
	  constructor(address, protocols, options) {
	    super();

	    this._binaryType = BINARY_TYPES[0];
	    this._closeCode = 1006;
	    this._closeFrameReceived = false;
	    this._closeFrameSent = false;
	    this._closeMessage = EMPTY_BUFFER;
	    this._closeTimer = null;
	    this._extensions = {};
	    this._paused = false;
	    this._protocol = '';
	    this._readyState = WebSocket.CONNECTING;
	    this._receiver = null;
	    this._sender = null;
	    this._socket = null;

	    if (address !== null) {
	      this._bufferedAmount = 0;
	      this._isServer = false;
	      this._redirects = 0;

	      if (protocols === undefined) {
	        protocols = [];
	      } else if (!Array.isArray(protocols)) {
	        if (typeof protocols === 'object' && protocols !== null) {
	          options = protocols;
	          protocols = [];
	        } else {
	          protocols = [protocols];
	        }
	      }

	      initAsClient(this, address, protocols, options);
	    } else {
	      this._isServer = true;
	    }
	  }

	  /**
	   * This deviates from the WHATWG interface since ws doesn't support the
	   * required default "blob" type (instead we define a custom "nodebuffer"
	   * type).
	   *
	   * @type {String}
	   */
	  get binaryType() {
	    return this._binaryType;
	  }

	  set binaryType(type) {
	    if (!BINARY_TYPES.includes(type)) return;

	    this._binaryType = type;

	    //
	    // Allow to change `binaryType` on the fly.
	    //
	    if (this._receiver) this._receiver._binaryType = type;
	  }

	  /**
	   * @type {Number}
	   */
	  get bufferedAmount() {
	    if (!this._socket) return this._bufferedAmount;

	    return this._socket._writableState.length + this._sender._bufferedBytes;
	  }

	  /**
	   * @type {String}
	   */
	  get extensions() {
	    return Object.keys(this._extensions).join();
	  }

	  /**
	   * @type {Boolean}
	   */
	  get isPaused() {
	    return this._paused;
	  }

	  /**
	   * @type {Function}
	   */
	  /* istanbul ignore next */
	  get onclose() {
	    return null;
	  }

	  /**
	   * @type {Function}
	   */
	  /* istanbul ignore next */
	  get onerror() {
	    return null;
	  }

	  /**
	   * @type {Function}
	   */
	  /* istanbul ignore next */
	  get onopen() {
	    return null;
	  }

	  /**
	   * @type {Function}
	   */
	  /* istanbul ignore next */
	  get onmessage() {
	    return null;
	  }

	  /**
	   * @type {String}
	   */
	  get protocol() {
	    return this._protocol;
	  }

	  /**
	   * @type {Number}
	   */
	  get readyState() {
	    return this._readyState;
	  }

	  /**
	   * @type {String}
	   */
	  get url() {
	    return this._url;
	  }

	  /**
	   * Set up the socket and the internal resources.
	   *
	   * @param {(net.Socket|tls.Socket)} socket The network socket between the
	   *     server and client
	   * @param {Buffer} head The first packet of the upgraded stream
	   * @param {Object} options Options object
	   * @param {Function} [options.generateMask] The function used to generate the
	   *     masking key
	   * @param {Number} [options.maxPayload=0] The maximum allowed message size
	   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or
	   *     not to skip UTF-8 validation for text and close messages
	   * @private
	   */
	  setSocket(socket, head, options) {
	    const receiver = new Receiver({
	      binaryType: this.binaryType,
	      extensions: this._extensions,
	      isServer: this._isServer,
	      maxPayload: options.maxPayload,
	      skipUTF8Validation: options.skipUTF8Validation
	    });

	    this._sender = new Sender(socket, this._extensions, options.generateMask);
	    this._receiver = receiver;
	    this._socket = socket;

	    receiver[kWebSocket] = this;
	    socket[kWebSocket] = this;

	    receiver.on('conclude', receiverOnConclude);
	    receiver.on('drain', receiverOnDrain);
	    receiver.on('error', receiverOnError);
	    receiver.on('message', receiverOnMessage);
	    receiver.on('ping', receiverOnPing);
	    receiver.on('pong', receiverOnPong);

	    socket.setTimeout(0);
	    socket.setNoDelay();

	    if (head.length > 0) socket.unshift(head);

	    socket.on('close', socketOnClose);
	    socket.on('data', socketOnData);
	    socket.on('end', socketOnEnd);
	    socket.on('error', socketOnError);

	    this._readyState = WebSocket.OPEN;
	    this.emit('open');
	  }

	  /**
	   * Emit the `'close'` event.
	   *
	   * @private
	   */
	  emitClose() {
	    if (!this._socket) {
	      this._readyState = WebSocket.CLOSED;
	      this.emit('close', this._closeCode, this._closeMessage);
	      return;
	    }

	    if (this._extensions[PerMessageDeflate.extensionName]) {
	      this._extensions[PerMessageDeflate.extensionName].cleanup();
	    }

	    this._receiver.removeAllListeners();
	    this._readyState = WebSocket.CLOSED;
	    this.emit('close', this._closeCode, this._closeMessage);
	  }

	  /**
	   * Start a closing handshake.
	   *
	   *          +----------+   +-----------+   +----------+
	   *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -
	   *    |     +----------+   +-----------+   +----------+     |
	   *          +----------+   +-----------+         |
	   * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING
	   *          +----------+   +-----------+   |
	   *    |           |                        |   +---+        |
	   *                +------------------------+-->|fin| - - - -
	   *    |         +---+                      |   +---+
	   *     - - - - -|fin|<---------------------+
	   *              +---+
	   *
	   * @param {Number} [code] Status code explaining why the connection is closing
	   * @param {(String|Buffer)} [data] The reason why the connection is
	   *     closing
	   * @public
	   */
	  close(code, data) {
	    if (this.readyState === WebSocket.CLOSED) return;
	    if (this.readyState === WebSocket.CONNECTING) {
	      const msg = 'WebSocket was closed before the connection was established';
	      return abortHandshake(this, this._req, msg);
	    }

	    if (this.readyState === WebSocket.CLOSING) {
	      if (
	        this._closeFrameSent &&
	        (this._closeFrameReceived || this._receiver._writableState.errorEmitted)
	      ) {
	        this._socket.end();
	      }

	      return;
	    }

	    this._readyState = WebSocket.CLOSING;
	    this._sender.close(code, data, !this._isServer, (err) => {
	      //
	      // This error is handled by the `'error'` listener on the socket. We only
	      // want to know if the close frame has been sent here.
	      //
	      if (err) return;

	      this._closeFrameSent = true;

	      if (
	        this._closeFrameReceived ||
	        this._receiver._writableState.errorEmitted
	      ) {
	        this._socket.end();
	      }
	    });

	    //
	    // Specify a timeout for the closing handshake to complete.
	    //
	    this._closeTimer = setTimeout(
	      this._socket.destroy.bind(this._socket),
	      closeTimeout
	    );
	  }

	  /**
	   * Pause the socket.
	   *
	   * @public
	   */
	  pause() {
	    if (
	      this.readyState === WebSocket.CONNECTING ||
	      this.readyState === WebSocket.CLOSED
	    ) {
	      return;
	    }

	    this._paused = true;
	    this._socket.pause();
	  }

	  /**
	   * Send a ping.
	   *
	   * @param {*} [data] The data to send
	   * @param {Boolean} [mask] Indicates whether or not to mask `data`
	   * @param {Function} [cb] Callback which is executed when the ping is sent
	   * @public
	   */
	  ping(data, mask, cb) {
	    if (this.readyState === WebSocket.CONNECTING) {
	      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');
	    }

	    if (typeof data === 'function') {
	      cb = data;
	      data = mask = undefined;
	    } else if (typeof mask === 'function') {
	      cb = mask;
	      mask = undefined;
	    }

	    if (typeof data === 'number') data = data.toString();

	    if (this.readyState !== WebSocket.OPEN) {
	      sendAfterClose(this, data, cb);
	      return;
	    }

	    if (mask === undefined) mask = !this._isServer;
	    this._sender.ping(data || EMPTY_BUFFER, mask, cb);
	  }

	  /**
	   * Send a pong.
	   *
	   * @param {*} [data] The data to send
	   * @param {Boolean} [mask] Indicates whether or not to mask `data`
	   * @param {Function} [cb] Callback which is executed when the pong is sent
	   * @public
	   */
	  pong(data, mask, cb) {
	    if (this.readyState === WebSocket.CONNECTING) {
	      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');
	    }

	    if (typeof data === 'function') {
	      cb = data;
	      data = mask = undefined;
	    } else if (typeof mask === 'function') {
	      cb = mask;
	      mask = undefined;
	    }

	    if (typeof data === 'number') data = data.toString();

	    if (this.readyState !== WebSocket.OPEN) {
	      sendAfterClose(this, data, cb);
	      return;
	    }

	    if (mask === undefined) mask = !this._isServer;
	    this._sender.pong(data || EMPTY_BUFFER, mask, cb);
	  }

	  /**
	   * Resume the socket.
	   *
	   * @public
	   */
	  resume() {
	    if (
	      this.readyState === WebSocket.CONNECTING ||
	      this.readyState === WebSocket.CLOSED
	    ) {
	      return;
	    }

	    this._paused = false;
	    if (!this._receiver._writableState.needDrain) this._socket.resume();
	  }

	  /**
	   * Send a data message.
	   *
	   * @param {*} data The message to send
	   * @param {Object} [options] Options object
	   * @param {Boolean} [options.binary] Specifies whether `data` is binary or
	   *     text
	   * @param {Boolean} [options.compress] Specifies whether or not to compress
	   *     `data`
	   * @param {Boolean} [options.fin=true] Specifies whether the fragment is the
	   *     last one
	   * @param {Boolean} [options.mask] Specifies whether or not to mask `data`
	   * @param {Function} [cb] Callback which is executed when data is written out
	   * @public
	   */
	  send(data, options, cb) {
	    if (this.readyState === WebSocket.CONNECTING) {
	      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');
	    }

	    if (typeof options === 'function') {
	      cb = options;
	      options = {};
	    }

	    if (typeof data === 'number') data = data.toString();

	    if (this.readyState !== WebSocket.OPEN) {
	      sendAfterClose(this, data, cb);
	      return;
	    }

	    const opts = {
	      binary: typeof data !== 'string',
	      mask: !this._isServer,
	      compress: true,
	      fin: true,
	      ...options
	    };

	    if (!this._extensions[PerMessageDeflate.extensionName]) {
	      opts.compress = false;
	    }

	    this._sender.send(data || EMPTY_BUFFER, opts, cb);
	  }

	  /**
	   * Forcibly close the connection.
	   *
	   * @public
	   */
	  terminate() {
	    if (this.readyState === WebSocket.CLOSED) return;
	    if (this.readyState === WebSocket.CONNECTING) {
	      const msg = 'WebSocket was closed before the connection was established';
	      return abortHandshake(this, this._req, msg);
	    }

	    if (this._socket) {
	      this._readyState = WebSocket.CLOSING;
	      this._socket.destroy();
	    }
	  }
	}

	/**
	 * @constant {Number} CONNECTING
	 * @memberof WebSocket
	 */
	Object.defineProperty(WebSocket, 'CONNECTING', {
	  enumerable: true,
	  value: readyStates.indexOf('CONNECTING')
	});

	/**
	 * @constant {Number} CONNECTING
	 * @memberof WebSocket.prototype
	 */
	Object.defineProperty(WebSocket.prototype, 'CONNECTING', {
	  enumerable: true,
	  value: readyStates.indexOf('CONNECTING')
	});

	/**
	 * @constant {Number} OPEN
	 * @memberof WebSocket
	 */
	Object.defineProperty(WebSocket, 'OPEN', {
	  enumerable: true,
	  value: readyStates.indexOf('OPEN')
	});

	/**
	 * @constant {Number} OPEN
	 * @memberof WebSocket.prototype
	 */
	Object.defineProperty(WebSocket.prototype, 'OPEN', {
	  enumerable: true,
	  value: readyStates.indexOf('OPEN')
	});

	/**
	 * @constant {Number} CLOSING
	 * @memberof WebSocket
	 */
	Object.defineProperty(WebSocket, 'CLOSING', {
	  enumerable: true,
	  value: readyStates.indexOf('CLOSING')
	});

	/**
	 * @constant {Number} CLOSING
	 * @memberof WebSocket.prototype
	 */
	Object.defineProperty(WebSocket.prototype, 'CLOSING', {
	  enumerable: true,
	  value: readyStates.indexOf('CLOSING')
	});

	/**
	 * @constant {Number} CLOSED
	 * @memberof WebSocket
	 */
	Object.defineProperty(WebSocket, 'CLOSED', {
	  enumerable: true,
	  value: readyStates.indexOf('CLOSED')
	});

	/**
	 * @constant {Number} CLOSED
	 * @memberof WebSocket.prototype
	 */
	Object.defineProperty(WebSocket.prototype, 'CLOSED', {
	  enumerable: true,
	  value: readyStates.indexOf('CLOSED')
	});

	[
	  'binaryType',
	  'bufferedAmount',
	  'extensions',
	  'isPaused',
	  'protocol',
	  'readyState',
	  'url'
	].forEach((property) => {
	  Object.defineProperty(WebSocket.prototype, property, { enumerable: true });
	});

	//
	// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.
	// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface
	//
	['open', 'error', 'close', 'message'].forEach((method) => {
	  Object.defineProperty(WebSocket.prototype, `on${method}`, {
	    enumerable: true,
	    get() {
	      for (const listener of this.listeners(method)) {
	        if (listener[kForOnEventAttribute]) return listener[kListener];
	      }

	      return null;
	    },
	    set(handler) {
	      for (const listener of this.listeners(method)) {
	        if (listener[kForOnEventAttribute]) {
	          this.removeListener(method, listener);
	          break;
	        }
	      }

	      if (typeof handler !== 'function') return;

	      this.addEventListener(method, handler, {
	        [kForOnEventAttribute]: true
	      });
	    }
	  });
	});

	WebSocket.prototype.addEventListener = addEventListener;
	WebSocket.prototype.removeEventListener = removeEventListener;

	websocket = WebSocket;

	/**
	 * Initialize a WebSocket client.
	 *
	 * @param {WebSocket} websocket The client to initialize
	 * @param {(String|URL)} address The URL to which to connect
	 * @param {Array} protocols The subprotocols
	 * @param {Object} [options] Connection options
	 * @param {Boolean} [options.followRedirects=false] Whether or not to follow
	 *     redirects
	 * @param {Function} [options.generateMask] The function used to generate the
	 *     masking key
	 * @param {Number} [options.handshakeTimeout] Timeout in milliseconds for the
	 *     handshake request
	 * @param {Number} [options.maxPayload=104857600] The maximum allowed message
	 *     size
	 * @param {Number} [options.maxRedirects=10] The maximum number of redirects
	 *     allowed
	 * @param {String} [options.origin] Value of the `Origin` or
	 *     `Sec-WebSocket-Origin` header
	 * @param {(Boolean|Object)} [options.perMessageDeflate=true] Enable/disable
	 *     permessage-deflate
	 * @param {Number} [options.protocolVersion=13] Value of the
	 *     `Sec-WebSocket-Version` header
	 * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or
	 *     not to skip UTF-8 validation for text and close messages
	 * @private
	 */
	function initAsClient(websocket, address, protocols, options) {
	  const opts = {
	    protocolVersion: protocolVersions[1],
	    maxPayload: 100 * 1024 * 1024,
	    skipUTF8Validation: false,
	    perMessageDeflate: true,
	    followRedirects: false,
	    maxRedirects: 10,
	    ...options,
	    createConnection: undefined,
	    socketPath: undefined,
	    hostname: undefined,
	    protocol: undefined,
	    timeout: undefined,
	    method: undefined,
	    host: undefined,
	    path: undefined,
	    port: undefined
	  };

	  if (!protocolVersions.includes(opts.protocolVersion)) {
	    throw new RangeError(
	      `Unsupported protocol version: ${opts.protocolVersion} ` +
	        `(supported versions: ${protocolVersions.join(', ')})`
	    );
	  }

	  let parsedUrl;

	  if (address instanceof URL) {
	    parsedUrl = address;
	    websocket._url = address.href;
	  } else {
	    try {
	      parsedUrl = new URL(address);
	    } catch (e) {
	      throw new SyntaxError(`Invalid URL: ${address}`);
	    }

	    websocket._url = address;
	  }

	  const isSecure = parsedUrl.protocol === 'wss:';
	  const isUnixSocket = parsedUrl.protocol === 'ws+unix:';
	  let invalidURLMessage;

	  if (parsedUrl.protocol !== 'ws:' && !isSecure && !isUnixSocket) {
	    invalidURLMessage =
	      'The URL\'s protocol must be one of "ws:", "wss:", or "ws+unix:"';
	  } else if (isUnixSocket && !parsedUrl.pathname) {
	    invalidURLMessage = "The URL's pathname is empty";
	  } else if (parsedUrl.hash) {
	    invalidURLMessage = 'The URL contains a fragment identifier';
	  }

	  if (invalidURLMessage) {
	    const err = new SyntaxError(invalidURLMessage);

	    if (websocket._redirects === 0) {
	      throw err;
	    } else {
	      emitErrorAndClose(websocket, err);
	      return;
	    }
	  }

	  const defaultPort = isSecure ? 443 : 80;
	  const key = randomBytes(16).toString('base64');
	  const get = isSecure ? https.get : http.get;
	  const protocolSet = new Set();
	  let perMessageDeflate;

	  opts.createConnection = isSecure ? tlsConnect : netConnect;
	  opts.defaultPort = opts.defaultPort || defaultPort;
	  opts.port = parsedUrl.port || defaultPort;
	  opts.host = parsedUrl.hostname.startsWith('[')
	    ? parsedUrl.hostname.slice(1, -1)
	    : parsedUrl.hostname;
	  opts.headers = {
	    'Sec-WebSocket-Version': opts.protocolVersion,
	    'Sec-WebSocket-Key': key,
	    Connection: 'Upgrade',
	    Upgrade: 'websocket',
	    ...opts.headers
	  };
	  opts.path = parsedUrl.pathname + parsedUrl.search;
	  opts.timeout = opts.handshakeTimeout;

	  if (opts.perMessageDeflate) {
	    perMessageDeflate = new PerMessageDeflate(
	      opts.perMessageDeflate !== true ? opts.perMessageDeflate : {},
	      false,
	      opts.maxPayload
	    );
	    opts.headers['Sec-WebSocket-Extensions'] = format({
	      [PerMessageDeflate.extensionName]: perMessageDeflate.offer()
	    });
	  }
	  if (protocols.length) {
	    for (const protocol of protocols) {
	      if (
	        typeof protocol !== 'string' ||
	        !subprotocolRegex.test(protocol) ||
	        protocolSet.has(protocol)
	      ) {
	        throw new SyntaxError(
	          'An invalid or duplicated subprotocol was specified'
	        );
	      }

	      protocolSet.add(protocol);
	    }

	    opts.headers['Sec-WebSocket-Protocol'] = protocols.join(',');
	  }
	  if (opts.origin) {
	    if (opts.protocolVersion < 13) {
	      opts.headers['Sec-WebSocket-Origin'] = opts.origin;
	    } else {
	      opts.headers.Origin = opts.origin;
	    }
	  }
	  if (parsedUrl.username || parsedUrl.password) {
	    opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;
	  }

	  if (isUnixSocket) {
	    const parts = opts.path.split(':');

	    opts.socketPath = parts[0];
	    opts.path = parts[1];
	  }

	  if (opts.followRedirects) {
	    if (websocket._redirects === 0) {
	      websocket._originalHost = parsedUrl.host;

	      const headers = options && options.headers;

	      //
	      // Shallow copy the user provided options so that headers can be changed
	      // without mutating the original object.
	      //
	      options = { ...options, headers: {} };

	      if (headers) {
	        for (const [key, value] of Object.entries(headers)) {
	          options.headers[key.toLowerCase()] = value;
	        }
	      }
	    } else if (parsedUrl.host !== websocket._originalHost) {
	      //
	      // Match curl 7.77.0 behavior and drop the following headers. These
	      // headers are also dropped when following a redirect to a subdomain.
	      //
	      delete opts.headers.authorization;
	      delete opts.headers.cookie;
	      delete opts.headers.host;
	      opts.auth = undefined;
	    }

	    //
	    // Match curl 7.77.0 behavior and make the first `Authorization` header win.
	    // If the `Authorization` header is set, then there is nothing to do as it
	    // will take precedence.
	    //
	    if (opts.auth && !options.headers.authorization) {
	      options.headers.authorization =
	        'Basic ' + Buffer.from(opts.auth).toString('base64');
	    }
	  }

	  let req = (websocket._req = get(opts));

	  if (opts.timeout) {
	    req.on('timeout', () => {
	      abortHandshake(websocket, req, 'Opening handshake has timed out');
	    });
	  }

	  req.on('error', (err) => {
	    if (req === null || req.aborted) return;

	    req = websocket._req = null;
	    emitErrorAndClose(websocket, err);
	  });

	  req.on('response', (res) => {
	    const location = res.headers.location;
	    const statusCode = res.statusCode;

	    if (
	      location &&
	      opts.followRedirects &&
	      statusCode >= 300 &&
	      statusCode < 400
	    ) {
	      if (++websocket._redirects > opts.maxRedirects) {
	        abortHandshake(websocket, req, 'Maximum redirects exceeded');
	        return;
	      }

	      req.abort();

	      let addr;

	      try {
	        addr = new URL(location, address);
	      } catch (e) {
	        const err = new SyntaxError(`Invalid URL: ${location}`);
	        emitErrorAndClose(websocket, err);
	        return;
	      }

	      initAsClient(websocket, addr, protocols, options);
	    } else if (!websocket.emit('unexpected-response', req, res)) {
	      abortHandshake(
	        websocket,
	        req,
	        `Unexpected server response: ${res.statusCode}`
	      );
	    }
	  });

	  req.on('upgrade', (res, socket, head) => {
	    websocket.emit('upgrade', res);

	    //
	    // The user may have closed the connection from a listener of the `upgrade`
	    // event.
	    //
	    if (websocket.readyState !== WebSocket.CONNECTING) return;

	    req = websocket._req = null;

	    const digest = createHash('sha1')
	      .update(key + GUID)
	      .digest('base64');

	    if (res.headers['sec-websocket-accept'] !== digest) {
	      abortHandshake(websocket, socket, 'Invalid Sec-WebSocket-Accept header');
	      return;
	    }

	    const serverProt = res.headers['sec-websocket-protocol'];
	    let protError;

	    if (serverProt !== undefined) {
	      if (!protocolSet.size) {
	        protError = 'Server sent a subprotocol but none was requested';
	      } else if (!protocolSet.has(serverProt)) {
	        protError = 'Server sent an invalid subprotocol';
	      }
	    } else if (protocolSet.size) {
	      protError = 'Server sent no subprotocol';
	    }

	    if (protError) {
	      abortHandshake(websocket, socket, protError);
	      return;
	    }

	    if (serverProt) websocket._protocol = serverProt;

	    const secWebSocketExtensions = res.headers['sec-websocket-extensions'];

	    if (secWebSocketExtensions !== undefined) {
	      if (!perMessageDeflate) {
	        const message =
	          'Server sent a Sec-WebSocket-Extensions header but no extension ' +
	          'was requested';
	        abortHandshake(websocket, socket, message);
	        return;
	      }

	      let extensions;

	      try {
	        extensions = parse(secWebSocketExtensions);
	      } catch (err) {
	        const message = 'Invalid Sec-WebSocket-Extensions header';
	        abortHandshake(websocket, socket, message);
	        return;
	      }

	      const extensionNames = Object.keys(extensions);

	      if (
	        extensionNames.length !== 1 ||
	        extensionNames[0] !== PerMessageDeflate.extensionName
	      ) {
	        const message = 'Server indicated an extension that was not requested';
	        abortHandshake(websocket, socket, message);
	        return;
	      }

	      try {
	        perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);
	      } catch (err) {
	        const message = 'Invalid Sec-WebSocket-Extensions header';
	        abortHandshake(websocket, socket, message);
	        return;
	      }

	      websocket._extensions[PerMessageDeflate.extensionName] =
	        perMessageDeflate;
	    }

	    websocket.setSocket(socket, head, {
	      generateMask: opts.generateMask,
	      maxPayload: opts.maxPayload,
	      skipUTF8Validation: opts.skipUTF8Validation
	    });
	  });
	}

	/**
	 * Emit the `'error'` and `'close'` event.
	 *
	 * @param {WebSocket} websocket The WebSocket instance
	 * @param {Error} The error to emit
	 * @private
	 */
	function emitErrorAndClose(websocket, err) {
	  websocket._readyState = WebSocket.CLOSING;
	  websocket.emit('error', err);
	  websocket.emitClose();
	}

	/**
	 * Create a `net.Socket` and initiate a connection.
	 *
	 * @param {Object} options Connection options
	 * @return {net.Socket} The newly created socket used to start the connection
	 * @private
	 */
	function netConnect(options) {
	  options.path = options.socketPath;
	  return net.connect(options);
	}

	/**
	 * Create a `tls.TLSSocket` and initiate a connection.
	 *
	 * @param {Object} options Connection options
	 * @return {tls.TLSSocket} The newly created socket used to start the connection
	 * @private
	 */
	function tlsConnect(options) {
	  options.path = undefined;

	  if (!options.servername && options.servername !== '') {
	    options.servername = net.isIP(options.host) ? '' : options.host;
	  }

	  return tls.connect(options);
	}

	/**
	 * Abort the handshake and emit an error.
	 *
	 * @param {WebSocket} websocket The WebSocket instance
	 * @param {(http.ClientRequest|net.Socket|tls.Socket)} stream The request to
	 *     abort or the socket to destroy
	 * @param {String} message The error message
	 * @private
	 */
	function abortHandshake(websocket, stream, message) {
	  websocket._readyState = WebSocket.CLOSING;

	  const err = new Error(message);
	  Error.captureStackTrace(err, abortHandshake);

	  if (stream.setHeader) {
	    stream.abort();

	    if (stream.socket && !stream.socket.destroyed) {
	      //
	      // On Node.js >= 14.3.0 `request.abort()` does not destroy the socket if
	      // called after the request completed. See
	      // https://github.com/websockets/ws/issues/1869.
	      //
	      stream.socket.destroy();
	    }

	    stream.once('abort', websocket.emitClose.bind(websocket));
	    websocket.emit('error', err);
	  } else {
	    stream.destroy(err);
	    stream.once('error', websocket.emit.bind(websocket, 'error'));
	    stream.once('close', websocket.emitClose.bind(websocket));
	  }
	}

	/**
	 * Handle cases where the `ping()`, `pong()`, or `send()` methods are called
	 * when the `readyState` attribute is `CLOSING` or `CLOSED`.
	 *
	 * @param {WebSocket} websocket The WebSocket instance
	 * @param {*} [data] The data to send
	 * @param {Function} [cb] Callback
	 * @private
	 */
	function sendAfterClose(websocket, data, cb) {
	  if (data) {
	    const length = toBuffer(data).length;

	    //
	    // The `_bufferedAmount` property is used only when the peer is a client and
	    // the opening handshake fails. Under these circumstances, in fact, the
	    // `setSocket()` method is not called, so the `_socket` and `_sender`
	    // properties are set to `null`.
	    //
	    if (websocket._socket) websocket._sender._bufferedBytes += length;
	    else websocket._bufferedAmount += length;
	  }

	  if (cb) {
	    const err = new Error(
	      `WebSocket is not open: readyState ${websocket.readyState} ` +
	        `(${readyStates[websocket.readyState]})`
	    );
	    cb(err);
	  }
	}

	/**
	 * The listener of the `Receiver` `'conclude'` event.
	 *
	 * @param {Number} code The status code
	 * @param {Buffer} reason The reason for closing
	 * @private
	 */
	function receiverOnConclude(code, reason) {
	  const websocket = this[kWebSocket];

	  websocket._closeFrameReceived = true;
	  websocket._closeMessage = reason;
	  websocket._closeCode = code;

	  if (websocket._socket[kWebSocket] === undefined) return;

	  websocket._socket.removeListener('data', socketOnData);
	  process.nextTick(resume, websocket._socket);

	  if (code === 1005) websocket.close();
	  else websocket.close(code, reason);
	}

	/**
	 * The listener of the `Receiver` `'drain'` event.
	 *
	 * @private
	 */
	function receiverOnDrain() {
	  const websocket = this[kWebSocket];

	  if (!websocket.isPaused) websocket._socket.resume();
	}

	/**
	 * The listener of the `Receiver` `'error'` event.
	 *
	 * @param {(RangeError|Error)} err The emitted error
	 * @private
	 */
	function receiverOnError(err) {
	  const websocket = this[kWebSocket];

	  if (websocket._socket[kWebSocket] !== undefined) {
	    websocket._socket.removeListener('data', socketOnData);

	    //
	    // On Node.js < 14.0.0 the `'error'` event is emitted synchronously. See
	    // https://github.com/websockets/ws/issues/1940.
	    //
	    process.nextTick(resume, websocket._socket);

	    websocket.close(err[kStatusCode]);
	  }

	  websocket.emit('error', err);
	}

	/**
	 * The listener of the `Receiver` `'finish'` event.
	 *
	 * @private
	 */
	function receiverOnFinish() {
	  this[kWebSocket].emitClose();
	}

	/**
	 * The listener of the `Receiver` `'message'` event.
	 *
	 * @param {Buffer|ArrayBuffer|Buffer[])} data The message
	 * @param {Boolean} isBinary Specifies whether the message is binary or not
	 * @private
	 */
	function receiverOnMessage(data, isBinary) {
	  this[kWebSocket].emit('message', data, isBinary);
	}

	/**
	 * The listener of the `Receiver` `'ping'` event.
	 *
	 * @param {Buffer} data The data included in the ping frame
	 * @private
	 */
	function receiverOnPing(data) {
	  const websocket = this[kWebSocket];

	  websocket.pong(data, !websocket._isServer, NOOP);
	  websocket.emit('ping', data);
	}

	/**
	 * The listener of the `Receiver` `'pong'` event.
	 *
	 * @param {Buffer} data The data included in the pong frame
	 * @private
	 */
	function receiverOnPong(data) {
	  this[kWebSocket].emit('pong', data);
	}

	/**
	 * Resume a readable stream
	 *
	 * @param {Readable} stream The readable stream
	 * @private
	 */
	function resume(stream) {
	  stream.resume();
	}

	/**
	 * The listener of the `net.Socket` `'close'` event.
	 *
	 * @private
	 */
	function socketOnClose() {
	  const websocket = this[kWebSocket];

	  this.removeListener('close', socketOnClose);
	  this.removeListener('data', socketOnData);
	  this.removeListener('end', socketOnEnd);

	  websocket._readyState = WebSocket.CLOSING;

	  let chunk;

	  //
	  // The close frame might not have been received or the `'end'` event emitted,
	  // for example, if the socket was destroyed due to an error. Ensure that the
	  // `receiver` stream is closed after writing any remaining buffered data to
	  // it. If the readable side of the socket is in flowing mode then there is no
	  // buffered data as everything has been already written and `readable.read()`
	  // will return `null`. If instead, the socket is paused, any possible buffered
	  // data will be read as a single chunk.
	  //
	  if (
	    !this._readableState.endEmitted &&
	    !websocket._closeFrameReceived &&
	    !websocket._receiver._writableState.errorEmitted &&
	    (chunk = websocket._socket.read()) !== null
	  ) {
	    websocket._receiver.write(chunk);
	  }

	  websocket._receiver.end();

	  this[kWebSocket] = undefined;

	  clearTimeout(websocket._closeTimer);

	  if (
	    websocket._receiver._writableState.finished ||
	    websocket._receiver._writableState.errorEmitted
	  ) {
	    websocket.emitClose();
	  } else {
	    websocket._receiver.on('error', receiverOnFinish);
	    websocket._receiver.on('finish', receiverOnFinish);
	  }
	}

	/**
	 * The listener of the `net.Socket` `'data'` event.
	 *
	 * @param {Buffer} chunk A chunk of data
	 * @private
	 */
	function socketOnData(chunk) {
	  if (!this[kWebSocket]._receiver.write(chunk)) {
	    this.pause();
	  }
	}

	/**
	 * The listener of the `net.Socket` `'end'` event.
	 *
	 * @private
	 */
	function socketOnEnd() {
	  const websocket = this[kWebSocket];

	  websocket._readyState = WebSocket.CLOSING;
	  websocket._receiver.end();
	  this.end();
	}

	/**
	 * The listener of the `net.Socket` `'error'` event.
	 *
	 * @private
	 */
	function socketOnError() {
	  const websocket = this[kWebSocket];

	  this.removeListener('error', socketOnError);
	  this.on('error', NOOP);

	  if (websocket) {
	    websocket._readyState = WebSocket.CLOSING;
	    this.destroy();
	  }
	}
	return websocket;
}

var stream$1;
var hasRequiredStream;

function requireStream () {
	if (hasRequiredStream) return stream$1;
	hasRequiredStream = 1;

	const { Duplex } = require$$0$2;

	/**
	 * Emits the `'close'` event on a stream.
	 *
	 * @param {Duplex} stream The stream.
	 * @private
	 */
	function emitClose(stream) {
	  stream.emit('close');
	}

	/**
	 * The listener of the `'end'` event.
	 *
	 * @private
	 */
	function duplexOnEnd() {
	  if (!this.destroyed && this._writableState.finished) {
	    this.destroy();
	  }
	}

	/**
	 * The listener of the `'error'` event.
	 *
	 * @param {Error} err The error
	 * @private
	 */
	function duplexOnError(err) {
	  this.removeListener('error', duplexOnError);
	  this.destroy();
	  if (this.listenerCount('error') === 0) {
	    // Do not suppress the throwing behavior.
	    this.emit('error', err);
	  }
	}

	/**
	 * Wraps a `WebSocket` in a duplex stream.
	 *
	 * @param {WebSocket} ws The `WebSocket` to wrap
	 * @param {Object} [options] The options for the `Duplex` constructor
	 * @return {Duplex} The duplex stream
	 * @public
	 */
	function createWebSocketStream(ws, options) {
	  let terminateOnDestroy = true;

	  const duplex = new Duplex({
	    ...options,
	    autoDestroy: false,
	    emitClose: false,
	    objectMode: false,
	    writableObjectMode: false
	  });

	  ws.on('message', function message(msg, isBinary) {
	    const data =
	      !isBinary && duplex._readableState.objectMode ? msg.toString() : msg;

	    if (!duplex.push(data)) ws.pause();
	  });

	  ws.once('error', function error(err) {
	    if (duplex.destroyed) return;

	    // Prevent `ws.terminate()` from being called by `duplex._destroy()`.
	    //
	    // - If the `'error'` event is emitted before the `'open'` event, then
	    //   `ws.terminate()` is a noop as no socket is assigned.
	    // - Otherwise, the error is re-emitted by the listener of the `'error'`
	    //   event of the `Receiver` object. The listener already closes the
	    //   connection by calling `ws.close()`. This allows a close frame to be
	    //   sent to the other peer. If `ws.terminate()` is called right after this,
	    //   then the close frame might not be sent.
	    terminateOnDestroy = false;
	    duplex.destroy(err);
	  });

	  ws.once('close', function close() {
	    if (duplex.destroyed) return;

	    duplex.push(null);
	  });

	  duplex._destroy = function (err, callback) {
	    if (ws.readyState === ws.CLOSED) {
	      callback(err);
	      process.nextTick(emitClose, duplex);
	      return;
	    }

	    let called = false;

	    ws.once('error', function error(err) {
	      called = true;
	      callback(err);
	    });

	    ws.once('close', function close() {
	      if (!called) callback(err);
	      process.nextTick(emitClose, duplex);
	    });

	    if (terminateOnDestroy) ws.terminate();
	  };

	  duplex._final = function (callback) {
	    if (ws.readyState === ws.CONNECTING) {
	      ws.once('open', function open() {
	        duplex._final(callback);
	      });
	      return;
	    }

	    // If the value of the `_socket` property is `null` it means that `ws` is a
	    // client websocket and the handshake failed. In fact, when this happens, a
	    // socket is never assigned to the websocket. Wait for the `'error'` event
	    // that will be emitted by the websocket.
	    if (ws._socket === null) return;

	    if (ws._socket._writableState.finished) {
	      callback();
	      if (duplex._readableState.endEmitted) duplex.destroy();
	    } else {
	      ws._socket.once('finish', function finish() {
	        // `duplex` is not destroyed here because the `'end'` event will be
	        // emitted on `duplex` after this `'finish'` event. The EOF signaling
	        // `null` chunk is, in fact, pushed when the websocket emits `'close'`.
	        callback();
	      });
	      ws.close();
	    }
	  };

	  duplex._read = function () {
	    if (ws.isPaused) ws.resume();
	  };

	  duplex._write = function (chunk, encoding, callback) {
	    if (ws.readyState === ws.CONNECTING) {
	      ws.once('open', function open() {
	        duplex._write(chunk, encoding, callback);
	      });
	      return;
	    }

	    ws.send(chunk, callback);
	  };

	  duplex.on('end', duplexOnEnd);
	  duplex.on('error', duplexOnError);
	  return duplex;
	}

	stream$1 = createWebSocketStream;
	return stream$1;
}

var subprotocol;
var hasRequiredSubprotocol;

function requireSubprotocol () {
	if (hasRequiredSubprotocol) return subprotocol;
	hasRequiredSubprotocol = 1;

	const { tokenChars } = requireValidation();

	/**
	 * Parses the `Sec-WebSocket-Protocol` header into a set of subprotocol names.
	 *
	 * @param {String} header The field value of the header
	 * @return {Set} The subprotocol names
	 * @public
	 */
	function parse(header) {
	  const protocols = new Set();
	  let start = -1;
	  let end = -1;
	  let i = 0;

	  for (i; i < header.length; i++) {
	    const code = header.charCodeAt(i);

	    if (end === -1 && tokenChars[code] === 1) {
	      if (start === -1) start = i;
	    } else if (
	      i !== 0 &&
	      (code === 0x20 /* ' ' */ || code === 0x09) /* '\t' */
	    ) {
	      if (end === -1 && start !== -1) end = i;
	    } else if (code === 0x2c /* ',' */) {
	      if (start === -1) {
	        throw new SyntaxError(`Unexpected character at index ${i}`);
	      }

	      if (end === -1) end = i;

	      const protocol = header.slice(start, end);

	      if (protocols.has(protocol)) {
	        throw new SyntaxError(`The "${protocol}" subprotocol is duplicated`);
	      }

	      protocols.add(protocol);
	      start = end = -1;
	    } else {
	      throw new SyntaxError(`Unexpected character at index ${i}`);
	    }
	  }

	  if (start === -1 || end !== -1) {
	    throw new SyntaxError('Unexpected end of input');
	  }

	  const protocol = header.slice(start, i);

	  if (protocols.has(protocol)) {
	    throw new SyntaxError(`The "${protocol}" subprotocol is duplicated`);
	  }

	  protocols.add(protocol);
	  return protocols;
	}

	subprotocol = { parse };
	return subprotocol;
}

/* eslint no-unused-vars: ["error", { "varsIgnorePattern": "^net|tls|https$" }] */

var websocketServer;
var hasRequiredWebsocketServer;

function requireWebsocketServer () {
	if (hasRequiredWebsocketServer) return websocketServer;
	hasRequiredWebsocketServer = 1;

	const EventEmitter = require$$0$3;
	const http = require$$1;
	const { createHash } = require$$5;

	const extension = requireExtension();
	const PerMessageDeflate = requirePermessageDeflate();
	const subprotocol = requireSubprotocol();
	const WebSocket = requireWebsocket();
	const { GUID, kWebSocket } = requireConstants();

	const keyRegex = /^[+/0-9A-Za-z]{22}==$/;

	const RUNNING = 0;
	const CLOSING = 1;
	const CLOSED = 2;

	/**
	 * Class representing a WebSocket server.
	 *
	 * @extends EventEmitter
	 */
	class WebSocketServer extends EventEmitter {
	  /**
	   * Create a `WebSocketServer` instance.
	   *
	   * @param {Object} options Configuration options
	   * @param {Number} [options.backlog=511] The maximum length of the queue of
	   *     pending connections
	   * @param {Boolean} [options.clientTracking=true] Specifies whether or not to
	   *     track clients
	   * @param {Function} [options.handleProtocols] A hook to handle protocols
	   * @param {String} [options.host] The hostname where to bind the server
	   * @param {Number} [options.maxPayload=104857600] The maximum allowed message
	   *     size
	   * @param {Boolean} [options.noServer=false] Enable no server mode
	   * @param {String} [options.path] Accept only connections matching this path
	   * @param {(Boolean|Object)} [options.perMessageDeflate=false] Enable/disable
	   *     permessage-deflate
	   * @param {Number} [options.port] The port where to bind the server
	   * @param {(http.Server|https.Server)} [options.server] A pre-created HTTP/S
	   *     server to use
	   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or
	   *     not to skip UTF-8 validation for text and close messages
	   * @param {Function} [options.verifyClient] A hook to reject connections
	   * @param {Function} [options.WebSocket=WebSocket] Specifies the `WebSocket`
	   *     class to use. It must be the `WebSocket` class or class that extends it
	   * @param {Function} [callback] A listener for the `listening` event
	   */
	  constructor(options, callback) {
	    super();

	    options = {
	      maxPayload: 100 * 1024 * 1024,
	      skipUTF8Validation: false,
	      perMessageDeflate: false,
	      handleProtocols: null,
	      clientTracking: true,
	      verifyClient: null,
	      noServer: false,
	      backlog: null, // use default (511 as implemented in net.js)
	      server: null,
	      host: null,
	      path: null,
	      port: null,
	      WebSocket,
	      ...options
	    };

	    if (
	      (options.port == null && !options.server && !options.noServer) ||
	      (options.port != null && (options.server || options.noServer)) ||
	      (options.server && options.noServer)
	    ) {
	      throw new TypeError(
	        'One and only one of the "port", "server", or "noServer" options ' +
	          'must be specified'
	      );
	    }

	    if (options.port != null) {
	      this._server = http.createServer((req, res) => {
	        const body = http.STATUS_CODES[426];

	        res.writeHead(426, {
	          'Content-Length': body.length,
	          'Content-Type': 'text/plain'
	        });
	        res.end(body);
	      });
	      this._server.listen(
	        options.port,
	        options.host,
	        options.backlog,
	        callback
	      );
	    } else if (options.server) {
	      this._server = options.server;
	    }

	    if (this._server) {
	      const emitConnection = this.emit.bind(this, 'connection');

	      this._removeListeners = addListeners(this._server, {
	        listening: this.emit.bind(this, 'listening'),
	        error: this.emit.bind(this, 'error'),
	        upgrade: (req, socket, head) => {
	          this.handleUpgrade(req, socket, head, emitConnection);
	        }
	      });
	    }

	    if (options.perMessageDeflate === true) options.perMessageDeflate = {};
	    if (options.clientTracking) {
	      this.clients = new Set();
	      this._shouldEmitClose = false;
	    }

	    this.options = options;
	    this._state = RUNNING;
	  }

	  /**
	   * Returns the bound address, the address family name, and port of the server
	   * as reported by the operating system if listening on an IP socket.
	   * If the server is listening on a pipe or UNIX domain socket, the name is
	   * returned as a string.
	   *
	   * @return {(Object|String|null)} The address of the server
	   * @public
	   */
	  address() {
	    if (this.options.noServer) {
	      throw new Error('The server is operating in "noServer" mode');
	    }

	    if (!this._server) return null;
	    return this._server.address();
	  }

	  /**
	   * Stop the server from accepting new connections and emit the `'close'` event
	   * when all existing connections are closed.
	   *
	   * @param {Function} [cb] A one-time listener for the `'close'` event
	   * @public
	   */
	  close(cb) {
	    if (this._state === CLOSED) {
	      if (cb) {
	        this.once('close', () => {
	          cb(new Error('The server is not running'));
	        });
	      }

	      process.nextTick(emitClose, this);
	      return;
	    }

	    if (cb) this.once('close', cb);

	    if (this._state === CLOSING) return;
	    this._state = CLOSING;

	    if (this.options.noServer || this.options.server) {
	      if (this._server) {
	        this._removeListeners();
	        this._removeListeners = this._server = null;
	      }

	      if (this.clients) {
	        if (!this.clients.size) {
	          process.nextTick(emitClose, this);
	        } else {
	          this._shouldEmitClose = true;
	        }
	      } else {
	        process.nextTick(emitClose, this);
	      }
	    } else {
	      const server = this._server;

	      this._removeListeners();
	      this._removeListeners = this._server = null;

	      //
	      // The HTTP/S server was created internally. Close it, and rely on its
	      // `'close'` event.
	      //
	      server.close(() => {
	        emitClose(this);
	      });
	    }
	  }

	  /**
	   * See if a given request should be handled by this server instance.
	   *
	   * @param {http.IncomingMessage} req Request object to inspect
	   * @return {Boolean} `true` if the request is valid, else `false`
	   * @public
	   */
	  shouldHandle(req) {
	    if (this.options.path) {
	      const index = req.url.indexOf('?');
	      const pathname = index !== -1 ? req.url.slice(0, index) : req.url;

	      if (pathname !== this.options.path) return false;
	    }

	    return true;
	  }

	  /**
	   * Handle a HTTP Upgrade request.
	   *
	   * @param {http.IncomingMessage} req The request object
	   * @param {(net.Socket|tls.Socket)} socket The network socket between the
	   *     server and client
	   * @param {Buffer} head The first packet of the upgraded stream
	   * @param {Function} cb Callback
	   * @public
	   */
	  handleUpgrade(req, socket, head, cb) {
	    socket.on('error', socketOnError);

	    const key =
	      req.headers['sec-websocket-key'] !== undefined
	        ? req.headers['sec-websocket-key']
	        : false;
	    const version = +req.headers['sec-websocket-version'];

	    if (
	      req.method !== 'GET' ||
	      req.headers.upgrade.toLowerCase() !== 'websocket' ||
	      !key ||
	      !keyRegex.test(key) ||
	      (version !== 8 && version !== 13) ||
	      !this.shouldHandle(req)
	    ) {
	      return abortHandshake(socket, 400);
	    }

	    const secWebSocketProtocol = req.headers['sec-websocket-protocol'];
	    let protocols = new Set();

	    if (secWebSocketProtocol !== undefined) {
	      try {
	        protocols = subprotocol.parse(secWebSocketProtocol);
	      } catch (err) {
	        return abortHandshake(socket, 400);
	      }
	    }

	    const secWebSocketExtensions = req.headers['sec-websocket-extensions'];
	    const extensions = {};

	    if (
	      this.options.perMessageDeflate &&
	      secWebSocketExtensions !== undefined
	    ) {
	      const perMessageDeflate = new PerMessageDeflate(
	        this.options.perMessageDeflate,
	        true,
	        this.options.maxPayload
	      );

	      try {
	        const offers = extension.parse(secWebSocketExtensions);

	        if (offers[PerMessageDeflate.extensionName]) {
	          perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);
	          extensions[PerMessageDeflate.extensionName] = perMessageDeflate;
	        }
	      } catch (err) {
	        return abortHandshake(socket, 400);
	      }
	    }

	    //
	    // Optionally call external client verification handler.
	    //
	    if (this.options.verifyClient) {
	      const info = {
	        origin:
	          req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],
	        secure: !!(req.socket.authorized || req.socket.encrypted),
	        req
	      };

	      if (this.options.verifyClient.length === 2) {
	        this.options.verifyClient(info, (verified, code, message, headers) => {
	          if (!verified) {
	            return abortHandshake(socket, code || 401, message, headers);
	          }

	          this.completeUpgrade(
	            extensions,
	            key,
	            protocols,
	            req,
	            socket,
	            head,
	            cb
	          );
	        });
	        return;
	      }

	      if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);
	    }

	    this.completeUpgrade(extensions, key, protocols, req, socket, head, cb);
	  }

	  /**
	   * Upgrade the connection to WebSocket.
	   *
	   * @param {Object} extensions The accepted extensions
	   * @param {String} key The value of the `Sec-WebSocket-Key` header
	   * @param {Set} protocols The subprotocols
	   * @param {http.IncomingMessage} req The request object
	   * @param {(net.Socket|tls.Socket)} socket The network socket between the
	   *     server and client
	   * @param {Buffer} head The first packet of the upgraded stream
	   * @param {Function} cb Callback
	   * @throws {Error} If called more than once with the same socket
	   * @private
	   */
	  completeUpgrade(extensions, key, protocols, req, socket, head, cb) {
	    //
	    // Destroy the socket if the client has already sent a FIN packet.
	    //
	    if (!socket.readable || !socket.writable) return socket.destroy();

	    if (socket[kWebSocket]) {
	      throw new Error(
	        'server.handleUpgrade() was called more than once with the same ' +
	          'socket, possibly due to a misconfiguration'
	      );
	    }

	    if (this._state > RUNNING) return abortHandshake(socket, 503);

	    const digest = createHash('sha1')
	      .update(key + GUID)
	      .digest('base64');

	    const headers = [
	      'HTTP/1.1 101 Switching Protocols',
	      'Upgrade: websocket',
	      'Connection: Upgrade',
	      `Sec-WebSocket-Accept: ${digest}`
	    ];

	    const ws = new this.options.WebSocket(null);

	    if (protocols.size) {
	      //
	      // Optionally call external protocol selection handler.
	      //
	      const protocol = this.options.handleProtocols
	        ? this.options.handleProtocols(protocols, req)
	        : protocols.values().next().value;

	      if (protocol) {
	        headers.push(`Sec-WebSocket-Protocol: ${protocol}`);
	        ws._protocol = protocol;
	      }
	    }

	    if (extensions[PerMessageDeflate.extensionName]) {
	      const params = extensions[PerMessageDeflate.extensionName].params;
	      const value = extension.format({
	        [PerMessageDeflate.extensionName]: [params]
	      });
	      headers.push(`Sec-WebSocket-Extensions: ${value}`);
	      ws._extensions = extensions;
	    }

	    //
	    // Allow external modification/inspection of handshake headers.
	    //
	    this.emit('headers', headers, req);

	    socket.write(headers.concat('\r\n').join('\r\n'));
	    socket.removeListener('error', socketOnError);

	    ws.setSocket(socket, head, {
	      maxPayload: this.options.maxPayload,
	      skipUTF8Validation: this.options.skipUTF8Validation
	    });

	    if (this.clients) {
	      this.clients.add(ws);
	      ws.on('close', () => {
	        this.clients.delete(ws);

	        if (this._shouldEmitClose && !this.clients.size) {
	          process.nextTick(emitClose, this);
	        }
	      });
	    }

	    cb(ws, req);
	  }
	}

	websocketServer = WebSocketServer;

	/**
	 * Add event listeners on an `EventEmitter` using a map of <event, listener>
	 * pairs.
	 *
	 * @param {EventEmitter} server The event emitter
	 * @param {Object.<String, Function>} map The listeners to add
	 * @return {Function} A function that will remove the added listeners when
	 *     called
	 * @private
	 */
	function addListeners(server, map) {
	  for (const event of Object.keys(map)) server.on(event, map[event]);

	  return function removeListeners() {
	    for (const event of Object.keys(map)) {
	      server.removeListener(event, map[event]);
	    }
	  };
	}

	/**
	 * Emit a `'close'` event on an `EventEmitter`.
	 *
	 * @param {EventEmitter} server The event emitter
	 * @private
	 */
	function emitClose(server) {
	  server._state = CLOSED;
	  server.emit('close');
	}

	/**
	 * Handle premature socket errors.
	 *
	 * @private
	 */
	function socketOnError() {
	  this.destroy();
	}

	/**
	 * Close the connection when preconditions are not fulfilled.
	 *
	 * @param {(net.Socket|tls.Socket)} socket The socket of the upgrade request
	 * @param {Number} code The HTTP response status code
	 * @param {String} [message] The HTTP response body
	 * @param {Object} [headers] Additional HTTP response headers
	 * @private
	 */
	function abortHandshake(socket, code, message, headers) {
	  if (socket.writable) {
	    message = message || http.STATUS_CODES[code];
	    headers = {
	      Connection: 'close',
	      'Content-Type': 'text/html',
	      'Content-Length': Buffer.byteLength(message),
	      ...headers
	    };

	    socket.write(
	      `HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\r\n` +
	        Object.keys(headers)
	          .map((h) => `${h}: ${headers[h]}`)
	          .join('\r\n') +
	        '\r\n\r\n' +
	        message
	    );
	  }

	  socket.removeListener('error', socketOnError);
	  socket.destroy();
	}
	return websocketServer;
}

var ws;
var hasRequiredWs$1;

function requireWs$1 () {
	if (hasRequiredWs$1) return ws;
	hasRequiredWs$1 = 1;

	const WebSocket = requireWebsocket();

	WebSocket.createWebSocketStream = requireStream();
	WebSocket.Server = requireWebsocketServer();
	WebSocket.Receiver = requireReceiver();
	WebSocket.Sender = requireSender();

	WebSocket.WebSocket = WebSocket;
	WebSocket.WebSocketServer = WebSocket.Server;

	ws = WebSocket;
	return ws;
}

var hasRequiredWs;

function requireWs () {
	if (hasRequiredWs) return ws$1;
	hasRequiredWs = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.WebSocket = void 0;
		var ws_1 = requireWs$1();
		Object.defineProperty(exports, "WebSocket", { enumerable: true, get: function () { return ws_1.WebSocket; } });
		
	} (ws$1));
	return ws$1;
}

var providerSocket = {};

var hasRequiredProviderSocket;

function requireProviderSocket () {
	if (hasRequiredProviderSocket) return providerSocket;
	hasRequiredProviderSocket = 1;
	/**
	 *  Generic long-lived socket provider.
	 *
	 *  Sub-classing notes
	 *  - a sub-class MUST call the `_start()` method once connected
	 *  - a sub-class MUST override the `_write(string)` method
	 *  - a sub-class MUST call `_processMessage(string)` for each message
	 *
	 *  @_subsection: api/providers/abstract-provider:Socket Providers  [about-socketProvider]
	 */
	Object.defineProperty(providerSocket, "__esModule", { value: true });
	providerSocket.SocketProvider = providerSocket.SocketEventSubscriber = providerSocket.SocketPendingSubscriber = providerSocket.SocketBlockSubscriber = providerSocket.SocketSubscriber = void 0;
	const abstract_provider_js_1 = requireAbstractProvider();
	const index_js_1 = requireUtils$3();
	const provider_jsonrpc_js_1 = requireProviderJsonrpc();
	/**
	 *  A **SocketSubscriber** uses a socket transport to handle events and
	 *  should use [[_emit]] to manage the events.
	 */
	class SocketSubscriber {
	    #provider;
	    #filter;
	    /**
	     *  The filter.
	     */
	    get filter() { return JSON.parse(this.#filter); }
	    #filterId;
	    #paused;
	    #emitPromise;
	    /**
	     *  Creates a new **SocketSubscriber** attached to %%provider%% listening
	     *  to %%filter%%.
	     */
	    constructor(provider, filter) {
	        this.#provider = provider;
	        this.#filter = JSON.stringify(filter);
	        this.#filterId = null;
	        this.#paused = null;
	        this.#emitPromise = null;
	    }
	    start() {
	        this.#filterId = this.#provider.send("eth_subscribe", this.filter).then((filterId) => {
	            this.#provider._register(filterId, this);
	            return filterId;
	        });
	    }
	    stop() {
	        (this.#filterId).then((filterId) => {
	            this.#provider.send("eth_unsubscribe", [filterId]);
	        });
	        this.#filterId = null;
	    }
	    // @TODO: pause should trap the current blockNumber, unsub, and on resume use getLogs
	    //        and resume
	    pause(dropWhilePaused) {
	        (0, index_js_1.assert)(dropWhilePaused, "preserve logs while paused not supported by SocketSubscriber yet", "UNSUPPORTED_OPERATION", { operation: "pause(false)" });
	        this.#paused = !!dropWhilePaused;
	    }
	    resume() {
	        this.#paused = null;
	    }
	    /**
	     *  @_ignore:
	     */
	    _handleMessage(message) {
	        if (this.#filterId == null) {
	            return;
	        }
	        if (this.#paused === null) {
	            let emitPromise = this.#emitPromise;
	            if (emitPromise == null) {
	                emitPromise = this._emit(this.#provider, message);
	            }
	            else {
	                emitPromise = emitPromise.then(async () => {
	                    await this._emit(this.#provider, message);
	                });
	            }
	            this.#emitPromise = emitPromise.then(() => {
	                if (this.#emitPromise === emitPromise) {
	                    this.#emitPromise = null;
	                }
	            });
	        }
	    }
	    /**
	     *  Sub-classes **must** override this to emit the events on the
	     *  provider.
	     */
	    async _emit(provider, message) {
	        throw new Error("sub-classes must implemente this; _emit");
	    }
	}
	providerSocket.SocketSubscriber = SocketSubscriber;
	/**
	 *  A **SocketBlockSubscriber** listens for ``newHeads`` events and emits
	 *  ``"block"`` events.
	 */
	class SocketBlockSubscriber extends SocketSubscriber {
	    /**
	     *  @_ignore:
	     */
	    constructor(provider) {
	        super(provider, ["newHeads"]);
	    }
	    async _emit(provider, message) {
	        provider.emit("block", parseInt(message.number));
	    }
	}
	providerSocket.SocketBlockSubscriber = SocketBlockSubscriber;
	/**
	 *  A **SocketPendingSubscriber** listens for pending transacitons and emits
	 *  ``"pending"`` events.
	 */
	class SocketPendingSubscriber extends SocketSubscriber {
	    /**
	     *  @_ignore:
	     */
	    constructor(provider) {
	        super(provider, ["newPendingTransactions"]);
	    }
	    async _emit(provider, message) {
	        provider.emit("pending", message);
	    }
	}
	providerSocket.SocketPendingSubscriber = SocketPendingSubscriber;
	/**
	 *  A **SocketEventSubscriber** listens for event logs.
	 */
	class SocketEventSubscriber extends SocketSubscriber {
	    #logFilter;
	    /**
	     *  The filter.
	     */
	    get logFilter() { return JSON.parse(this.#logFilter); }
	    /**
	     *  @_ignore:
	     */
	    constructor(provider, filter) {
	        super(provider, ["logs", filter]);
	        this.#logFilter = JSON.stringify(filter);
	    }
	    async _emit(provider, message) {
	        provider.emit(this.logFilter, provider._wrapLog(message, provider._network));
	    }
	}
	providerSocket.SocketEventSubscriber = SocketEventSubscriber;
	/**
	 *  A **SocketProvider** is backed by a long-lived connection over a
	 *  socket, which can subscribe and receive real-time messages over
	 *  its communication channel.
	 */
	class SocketProvider extends provider_jsonrpc_js_1.JsonRpcApiProvider {
	    #callbacks;
	    // Maps each filterId to its subscriber
	    #subs;
	    // If any events come in before a subscriber has finished
	    // registering, queue them
	    #pending;
	    /**
	     *  Creates a new **SocketProvider** connected to %%network%%.
	     *
	     *  If unspecified, the network will be discovered.
	     */
	    constructor(network, _options) {
	        // Copy the options
	        const options = Object.assign({}, (_options != null) ? _options : {});
	        // Support for batches is generally not supported for
	        // connection-base providers; if this changes in the future
	        // the _send should be updated to reflect this
	        (0, index_js_1.assertArgument)(options.batchMaxCount == null || options.batchMaxCount === 1, "sockets-based providers do not support batches", "options.batchMaxCount", _options);
	        options.batchMaxCount = 1;
	        // Socket-based Providers (generally) cannot change their network,
	        // since they have a long-lived connection; but let people override
	        // this if they have just cause.
	        if (options.staticNetwork == null) {
	            options.staticNetwork = true;
	        }
	        super(network, options);
	        this.#callbacks = new Map();
	        this.#subs = new Map();
	        this.#pending = new Map();
	    }
	    // This value is only valid after _start has been called
	    /*
	    get _network(): Network {
	        if (this.#network == null) {
	            throw new Error("this shouldn't happen");
	        }
	        return this.#network.clone();
	    }
	    */
	    _getSubscriber(sub) {
	        switch (sub.type) {
	            case "close":
	                return new abstract_provider_js_1.UnmanagedSubscriber("close");
	            case "block":
	                return new SocketBlockSubscriber(this);
	            case "pending":
	                return new SocketPendingSubscriber(this);
	            case "event":
	                return new SocketEventSubscriber(this, sub.filter);
	            case "orphan":
	                // Handled auto-matically within AbstractProvider
	                // when the log.removed = true
	                if (sub.filter.orphan === "drop-log") {
	                    return new abstract_provider_js_1.UnmanagedSubscriber("drop-log");
	                }
	        }
	        return super._getSubscriber(sub);
	    }
	    /**
	     *  Register a new subscriber. This is used internalled by Subscribers
	     *  and generally is unecessary unless extending capabilities.
	     */
	    _register(filterId, subscriber) {
	        this.#subs.set(filterId, subscriber);
	        const pending = this.#pending.get(filterId);
	        if (pending) {
	            for (const message of pending) {
	                subscriber._handleMessage(message);
	            }
	            this.#pending.delete(filterId);
	        }
	    }
	    async _send(payload) {
	        // WebSocket provider doesn't accept batches
	        (0, index_js_1.assertArgument)(!Array.isArray(payload), "WebSocket does not support batch send", "payload", payload);
	        // @TODO: stringify payloads here and store to prevent mutations
	        // Prepare a promise to respond to
	        const promise = new Promise((resolve, reject) => {
	            this.#callbacks.set(payload.id, { payload, resolve, reject });
	        });
	        // Wait until the socket is connected before writing to it
	        await this._waitUntilReady();
	        // Write the request to the socket
	        await this._write(JSON.stringify(payload));
	        return [await promise];
	    }
	    // Sub-classes must call this once they are connected
	    /*
	    async _start(): Promise<void> {
	        if (this.#ready) { return; }

	        for (const { payload } of this.#callbacks.values()) {
	            await this._write(JSON.stringify(payload));
	        }

	        this.#ready = (async function() {
	            await super._start();
	        })();
	    }
	    */
	    /**
	     *  Sub-classes **must** call this with messages received over their
	     *  transport to be processed and dispatched.
	     */
	    async _processMessage(message) {
	        const result = (JSON.parse(message));
	        if (result && typeof (result) === "object" && "id" in result) {
	            const callback = this.#callbacks.get(result.id);
	            if (callback == null) {
	                this.emit("error", (0, index_js_1.makeError)("received result for unknown id", "UNKNOWN_ERROR", {
	                    reasonCode: "UNKNOWN_ID",
	                    result
	                }));
	                return;
	            }
	            this.#callbacks.delete(result.id);
	            callback.resolve(result);
	        }
	        else if (result && result.method === "eth_subscription") {
	            const filterId = result.params.subscription;
	            const subscriber = this.#subs.get(filterId);
	            if (subscriber) {
	                subscriber._handleMessage(result.params.result);
	            }
	            else {
	                let pending = this.#pending.get(filterId);
	                if (pending == null) {
	                    pending = [];
	                    this.#pending.set(filterId, pending);
	                }
	                pending.push(result.params.result);
	            }
	        }
	        else {
	            this.emit("error", (0, index_js_1.makeError)("received unexpected message", "UNKNOWN_ERROR", {
	                reasonCode: "UNEXPECTED_MESSAGE",
	                result
	            }));
	            return;
	        }
	    }
	    /**
	     *  Sub-classes **must** override this to send %%message%% over their
	     *  transport.
	     */
	    async _write(message) {
	        throw new Error("sub-classes must override this");
	    }
	}
	providerSocket.SocketProvider = SocketProvider;
	
	return providerSocket;
}

var hasRequiredProviderWebsocket;

function requireProviderWebsocket () {
	if (hasRequiredProviderWebsocket) return providerWebsocket;
	hasRequiredProviderWebsocket = 1;
	Object.defineProperty(providerWebsocket, "__esModule", { value: true });
	providerWebsocket.WebSocketProvider = void 0;
	const ws_js_1 = requireWs(); /*-browser*/
	const provider_socket_js_1 = requireProviderSocket();
	/**
	 *  A JSON-RPC provider which is backed by a WebSocket.
	 *
	 *  WebSockets are often preferred because they retain a live connection
	 *  to a server, which permits more instant access to events.
	 *
	 *  However, this incurs higher server infrasturture costs, so additional
	 *  resources may be required to host your own WebSocket nodes and many
	 *  third-party services charge additional fees for WebSocket endpoints.
	 */
	class WebSocketProvider extends provider_socket_js_1.SocketProvider {
	    #connect;
	    #websocket;
	    get websocket() {
	        if (this.#websocket == null) {
	            throw new Error("websocket closed");
	        }
	        return this.#websocket;
	    }
	    constructor(url, network, options) {
	        super(network, options);
	        if (typeof (url) === "string") {
	            this.#connect = () => { return new ws_js_1.WebSocket(url); };
	            this.#websocket = this.#connect();
	        }
	        else if (typeof (url) === "function") {
	            this.#connect = url;
	            this.#websocket = url();
	        }
	        else {
	            this.#connect = null;
	            this.#websocket = url;
	        }
	        this.websocket.onopen = async () => {
	            try {
	                await this._start();
	                this.resume();
	            }
	            catch (error) {
	                console.log("failed to start WebsocketProvider", error);
	                // @TODO: now what? Attempt reconnect?
	            }
	        };
	        this.websocket.onmessage = (message) => {
	            this._processMessage(message.data);
	        };
	        /*
	                this.websocket.onclose = (event) => {
	                    // @TODO: What event.code should we reconnect on?
	                    const reconnect = false;
	                    if (reconnect) {
	                        this.pause(true);
	                        if (this.#connect) {
	                            this.#websocket = this.#connect();
	                            this.#websocket.onopen = ...
	                            // @TODO: this requires the super class to rebroadcast; move it there
	                        }
	                        this._reconnect();
	                    }
	                };
	        */
	    }
	    async _write(message) {
	        this.websocket.send(message);
	    }
	    async destroy() {
	        if (this.#websocket != null) {
	            this.#websocket.close();
	            this.#websocket = null;
	        }
	        super.destroy();
	    }
	}
	providerWebsocket.WebSocketProvider = WebSocketProvider;
	
	return providerWebsocket;
}

var hasRequiredProviderInfura;

function requireProviderInfura () {
	if (hasRequiredProviderInfura) return providerInfura;
	hasRequiredProviderInfura = 1;
	Object.defineProperty(providerInfura, "__esModule", { value: true });
	providerInfura.InfuraProvider = providerInfura.InfuraWebSocketProvider = void 0;
	/**
	 *  [[link-infura]] provides a third-party service for connecting to
	 *  various blockchains over JSON-RPC.
	 *
	 *  **Supported Networks**
	 *
	 *  - Ethereum Mainnet (``mainnet``)
	 *  - Goerli Testnet (``goerli``)
	 *  - Sepolia Testnet (``sepolia``)
	 *  - Arbitrum (``arbitrum``)
	 *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)
	 *  - Arbitrum Sepolia Testnet (``arbitrum-sepolia``)
	 *  - Base (``base``)
	 *  - Base Goerlia Testnet (``base-goerli``)
	 *  - Base Sepolia Testnet (``base-sepolia``)
	 *  - BNB Smart Chain Mainnet (``bnb``)
	 *  - BNB Smart Chain Testnet (``bnbt``)
	 *  - Linea (``linea``)
	 *  - Linea Goerlia Testnet (``linea-goerli``)
	 *  - Optimism (``optimism``)
	 *  - Optimism Goerli Testnet (``optimism-goerli``)
	 *  - Optimism Sepolia Testnet (``optimism-sepolia``)
	 *  - Polygon (``matic``)
	 *  - Polygon Mumbai Testnet (``matic-mumbai``)
	 *
	 *  @_subsection: api/providers/thirdparty:INFURA  [providers-infura]
	 */
	const index_js_1 = requireUtils$3();
	const community_js_1 = requireCommunity();
	const network_js_1 = requireNetwork();
	const provider_jsonrpc_js_1 = requireProviderJsonrpc();
	const provider_websocket_js_1 = requireProviderWebsocket();
	const defaultProjectId = "84842078b09946638c03157f83405213";
	function getHost(name) {
	    switch (name) {
	        case "mainnet":
	            return "mainnet.infura.io";
	        case "goerli":
	            return "goerli.infura.io";
	        case "sepolia":
	            return "sepolia.infura.io";
	        case "arbitrum":
	            return "arbitrum-mainnet.infura.io";
	        case "arbitrum-goerli":
	            return "arbitrum-goerli.infura.io";
	        case "arbitrum-sepolia":
	            return "arbitrum-sepolia.infura.io";
	        case "base":
	            return "base-mainnet.infura.io";
	        case "base-goerlia":
	            return "base-goerli.infura.io";
	        case "base-sepolia":
	            return "base-sepolia.infura.io";
	        case "bnb":
	            return "bnbsmartchain-mainnet.infura.io";
	        case "bnbt":
	            return "bnbsmartchain-testnet.infura.io";
	        case "linea":
	            return "linea-mainnet.infura.io";
	        case "linea-goerli":
	            return "linea-goerli.infura.io";
	        case "matic":
	            return "polygon-mainnet.infura.io";
	        case "matic-mumbai":
	            return "polygon-mumbai.infura.io";
	        case "optimism":
	            return "optimism-mainnet.infura.io";
	        case "optimism-goerli":
	            return "optimism-goerli.infura.io";
	        case "optimism-sepolia":
	            return "optimism-sepolia.infura.io";
	    }
	    (0, index_js_1.assertArgument)(false, "unsupported network", "network", name);
	}
	/**
	 *  The **InfuraWebSocketProvider** connects to the [[link-infura]]
	 *  WebSocket end-points.
	 *
	 *  By default, a highly-throttled API key is used, which is
	 *  appropriate for quick prototypes and simple scripts. To
	 *  gain access to an increased rate-limit, it is highly
	 *  recommended to [sign up here](link-infura-signup).
	 */
	class InfuraWebSocketProvider extends provider_websocket_js_1.WebSocketProvider {
	    /**
	     *  The Project ID for the INFURA connection.
	     */
	    projectId;
	    /**
	     *  The Project Secret.
	     *
	     *  If null, no authenticated requests are made. This should not
	     *  be used outside of private contexts.
	     */
	    projectSecret;
	    /**
	     *  Creates a new **InfuraWebSocketProvider**.
	     */
	    constructor(network, projectId) {
	        const provider = new InfuraProvider(network, projectId);
	        const req = provider._getConnection();
	        (0, index_js_1.assert)(!req.credentials, "INFURA WebSocket project secrets unsupported", "UNSUPPORTED_OPERATION", { operation: "InfuraProvider.getWebSocketProvider()" });
	        const url = req.url.replace(/^http/i, "ws").replace("/v3/", "/ws/v3/");
	        super(url, network);
	        (0, index_js_1.defineProperties)(this, {
	            projectId: provider.projectId,
	            projectSecret: provider.projectSecret
	        });
	    }
	    isCommunityResource() {
	        return (this.projectId === defaultProjectId);
	    }
	}
	providerInfura.InfuraWebSocketProvider = InfuraWebSocketProvider;
	/**
	 *  The **InfuraProvider** connects to the [[link-infura]]
	 *  JSON-RPC end-points.
	 *
	 *  By default, a highly-throttled API key is used, which is
	 *  appropriate for quick prototypes and simple scripts. To
	 *  gain access to an increased rate-limit, it is highly
	 *  recommended to [sign up here](link-infura-signup).
	 */
	class InfuraProvider extends provider_jsonrpc_js_1.JsonRpcProvider {
	    /**
	     *  The Project ID for the INFURA connection.
	     */
	    projectId;
	    /**
	     *  The Project Secret.
	     *
	     *  If null, no authenticated requests are made. This should not
	     *  be used outside of private contexts.
	     */
	    projectSecret;
	    /**
	     *  Creates a new **InfuraProvider**.
	     */
	    constructor(_network, projectId, projectSecret) {
	        if (_network == null) {
	            _network = "mainnet";
	        }
	        const network = network_js_1.Network.from(_network);
	        if (projectId == null) {
	            projectId = defaultProjectId;
	        }
	        if (projectSecret == null) {
	            projectSecret = null;
	        }
	        const request = InfuraProvider.getRequest(network, projectId, projectSecret);
	        super(request, network, { staticNetwork: network });
	        (0, index_js_1.defineProperties)(this, { projectId, projectSecret });
	    }
	    _getProvider(chainId) {
	        try {
	            return new InfuraProvider(chainId, this.projectId, this.projectSecret);
	        }
	        catch (error) { }
	        return super._getProvider(chainId);
	    }
	    isCommunityResource() {
	        return (this.projectId === defaultProjectId);
	    }
	    /**
	     *  Creates a new **InfuraWebSocketProvider**.
	     */
	    static getWebSocketProvider(network, projectId) {
	        return new InfuraWebSocketProvider(network, projectId);
	    }
	    /**
	     *  Returns a prepared request for connecting to %%network%%
	     *  with %%projectId%% and %%projectSecret%%.
	     */
	    static getRequest(network, projectId, projectSecret) {
	        if (projectId == null) {
	            projectId = defaultProjectId;
	        }
	        if (projectSecret == null) {
	            projectSecret = null;
	        }
	        const request = new index_js_1.FetchRequest(`https:/\/${getHost(network.name)}/v3/${projectId}`);
	        request.allowGzip = true;
	        if (projectSecret) {
	            request.setCredentials("", projectSecret);
	        }
	        if (projectId === defaultProjectId) {
	            request.retryFunc = async (request, response, attempt) => {
	                (0, community_js_1.showThrottleMessage)("InfuraProvider");
	                return true;
	            };
	        }
	        return request;
	    }
	}
	providerInfura.InfuraProvider = InfuraProvider;
	
	return providerInfura;
}

var providerQuicknode = {};

var hasRequiredProviderQuicknode;

function requireProviderQuicknode () {
	if (hasRequiredProviderQuicknode) return providerQuicknode;
	hasRequiredProviderQuicknode = 1;
	/**
	 *  [[link-quicknode]] provides a third-party service for connecting to
	 *  various blockchains over JSON-RPC.
	 *
	 *  **Supported Networks**
	 *
	 *  - Ethereum Mainnet (``mainnet``)
	 *  - Goerli Testnet (``goerli``)
	 *  - Sepolia Testnet (``sepolia``)
	 *  - Holesky Testnet (``holesky``)
	 *  - Arbitrum (``arbitrum``)
	 *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)
	 *  - Arbitrum Sepolia Testnet (``arbitrum-sepolia``)
	 *  - Base Mainnet (``base``);
	 *  - Base Goerli Testnet (``base-goerli``);
	 *  - Base Sepolia Testnet (``base-sepolia``);
	 *  - BNB Smart Chain Mainnet (``bnb``)
	 *  - BNB Smart Chain Testnet (``bnbt``)
	 *  - Optimism (``optimism``)
	 *  - Optimism Goerli Testnet (``optimism-goerli``)
	 *  - Optimism Sepolia Testnet (``optimism-sepolia``)
	 *  - Polygon (``matic``)
	 *  - Polygon Mumbai Testnet (``matic-mumbai``)
	 *
	 *  @_subsection: api/providers/thirdparty:QuickNode  [providers-quicknode]
	 */
	Object.defineProperty(providerQuicknode, "__esModule", { value: true });
	providerQuicknode.QuickNodeProvider = void 0;
	const index_js_1 = requireUtils$3();
	const community_js_1 = requireCommunity();
	const network_js_1 = requireNetwork();
	const provider_jsonrpc_js_1 = requireProviderJsonrpc();
	const defaultToken = "919b412a057b5e9c9b6dce193c5a60242d6efadb";
	function getHost(name) {
	    switch (name) {
	        case "mainnet":
	            return "ethers.quiknode.pro";
	        case "goerli":
	            return "ethers.ethereum-goerli.quiknode.pro";
	        case "sepolia":
	            return "ethers.ethereum-sepolia.quiknode.pro";
	        case "holesky":
	            return "ethers.ethereum-holesky.quiknode.pro";
	        case "arbitrum":
	            return "ethers.arbitrum-mainnet.quiknode.pro";
	        case "arbitrum-goerli":
	            return "ethers.arbitrum-goerli.quiknode.pro";
	        case "arbitrum-sepolia":
	            return "ethers.arbitrum-sepolia.quiknode.pro";
	        case "base":
	            return "ethers.base-mainnet.quiknode.pro";
	        case "base-goerli":
	            return "ethers.base-goerli.quiknode.pro";
	        case "base-spolia":
	            return "ethers.base-sepolia.quiknode.pro";
	        case "bnb":
	            return "ethers.bsc.quiknode.pro";
	        case "bnbt":
	            return "ethers.bsc-testnet.quiknode.pro";
	        case "matic":
	            return "ethers.matic.quiknode.pro";
	        case "matic-mumbai":
	            return "ethers.matic-testnet.quiknode.pro";
	        case "optimism":
	            return "ethers.optimism.quiknode.pro";
	        case "optimism-goerli":
	            return "ethers.optimism-goerli.quiknode.pro";
	        case "optimism-sepolia":
	            return "ethers.optimism-sepolia.quiknode.pro";
	        case "xdai":
	            return "ethers.xdai.quiknode.pro";
	    }
	    (0, index_js_1.assertArgument)(false, "unsupported network", "network", name);
	}
	/*
	@TODO:
	  These networks are not currently present in the Network
	  default included networks. Research them and ensure they
	  are EVM compatible and work with ethers

	  http://ethers.matic-amoy.quiknode.pro

	  http://ethers.avalanche-mainnet.quiknode.pro
	  http://ethers.avalanche-testnet.quiknode.pro
	  http://ethers.blast-sepolia.quiknode.pro
	  http://ethers.celo-mainnet.quiknode.pro
	  http://ethers.fantom.quiknode.pro
	  http://ethers.imx-demo.quiknode.pro
	  http://ethers.imx-mainnet.quiknode.pro
	  http://ethers.imx-testnet.quiknode.pro
	  http://ethers.near-mainnet.quiknode.pro
	  http://ethers.near-testnet.quiknode.pro
	  http://ethers.nova-mainnet.quiknode.pro
	  http://ethers.scroll-mainnet.quiknode.pro
	  http://ethers.scroll-testnet.quiknode.pro
	  http://ethers.tron-mainnet.quiknode.pro
	  http://ethers.zkevm-mainnet.quiknode.pro
	  http://ethers.zkevm-testnet.quiknode.pro
	  http://ethers.zksync-mainnet.quiknode.pro
	  http://ethers.zksync-testnet.quiknode.pro
	*/
	/**
	 *  The **QuickNodeProvider** connects to the [[link-quicknode]]
	 *  JSON-RPC end-points.
	 *
	 *  By default, a highly-throttled API token is used, which is
	 *  appropriate for quick prototypes and simple scripts. To
	 *  gain access to an increased rate-limit, it is highly
	 *  recommended to [sign up here](link-quicknode).
	 */
	class QuickNodeProvider extends provider_jsonrpc_js_1.JsonRpcProvider {
	    /**
	     *  The API token.
	     */
	    token;
	    /**
	     *  Creates a new **QuickNodeProvider**.
	     */
	    constructor(_network, token) {
	        if (_network == null) {
	            _network = "mainnet";
	        }
	        const network = network_js_1.Network.from(_network);
	        if (token == null) {
	            token = defaultToken;
	        }
	        const request = QuickNodeProvider.getRequest(network, token);
	        super(request, network, { staticNetwork: network });
	        (0, index_js_1.defineProperties)(this, { token });
	    }
	    _getProvider(chainId) {
	        try {
	            return new QuickNodeProvider(chainId, this.token);
	        }
	        catch (error) { }
	        return super._getProvider(chainId);
	    }
	    isCommunityResource() {
	        return (this.token === defaultToken);
	    }
	    /**
	     *  Returns a new request prepared for %%network%% and the
	     *  %%token%%.
	     */
	    static getRequest(network, token) {
	        if (token == null) {
	            token = defaultToken;
	        }
	        const request = new index_js_1.FetchRequest(`https:/\/${getHost(network.name)}/${token}`);
	        request.allowGzip = true;
	        //if (projectSecret) { request.setCredentials("", projectSecret); }
	        if (token === defaultToken) {
	            request.retryFunc = async (request, response, attempt) => {
	                (0, community_js_1.showThrottleMessage)("QuickNodeProvider");
	                return true;
	            };
	        }
	        return request;
	    }
	}
	providerQuicknode.QuickNodeProvider = QuickNodeProvider;
	
	return providerQuicknode;
}

var providerFallback = {};

var hasRequiredProviderFallback;

function requireProviderFallback () {
	if (hasRequiredProviderFallback) return providerFallback;
	hasRequiredProviderFallback = 1;
	Object.defineProperty(providerFallback, "__esModule", { value: true });
	providerFallback.FallbackProvider = void 0;
	/**
	 *  A **FallbackProvider** provides resilience, security and performance
	 *  in a way that is customizable and configurable.
	 *
	 *  @_section: api/providers/fallback-provider:Fallback Provider [about-fallback-provider]
	 */
	const index_js_1 = requireUtils$3();
	const abstract_provider_js_1 = requireAbstractProvider();
	const network_js_1 = requireNetwork();
	const BN_1 = BigInt("1");
	const BN_2 = BigInt("2");
	function shuffle(array) {
	    for (let i = array.length - 1; i > 0; i--) {
	        const j = Math.floor(Math.random() * (i + 1));
	        const tmp = array[i];
	        array[i] = array[j];
	        array[j] = tmp;
	    }
	}
	function stall(duration) {
	    return new Promise((resolve) => { setTimeout(resolve, duration); });
	}
	function getTime() { return (new Date()).getTime(); }
	function stringify(value) {
	    return JSON.stringify(value, (key, value) => {
	        if (typeof (value) === "bigint") {
	            return { type: "bigint", value: value.toString() };
	        }
	        return value;
	    });
	}
	const defaultConfig = { stallTimeout: 400, priority: 1, weight: 1 };
	const defaultState = {
	    blockNumber: -2, requests: 0, lateResponses: 0, errorResponses: 0,
	    outOfSync: -1, unsupportedEvents: 0, rollingDuration: 0, score: 0,
	    _network: null, _updateNumber: null, _totalTime: 0,
	    _lastFatalError: null, _lastFatalErrorTimestamp: 0
	};
	async function waitForSync(config, blockNumber) {
	    while (config.blockNumber < 0 || config.blockNumber < blockNumber) {
	        if (!config._updateNumber) {
	            config._updateNumber = (async () => {
	                try {
	                    const blockNumber = await config.provider.getBlockNumber();
	                    if (blockNumber > config.blockNumber) {
	                        config.blockNumber = blockNumber;
	                    }
	                }
	                catch (error) {
	                    config.blockNumber = -2;
	                    config._lastFatalError = error;
	                    config._lastFatalErrorTimestamp = getTime();
	                }
	                config._updateNumber = null;
	            })();
	        }
	        await config._updateNumber;
	        config.outOfSync++;
	        if (config._lastFatalError) {
	            break;
	        }
	    }
	}
	function _normalize(value) {
	    if (value == null) {
	        return "null";
	    }
	    if (Array.isArray(value)) {
	        return "[" + (value.map(_normalize)).join(",") + "]";
	    }
	    if (typeof (value) === "object" && typeof (value.toJSON) === "function") {
	        return _normalize(value.toJSON());
	    }
	    switch (typeof (value)) {
	        case "boolean":
	        case "symbol":
	            return value.toString();
	        case "bigint":
	        case "number":
	            return BigInt(value).toString();
	        case "string":
	            return JSON.stringify(value);
	        case "object": {
	            const keys = Object.keys(value);
	            keys.sort();
	            return "{" + keys.map((k) => `${JSON.stringify(k)}:${_normalize(value[k])}`).join(",") + "}";
	        }
	    }
	    console.log("Could not serialize", value);
	    throw new Error("Hmm...");
	}
	function normalizeResult(value) {
	    if ("error" in value) {
	        const error = value.error;
	        return { tag: _normalize(error), value: error };
	    }
	    const result = value.result;
	    return { tag: _normalize(result), value: result };
	}
	// This strategy picks the highest weight result, as long as the weight is
	// equal to or greater than quorum
	function checkQuorum(quorum, results) {
	    const tally = new Map();
	    for (const { value, tag, weight } of results) {
	        const t = tally.get(tag) || { value, weight: 0 };
	        t.weight += weight;
	        tally.set(tag, t);
	    }
	    let best = null;
	    for (const r of tally.values()) {
	        if (r.weight >= quorum && (!best || r.weight > best.weight)) {
	            best = r;
	        }
	    }
	    if (best) {
	        return best.value;
	    }
	    return undefined;
	}
	function getMedian(quorum, results) {
	    let resultWeight = 0;
	    const errorMap = new Map();
	    let bestError = null;
	    const values = [];
	    for (const { value, tag, weight } of results) {
	        if (value instanceof Error) {
	            const e = errorMap.get(tag) || { value, weight: 0 };
	            e.weight += weight;
	            errorMap.set(tag, e);
	            if (bestError == null || e.weight > bestError.weight) {
	                bestError = e;
	            }
	        }
	        else {
	            values.push(BigInt(value));
	            resultWeight += weight;
	        }
	    }
	    if (resultWeight < quorum) {
	        // We have quorum for an error
	        if (bestError && bestError.weight >= quorum) {
	            return bestError.value;
	        }
	        // We do not have quorum for a result
	        return undefined;
	    }
	    // Get the sorted values
	    values.sort((a, b) => ((a < b) ? -1 : (b > a) ? 1 : 0));
	    const mid = Math.floor(values.length / 2);
	    // Odd-length; take the middle value
	    if (values.length % 2) {
	        return values[mid];
	    }
	    // Even length; take the ceiling of the mean of the center two values
	    return (values[mid - 1] + values[mid] + BN_1) / BN_2;
	}
	function getAnyResult(quorum, results) {
	    // If any value or error meets quorum, that is our preferred result
	    const result = checkQuorum(quorum, results);
	    if (result !== undefined) {
	        return result;
	    }
	    // Otherwise, do we have any result?
	    for (const r of results) {
	        if (r.value) {
	            return r.value;
	        }
	    }
	    // Nope!
	    return undefined;
	}
	function getFuzzyMode(quorum, results) {
	    if (quorum === 1) {
	        return (0, index_js_1.getNumber)(getMedian(quorum, results), "%internal");
	    }
	    const tally = new Map();
	    const add = (result, weight) => {
	        const t = tally.get(result) || { result, weight: 0 };
	        t.weight += weight;
	        tally.set(result, t);
	    };
	    for (const { weight, value } of results) {
	        const r = (0, index_js_1.getNumber)(value);
	        add(r - 1, weight);
	        add(r, weight);
	        add(r + 1, weight);
	    }
	    let bestWeight = 0;
	    let bestResult = undefined;
	    for (const { weight, result } of tally.values()) {
	        // Use this result, if this result meets quorum and has either:
	        // - a better weight
	        // - or equal weight, but the result is larger
	        if (weight >= quorum && (weight > bestWeight || (bestResult != null && weight === bestWeight && result > bestResult))) {
	            bestWeight = weight;
	            bestResult = result;
	        }
	    }
	    return bestResult;
	}
	/**
	 *  A **FallbackProvider** manages several [[Providers]] providing
	 *  resilience by switching between slow or misbehaving nodes, security
	 *  by requiring multiple backends to aggree and performance by allowing
	 *  faster backends to respond earlier.
	 *
	 */
	class FallbackProvider extends abstract_provider_js_1.AbstractProvider {
	    /**
	     *  The number of backends that must agree on a value before it is
	     *  accpeted.
	     */
	    quorum;
	    /**
	     *  @_ignore:
	     */
	    eventQuorum;
	    /**
	     *  @_ignore:
	     */
	    eventWorkers;
	    #configs;
	    #height;
	    #initialSyncPromise;
	    /**
	     *  Creates a new **FallbackProvider** with %%providers%% connected to
	     *  %%network%%.
	     *
	     *  If a [[Provider]] is included in %%providers%%, defaults are used
	     *  for the configuration.
	     */
	    constructor(providers, network, options) {
	        super(network, options);
	        this.#configs = providers.map((p) => {
	            if (p instanceof abstract_provider_js_1.AbstractProvider) {
	                return Object.assign({ provider: p }, defaultConfig, defaultState);
	            }
	            else {
	                return Object.assign({}, defaultConfig, p, defaultState);
	            }
	        });
	        this.#height = -2;
	        this.#initialSyncPromise = null;
	        if (options && options.quorum != null) {
	            this.quorum = options.quorum;
	        }
	        else {
	            this.quorum = Math.ceil(this.#configs.reduce((accum, config) => {
	                accum += config.weight;
	                return accum;
	            }, 0) / 2);
	        }
	        this.eventQuorum = 1;
	        this.eventWorkers = 1;
	        (0, index_js_1.assertArgument)(this.quorum <= this.#configs.reduce((a, c) => (a + c.weight), 0), "quorum exceed provider wieght", "quorum", this.quorum);
	    }
	    get providerConfigs() {
	        return this.#configs.map((c) => {
	            const result = Object.assign({}, c);
	            for (const key in result) {
	                if (key[0] === "_") {
	                    delete result[key];
	                }
	            }
	            return result;
	        });
	    }
	    async _detectNetwork() {
	        return network_js_1.Network.from((0, index_js_1.getBigInt)(await this._perform({ method: "chainId" })));
	    }
	    // @TODO: Add support to select providers to be the event subscriber
	    //_getSubscriber(sub: Subscription): Subscriber {
	    //    throw new Error("@TODO");
	    //}
	    /**
	     *  Transforms a %%req%% into the correct method call on %%provider%%.
	     */
	    async _translatePerform(provider, req) {
	        switch (req.method) {
	            case "broadcastTransaction":
	                return await provider.broadcastTransaction(req.signedTransaction);
	            case "call":
	                return await provider.call(Object.assign({}, req.transaction, { blockTag: req.blockTag }));
	            case "chainId":
	                return (await provider.getNetwork()).chainId;
	            case "estimateGas":
	                return await provider.estimateGas(req.transaction);
	            case "getBalance":
	                return await provider.getBalance(req.address, req.blockTag);
	            case "getBlock": {
	                const block = ("blockHash" in req) ? req.blockHash : req.blockTag;
	                return await provider.getBlock(block, req.includeTransactions);
	            }
	            case "getBlockNumber":
	                return await provider.getBlockNumber();
	            case "getCode":
	                return await provider.getCode(req.address, req.blockTag);
	            case "getGasPrice":
	                return (await provider.getFeeData()).gasPrice;
	            case "getPriorityFee":
	                return (await provider.getFeeData()).maxPriorityFeePerGas;
	            case "getLogs":
	                return await provider.getLogs(req.filter);
	            case "getStorage":
	                return await provider.getStorage(req.address, req.position, req.blockTag);
	            case "getTransaction":
	                return await provider.getTransaction(req.hash);
	            case "getTransactionCount":
	                return await provider.getTransactionCount(req.address, req.blockTag);
	            case "getTransactionReceipt":
	                return await provider.getTransactionReceipt(req.hash);
	            case "getTransactionResult":
	                return await provider.getTransactionResult(req.hash);
	        }
	    }
	    // Grab the next (random) config that is not already part of
	    // the running set
	    #getNextConfig(running) {
	        // @TODO: Maybe do a check here to favour (heavily) providers that
	        //        do not require waitForSync and disfavour providers that
	        //        seem down-ish or are behaving slowly
	        const configs = Array.from(running).map((r) => r.config);
	        // Shuffle the states, sorted by priority
	        const allConfigs = this.#configs.slice();
	        shuffle(allConfigs);
	        allConfigs.sort((a, b) => (a.priority - b.priority));
	        for (const config of allConfigs) {
	            if (config._lastFatalError) {
	                continue;
	            }
	            if (configs.indexOf(config) === -1) {
	                return config;
	            }
	        }
	        return null;
	    }
	    // Adds a new runner (if available) to running.
	    #addRunner(running, req) {
	        const config = this.#getNextConfig(running);
	        // No runners available
	        if (config == null) {
	            return null;
	        }
	        // Create a new runner
	        const runner = {
	            config, result: null, didBump: false,
	            perform: null, staller: null
	        };
	        const now = getTime();
	        // Start performing this operation
	        runner.perform = (async () => {
	            try {
	                config.requests++;
	                const result = await this._translatePerform(config.provider, req);
	                runner.result = { result };
	            }
	            catch (error) {
	                config.errorResponses++;
	                runner.result = { error };
	            }
	            const dt = (getTime() - now);
	            config._totalTime += dt;
	            config.rollingDuration = 0.95 * config.rollingDuration + 0.05 * dt;
	            runner.perform = null;
	        })();
	        // Start a staller; when this times out, it's time to force
	        // kicking off another runner because we are taking too long
	        runner.staller = (async () => {
	            await stall(config.stallTimeout);
	            runner.staller = null;
	        })();
	        running.add(runner);
	        return runner;
	    }
	    // Initializes the blockNumber and network for each runner and
	    // blocks until initialized
	    async #initialSync() {
	        let initialSync = this.#initialSyncPromise;
	        if (!initialSync) {
	            const promises = [];
	            this.#configs.forEach((config) => {
	                promises.push((async () => {
	                    await waitForSync(config, 0);
	                    if (!config._lastFatalError) {
	                        config._network = await config.provider.getNetwork();
	                    }
	                })());
	            });
	            this.#initialSyncPromise = initialSync = (async () => {
	                // Wait for all providers to have a block number and network
	                await Promise.all(promises);
	                // Check all the networks match
	                let chainId = null;
	                for (const config of this.#configs) {
	                    if (config._lastFatalError) {
	                        continue;
	                    }
	                    const network = (config._network);
	                    if (chainId == null) {
	                        chainId = network.chainId;
	                    }
	                    else if (network.chainId !== chainId) {
	                        (0, index_js_1.assert)(false, "cannot mix providers on different networks", "UNSUPPORTED_OPERATION", {
	                            operation: "new FallbackProvider"
	                        });
	                    }
	                }
	            })();
	        }
	        await initialSync;
	    }
	    async #checkQuorum(running, req) {
	        // Get all the result objects
	        const results = [];
	        for (const runner of running) {
	            if (runner.result != null) {
	                const { tag, value } = normalizeResult(runner.result);
	                results.push({ tag, value, weight: runner.config.weight });
	            }
	        }
	        // Are there enough results to event meet quorum?
	        if (results.reduce((a, r) => (a + r.weight), 0) < this.quorum) {
	            return undefined;
	        }
	        switch (req.method) {
	            case "getBlockNumber": {
	                // We need to get the bootstrap block height
	                if (this.#height === -2) {
	                    this.#height = Math.ceil((0, index_js_1.getNumber)(getMedian(this.quorum, this.#configs.filter((c) => (!c._lastFatalError)).map((c) => ({
	                        value: c.blockNumber,
	                        tag: (0, index_js_1.getNumber)(c.blockNumber).toString(),
	                        weight: c.weight
	                    })))));
	                }
	                // Find the mode across all the providers, allowing for
	                // a little drift between block heights
	                const mode = getFuzzyMode(this.quorum, results);
	                if (mode === undefined) {
	                    return undefined;
	                }
	                if (mode > this.#height) {
	                    this.#height = mode;
	                }
	                return this.#height;
	            }
	            case "getGasPrice":
	            case "getPriorityFee":
	            case "estimateGas":
	                return getMedian(this.quorum, results);
	            case "getBlock":
	                // Pending blocks are in the mempool and already
	                // quite untrustworthy; just grab anything
	                if ("blockTag" in req && req.blockTag === "pending") {
	                    return getAnyResult(this.quorum, results);
	                }
	                return checkQuorum(this.quorum, results);
	            case "call":
	            case "chainId":
	            case "getBalance":
	            case "getTransactionCount":
	            case "getCode":
	            case "getStorage":
	            case "getTransaction":
	            case "getTransactionReceipt":
	            case "getLogs":
	                return checkQuorum(this.quorum, results);
	            case "broadcastTransaction":
	                return getAnyResult(this.quorum, results);
	        }
	        (0, index_js_1.assert)(false, "unsupported method", "UNSUPPORTED_OPERATION", {
	            operation: `_perform(${stringify(req.method)})`
	        });
	    }
	    async #waitForQuorum(running, req) {
	        if (running.size === 0) {
	            throw new Error("no runners?!");
	        }
	        // Any promises that are interesting to watch for; an expired stall
	        // or a successful perform
	        const interesting = [];
	        let newRunners = 0;
	        for (const runner of running) {
	            // No responses, yet; keep an eye on it
	            if (runner.perform) {
	                interesting.push(runner.perform);
	            }
	            // Still stalling...
	            if (runner.staller) {
	                interesting.push(runner.staller);
	                continue;
	            }
	            // This runner has already triggered another runner
	            if (runner.didBump) {
	                continue;
	            }
	            // Got a response (result or error) or stalled; kick off another runner
	            runner.didBump = true;
	            newRunners++;
	        }
	        // Check if we have reached quorum on a result (or error)
	        const value = await this.#checkQuorum(running, req);
	        if (value !== undefined) {
	            if (value instanceof Error) {
	                throw value;
	            }
	            return value;
	        }
	        // Add any new runners, because a staller timed out or a result
	        // or error response came in.
	        for (let i = 0; i < newRunners; i++) {
	            this.#addRunner(running, req);
	        }
	        // All providers have returned, and we have no result
	        (0, index_js_1.assert)(interesting.length > 0, "quorum not met", "SERVER_ERROR", {
	            request: "%sub-requests",
	            info: { request: req, results: Array.from(running).map((r) => stringify(r.result)) }
	        });
	        // Wait for someone to either complete its perform or stall out
	        await Promise.race(interesting);
	        // This is recursive, but at worst case the depth is 2x the
	        // number of providers (each has a perform and a staller)
	        return await this.#waitForQuorum(running, req);
	    }
	    async _perform(req) {
	        // Broadcasting a transaction is rare (ish) and already incurs
	        // a cost on the user, so spamming is safe-ish. Just send it to
	        // every backend.
	        if (req.method === "broadcastTransaction") {
	            // Once any broadcast provides a positive result, use it. No
	            // need to wait for anyone else
	            const results = this.#configs.map((c) => null);
	            const broadcasts = this.#configs.map(async ({ provider, weight }, index) => {
	                try {
	                    const result = await provider._perform(req);
	                    results[index] = Object.assign(normalizeResult({ result }), { weight });
	                }
	                catch (error) {
	                    results[index] = Object.assign(normalizeResult({ error }), { weight });
	                }
	            });
	            // As each promise finishes...
	            while (true) {
	                // Check for a valid broadcast result
	                const done = results.filter((r) => (r != null));
	                for (const { value } of done) {
	                    if (!(value instanceof Error)) {
	                        return value;
	                    }
	                }
	                // Check for a legit broadcast error (one which we cannot
	                // recover from; some nodes may return the following red
	                // herring events:
	                // - alredy seend (UNKNOWN_ERROR)
	                // - NONCE_EXPIRED
	                // - REPLACEMENT_UNDERPRICED
	                const result = checkQuorum(this.quorum, results.filter((r) => (r != null)));
	                if ((0, index_js_1.isError)(result, "INSUFFICIENT_FUNDS")) {
	                    throw result;
	                }
	                // Kick off the next provider (if any)
	                const waiting = broadcasts.filter((b, i) => (results[i] == null));
	                if (waiting.length === 0) {
	                    break;
	                }
	                await Promise.race(waiting);
	            }
	            // Use standard quorum results; any result was returned above,
	            // so this will find any error that met quorum if any
	            const result = getAnyResult(this.quorum, results);
	            (0, index_js_1.assert)(result !== undefined, "problem multi-broadcasting", "SERVER_ERROR", {
	                request: "%sub-requests",
	                info: { request: req, results: results.map(stringify) }
	            });
	            if (result instanceof Error) {
	                throw result;
	            }
	            return result;
	        }
	        await this.#initialSync();
	        // Bootstrap enough runners to meet quorum
	        const running = new Set();
	        let inflightQuorum = 0;
	        while (true) {
	            const runner = this.#addRunner(running, req);
	            if (runner == null) {
	                break;
	            }
	            inflightQuorum += runner.config.weight;
	            if (inflightQuorum >= this.quorum) {
	                break;
	            }
	        }
	        const result = await this.#waitForQuorum(running, req);
	        // Track requests sent to a provider that are still
	        // outstanding after quorum has been otherwise found
	        for (const runner of running) {
	            if (runner.perform && runner.result == null) {
	                runner.config.lateResponses++;
	            }
	        }
	        return result;
	    }
	    async destroy() {
	        for (const { provider } of this.#configs) {
	            provider.destroy();
	        }
	        super.destroy();
	    }
	}
	providerFallback.FallbackProvider = FallbackProvider;
	
	return providerFallback;
}

var hasRequiredDefaultProvider;

function requireDefaultProvider () {
	if (hasRequiredDefaultProvider) return defaultProvider;
	hasRequiredDefaultProvider = 1;
	Object.defineProperty(defaultProvider, "__esModule", { value: true });
	defaultProvider.getDefaultProvider = void 0;
	const index_js_1 = requireUtils$3();
	const provider_ankr_js_1 = requireProviderAnkr();
	const provider_alchemy_js_1 = requireProviderAlchemy();
	const provider_cloudflare_js_1 = requireProviderCloudflare();
	const provider_etherscan_js_1 = requireProviderEtherscan();
	const provider_infura_js_1 = requireProviderInfura();
	//import { PocketProvider } from "./provider-pocket.js";
	const provider_quicknode_js_1 = requireProviderQuicknode();
	const provider_fallback_js_1 = requireProviderFallback();
	const provider_jsonrpc_js_1 = requireProviderJsonrpc();
	const network_js_1 = requireNetwork();
	const provider_websocket_js_1 = requireProviderWebsocket();
	function isWebSocketLike(value) {
	    return (value && typeof (value.send) === "function" &&
	        typeof (value.close) === "function");
	}
	const Testnets = "goerli kovan sepolia classicKotti optimism-goerli arbitrum-goerli matic-mumbai bnbt".split(" ");
	/**
	 *  Returns a default provider for %%network%%.
	 *
	 *  If %%network%% is a [[WebSocketLike]] or string that begins with
	 *  ``"ws:"`` or ``"wss:"``, a [[WebSocketProvider]] is returned backed
	 *  by that WebSocket or URL.
	 *
	 *  If %%network%% is a string that begins with ``"HTTP:"`` or ``"HTTPS:"``,
	 *  a [[JsonRpcProvider]] is returned connected to that URL.
	 *
	 *  Otherwise, a default provider is created backed by well-known public
	 *  Web3 backends (such as [[link-infura]]) using community-provided API
	 *  keys.
	 *
	 *  The %%options%% allows specifying custom API keys per backend (setting
	 *  an API key to ``"-"`` will omit that provider) and ``options.exclusive``
	 *  can be set to either a backend name or and array of backend names, which
	 *  will whitelist **only** those backends.
	 *
	 *  Current backend strings supported are:
	 *  - ``"alchemy"``
	 *  - ``"ankr"``
	 *  - ``"cloudflare"``
	 *  - ``"etherscan"``
	 *  - ``"infura"``
	 *  - ``"publicPolygon"``
	 *  - ``"quicknode"``
	 *
	 *  @example:
	 *    // Connect to a local Geth node
	 *    provider = getDefaultProvider("http://localhost:8545/");
	 *
	 *    // Connect to Ethereum mainnet with any current and future
	 *    // third-party services available
	 *    provider = getDefaultProvider("mainnet");
	 *
	 *    // Connect to Polygon, but only allow Etherscan and
	 *    // INFURA and use "MY_API_KEY" in calls to Etherscan.
	 *    provider = getDefaultProvider("matic", {
	 *      etherscan: "MY_API_KEY",
	 *      exclusive: [ "etherscan", "infura" ]
	 *    });
	 */
	function getDefaultProvider(network, options) {
	    if (options == null) {
	        options = {};
	    }
	    const allowService = (name) => {
	        if (options[name] === "-") {
	            return false;
	        }
	        if (typeof (options.exclusive) === "string") {
	            return (name === options.exclusive);
	        }
	        if (Array.isArray(options.exclusive)) {
	            return (options.exclusive.indexOf(name) !== -1);
	        }
	        return true;
	    };
	    if (typeof (network) === "string" && network.match(/^https?:/)) {
	        return new provider_jsonrpc_js_1.JsonRpcProvider(network);
	    }
	    if (typeof (network) === "string" && network.match(/^wss?:/) || isWebSocketLike(network)) {
	        return new provider_websocket_js_1.WebSocketProvider(network);
	    }
	    // Get the network and name, if possible
	    let staticNetwork = null;
	    try {
	        staticNetwork = network_js_1.Network.from(network);
	    }
	    catch (error) { }
	    const providers = [];
	    if (allowService("publicPolygon") && staticNetwork) {
	        if (staticNetwork.name === "matic") {
	            providers.push(new provider_jsonrpc_js_1.JsonRpcProvider("https:/\/polygon-rpc.com/", staticNetwork, { staticNetwork }));
	        }
	    }
	    if (allowService("alchemy")) {
	        try {
	            providers.push(new provider_alchemy_js_1.AlchemyProvider(network, options.alchemy));
	        }
	        catch (error) { }
	    }
	    if (allowService("ankr") && options.ankr != null) {
	        try {
	            providers.push(new provider_ankr_js_1.AnkrProvider(network, options.ankr));
	        }
	        catch (error) { }
	    }
	    if (allowService("cloudflare")) {
	        try {
	            providers.push(new provider_cloudflare_js_1.CloudflareProvider(network));
	        }
	        catch (error) { }
	    }
	    if (allowService("etherscan")) {
	        try {
	            providers.push(new provider_etherscan_js_1.EtherscanProvider(network, options.etherscan));
	        }
	        catch (error) { }
	    }
	    if (allowService("infura")) {
	        try {
	            let projectId = options.infura;
	            let projectSecret = undefined;
	            if (typeof (projectId) === "object") {
	                projectSecret = projectId.projectSecret;
	                projectId = projectId.projectId;
	            }
	            providers.push(new provider_infura_js_1.InfuraProvider(network, projectId, projectSecret));
	        }
	        catch (error) { }
	    }
	    /*
	        if (options.pocket !== "-") {
	            try {
	                let appId = options.pocket;
	                let secretKey: undefined | string = undefined;
	                let loadBalancer: undefined | boolean = undefined;
	                if (typeof(appId) === "object") {
	                    loadBalancer = !!appId.loadBalancer;
	                    secretKey = appId.secretKey;
	                    appId = appId.appId;
	                }
	                providers.push(new PocketProvider(network, appId, secretKey, loadBalancer));
	            } catch (error) { console.log(error); }
	        }
	    */
	    if (allowService("quicknode")) {
	        try {
	            let token = options.quicknode;
	            providers.push(new provider_quicknode_js_1.QuickNodeProvider(network, token));
	        }
	        catch (error) { }
	    }
	    (0, index_js_1.assert)(providers.length, "unsupported default network", "UNSUPPORTED_OPERATION", {
	        operation: "getDefaultProvider"
	    });
	    // No need for a FallbackProvider
	    if (providers.length === 1) {
	        return providers[0];
	    }
	    // We use the floor because public third-party providers can be unreliable,
	    // so a low number of providers with a large quorum will fail too often
	    let quorum = Math.floor(providers.length / 2);
	    if (quorum > 2) {
	        quorum = 2;
	    }
	    // Testnets don't need as strong a security gaurantee and speed is
	    // more useful during testing
	    if (staticNetwork && Testnets.indexOf(staticNetwork.name) !== -1) {
	        quorum = 1;
	    }
	    // Provided override qorum takes priority
	    if (options && options.quorum) {
	        quorum = options.quorum;
	    }
	    return new provider_fallback_js_1.FallbackProvider(providers, undefined, { quorum });
	}
	defaultProvider.getDefaultProvider = getDefaultProvider;
	
	return defaultProvider;
}

var signerNoncemanager = {};

var hasRequiredSignerNoncemanager;

function requireSignerNoncemanager () {
	if (hasRequiredSignerNoncemanager) return signerNoncemanager;
	hasRequiredSignerNoncemanager = 1;
	Object.defineProperty(signerNoncemanager, "__esModule", { value: true });
	signerNoncemanager.NonceManager = void 0;
	const index_js_1 = requireUtils$3();
	const abstract_signer_js_1 = requireAbstractSigner();
	/**
	 *  A **NonceManager** wraps another [[Signer]] and automatically manages
	 *  the nonce, ensuring serialized and sequential nonces are used during
	 *  transaction.
	 */
	class NonceManager extends abstract_signer_js_1.AbstractSigner {
	    /**
	     *  The Signer being managed.
	     */
	    signer;
	    #noncePromise;
	    #delta;
	    /**
	     *  Creates a new **NonceManager** to manage %%signer%%.
	     */
	    constructor(signer) {
	        super(signer.provider);
	        (0, index_js_1.defineProperties)(this, { signer });
	        this.#noncePromise = null;
	        this.#delta = 0;
	    }
	    async getAddress() {
	        return this.signer.getAddress();
	    }
	    connect(provider) {
	        return new NonceManager(this.signer.connect(provider));
	    }
	    async getNonce(blockTag) {
	        if (blockTag === "pending") {
	            if (this.#noncePromise == null) {
	                this.#noncePromise = super.getNonce("pending");
	            }
	            const delta = this.#delta;
	            return (await this.#noncePromise) + delta;
	        }
	        return super.getNonce(blockTag);
	    }
	    /**
	     *  Manually increment the nonce. This may be useful when managng
	     *  offline transactions.
	     */
	    increment() {
	        this.#delta++;
	    }
	    /**
	     *  Resets the nonce, causing the **NonceManager** to reload the current
	     *  nonce from the blockchain on the next transaction.
	     */
	    reset() {
	        this.#delta = 0;
	        this.#noncePromise = null;
	    }
	    async sendTransaction(tx) {
	        const noncePromise = this.getNonce("pending");
	        this.increment();
	        tx = await this.signer.populateTransaction(tx);
	        tx.nonce = await noncePromise;
	        // @TODO: Maybe handle interesting/recoverable errors?
	        // Like don't increment if the tx was certainly not sent
	        return await this.signer.sendTransaction(tx);
	    }
	    signTransaction(tx) {
	        return this.signer.signTransaction(tx);
	    }
	    signMessage(message) {
	        return this.signer.signMessage(message);
	    }
	    signTypedData(domain, types, value) {
	        return this.signer.signTypedData(domain, types, value);
	    }
	}
	signerNoncemanager.NonceManager = NonceManager;
	
	return signerNoncemanager;
}

var providerBrowser = {};

var hasRequiredProviderBrowser;

function requireProviderBrowser () {
	if (hasRequiredProviderBrowser) return providerBrowser;
	hasRequiredProviderBrowser = 1;
	Object.defineProperty(providerBrowser, "__esModule", { value: true });
	providerBrowser.BrowserProvider = void 0;
	const index_js_1 = requireUtils$3();
	const provider_jsonrpc_js_1 = requireProviderJsonrpc();
	/**
	 *  A **BrowserProvider** is intended to wrap an injected provider which
	 *  adheres to the [[link-eip-1193]] standard, which most (if not all)
	 *  currently do.
	 */
	class BrowserProvider extends provider_jsonrpc_js_1.JsonRpcApiPollingProvider {
	    #request;
	    /**
	     *  Connnect to the %%ethereum%% provider, optionally forcing the
	     *  %%network%%.
	     */
	    constructor(ethereum, network) {
	        (0, index_js_1.assertArgument)(ethereum && ethereum.request, "invalid EIP-1193 provider", "ethereum", ethereum);
	        super(network, { batchMaxCount: 1 });
	        this.#request = async (method, params) => {
	            const payload = { method, params };
	            this.emit("debug", { action: "sendEip1193Request", payload });
	            try {
	                const result = await ethereum.request(payload);
	                this.emit("debug", { action: "receiveEip1193Result", result });
	                return result;
	            }
	            catch (e) {
	                const error = new Error(e.message);
	                error.code = e.code;
	                error.data = e.data;
	                error.payload = payload;
	                this.emit("debug", { action: "receiveEip1193Error", error });
	                throw error;
	            }
	        };
	    }
	    async send(method, params) {
	        await this._start();
	        return await super.send(method, params);
	    }
	    async _send(payload) {
	        (0, index_js_1.assertArgument)(!Array.isArray(payload), "EIP-1193 does not support batch request", "payload", payload);
	        try {
	            const result = await this.#request(payload.method, payload.params || []);
	            return [{ id: payload.id, result }];
	        }
	        catch (e) {
	            return [{
	                    id: payload.id,
	                    error: { code: e.code, data: e.data, message: e.message }
	                }];
	        }
	    }
	    getRpcError(payload, error) {
	        error = JSON.parse(JSON.stringify(error));
	        // EIP-1193 gives us some machine-readable error codes, so rewrite
	        // them into 
	        switch (error.error.code || -1) {
	            case 4001:
	                error.error.message = `ethers-user-denied: ${error.error.message}`;
	                break;
	            case 4200:
	                error.error.message = `ethers-unsupported: ${error.error.message}`;
	                break;
	        }
	        return super.getRpcError(payload, error);
	    }
	    /**
	     *  Resolves to ``true`` if the provider manages the %%address%%.
	     */
	    async hasSigner(address) {
	        if (address == null) {
	            address = 0;
	        }
	        const accounts = await this.send("eth_accounts", []);
	        if (typeof (address) === "number") {
	            return (accounts.length > address);
	        }
	        address = address.toLowerCase();
	        return accounts.filter((a) => (a.toLowerCase() === address)).length !== 0;
	    }
	    async getSigner(address) {
	        if (address == null) {
	            address = 0;
	        }
	        if (!(await this.hasSigner(address))) {
	            try {
	                //const resp = 
	                await this.#request("eth_requestAccounts", []);
	                //console.log("RESP", resp);
	            }
	            catch (error) {
	                const payload = error.payload;
	                throw this.getRpcError(payload, { id: payload.id, error });
	            }
	        }
	        return await super.getSigner(address);
	    }
	}
	providerBrowser.BrowserProvider = BrowserProvider;
	
	return providerBrowser;
}

var providerPocket = {};

var hasRequiredProviderPocket;

function requireProviderPocket () {
	if (hasRequiredProviderPocket) return providerPocket;
	hasRequiredProviderPocket = 1;
	Object.defineProperty(providerPocket, "__esModule", { value: true });
	providerPocket.PocketProvider = void 0;
	/**
	 *  [[link-pocket]] provides a third-party service for connecting to
	 *  various blockchains over JSON-RPC.
	 *
	 *  **Supported Networks**
	 *
	 *  - Ethereum Mainnet (``mainnet``)
	 *  - Goerli Testnet (``goerli``)
	 *  - Polygon (``matic``)
	 *  - Arbitrum (``arbitrum``)
	 *
	 *  @_subsection: api/providers/thirdparty:Pocket  [providers-pocket]
	 */
	const index_js_1 = requireUtils$3();
	const community_js_1 = requireCommunity();
	const network_js_1 = requireNetwork();
	const provider_jsonrpc_js_1 = requireProviderJsonrpc();
	const defaultApplicationId = "62e1ad51b37b8e00394bda3b";
	function getHost(name) {
	    switch (name) {
	        case "mainnet":
	            return "eth-mainnet.gateway.pokt.network";
	        case "goerli":
	            return "eth-goerli.gateway.pokt.network";
	        case "matic":
	            return "poly-mainnet.gateway.pokt.network";
	        case "matic-mumbai":
	            return "polygon-mumbai-rpc.gateway.pokt.network";
	    }
	    (0, index_js_1.assertArgument)(false, "unsupported network", "network", name);
	}
	/**
	 *  The **PocketProvider** connects to the [[link-pocket]]
	 *  JSON-RPC end-points.
	 *
	 *  By default, a highly-throttled API key is used, which is
	 *  appropriate for quick prototypes and simple scripts. To
	 *  gain access to an increased rate-limit, it is highly
	 *  recommended to [sign up here](link-pocket-signup).
	 */
	class PocketProvider extends provider_jsonrpc_js_1.JsonRpcProvider {
	    /**
	     *  The Application ID for the Pocket connection.
	     */
	    applicationId;
	    /**
	     *  The Application Secret for making authenticated requests
	     *  to the Pocket connection.
	     */
	    applicationSecret;
	    /**
	     *  Create a new **PocketProvider**.
	     *
	     *  By default connecting to ``mainnet`` with a highly throttled
	     *  API key.
	     */
	    constructor(_network, applicationId, applicationSecret) {
	        if (_network == null) {
	            _network = "mainnet";
	        }
	        const network = network_js_1.Network.from(_network);
	        if (applicationId == null) {
	            applicationId = defaultApplicationId;
	        }
	        if (applicationSecret == null) {
	            applicationSecret = null;
	        }
	        const options = { staticNetwork: network };
	        const request = PocketProvider.getRequest(network, applicationId, applicationSecret);
	        super(request, network, options);
	        (0, index_js_1.defineProperties)(this, { applicationId, applicationSecret });
	    }
	    _getProvider(chainId) {
	        try {
	            return new PocketProvider(chainId, this.applicationId, this.applicationSecret);
	        }
	        catch (error) { }
	        return super._getProvider(chainId);
	    }
	    /**
	     *  Returns a prepared request for connecting to %%network%% with
	     *  %%applicationId%%.
	     */
	    static getRequest(network, applicationId, applicationSecret) {
	        if (applicationId == null) {
	            applicationId = defaultApplicationId;
	        }
	        const request = new index_js_1.FetchRequest(`https:/\/${getHost(network.name)}/v1/lb/${applicationId}`);
	        request.allowGzip = true;
	        if (applicationSecret) {
	            request.setCredentials("", applicationSecret);
	        }
	        if (applicationId === defaultApplicationId) {
	            request.retryFunc = async (request, response, attempt) => {
	                (0, community_js_1.showThrottleMessage)("PocketProvider");
	                return true;
	            };
	        }
	        return request;
	    }
	    isCommunityResource() {
	        return (this.applicationId === defaultApplicationId);
	    }
	}
	providerPocket.PocketProvider = PocketProvider;
	
	return providerPocket;
}

var providerIpcsocket = {};

var hasRequiredProviderIpcsocket;

function requireProviderIpcsocket () {
	if (hasRequiredProviderIpcsocket) return providerIpcsocket;
	hasRequiredProviderIpcsocket = 1;
	Object.defineProperty(providerIpcsocket, "__esModule", { value: true });
	providerIpcsocket.IpcSocketProvider = void 0;
	const net_1 = require$$3$1;
	const provider_socket_js_1 = requireProviderSocket();
	// @TODO: Is this sufficient? Is this robust? Will newlines occur between
	// all payloads and only between payloads?
	function splitBuffer(data) {
	    const messages = [];
	    let lastStart = 0;
	    while (true) {
	        const nl = data.indexOf(10, lastStart);
	        if (nl === -1) {
	            break;
	        }
	        messages.push(data.subarray(lastStart, nl).toString().trim());
	        lastStart = nl + 1;
	    }
	    return { messages, remaining: data.subarray(lastStart) };
	}
	/**
	 *  An **IpcSocketProvider** connects over an IPC socket on the host
	 *  which provides fast access to the node, but requires the node and
	 *  the script run on the same machine.
	 */
	class IpcSocketProvider extends provider_socket_js_1.SocketProvider {
	    #socket;
	    /**
	     *  The connected socket.
	     */
	    get socket() { return this.#socket; }
	    constructor(path, network, options) {
	        super(network, options);
	        this.#socket = (0, net_1.connect)(path);
	        this.socket.on("ready", async () => {
	            try {
	                await this._start();
	            }
	            catch (error) {
	                console.log("failed to start IpcSocketProvider", error);
	                // @TODO: Now what? Restart?
	            }
	        });
	        let response = Buffer.alloc(0);
	        this.socket.on("data", (data) => {
	            response = Buffer.concat([response, data]);
	            const { messages, remaining } = splitBuffer(response);
	            messages.forEach((message) => {
	                this._processMessage(message);
	            });
	            response = remaining;
	        });
	        this.socket.on("end", () => {
	            this.emit("close");
	            this.socket.destroy();
	            this.socket.end();
	        });
	    }
	    destroy() {
	        this.socket.destroy();
	        this.socket.end();
	        super.destroy();
	    }
	    async _write(message) {
	        this.socket.write(message);
	    }
	}
	providerIpcsocket.IpcSocketProvider = IpcSocketProvider;
	
	return providerIpcsocket;
}

var hasRequiredProviders;

function requireProviders () {
	if (hasRequiredProviders) return providers;
	hasRequiredProviders = 1;
	(function (exports) {
		/**
		 *  A **Provider** provides a connection to the blockchain, whch can be
		 *  used to query its current state, simulate execution and send transactions
		 *  to update the state.
		 *
		 *  It is one of the most fundamental components of interacting with a
		 *  blockchain application, and there are many ways to connect, such as over
		 *  HTTP, WebSockets or injected providers such as [MetaMask](link-metamask).
		 *
		 *  @_section: api/providers:Providers  [about-providers]
		 */
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.SocketEventSubscriber = exports.SocketPendingSubscriber = exports.SocketBlockSubscriber = exports.SocketSubscriber = exports.WebSocketProvider = exports.SocketProvider = exports.IpcSocketProvider = exports.QuickNodeProvider = exports.PocketProvider = exports.InfuraWebSocketProvider = exports.InfuraProvider = exports.EtherscanPlugin = exports.EtherscanProvider = exports.CloudflareProvider = exports.AnkrProvider = exports.AlchemyProvider = exports.BrowserProvider = exports.JsonRpcSigner = exports.JsonRpcProvider = exports.JsonRpcApiProvider = exports.FallbackProvider = exports.copyRequest = exports.TransactionResponse = exports.TransactionReceipt = exports.Log = exports.FeeData = exports.Block = exports.FetchUrlFeeDataNetworkPlugin = exports.FeeDataNetworkPlugin = exports.EnsPlugin = exports.GasCostPlugin = exports.NetworkPlugin = exports.NonceManager = exports.Network = exports.MulticoinProviderPlugin = exports.EnsResolver = exports.getDefaultProvider = exports.showThrottleMessage = exports.VoidSigner = exports.AbstractSigner = exports.UnmanagedSubscriber = exports.AbstractProvider = void 0;
		var abstract_provider_js_1 = requireAbstractProvider();
		Object.defineProperty(exports, "AbstractProvider", { enumerable: true, get: function () { return abstract_provider_js_1.AbstractProvider; } });
		Object.defineProperty(exports, "UnmanagedSubscriber", { enumerable: true, get: function () { return abstract_provider_js_1.UnmanagedSubscriber; } });
		var abstract_signer_js_1 = requireAbstractSigner();
		Object.defineProperty(exports, "AbstractSigner", { enumerable: true, get: function () { return abstract_signer_js_1.AbstractSigner; } });
		Object.defineProperty(exports, "VoidSigner", { enumerable: true, get: function () { return abstract_signer_js_1.VoidSigner; } });
		var community_js_1 = requireCommunity();
		Object.defineProperty(exports, "showThrottleMessage", { enumerable: true, get: function () { return community_js_1.showThrottleMessage; } });
		var default_provider_js_1 = requireDefaultProvider();
		Object.defineProperty(exports, "getDefaultProvider", { enumerable: true, get: function () { return default_provider_js_1.getDefaultProvider; } });
		var ens_resolver_js_1 = requireEnsResolver();
		Object.defineProperty(exports, "EnsResolver", { enumerable: true, get: function () { return ens_resolver_js_1.EnsResolver; } });
		Object.defineProperty(exports, "MulticoinProviderPlugin", { enumerable: true, get: function () { return ens_resolver_js_1.MulticoinProviderPlugin; } });
		var network_js_1 = requireNetwork();
		Object.defineProperty(exports, "Network", { enumerable: true, get: function () { return network_js_1.Network; } });
		var signer_noncemanager_js_1 = requireSignerNoncemanager();
		Object.defineProperty(exports, "NonceManager", { enumerable: true, get: function () { return signer_noncemanager_js_1.NonceManager; } });
		var plugins_network_js_1 = requirePluginsNetwork();
		Object.defineProperty(exports, "NetworkPlugin", { enumerable: true, get: function () { return plugins_network_js_1.NetworkPlugin; } });
		Object.defineProperty(exports, "GasCostPlugin", { enumerable: true, get: function () { return plugins_network_js_1.GasCostPlugin; } });
		Object.defineProperty(exports, "EnsPlugin", { enumerable: true, get: function () { return plugins_network_js_1.EnsPlugin; } });
		Object.defineProperty(exports, "FeeDataNetworkPlugin", { enumerable: true, get: function () { return plugins_network_js_1.FeeDataNetworkPlugin; } });
		Object.defineProperty(exports, "FetchUrlFeeDataNetworkPlugin", { enumerable: true, get: function () { return plugins_network_js_1.FetchUrlFeeDataNetworkPlugin; } });
		var provider_js_1 = requireProvider();
		Object.defineProperty(exports, "Block", { enumerable: true, get: function () { return provider_js_1.Block; } });
		Object.defineProperty(exports, "FeeData", { enumerable: true, get: function () { return provider_js_1.FeeData; } });
		Object.defineProperty(exports, "Log", { enumerable: true, get: function () { return provider_js_1.Log; } });
		Object.defineProperty(exports, "TransactionReceipt", { enumerable: true, get: function () { return provider_js_1.TransactionReceipt; } });
		Object.defineProperty(exports, "TransactionResponse", { enumerable: true, get: function () { return provider_js_1.TransactionResponse; } });
		Object.defineProperty(exports, "copyRequest", { enumerable: true, get: function () { return provider_js_1.copyRequest; } });
		var provider_fallback_js_1 = requireProviderFallback();
		Object.defineProperty(exports, "FallbackProvider", { enumerable: true, get: function () { return provider_fallback_js_1.FallbackProvider; } });
		var provider_jsonrpc_js_1 = requireProviderJsonrpc();
		Object.defineProperty(exports, "JsonRpcApiProvider", { enumerable: true, get: function () { return provider_jsonrpc_js_1.JsonRpcApiProvider; } });
		Object.defineProperty(exports, "JsonRpcProvider", { enumerable: true, get: function () { return provider_jsonrpc_js_1.JsonRpcProvider; } });
		Object.defineProperty(exports, "JsonRpcSigner", { enumerable: true, get: function () { return provider_jsonrpc_js_1.JsonRpcSigner; } });
		var provider_browser_js_1 = requireProviderBrowser();
		Object.defineProperty(exports, "BrowserProvider", { enumerable: true, get: function () { return provider_browser_js_1.BrowserProvider; } });
		var provider_alchemy_js_1 = requireProviderAlchemy();
		Object.defineProperty(exports, "AlchemyProvider", { enumerable: true, get: function () { return provider_alchemy_js_1.AlchemyProvider; } });
		var provider_ankr_js_1 = requireProviderAnkr();
		Object.defineProperty(exports, "AnkrProvider", { enumerable: true, get: function () { return provider_ankr_js_1.AnkrProvider; } });
		var provider_cloudflare_js_1 = requireProviderCloudflare();
		Object.defineProperty(exports, "CloudflareProvider", { enumerable: true, get: function () { return provider_cloudflare_js_1.CloudflareProvider; } });
		var provider_etherscan_js_1 = requireProviderEtherscan();
		Object.defineProperty(exports, "EtherscanProvider", { enumerable: true, get: function () { return provider_etherscan_js_1.EtherscanProvider; } });
		Object.defineProperty(exports, "EtherscanPlugin", { enumerable: true, get: function () { return provider_etherscan_js_1.EtherscanPlugin; } });
		var provider_infura_js_1 = requireProviderInfura();
		Object.defineProperty(exports, "InfuraProvider", { enumerable: true, get: function () { return provider_infura_js_1.InfuraProvider; } });
		Object.defineProperty(exports, "InfuraWebSocketProvider", { enumerable: true, get: function () { return provider_infura_js_1.InfuraWebSocketProvider; } });
		var provider_pocket_js_1 = requireProviderPocket();
		Object.defineProperty(exports, "PocketProvider", { enumerable: true, get: function () { return provider_pocket_js_1.PocketProvider; } });
		var provider_quicknode_js_1 = requireProviderQuicknode();
		Object.defineProperty(exports, "QuickNodeProvider", { enumerable: true, get: function () { return provider_quicknode_js_1.QuickNodeProvider; } });
		const provider_ipcsocket_js_1 = requireProviderIpcsocket(); /*-browser*/
		Object.defineProperty(exports, "IpcSocketProvider", { enumerable: true, get: function () { return provider_ipcsocket_js_1.IpcSocketProvider; } });
		var provider_socket_js_1 = requireProviderSocket();
		Object.defineProperty(exports, "SocketProvider", { enumerable: true, get: function () { return provider_socket_js_1.SocketProvider; } });
		var provider_websocket_js_1 = requireProviderWebsocket();
		Object.defineProperty(exports, "WebSocketProvider", { enumerable: true, get: function () { return provider_websocket_js_1.WebSocketProvider; } });
		var provider_socket_js_2 = requireProviderSocket();
		Object.defineProperty(exports, "SocketSubscriber", { enumerable: true, get: function () { return provider_socket_js_2.SocketSubscriber; } });
		Object.defineProperty(exports, "SocketBlockSubscriber", { enumerable: true, get: function () { return provider_socket_js_2.SocketBlockSubscriber; } });
		Object.defineProperty(exports, "SocketPendingSubscriber", { enumerable: true, get: function () { return provider_socket_js_2.SocketPendingSubscriber; } });
		Object.defineProperty(exports, "SocketEventSubscriber", { enumerable: true, get: function () { return provider_socket_js_2.SocketEventSubscriber; } });
		
	} (providers));
	return providers;
}

var wallet$1 = {};

var baseWallet = {};

var hasRequiredBaseWallet;

function requireBaseWallet () {
	if (hasRequiredBaseWallet) return baseWallet;
	hasRequiredBaseWallet = 1;
	Object.defineProperty(baseWallet, "__esModule", { value: true });
	baseWallet.BaseWallet = void 0;
	const index_js_1 = requireAddress$2();
	const index_js_2 = requireHash();
	const index_js_3 = requireProviders();
	const index_js_4 = requireTransaction();
	const index_js_5 = requireUtils$3();
	/**
	 *  The **BaseWallet** is a stream-lined implementation of a
	 *  [[Signer]] that operates with a private key.
	 *
	 *  It is preferred to use the [[Wallet]] class, as it offers
	 *  additional functionality and simplifies loading a variety
	 *  of JSON formats, Mnemonic Phrases, etc.
	 *
	 *  This class may be of use for those attempting to implement
	 *  a minimal Signer.
	 */
	class BaseWallet extends index_js_3.AbstractSigner {
	    /**
	     *  The wallet address.
	     */
	    address;
	    #signingKey;
	    /**
	     *  Creates a new BaseWallet for %%privateKey%%, optionally
	     *  connected to %%provider%%.
	     *
	     *  If %%provider%% is not specified, only offline methods can
	     *  be used.
	     */
	    constructor(privateKey, provider) {
	        super(provider);
	        (0, index_js_5.assertArgument)(privateKey && typeof (privateKey.sign) === "function", "invalid private key", "privateKey", "[ REDACTED ]");
	        this.#signingKey = privateKey;
	        const address = (0, index_js_4.computeAddress)(this.signingKey.publicKey);
	        (0, index_js_5.defineProperties)(this, { address });
	    }
	    // Store private values behind getters to reduce visibility
	    // in console.log
	    /**
	     *  The [[SigningKey]] used for signing payloads.
	     */
	    get signingKey() { return this.#signingKey; }
	    /**
	     *  The private key for this wallet.
	     */
	    get privateKey() { return this.signingKey.privateKey; }
	    async getAddress() { return this.address; }
	    connect(provider) {
	        return new BaseWallet(this.#signingKey, provider);
	    }
	    async signTransaction(tx) {
	        // Replace any Addressable or ENS name with an address
	        const { to, from } = await (0, index_js_5.resolveProperties)({
	            to: (tx.to ? (0, index_js_1.resolveAddress)(tx.to, this.provider) : undefined),
	            from: (tx.from ? (0, index_js_1.resolveAddress)(tx.from, this.provider) : undefined)
	        });
	        if (to != null) {
	            tx.to = to;
	        }
	        if (from != null) {
	            tx.from = from;
	        }
	        if (tx.from != null) {
	            (0, index_js_5.assertArgument)((0, index_js_1.getAddress)((tx.from)) === this.address, "transaction from address mismatch", "tx.from", tx.from);
	            delete tx.from;
	        }
	        // Build the transaction
	        const btx = index_js_4.Transaction.from(tx);
	        btx.signature = this.signingKey.sign(btx.unsignedHash);
	        return btx.serialized;
	    }
	    async signMessage(message) {
	        return this.signMessageSync(message);
	    }
	    // @TODO: Add a secialized signTx and signTyped sync that enforces
	    // all parameters are known?
	    /**
	     *  Returns the signature for %%message%% signed with this wallet.
	     */
	    signMessageSync(message) {
	        return this.signingKey.sign((0, index_js_2.hashMessage)(message)).serialized;
	    }
	    async signTypedData(domain, types, value) {
	        // Populate any ENS names
	        const populated = await index_js_2.TypedDataEncoder.resolveNames(domain, types, value, async (name) => {
	            // @TODO: this should use resolveName; addresses don't
	            //        need a provider
	            (0, index_js_5.assert)(this.provider != null, "cannot resolve ENS names without a provider", "UNSUPPORTED_OPERATION", {
	                operation: "resolveName",
	                info: { name }
	            });
	            const address = await this.provider.resolveName(name);
	            (0, index_js_5.assert)(address != null, "unconfigured ENS name", "UNCONFIGURED_NAME", {
	                value: name
	            });
	            return address;
	        });
	        return this.signingKey.sign(index_js_2.TypedDataEncoder.hash(populated.domain, types, populated.value)).serialized;
	    }
	}
	baseWallet.BaseWallet = BaseWallet;
	
	return baseWallet;
}

var hdwallet = {};

var langEn = {};

var wordlistOwl = {};

var decodeOwl = {};

var hasRequiredDecodeOwl;

function requireDecodeOwl () {
	if (hasRequiredDecodeOwl) return decodeOwl;
	hasRequiredDecodeOwl = 1;
	Object.defineProperty(decodeOwl, "__esModule", { value: true });
	decodeOwl.decodeOwl = decodeOwl.decode = void 0;
	const index_js_1 = requireUtils$3();
	const subsChrs = " !#$%&'()*+,-./<=>?@[]^_`{|}~";
	const Word = /^[a-z]*$/i;
	function unfold(words, sep) {
	    let initial = 97;
	    return words.reduce((accum, word) => {
	        if (word === sep) {
	            initial++;
	        }
	        else if (word.match(Word)) {
	            accum.push(String.fromCharCode(initial) + word);
	        }
	        else {
	            initial = 97;
	            accum.push(word);
	        }
	        return accum;
	    }, []);
	}
	/**
	 *  @_ignore
	 */
	function decode(data, subs) {
	    // Replace all the substitutions with their expanded form
	    for (let i = subsChrs.length - 1; i >= 0; i--) {
	        data = data.split(subsChrs[i]).join(subs.substring(2 * i, 2 * i + 2));
	    }
	    // Get all tle clumps; each suffix, first-increment and second-increment
	    const clumps = [];
	    const leftover = data.replace(/(:|([0-9])|([A-Z][a-z]*))/g, (all, item, semi, word) => {
	        if (semi) {
	            for (let i = parseInt(semi); i >= 0; i--) {
	                clumps.push(";");
	            }
	        }
	        else {
	            clumps.push(item.toLowerCase());
	        }
	        return "";
	    });
	    /* c8 ignore start */
	    if (leftover) {
	        throw new Error(`leftovers: ${JSON.stringify(leftover)}`);
	    }
	    /* c8 ignore stop */
	    return unfold(unfold(clumps, ";"), ":");
	}
	decodeOwl.decode = decode;
	/**
	 *  @_ignore
	 */
	function decodeOwl$1(data) {
	    (0, index_js_1.assertArgument)(data[0] === "0", "unsupported auwl data", "data", data);
	    return decode(data.substring(1 + 2 * subsChrs.length), data.substring(1, 1 + 2 * subsChrs.length));
	}
	decodeOwl.decodeOwl = decodeOwl$1;
	
	return decodeOwl;
}

var wordlist = {};

var hasRequiredWordlist;

function requireWordlist () {
	if (hasRequiredWordlist) return wordlist;
	hasRequiredWordlist = 1;
	Object.defineProperty(wordlist, "__esModule", { value: true });
	wordlist.Wordlist = void 0;
	const index_js_1 = requireUtils$3();
	/**
	 *  A Wordlist represents a collection of language-specific
	 *  words used to encode and devoce [[link-bip-39]] encoded data
	 *  by mapping words to 11-bit values and vice versa.
	 */
	class Wordlist {
	    locale;
	    /**
	     *  Creates a new Wordlist instance.
	     *
	     *  Sub-classes MUST call this if they provide their own constructor,
	     *  passing in the locale string of the language.
	     *
	     *  Generally there is no need to create instances of a Wordlist,
	     *  since each language-specific Wordlist creates an instance and
	     *  there is no state kept internally, so they are safe to share.
	     */
	    constructor(locale) {
	        (0, index_js_1.defineProperties)(this, { locale });
	    }
	    /**
	     *  Sub-classes may override this to provide a language-specific
	     *  method for spliting %%phrase%% into individual words.
	     *
	     *  By default, %%phrase%% is split using any sequences of
	     *  white-space as defined by regular expressions (i.e. ``/\s+/``).
	     */
	    split(phrase) {
	        return phrase.toLowerCase().split(/\s+/g);
	    }
	    /**
	     *  Sub-classes may override this to provider a language-specific
	     *  method for joining %%words%% into a phrase.
	     *
	     *  By default, %%words%% are joined by a single space.
	     */
	    join(words) {
	        return words.join(" ");
	    }
	}
	wordlist.Wordlist = Wordlist;
	
	return wordlist;
}

var hasRequiredWordlistOwl;

function requireWordlistOwl () {
	if (hasRequiredWordlistOwl) return wordlistOwl;
	hasRequiredWordlistOwl = 1;
	// Use the encode-latin.js script to create the necessary
	// data files to be consumed by this class
	Object.defineProperty(wordlistOwl, "__esModule", { value: true });
	wordlistOwl.WordlistOwl = void 0;
	const index_js_1 = requireHash();
	const index_js_2 = requireUtils$3();
	const decode_owl_js_1 = requireDecodeOwl();
	const wordlist_js_1 = requireWordlist();
	/**
	 *  An OWL format Wordlist is an encoding method that exploits
	 *  the general locality of alphabetically sorted words to
	 *  achieve a simple but effective means of compression.
	 *
	 *  This class is generally not useful to most developers as
	 *  it is used mainly internally to keep Wordlists for languages
	 *  based on ASCII-7 small.
	 *
	 *  If necessary, there are tools within the ``generation/`` folder
	 *  to create the necessary data.
	 */
	class WordlistOwl extends wordlist_js_1.Wordlist {
	    #data;
	    #checksum;
	    /**
	     *  Creates a new Wordlist for %%locale%% using the OWL %%data%%
	     *  and validated against the %%checksum%%.
	     */
	    constructor(locale, data, checksum) {
	        super(locale);
	        this.#data = data;
	        this.#checksum = checksum;
	        this.#words = null;
	    }
	    /**
	     *  The OWL-encoded data.
	     */
	    get _data() { return this.#data; }
	    /**
	     *  Decode all the words for the wordlist.
	     */
	    _decodeWords() {
	        return (0, decode_owl_js_1.decodeOwl)(this.#data);
	    }
	    #words;
	    #loadWords() {
	        if (this.#words == null) {
	            const words = this._decodeWords();
	            // Verify the computed list matches the official list
	            const checksum = (0, index_js_1.id)(words.join("\n") + "\n");
	            /* c8 ignore start */
	            if (checksum !== this.#checksum) {
	                throw new Error(`BIP39 Wordlist for ${this.locale} FAILED`);
	            }
	            /* c8 ignore stop */
	            this.#words = words;
	        }
	        return this.#words;
	    }
	    getWord(index) {
	        const words = this.#loadWords();
	        (0, index_js_2.assertArgument)(index >= 0 && index < words.length, `invalid word index: ${index}`, "index", index);
	        return words[index];
	    }
	    getWordIndex(word) {
	        return this.#loadWords().indexOf(word);
	    }
	}
	wordlistOwl.WordlistOwl = WordlistOwl;
	
	return wordlistOwl;
}

var hasRequiredLangEn;

function requireLangEn () {
	if (hasRequiredLangEn) return langEn;
	hasRequiredLangEn = 1;
	Object.defineProperty(langEn, "__esModule", { value: true });
	langEn.LangEn = void 0;
	const wordlist_owl_js_1 = requireWordlistOwl();
	const words = "0erleonalorenseinceregesticitStanvetearctssi#ch2Athck&tneLl0And#Il.yLeOutO=S|S%b/ra@SurdU'0Ce[Cid|CountCu'Hie=IdOu,-Qui*Ro[TT]T%T*[Tu$0AptDD-tD*[Ju,M.UltV<)Vi)0Rob-0FairF%dRaid0A(EEntRee0Ead0MRRp%tS!_rmBumCoholErtI&LLeyLowMo,O}PhaReadySoT Ways0A>urAz(gOngOuntU'd0Aly,Ch%Ci|G G!GryIm$K!Noun)Nu$O` Sw T&naTiqueXietyY1ArtOlogyPe?P!Pro=Ril1ChCt-EaEnaGueMMedM%MyOundR<+Re,Ri=RowTTefa@Ti,Tw%k0KPe@SaultSetSi,SumeThma0H!>OmTa{T&dT.udeTra@0Ct]D.Gu,NtTh%ToTumn0Era+OcadoOid0AkeA*AyEsomeFulKw?d0Is:ByChel%C#D+GL<)Lc#y~MbooN<aNn RRelyRga(R*lSeS-SketTt!3A^AnAutyCau'ComeEfF%eG(Ha=H(dLie=LowLtN^Nef./TrayTt Twe&Y#d3Cyc!DKeNdOlogyRdR`Tt _{AdeAmeAnketA,EakE[IndOodO[omOu'UeUrUsh_rdAtDyIlMbNeNusOkO,Rd R(gRrowSsTtomUn)XY_{etA(AndA[A=EadEezeI{Id+IefIghtIngIskOccoliOk&OnzeOomO` OwnUsh2Bb!DdyD+tFf$oIldLbLkL!tNd!Nk Rd&Rg R,SS(e[SyTt Y Zz:Bba+B(B!CtusGeKe~LmM aMpNN$N)lNdyNn#NoeNvasNy#Pab!P.$Pta(RRb#RdRgoRpetRryRtSeShS(o/!Su$TT$ogT^Teg%yTt!UghtU'Ut]Ve3Il(gL yM|NsusNturyRe$Rta(_irAlkAmp]An+AosApt Ar+A'AtEapE{Ee'EfErryE,I{&IefIldIm}yOi)Oo'R#-U{!UnkUrn0G?Nnam#Rc!Tiz&TyVil_imApArifyAwAyE<ErkEv I{I|IffImbIn-IpO{OgO'O`OudOwnUbUmpU, Ut^_^A,C#utDeFfeeIlInL!@L%LumnMb(eMeMf%tM-Mm#Mp<yNc tNdu@NfirmNg*[N}@Nsid NtrolNv()OkOlPp PyR$ReRnR*@/Tt#U^UntryUp!Ur'Us(V Yo>_{Ad!AftAmA}AshAt AwlAzyEamEd.EekEwI{etImeIspIt-OpO[Ou^OwdUci$UelUi'Umb!Un^UshYY,$2BeLtu*PPbo?dRiousRr|Rta(R=Sh]/omTe3C!:DMa+MpN)Ng R(gShUght WnY3AlBa>BrisCadeCemb CideCl(eC%a>C*a'ErF&'F(eFyG*eLayLiv M<dMi'Ni$Nti,NyP?tP&dPos.P`PutyRi=ScribeS tSignSkSpair/royTailTe@VelopVi)Vo>3AgramAlAm#dAryCeE'lEtFf G.$Gn.yLemmaNn NosaurRe@RtSag*eScov Sea'ShSmi[S%d Splay/<)V tVideV%)Zzy5Ct%Cum|G~Lph(Ma(Na>NkeyN%OrSeUb!Ve_ftAg#AmaA,-AwEamE[IftIllInkIpI=OpUmY2CkMbNeR(g/T^Ty1Arf1Nam-:G G!RlyRnR`Sily/Sy1HoOlogyOnomy0GeItUca>1F%t0G1GhtTh 2BowD E@r-Eg<tEm|Eph<tEvat%I>Se0B?kBodyBra)Er+Ot]PloyPow Pty0Ab!A@DD![D%'EmyErgyF%)Ga+G(eH<)JoyLi,OughR-hRollSu*T Ti*TryVelope1Isode0U$Uip0AA'OdeOs]R%Upt0CapeSayS&)Ta>0Ern$H-s1Id&)IlOkeOl=1A@Amp!Ce[Ch<+C.eCludeCu'Ecu>Erci'Hau,Hib.I!I,ItOt-P<dPe@Pi*Pla(Po'P*[T&dTra0EEbrow:Br-CeCultyDeIntI`~L'MeMilyMousNNcyNtasyRmSh]TT$Th TigueUltV%.e3Atu*Bru?yD $EEdElMa!N)/iv$T^V W3B Ct]EldGu*LeLmLt N$NdNeNg NishReRmR,Sc$ShTT}[X_gAmeAshAtAv%EeIghtIpOatO{O%Ow UidUshY_mCusGIlLd~owOdOtR)Re,R+tRkRtu}RumRw?dSsil/ UndX_gi!AmeEqu|EshI&dIn+OgOntO,OwnOz&U.2ElNNnyRna)RyTu*:D+tInLaxy~ yMePRa+Rba+Rd&Rl-Rm|SSpTeTh U+Ze3N $NiusN*Nt!Nu(e/u*2O,0AntFtGg!Ng RaffeRlVe_dAn)A*A[IdeImp'ObeOomOryO=OwUe_tDde[LdOdO'RillaSpelSsipV nWn_bA)A(AntApeA[Av.yEatE&IdIefItOc yOupOwUnt_rdE[IdeIltIt?N3M:B.IrLfMm M, NdPpyRb%RdRshR=,TVeWkZ?d3AdAl`ArtAvyD+hogIght~oLmetLpNRo3Dd&Gh~NtPRe/%y5BbyCkeyLdLeLiday~owMeNeyOdPeRnRr%R'Sp.$/TelUrV 5BGeM<Mb!M%Nd*dNgryNtRd!RryRtSb<d3Brid:1EOn0EaEntifyLe2N%e4LLeg$L}[0A+Ita>M&'Mu}Pa@Po'Pro=Pul'0ChCludeComeC*a'DexD-a>Do%Du,ryF<tFl-tF%mHa!H .Iti$Je@JuryMa>N Noc|PutQuiryS<eSe@SideSpi*/$lTa@T e,ToVe,V.eVol=3On0L<dOla>Sue0Em1Ory:CketGu?RZz3AlousAns~yWel9BInKeUr}yY5D+I)MpNg!Ni%Nk/:Ng?oo3EnEpT^upY3CkDD}yNdNgdomSsTT^&TeTt&Wi4EeIfeO{Ow:BBelB%Dd DyKeMpNgua+PtopR+T T(UghUndryVaWWnWsu.Y Zy3Ad AfArnA=Ctu*FtGG$G&dIsu*M#NdNg`NsOp?dSs#Tt Vel3ArB tyBr?yC&'FeFtGhtKeMbM.NkOnQuid/Tt!VeZ?d5AdAnB, C$CkG-NelyNgOpTt yUdUn+VeY$5CkyGga+Mb N?N^Xury3R-s:Ch(eDG-G}tIdIlInJ%KeMm$NNa+Nda>NgoNs]Nu$P!Rb!R^Rg(R(eRketRria+SkSs/ T^T i$ThTrixTt XimumZe3AdowAnAsu*AtCh<-D$DiaLodyLtMb M%yNt]NuRcyR+R.RryShSsa+T$Thod3Dd!DnightLk~]M-NdNimumN%Nu>Rac!Rr%S ySs/akeXXedXtu*5Bi!DelDifyMM|N.%NkeyN, N`OnR$ReRn(gSqu.oTh T]T%Unta(U'VeVie5ChFf(LeLtiplySc!SeumShroomS-/Tu$3Self/ yTh:I=MePk(Rrow/yT]Tu*3ArCkEdGati=G!@I` PhewR=/TTw%kUtr$V WsXt3CeGht5B!I'M(eeOd!Rm$R`SeTab!TeTh(gTi)VelW5C!?Mb R'T:K0EyJe@Li+Scu*S =Ta(Vious0CurE<Tob 0Or1FF Fi)T&2L1Ay0DI=Ymp-0It0CeEI#L(eLy1EnEraIn]Po'T]1An+B.Ch?dD D(?yG<I|Ig($Ph<0Tr-h0H 0Tdo%T TputTside0AlEnEr0NN 0Yg&0/ 0O}:CtDd!GeIrLa)LmNdaNelN-N` P RadeR|RkRrotRtySsT^ThTi|TrolTt nU'VeYm|3A)AnutArAs<tL-<NN$tyNcilOp!Pp Rfe@Rm.Rs#T2O}OtoRa'Ys-$0AnoCn-Ctu*E)GGe#~LotNkO} Pe/olT^Zza_)A}tA,-A>AyEa'Ed+U{UgUn+2EmEtIntL?LeLi)NdNyOlPul?Rt]S.]Ssib!/TatoTt yV tyWd W _@i)Ai'Ed-tEf Epa*Es|EttyEv|I)IdeIm?yIntI%.yIs#Iva>IzeOb!mO)[Odu)Of.OgramOje@Omo>OofOp tyOsp O>@OudOvide2Bl-Dd(g~LpL'Mpk(N^PilPpyR^a'R.yRpo'R'ShTZz!3Ramid:99Al.yAntumArt E,]I{ItIzO>:Bb.Cco#CeCkD?DioIlInI'~yMpN^NdomN+PidReTeTh V&WZ%3AdyAlAs#BelBuildC$lCei=CipeC%dCyc!Du)F!@F%mFu'G]G*tGul?Je@LaxLea'LiefLyMa(Memb M(dMo=Nd NewNtOp&PairPeatPla)P%tQui*ScueSemb!Si,Sour)Sp#'SultTi*T*atTurnUn]Ve$ViewW?d2Y`m0BBb#CeChDeD+F!GhtGidNgOtPp!SkTu$V$V 5AdA,BotBu,CketM<)OfOkieOmSeTa>UghUndU>Y$5Bb DeGLeNNwayR$:DDd!D}[FeIlLadLm#L#LtLu>MeMp!NdTisfyToshiU)Usa+VeY1A!AnA*Att E}HemeHoolI&)I[%sOrp]OutRapRe&RiptRub1AAr^As#AtC#dC*tCt]Cur.yEdEkGm|Le@~M(?Ni%N'Nt&)RiesRvi)Ss]Tt!TupV&_dowAftAllowA*EdEllEriffIeldIftI}IpIv O{OeOotOpOrtOuld O=RimpRugUff!Y0Bl(gCkDeE+GhtGnL|Lk~yLv Mil?Mp!N)NgR&/ Tua>XZe1A>Et^IIllInIrtUll0AbAmEepEnd I)IdeIghtImOg<OtOwUsh0AllArtI!OkeOo`0A{AkeApIffOw0ApCc Ci$CkDaFtL?Ldi LidLut]L=Me#eNgOnRryRtUlUndUpUr)U`0A)A*Ati$AwnEakEci$EedEllEndH eI)Id IkeInIr.L.OilOns%O#OrtOtRayReadR(gY0Ua*UeezeUir*l_b!AdiumAffA+AirsAmpAndArtA>AyEakEelEmEpE*oI{IllIngO{Oma^O}OolOryO=Ra>gyReetRikeR#gRugg!Ud|UffUmb!Y!0Bje@Bm.BwayC)[ChDd&Ff G?G+,ItMm NNnyN'tP PplyP*meReRfa)R+Rpri'RroundR=ySpe@/a(1AllowAmpApArmE?EetIftImIngIt^Ord1MbolMptomRup/em:B!Ck!GIlL|LkNkPeR+tSk/eTtooXi3A^Am~NN<tNnisNtRm/Xt_nkAtEmeEnE%yE*EyIngIsOughtReeRi=RowUmbUnd 0CketDeG LtMb MeNyPRedSsueT!5A,BaccoDayDdl EGe` I!tK&MatoM%rowNeNgueNightOlO`PP-Pp!R^RnadoRtoi'SsT$Uri,W?dW WnY_{AdeAff-Ag-A(Ansf ApAshA=lAyEatEeEndI$IbeI{Igg ImIpOphyOub!U{UeUlyUmpetU,U`Y2BeIt]Mb!NaN}lRkeyRnRt!1El=EntyI)InI,O1PeP-$:5Ly5B*lla0Ab!Awa*C!Cov D DoFairFoldHappyIf%mIqueItIv 'KnownLo{TilUsu$Veil1Da>GradeHoldOnP Set1B<Ge0A+EEdEfulE![U$0Il.y:C<tCuumGueLidL!yL=NNishP%Rious/Ult3H-!L=tNd%Ntu*NueRbRifyRs]RyS'lT <3Ab!Br<tCiousCt%yDeoEw~a+Nta+Ol(Rtu$RusSaS.Su$T$Vid5C$I)IdLc<oLumeTeYa+:GeG#ItLk~LnutNtRfa*RmRri%ShSp/eT VeY3Al`Ap#ArA'lA` BDd(gEk&dIrdLcome/T_!AtEatEelEnE*IpIsp 0DeD`FeLd~NNdowNeNgNkNn Nt ReSdomSeShT}[5LfM<Nd OdOlRdRkRldRryR`_pE{E,!I,I>Ong::Rd3Ar~ow9UUngU`:3BraRo9NeO";
	const checksum = "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60";
	let wordlist = null;
	/**
	 *  The [[link-bip39-en]] for [mnemonic phrases](link-bip-39).
	 *
	 *  @_docloc: api/wordlists
	 */
	class LangEn extends wordlist_owl_js_1.WordlistOwl {
	    /**
	     *  Creates a new instance of the English language Wordlist.
	     *
	     *  This should be unnecessary most of the time as the exported
	     *  [[langEn]] should suffice.
	     *
	     *  @_ignore:
	     */
	    constructor() { super("en", words, checksum); }
	    /**
	     *  Returns a singleton instance of a ``LangEn``, creating it
	     *  if this is the first time being called.
	     */
	    static wordlist() {
	        if (wordlist == null) {
	            wordlist = new LangEn();
	        }
	        return wordlist;
	    }
	}
	langEn.LangEn = LangEn;
	
	return langEn;
}

var mnemonic = {};

var hasRequiredMnemonic;

function requireMnemonic () {
	if (hasRequiredMnemonic) return mnemonic;
	hasRequiredMnemonic = 1;
	Object.defineProperty(mnemonic, "__esModule", { value: true });
	mnemonic.Mnemonic = void 0;
	const index_js_1 = requireCrypto();
	const index_js_2 = requireUtils$3();
	const lang_en_js_1 = requireLangEn();
	// Returns a byte with the MSB bits set
	function getUpperMask(bits) {
	    return ((1 << bits) - 1) << (8 - bits) & 0xff;
	}
	// Returns a byte with the LSB bits set
	function getLowerMask(bits) {
	    return ((1 << bits) - 1) & 0xff;
	}
	function mnemonicToEntropy(mnemonic, wordlist) {
	    (0, index_js_2.assertNormalize)("NFKD");
	    if (wordlist == null) {
	        wordlist = lang_en_js_1.LangEn.wordlist();
	    }
	    const words = wordlist.split(mnemonic);
	    (0, index_js_2.assertArgument)((words.length % 3) === 0 && words.length >= 12 && words.length <= 24, "invalid mnemonic length", "mnemonic", "[ REDACTED ]");
	    const entropy = new Uint8Array(Math.ceil(11 * words.length / 8));
	    let offset = 0;
	    for (let i = 0; i < words.length; i++) {
	        let index = wordlist.getWordIndex(words[i].normalize("NFKD"));
	        (0, index_js_2.assertArgument)(index >= 0, `invalid mnemonic word at index ${i}`, "mnemonic", "[ REDACTED ]");
	        for (let bit = 0; bit < 11; bit++) {
	            if (index & (1 << (10 - bit))) {
	                entropy[offset >> 3] |= (1 << (7 - (offset % 8)));
	            }
	            offset++;
	        }
	    }
	    const entropyBits = 32 * words.length / 3;
	    const checksumBits = words.length / 3;
	    const checksumMask = getUpperMask(checksumBits);
	    const checksum = (0, index_js_2.getBytes)((0, index_js_1.sha256)(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;
	    (0, index_js_2.assertArgument)(checksum === (entropy[entropy.length - 1] & checksumMask), "invalid mnemonic checksum", "mnemonic", "[ REDACTED ]");
	    return (0, index_js_2.hexlify)(entropy.slice(0, entropyBits / 8));
	}
	function entropyToMnemonic(entropy, wordlist) {
	    (0, index_js_2.assertArgument)((entropy.length % 4) === 0 && entropy.length >= 16 && entropy.length <= 32, "invalid entropy size", "entropy", "[ REDACTED ]");
	    if (wordlist == null) {
	        wordlist = lang_en_js_1.LangEn.wordlist();
	    }
	    const indices = [0];
	    let remainingBits = 11;
	    for (let i = 0; i < entropy.length; i++) {
	        // Consume the whole byte (with still more to go)
	        if (remainingBits > 8) {
	            indices[indices.length - 1] <<= 8;
	            indices[indices.length - 1] |= entropy[i];
	            remainingBits -= 8;
	            // This byte will complete an 11-bit index
	        }
	        else {
	            indices[indices.length - 1] <<= remainingBits;
	            indices[indices.length - 1] |= entropy[i] >> (8 - remainingBits);
	            // Start the next word
	            indices.push(entropy[i] & getLowerMask(8 - remainingBits));
	            remainingBits += 3;
	        }
	    }
	    // Compute the checksum bits
	    const checksumBits = entropy.length / 4;
	    const checksum = parseInt((0, index_js_1.sha256)(entropy).substring(2, 4), 16) & getUpperMask(checksumBits);
	    // Shift the checksum into the word indices
	    indices[indices.length - 1] <<= checksumBits;
	    indices[indices.length - 1] |= (checksum >> (8 - checksumBits));
	    return wordlist.join(indices.map((index) => wordlist.getWord(index)));
	}
	const _guard = {};
	/**
	 *  A **Mnemonic** wraps all properties required to compute [[link-bip-39]]
	 *  seeds and convert between phrases and entropy.
	 */
	class Mnemonic {
	    /**
	     *  The mnemonic phrase of 12, 15, 18, 21 or 24 words.
	     *
	     *  Use the [[wordlist]] ``split`` method to get the individual words.
	     */
	    phrase;
	    /**
	     *  The password used for this mnemonic. If no password is used this
	     *  is the empty string (i.e. ``""``) as per the specification.
	     */
	    password;
	    /**
	     *  The wordlist for this mnemonic.
	     */
	    wordlist;
	    /**
	     *  The underlying entropy which the mnemonic encodes.
	     */
	    entropy;
	    /**
	     *  @private
	     */
	    constructor(guard, entropy, phrase, password, wordlist) {
	        if (password == null) {
	            password = "";
	        }
	        if (wordlist == null) {
	            wordlist = lang_en_js_1.LangEn.wordlist();
	        }
	        (0, index_js_2.assertPrivate)(guard, _guard, "Mnemonic");
	        (0, index_js_2.defineProperties)(this, { phrase, password, wordlist, entropy });
	    }
	    /**
	     *  Returns the seed for the mnemonic.
	     */
	    computeSeed() {
	        const salt = (0, index_js_2.toUtf8Bytes)("mnemonic" + this.password, "NFKD");
	        return (0, index_js_1.pbkdf2)((0, index_js_2.toUtf8Bytes)(this.phrase, "NFKD"), salt, 2048, 64, "sha512");
	    }
	    /**
	     *  Creates a new Mnemonic for the %%phrase%%.
	     *
	     *  The default %%password%% is the empty string and the default
	     *  wordlist is the [English wordlists](LangEn).
	     */
	    static fromPhrase(phrase, password, wordlist) {
	        // Normalize the case and space; throws if invalid
	        const entropy = mnemonicToEntropy(phrase, wordlist);
	        phrase = entropyToMnemonic((0, index_js_2.getBytes)(entropy), wordlist);
	        return new Mnemonic(_guard, entropy, phrase, password, wordlist);
	    }
	    /**
	     *  Create a new **Mnemonic** from the %%entropy%%.
	     *
	     *  The default %%password%% is the empty string and the default
	     *  wordlist is the [English wordlists](LangEn).
	     */
	    static fromEntropy(_entropy, password, wordlist) {
	        const entropy = (0, index_js_2.getBytes)(_entropy, "entropy");
	        const phrase = entropyToMnemonic(entropy, wordlist);
	        return new Mnemonic(_guard, (0, index_js_2.hexlify)(entropy), phrase, password, wordlist);
	    }
	    /**
	     *  Returns the phrase for %%mnemonic%%.
	     */
	    static entropyToPhrase(_entropy, wordlist) {
	        const entropy = (0, index_js_2.getBytes)(_entropy, "entropy");
	        return entropyToMnemonic(entropy, wordlist);
	    }
	    /**
	     *  Returns the entropy for %%phrase%%.
	     */
	    static phraseToEntropy(phrase, wordlist) {
	        return mnemonicToEntropy(phrase, wordlist);
	    }
	    /**
	     *  Returns true if %%phrase%% is a valid [[link-bip-39]] phrase.
	     *
	     *  This checks all the provided words belong to the %%wordlist%%,
	     *  that the length is valid and the checksum is correct.
	     */
	    static isValidMnemonic(phrase, wordlist) {
	        try {
	            mnemonicToEntropy(phrase, wordlist);
	            return true;
	        }
	        catch (error) { }
	        return false;
	    }
	}
	mnemonic.Mnemonic = Mnemonic;
	
	return mnemonic;
}

var jsonKeystore = {};

var lib_commonjs = {};

var aes = {};

var hasRequiredAes;

function requireAes () {
	if (hasRequiredAes) return aes;
	hasRequiredAes = 1;
	/*! MIT License. Copyright 2015-2022 Richard Moore <me@ricmoo.com>. See LICENSE.txt. */
	var __classPrivateFieldGet = (commonjsGlobal && commonjsGlobal.__classPrivateFieldGet) || function (receiver, state, kind, f) {
	    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
	    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
	    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
	};
	var __classPrivateFieldSet = (commonjsGlobal && commonjsGlobal.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
	    if (kind === "m") throw new TypeError("Private method is not writable");
	    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
	    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
	    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
	};
	var _AES_key, _AES_Kd, _AES_Ke;
	Object.defineProperty(aes, "__esModule", { value: true });
	aes.AES = void 0;
	// Number of rounds by keysize
	const numberOfRounds = { 16: 10, 24: 12, 32: 14 };
	// Round constant words
	const rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91];
	// S-box and Inverse S-box (S is for Substitution)
	const S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];
	const Si = [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];
	// Transformations for encryption
	const T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];
	const T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];
	const T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];
	const T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c];
	// Transformations for decryption
	const T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];
	const T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];
	const T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];
	const T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0];
	// Transformations for decryption key expansion
	const U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];
	const U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];
	const U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];
	const U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];
	function convertToInt32(bytes) {
	    const result = [];
	    for (let i = 0; i < bytes.length; i += 4) {
	        result.push((bytes[i] << 24) | (bytes[i + 1] << 16) | (bytes[i + 2] << 8) | bytes[i + 3]);
	    }
	    return result;
	}
	class AES {
	    get key() { return __classPrivateFieldGet(this, _AES_key, "f").slice(); }
	    constructor(key) {
	        _AES_key.set(this, void 0);
	        _AES_Kd.set(this, void 0);
	        _AES_Ke.set(this, void 0);
	        if (!(this instanceof AES)) {
	            throw Error('AES must be instanitated with `new`');
	        }
	        __classPrivateFieldSet(this, _AES_key, new Uint8Array(key), "f");
	        const rounds = numberOfRounds[this.key.length];
	        if (rounds == null) {
	            throw new TypeError('invalid key size (must be 16, 24 or 32 bytes)');
	        }
	        // encryption round keys
	        __classPrivateFieldSet(this, _AES_Ke, [], "f");
	        // decryption round keys
	        __classPrivateFieldSet(this, _AES_Kd, [], "f");
	        for (let i = 0; i <= rounds; i++) {
	            __classPrivateFieldGet(this, _AES_Ke, "f").push([0, 0, 0, 0]);
	            __classPrivateFieldGet(this, _AES_Kd, "f").push([0, 0, 0, 0]);
	        }
	        const roundKeyCount = (rounds + 1) * 4;
	        const KC = this.key.length / 4;
	        // convert the key into ints
	        const tk = convertToInt32(this.key);
	        // copy values into round key arrays
	        let index;
	        for (let i = 0; i < KC; i++) {
	            index = i >> 2;
	            __classPrivateFieldGet(this, _AES_Ke, "f")[index][i % 4] = tk[i];
	            __classPrivateFieldGet(this, _AES_Kd, "f")[rounds - index][i % 4] = tk[i];
	        }
	        // key expansion (fips-197 section 5.2)
	        let rconpointer = 0;
	        let t = KC, tt;
	        while (t < roundKeyCount) {
	            tt = tk[KC - 1];
	            tk[0] ^= ((S[(tt >> 16) & 0xFF] << 24) ^
	                (S[(tt >> 8) & 0xFF] << 16) ^
	                (S[tt & 0xFF] << 8) ^
	                S[(tt >> 24) & 0xFF] ^
	                (rcon[rconpointer] << 24));
	            rconpointer += 1;
	            // key expansion (for non-256 bit)
	            if (KC != 8) {
	                for (let i = 1; i < KC; i++) {
	                    tk[i] ^= tk[i - 1];
	                }
	                // key expansion for 256-bit keys is "slightly different" (fips-197)
	            }
	            else {
	                for (let i = 1; i < (KC / 2); i++) {
	                    tk[i] ^= tk[i - 1];
	                }
	                tt = tk[(KC / 2) - 1];
	                tk[KC / 2] ^= (S[tt & 0xFF] ^
	                    (S[(tt >> 8) & 0xFF] << 8) ^
	                    (S[(tt >> 16) & 0xFF] << 16) ^
	                    (S[(tt >> 24) & 0xFF] << 24));
	                for (let i = (KC / 2) + 1; i < KC; i++) {
	                    tk[i] ^= tk[i - 1];
	                }
	            }
	            // copy values into round key arrays
	            let i = 0, r, c;
	            while (i < KC && t < roundKeyCount) {
	                r = t >> 2;
	                c = t % 4;
	                __classPrivateFieldGet(this, _AES_Ke, "f")[r][c] = tk[i];
	                __classPrivateFieldGet(this, _AES_Kd, "f")[rounds - r][c] = tk[i++];
	                t++;
	            }
	        }
	        // inverse-cipher-ify the decryption round key (fips-197 section 5.3)
	        for (let r = 1; r < rounds; r++) {
	            for (let c = 0; c < 4; c++) {
	                tt = __classPrivateFieldGet(this, _AES_Kd, "f")[r][c];
	                __classPrivateFieldGet(this, _AES_Kd, "f")[r][c] = (U1[(tt >> 24) & 0xFF] ^
	                    U2[(tt >> 16) & 0xFF] ^
	                    U3[(tt >> 8) & 0xFF] ^
	                    U4[tt & 0xFF]);
	            }
	        }
	    }
	    encrypt(plaintext) {
	        if (plaintext.length != 16) {
	            throw new TypeError('invalid plaintext size (must be 16 bytes)');
	        }
	        const rounds = __classPrivateFieldGet(this, _AES_Ke, "f").length - 1;
	        const a = [0, 0, 0, 0];
	        // convert plaintext to (ints ^ key)
	        let t = convertToInt32(plaintext);
	        for (let i = 0; i < 4; i++) {
	            t[i] ^= __classPrivateFieldGet(this, _AES_Ke, "f")[0][i];
	        }
	        // apply round transforms
	        for (let r = 1; r < rounds; r++) {
	            for (let i = 0; i < 4; i++) {
	                a[i] = (T1[(t[i] >> 24) & 0xff] ^
	                    T2[(t[(i + 1) % 4] >> 16) & 0xff] ^
	                    T3[(t[(i + 2) % 4] >> 8) & 0xff] ^
	                    T4[t[(i + 3) % 4] & 0xff] ^
	                    __classPrivateFieldGet(this, _AES_Ke, "f")[r][i]);
	            }
	            t = a.slice();
	        }
	        // the last round is special
	        const result = new Uint8Array(16);
	        let tt = 0;
	        for (let i = 0; i < 4; i++) {
	            tt = __classPrivateFieldGet(this, _AES_Ke, "f")[rounds][i];
	            result[4 * i] = (S[(t[i] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
	            result[4 * i + 1] = (S[(t[(i + 1) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
	            result[4 * i + 2] = (S[(t[(i + 2) % 4] >> 8) & 0xff] ^ (tt >> 8)) & 0xff;
	            result[4 * i + 3] = (S[t[(i + 3) % 4] & 0xff] ^ tt) & 0xff;
	        }
	        return result;
	    }
	    decrypt(ciphertext) {
	        if (ciphertext.length != 16) {
	            throw new TypeError('invalid ciphertext size (must be 16 bytes)');
	        }
	        const rounds = __classPrivateFieldGet(this, _AES_Kd, "f").length - 1;
	        const a = [0, 0, 0, 0];
	        // convert plaintext to (ints ^ key)
	        let t = convertToInt32(ciphertext);
	        for (let i = 0; i < 4; i++) {
	            t[i] ^= __classPrivateFieldGet(this, _AES_Kd, "f")[0][i];
	        }
	        // apply round transforms
	        for (let r = 1; r < rounds; r++) {
	            for (let i = 0; i < 4; i++) {
	                a[i] = (T5[(t[i] >> 24) & 0xff] ^
	                    T6[(t[(i + 3) % 4] >> 16) & 0xff] ^
	                    T7[(t[(i + 2) % 4] >> 8) & 0xff] ^
	                    T8[t[(i + 1) % 4] & 0xff] ^
	                    __classPrivateFieldGet(this, _AES_Kd, "f")[r][i]);
	            }
	            t = a.slice();
	        }
	        // the last round is special
	        const result = new Uint8Array(16);
	        let tt = 0;
	        for (let i = 0; i < 4; i++) {
	            tt = __classPrivateFieldGet(this, _AES_Kd, "f")[rounds][i];
	            result[4 * i] = (Si[(t[i] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
	            result[4 * i + 1] = (Si[(t[(i + 3) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
	            result[4 * i + 2] = (Si[(t[(i + 2) % 4] >> 8) & 0xff] ^ (tt >> 8)) & 0xff;
	            result[4 * i + 3] = (Si[t[(i + 1) % 4] & 0xff] ^ tt) & 0xff;
	        }
	        return result;
	    }
	}
	aes.AES = AES;
	_AES_key = new WeakMap(), _AES_Kd = new WeakMap(), _AES_Ke = new WeakMap();
	
	return aes;
}

var mode = {};

var hasRequiredMode;

function requireMode () {
	if (hasRequiredMode) return mode;
	hasRequiredMode = 1;
	Object.defineProperty(mode, "__esModule", { value: true });
	mode.ModeOfOperation = void 0;
	const aes_js_1 = requireAes();
	class ModeOfOperation {
	    constructor(name, key, cls) {
	        if (cls && !(this instanceof cls)) {
	            throw new Error(`${name} must be instantiated with "new"`);
	        }
	        Object.defineProperties(this, {
	            aes: { enumerable: true, value: new aes_js_1.AES(key) },
	            name: { enumerable: true, value: name }
	        });
	    }
	}
	mode.ModeOfOperation = ModeOfOperation;
	
	return mode;
}

var modeCbc = {};

var hasRequiredModeCbc;

function requireModeCbc () {
	if (hasRequiredModeCbc) return modeCbc;
	hasRequiredModeCbc = 1;
	// Cipher Block Chaining
	var __classPrivateFieldSet = (commonjsGlobal && commonjsGlobal.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
	    if (kind === "m") throw new TypeError("Private method is not writable");
	    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
	    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
	    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
	};
	var __classPrivateFieldGet = (commonjsGlobal && commonjsGlobal.__classPrivateFieldGet) || function (receiver, state, kind, f) {
	    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
	    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
	    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
	};
	var _CBC_iv, _CBC_lastBlock;
	Object.defineProperty(modeCbc, "__esModule", { value: true });
	modeCbc.CBC = void 0;
	const mode_js_1 = requireMode();
	class CBC extends mode_js_1.ModeOfOperation {
	    constructor(key, iv) {
	        super("ECC", key, CBC);
	        _CBC_iv.set(this, void 0);
	        _CBC_lastBlock.set(this, void 0);
	        if (iv) {
	            if (iv.length % 16) {
	                throw new TypeError("invalid iv size (must be 16 bytes)");
	            }
	            __classPrivateFieldSet(this, _CBC_iv, new Uint8Array(iv), "f");
	        }
	        else {
	            __classPrivateFieldSet(this, _CBC_iv, new Uint8Array(16), "f");
	        }
	        __classPrivateFieldSet(this, _CBC_lastBlock, this.iv, "f");
	    }
	    get iv() { return new Uint8Array(__classPrivateFieldGet(this, _CBC_iv, "f")); }
	    encrypt(plaintext) {
	        if (plaintext.length % 16) {
	            throw new TypeError("invalid plaintext size (must be multiple of 16 bytes)");
	        }
	        const ciphertext = new Uint8Array(plaintext.length);
	        for (let i = 0; i < plaintext.length; i += 16) {
	            for (let j = 0; j < 16; j++) {
	                __classPrivateFieldGet(this, _CBC_lastBlock, "f")[j] ^= plaintext[i + j];
	            }
	            __classPrivateFieldSet(this, _CBC_lastBlock, this.aes.encrypt(__classPrivateFieldGet(this, _CBC_lastBlock, "f")), "f");
	            ciphertext.set(__classPrivateFieldGet(this, _CBC_lastBlock, "f"), i);
	        }
	        return ciphertext;
	    }
	    decrypt(ciphertext) {
	        if (ciphertext.length % 16) {
	            throw new TypeError("invalid ciphertext size (must be multiple of 16 bytes)");
	        }
	        const plaintext = new Uint8Array(ciphertext.length);
	        for (let i = 0; i < ciphertext.length; i += 16) {
	            const block = this.aes.decrypt(ciphertext.subarray(i, i + 16));
	            for (let j = 0; j < 16; j++) {
	                plaintext[i + j] = block[j] ^ __classPrivateFieldGet(this, _CBC_lastBlock, "f")[j];
	                __classPrivateFieldGet(this, _CBC_lastBlock, "f")[j] = ciphertext[i + j];
	            }
	        }
	        return plaintext;
	    }
	}
	modeCbc.CBC = CBC;
	_CBC_iv = new WeakMap(), _CBC_lastBlock = new WeakMap();
	
	return modeCbc;
}

var modeCfb = {};

var hasRequiredModeCfb;

function requireModeCfb () {
	if (hasRequiredModeCfb) return modeCfb;
	hasRequiredModeCfb = 1;
	// Cipher Feedback
	var __classPrivateFieldSet = (commonjsGlobal && commonjsGlobal.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
	    if (kind === "m") throw new TypeError("Private method is not writable");
	    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
	    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
	    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
	};
	var __classPrivateFieldGet = (commonjsGlobal && commonjsGlobal.__classPrivateFieldGet) || function (receiver, state, kind, f) {
	    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
	    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
	    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
	};
	var _CFB_instances, _CFB_iv, _CFB_shiftRegister, _CFB_shift;
	Object.defineProperty(modeCfb, "__esModule", { value: true });
	modeCfb.CFB = void 0;
	const mode_js_1 = requireMode();
	class CFB extends mode_js_1.ModeOfOperation {
	    constructor(key, iv, segmentSize = 8) {
	        super("CFB", key, CFB);
	        _CFB_instances.add(this);
	        _CFB_iv.set(this, void 0);
	        _CFB_shiftRegister.set(this, void 0);
	        // This library currently only handles byte-aligned segmentSize
	        if (!Number.isInteger(segmentSize) || (segmentSize % 8)) {
	            throw new TypeError("invalid segmentSize");
	        }
	        Object.defineProperties(this, {
	            segmentSize: { enumerable: true, value: segmentSize }
	        });
	        if (iv) {
	            if (iv.length % 16) {
	                throw new TypeError("invalid iv size (must be 16 bytes)");
	            }
	            __classPrivateFieldSet(this, _CFB_iv, new Uint8Array(iv), "f");
	        }
	        else {
	            __classPrivateFieldSet(this, _CFB_iv, new Uint8Array(16), "f");
	        }
	        __classPrivateFieldSet(this, _CFB_shiftRegister, this.iv, "f");
	    }
	    get iv() { return new Uint8Array(__classPrivateFieldGet(this, _CFB_iv, "f")); }
	    encrypt(plaintext) {
	        if (8 * plaintext.length % this.segmentSize) {
	            throw new TypeError("invalid plaintext size (must be multiple of segmentSize bytes)");
	        }
	        const segmentSize = this.segmentSize / 8;
	        const ciphertext = new Uint8Array(plaintext);
	        for (let i = 0; i < ciphertext.length; i += segmentSize) {
	            const xorSegment = this.aes.encrypt(__classPrivateFieldGet(this, _CFB_shiftRegister, "f"));
	            for (let j = 0; j < segmentSize; j++) {
	                ciphertext[i + j] ^= xorSegment[j];
	            }
	            __classPrivateFieldGet(this, _CFB_instances, "m", _CFB_shift).call(this, ciphertext.subarray(i));
	        }
	        return ciphertext;
	    }
	    decrypt(ciphertext) {
	        if (8 * ciphertext.length % this.segmentSize) {
	            throw new TypeError("invalid ciphertext size (must be multiple of segmentSize bytes)");
	        }
	        const segmentSize = this.segmentSize / 8;
	        const plaintext = new Uint8Array(ciphertext);
	        for (let i = 0; i < plaintext.length; i += segmentSize) {
	            const xorSegment = this.aes.encrypt(__classPrivateFieldGet(this, _CFB_shiftRegister, "f"));
	            for (let j = 0; j < segmentSize; j++) {
	                plaintext[i + j] ^= xorSegment[j];
	            }
	            __classPrivateFieldGet(this, _CFB_instances, "m", _CFB_shift).call(this, ciphertext.subarray(i));
	        }
	        return plaintext;
	    }
	}
	modeCfb.CFB = CFB;
	_CFB_iv = new WeakMap(), _CFB_shiftRegister = new WeakMap(), _CFB_instances = new WeakSet(), _CFB_shift = function _CFB_shift(data) {
	    const segmentSize = this.segmentSize / 8;
	    // Shift the register
	    __classPrivateFieldGet(this, _CFB_shiftRegister, "f").set(__classPrivateFieldGet(this, _CFB_shiftRegister, "f").subarray(segmentSize));
	    __classPrivateFieldGet(this, _CFB_shiftRegister, "f").set(data.subarray(0, segmentSize), 16 - segmentSize);
	};
	
	return modeCfb;
}

var modeCtr = {};

var hasRequiredModeCtr;

function requireModeCtr () {
	if (hasRequiredModeCtr) return modeCtr;
	hasRequiredModeCtr = 1;
	// Counter Mode
	var __classPrivateFieldSet = (commonjsGlobal && commonjsGlobal.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
	    if (kind === "m") throw new TypeError("Private method is not writable");
	    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
	    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
	    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
	};
	var __classPrivateFieldGet = (commonjsGlobal && commonjsGlobal.__classPrivateFieldGet) || function (receiver, state, kind, f) {
	    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
	    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
	    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
	};
	var _CTR_remaining, _CTR_remainingIndex, _CTR_counter;
	Object.defineProperty(modeCtr, "__esModule", { value: true });
	modeCtr.CTR = void 0;
	const mode_js_1 = requireMode();
	class CTR extends mode_js_1.ModeOfOperation {
	    constructor(key, initialValue) {
	        super("CTR", key, CTR);
	        // Remaining bytes for the one-time pad
	        _CTR_remaining.set(this, void 0);
	        _CTR_remainingIndex.set(this, void 0);
	        // The current counter
	        _CTR_counter.set(this, void 0);
	        __classPrivateFieldSet(this, _CTR_counter, new Uint8Array(16), "f");
	        __classPrivateFieldGet(this, _CTR_counter, "f").fill(0);
	        __classPrivateFieldSet(this, _CTR_remaining, __classPrivateFieldGet(this, _CTR_counter, "f"), "f"); // This will be discarded immediately
	        __classPrivateFieldSet(this, _CTR_remainingIndex, 16, "f");
	        if (initialValue == null) {
	            initialValue = 1;
	        }
	        if (typeof (initialValue) === "number") {
	            this.setCounterValue(initialValue);
	        }
	        else {
	            this.setCounterBytes(initialValue);
	        }
	    }
	    get counter() { return new Uint8Array(__classPrivateFieldGet(this, _CTR_counter, "f")); }
	    setCounterValue(value) {
	        if (!Number.isInteger(value) || value < 0 || value > Number.MAX_SAFE_INTEGER) {
	            throw new TypeError("invalid counter initial integer value");
	        }
	        for (let index = 15; index >= 0; --index) {
	            __classPrivateFieldGet(this, _CTR_counter, "f")[index] = value % 256;
	            value = Math.floor(value / 256);
	        }
	    }
	    setCounterBytes(value) {
	        if (value.length !== 16) {
	            throw new TypeError("invalid counter initial Uint8Array value length");
	        }
	        __classPrivateFieldGet(this, _CTR_counter, "f").set(value);
	    }
	    increment() {
	        for (let i = 15; i >= 0; i--) {
	            if (__classPrivateFieldGet(this, _CTR_counter, "f")[i] === 255) {
	                __classPrivateFieldGet(this, _CTR_counter, "f")[i] = 0;
	            }
	            else {
	                __classPrivateFieldGet(this, _CTR_counter, "f")[i]++;
	                break;
	            }
	        }
	    }
	    encrypt(plaintext) {
	        var _a, _b;
	        const crypttext = new Uint8Array(plaintext);
	        for (let i = 0; i < crypttext.length; i++) {
	            if (__classPrivateFieldGet(this, _CTR_remainingIndex, "f") === 16) {
	                __classPrivateFieldSet(this, _CTR_remaining, this.aes.encrypt(__classPrivateFieldGet(this, _CTR_counter, "f")), "f");
	                __classPrivateFieldSet(this, _CTR_remainingIndex, 0, "f");
	                this.increment();
	            }
	            crypttext[i] ^= __classPrivateFieldGet(this, _CTR_remaining, "f")[__classPrivateFieldSet(this, _CTR_remainingIndex, (_b = __classPrivateFieldGet(this, _CTR_remainingIndex, "f"), _a = _b++, _b), "f"), _a];
	        }
	        return crypttext;
	    }
	    decrypt(ciphertext) {
	        return this.encrypt(ciphertext);
	    }
	}
	modeCtr.CTR = CTR;
	_CTR_remaining = new WeakMap(), _CTR_remainingIndex = new WeakMap(), _CTR_counter = new WeakMap();
	
	return modeCtr;
}

var modeEcb = {};

var hasRequiredModeEcb;

function requireModeEcb () {
	if (hasRequiredModeEcb) return modeEcb;
	hasRequiredModeEcb = 1;
	// Electronic Code Book
	Object.defineProperty(modeEcb, "__esModule", { value: true });
	modeEcb.ECB = void 0;
	const mode_js_1 = requireMode();
	class ECB extends mode_js_1.ModeOfOperation {
	    constructor(key) {
	        super("ECB", key, ECB);
	    }
	    encrypt(plaintext) {
	        if (plaintext.length % 16) {
	            throw new TypeError("invalid plaintext size (must be multiple of 16 bytes)");
	        }
	        const crypttext = new Uint8Array(plaintext.length);
	        for (let i = 0; i < plaintext.length; i += 16) {
	            crypttext.set(this.aes.encrypt(plaintext.subarray(i, i + 16)), i);
	        }
	        return crypttext;
	    }
	    decrypt(crypttext) {
	        if (crypttext.length % 16) {
	            throw new TypeError("invalid ciphertext size (must be multiple of 16 bytes)");
	        }
	        const plaintext = new Uint8Array(crypttext.length);
	        for (let i = 0; i < crypttext.length; i += 16) {
	            plaintext.set(this.aes.decrypt(crypttext.subarray(i, i + 16)), i);
	        }
	        return plaintext;
	    }
	}
	modeEcb.ECB = ECB;
	
	return modeEcb;
}

var modeOfb = {};

var hasRequiredModeOfb;

function requireModeOfb () {
	if (hasRequiredModeOfb) return modeOfb;
	hasRequiredModeOfb = 1;
	// Output Feedback
	var __classPrivateFieldSet = (commonjsGlobal && commonjsGlobal.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
	    if (kind === "m") throw new TypeError("Private method is not writable");
	    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
	    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
	    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
	};
	var __classPrivateFieldGet = (commonjsGlobal && commonjsGlobal.__classPrivateFieldGet) || function (receiver, state, kind, f) {
	    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
	    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
	    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
	};
	var _OFB_iv, _OFB_lastPrecipher, _OFB_lastPrecipherIndex;
	Object.defineProperty(modeOfb, "__esModule", { value: true });
	modeOfb.OFB = void 0;
	const mode_js_1 = requireMode();
	class OFB extends mode_js_1.ModeOfOperation {
	    constructor(key, iv) {
	        super("OFB", key, OFB);
	        _OFB_iv.set(this, void 0);
	        _OFB_lastPrecipher.set(this, void 0);
	        _OFB_lastPrecipherIndex.set(this, void 0);
	        if (iv) {
	            if (iv.length % 16) {
	                throw new TypeError("invalid iv size (must be 16 bytes)");
	            }
	            __classPrivateFieldSet(this, _OFB_iv, new Uint8Array(iv), "f");
	        }
	        else {
	            __classPrivateFieldSet(this, _OFB_iv, new Uint8Array(16), "f");
	        }
	        __classPrivateFieldSet(this, _OFB_lastPrecipher, this.iv, "f");
	        __classPrivateFieldSet(this, _OFB_lastPrecipherIndex, 16, "f");
	    }
	    get iv() { return new Uint8Array(__classPrivateFieldGet(this, _OFB_iv, "f")); }
	    encrypt(plaintext) {
	        var _a, _b;
	        if (plaintext.length % 16) {
	            throw new TypeError("invalid plaintext size (must be multiple of 16 bytes)");
	        }
	        const ciphertext = new Uint8Array(plaintext);
	        for (let i = 0; i < ciphertext.length; i++) {
	            if (__classPrivateFieldGet(this, _OFB_lastPrecipherIndex, "f") === 16) {
	                __classPrivateFieldSet(this, _OFB_lastPrecipher, this.aes.encrypt(__classPrivateFieldGet(this, _OFB_lastPrecipher, "f")), "f");
	                __classPrivateFieldSet(this, _OFB_lastPrecipherIndex, 0, "f");
	            }
	            ciphertext[i] ^= __classPrivateFieldGet(this, _OFB_lastPrecipher, "f")[__classPrivateFieldSet(this, _OFB_lastPrecipherIndex, (_b = __classPrivateFieldGet(this, _OFB_lastPrecipherIndex, "f"), _a = _b++, _b), "f"), _a];
	        }
	        return ciphertext;
	    }
	    decrypt(ciphertext) {
	        if (ciphertext.length % 16) {
	            throw new TypeError("invalid ciphertext size (must be multiple of 16 bytes)");
	        }
	        return this.encrypt(ciphertext);
	    }
	}
	modeOfb.OFB = OFB;
	_OFB_iv = new WeakMap(), _OFB_lastPrecipher = new WeakMap(), _OFB_lastPrecipherIndex = new WeakMap();
	
	return modeOfb;
}

var padding = {};

var hasRequiredPadding;

function requirePadding () {
	if (hasRequiredPadding) return padding;
	hasRequiredPadding = 1;
	Object.defineProperty(padding, "__esModule", { value: true });
	padding.pkcs7Strip = padding.pkcs7Pad = void 0;
	function pkcs7Pad(data) {
	    const padder = 16 - (data.length % 16);
	    const result = new Uint8Array(data.length + padder);
	    result.set(data);
	    for (let i = data.length; i < result.length; i++) {
	        result[i] = padder;
	    }
	    return result;
	}
	padding.pkcs7Pad = pkcs7Pad;
	function pkcs7Strip(data) {
	    if (data.length < 16) {
	        throw new TypeError('PKCS#7 invalid length');
	    }
	    const padder = data[data.length - 1];
	    if (padder > 16) {
	        throw new TypeError('PKCS#7 padding byte out of range');
	    }
	    const length = data.length - padder;
	    for (let i = 0; i < padder; i++) {
	        if (data[length + i] !== padder) {
	            throw new TypeError('PKCS#7 invalid padding byte');
	        }
	    }
	    return new Uint8Array(data.subarray(0, length));
	}
	padding.pkcs7Strip = pkcs7Strip;
	
	return padding;
}

var hasRequiredLib_commonjs;

function requireLib_commonjs () {
	if (hasRequiredLib_commonjs) return lib_commonjs;
	hasRequiredLib_commonjs = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.pkcs7Strip = exports.pkcs7Pad = exports.OFB = exports.ECB = exports.CTR = exports.CFB = exports.CBC = exports.ModeOfOperation = exports.AES = void 0;
		var aes_js_1 = requireAes();
		Object.defineProperty(exports, "AES", { enumerable: true, get: function () { return aes_js_1.AES; } });
		var mode_js_1 = requireMode();
		Object.defineProperty(exports, "ModeOfOperation", { enumerable: true, get: function () { return mode_js_1.ModeOfOperation; } });
		var mode_cbc_js_1 = requireModeCbc();
		Object.defineProperty(exports, "CBC", { enumerable: true, get: function () { return mode_cbc_js_1.CBC; } });
		var mode_cfb_js_1 = requireModeCfb();
		Object.defineProperty(exports, "CFB", { enumerable: true, get: function () { return mode_cfb_js_1.CFB; } });
		var mode_ctr_js_1 = requireModeCtr();
		Object.defineProperty(exports, "CTR", { enumerable: true, get: function () { return mode_ctr_js_1.CTR; } });
		var mode_ecb_js_1 = requireModeEcb();
		Object.defineProperty(exports, "ECB", { enumerable: true, get: function () { return mode_ecb_js_1.ECB; } });
		var mode_ofb_js_1 = requireModeOfb();
		Object.defineProperty(exports, "OFB", { enumerable: true, get: function () { return mode_ofb_js_1.OFB; } });
		var padding_js_1 = requirePadding();
		Object.defineProperty(exports, "pkcs7Pad", { enumerable: true, get: function () { return padding_js_1.pkcs7Pad; } });
		Object.defineProperty(exports, "pkcs7Strip", { enumerable: true, get: function () { return padding_js_1.pkcs7Strip; } });
		
	} (lib_commonjs));
	return lib_commonjs;
}

var utils$6 = {};

var hasRequiredUtils;

function requireUtils () {
	if (hasRequiredUtils) return utils$6;
	hasRequiredUtils = 1;
	/**
	 *  @_ignore
	 */
	Object.defineProperty(utils$6, "__esModule", { value: true });
	utils$6.spelunk = utils$6.getPassword = utils$6.zpad = utils$6.looseArrayify = void 0;
	const index_js_1 = requireUtils$3();
	function looseArrayify(hexString) {
	    if (typeof (hexString) === "string" && !hexString.startsWith("0x")) {
	        hexString = "0x" + hexString;
	    }
	    return (0, index_js_1.getBytesCopy)(hexString);
	}
	utils$6.looseArrayify = looseArrayify;
	function zpad(value, length) {
	    value = String(value);
	    while (value.length < length) {
	        value = '0' + value;
	    }
	    return value;
	}
	utils$6.zpad = zpad;
	function getPassword(password) {
	    if (typeof (password) === 'string') {
	        return (0, index_js_1.toUtf8Bytes)(password, "NFKC");
	    }
	    return (0, index_js_1.getBytesCopy)(password);
	}
	utils$6.getPassword = getPassword;
	function spelunk(object, _path) {
	    const match = _path.match(/^([a-z0-9$_.-]*)(:([a-z]+))?(!)?$/i);
	    (0, index_js_1.assertArgument)(match != null, "invalid path", "path", _path);
	    const path = match[1];
	    const type = match[3];
	    const reqd = (match[4] === "!");
	    let cur = object;
	    for (const comp of path.toLowerCase().split('.')) {
	        // Search for a child object with a case-insensitive matching key
	        if (Array.isArray(cur)) {
	            if (!comp.match(/^[0-9]+$/)) {
	                break;
	            }
	            cur = cur[parseInt(comp)];
	        }
	        else if (typeof (cur) === "object") {
	            let found = null;
	            for (const key in cur) {
	                if (key.toLowerCase() === comp) {
	                    found = cur[key];
	                    break;
	                }
	            }
	            cur = found;
	        }
	        else {
	            cur = null;
	        }
	        if (cur == null) {
	            break;
	        }
	    }
	    (0, index_js_1.assertArgument)(!reqd || cur != null, "missing required value", "path", path);
	    if (type && cur != null) {
	        if (type === "int") {
	            if (typeof (cur) === "string" && cur.match(/^-?[0-9]+$/)) {
	                return parseInt(cur);
	            }
	            else if (Number.isSafeInteger(cur)) {
	                return cur;
	            }
	        }
	        if (type === "number") {
	            if (typeof (cur) === "string" && cur.match(/^-?[0-9.]*$/)) {
	                return parseFloat(cur);
	            }
	        }
	        if (type === "data") {
	            if (typeof (cur) === "string") {
	                return looseArrayify(cur);
	            }
	        }
	        if (type === "array" && Array.isArray(cur)) {
	            return cur;
	        }
	        if (type === typeof (cur)) {
	            return cur;
	        }
	        (0, index_js_1.assertArgument)(false, `wrong type found for ${type} `, "path", path);
	    }
	    return cur;
	}
	utils$6.spelunk = spelunk;
	/*
	export function follow(object: any, path: string): null | string {
	    let currentChild = object;

	    for (const comp of path.toLowerCase().split('/')) {

	        // Search for a child object with a case-insensitive matching key
	        let matchingChild = null;
	        for (const key in currentChild) {
	             if (key.toLowerCase() === comp) {
	                 matchingChild = currentChild[key];
	                 break;
	             }
	        }

	        if (matchingChild === null) { return null; }

	        currentChild = matchingChild;
	    }

	    return currentChild;
	}

	// "path/to/something:type!"
	export function followRequired(data: any, path: string): string {
	    const value = follow(data, path);
	    if (value != null) { return value; }
	    return logger.throwArgumentError("invalid value", `data:${ path }`,
	    JSON.stringify(data));
	}
	*/
	// See: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)
	/*
	export function uuidV4(randomBytes: BytesLike): string {
	    const bytes = getBytes(randomBytes, "randomBytes");

	    // Section: 4.1.3:
	    // - time_hi_and_version[12:16] = 0b0100
	    bytes[6] = (bytes[6] & 0x0f) | 0x40;

	    // Section 4.4
	    // - clock_seq_hi_and_reserved[6] = 0b0
	    // - clock_seq_hi_and_reserved[7] = 0b1
	    bytes[8] = (bytes[8] & 0x3f) | 0x80;

	    const value = hexlify(bytes);

	    return [
	       value.substring(2, 10),
	       value.substring(10, 14),
	       value.substring(14, 18),
	       value.substring(18, 22),
	       value.substring(22, 34),
	    ].join("-");
	}
	*/
	
	return utils$6;
}

var hasRequiredJsonKeystore;

function requireJsonKeystore () {
	if (hasRequiredJsonKeystore) return jsonKeystore;
	hasRequiredJsonKeystore = 1;
	/**
	 *  The JSON Wallet formats allow a simple way to store the private
	 *  keys needed in Ethereum along with related information and allows
	 *  for extensible forms of encryption.
	 *
	 *  These utilities facilitate decrypting and encrypting the most common
	 *  JSON Wallet formats.
	 *
	 *  @_subsection: api/wallet:JSON Wallets  [json-wallets]
	 */
	Object.defineProperty(jsonKeystore, "__esModule", { value: true });
	jsonKeystore.encryptKeystoreJson = jsonKeystore.encryptKeystoreJsonSync = jsonKeystore.decryptKeystoreJson = jsonKeystore.decryptKeystoreJsonSync = jsonKeystore.isKeystoreJson = void 0;
	const aes_js_1 = requireLib_commonjs();
	const index_js_1 = requireAddress$2();
	const index_js_2 = requireCrypto();
	const index_js_3 = requireTransaction();
	const index_js_4 = requireUtils$3();
	const utils_js_1 = requireUtils();
	const _version_js_1 = require_version();
	const defaultPath = "m/44'/60'/0'/0/0";
	/**
	 *  Returns true if %%json%% is a valid JSON Keystore Wallet.
	 */
	function isKeystoreJson(json) {
	    try {
	        const data = JSON.parse(json);
	        const version = ((data.version != null) ? parseInt(data.version) : 0);
	        if (version === 3) {
	            return true;
	        }
	    }
	    catch (error) { }
	    return false;
	}
	jsonKeystore.isKeystoreJson = isKeystoreJson;
	function decrypt(data, key, ciphertext) {
	    const cipher = (0, utils_js_1.spelunk)(data, "crypto.cipher:string");
	    if (cipher === "aes-128-ctr") {
	        const iv = (0, utils_js_1.spelunk)(data, "crypto.cipherparams.iv:data!");
	        const aesCtr = new aes_js_1.CTR(key, iv);
	        return (0, index_js_4.hexlify)(aesCtr.decrypt(ciphertext));
	    }
	    (0, index_js_4.assert)(false, "unsupported cipher", "UNSUPPORTED_OPERATION", {
	        operation: "decrypt"
	    });
	}
	function getAccount(data, _key) {
	    const key = (0, index_js_4.getBytes)(_key);
	    const ciphertext = (0, utils_js_1.spelunk)(data, "crypto.ciphertext:data!");
	    const computedMAC = (0, index_js_4.hexlify)((0, index_js_2.keccak256)((0, index_js_4.concat)([key.slice(16, 32), ciphertext]))).substring(2);
	    (0, index_js_4.assertArgument)(computedMAC === (0, utils_js_1.spelunk)(data, "crypto.mac:string!").toLowerCase(), "incorrect password", "password", "[ REDACTED ]");
	    const privateKey = decrypt(data, key.slice(0, 16), ciphertext);
	    const address = (0, index_js_3.computeAddress)(privateKey);
	    if (data.address) {
	        let check = data.address.toLowerCase();
	        if (!check.startsWith("0x")) {
	            check = "0x" + check;
	        }
	        (0, index_js_4.assertArgument)((0, index_js_1.getAddress)(check) === address, "keystore address/privateKey mismatch", "address", data.address);
	    }
	    const account = { address, privateKey };
	    // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase
	    const version = (0, utils_js_1.spelunk)(data, "x-ethers.version:string");
	    if (version === "0.1") {
	        const mnemonicKey = key.slice(32, 64);
	        const mnemonicCiphertext = (0, utils_js_1.spelunk)(data, "x-ethers.mnemonicCiphertext:data!");
	        const mnemonicIv = (0, utils_js_1.spelunk)(data, "x-ethers.mnemonicCounter:data!");
	        const mnemonicAesCtr = new aes_js_1.CTR(mnemonicKey, mnemonicIv);
	        account.mnemonic = {
	            path: ((0, utils_js_1.spelunk)(data, "x-ethers.path:string") || defaultPath),
	            locale: ((0, utils_js_1.spelunk)(data, "x-ethers.locale:string") || "en"),
	            entropy: (0, index_js_4.hexlify)((0, index_js_4.getBytes)(mnemonicAesCtr.decrypt(mnemonicCiphertext)))
	        };
	    }
	    return account;
	}
	function getDecryptKdfParams(data) {
	    const kdf = (0, utils_js_1.spelunk)(data, "crypto.kdf:string");
	    if (kdf && typeof (kdf) === "string") {
	        if (kdf.toLowerCase() === "scrypt") {
	            const salt = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.salt:data!");
	            const N = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.n:int!");
	            const r = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.r:int!");
	            const p = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.p:int!");
	            // Make sure N is a power of 2
	            (0, index_js_4.assertArgument)(N > 0 && (N & (N - 1)) === 0, "invalid kdf.N", "kdf.N", N);
	            (0, index_js_4.assertArgument)(r > 0 && p > 0, "invalid kdf", "kdf", kdf);
	            const dkLen = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.dklen:int!");
	            (0, index_js_4.assertArgument)(dkLen === 32, "invalid kdf.dklen", "kdf.dflen", dkLen);
	            return { name: "scrypt", salt, N, r, p, dkLen: 64 };
	        }
	        else if (kdf.toLowerCase() === "pbkdf2") {
	            const salt = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.salt:data!");
	            const prf = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.prf:string!");
	            const algorithm = prf.split("-").pop();
	            (0, index_js_4.assertArgument)(algorithm === "sha256" || algorithm === "sha512", "invalid kdf.pdf", "kdf.pdf", prf);
	            const count = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.c:int!");
	            const dkLen = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.dklen:int!");
	            (0, index_js_4.assertArgument)(dkLen === 32, "invalid kdf.dklen", "kdf.dklen", dkLen);
	            return { name: "pbkdf2", salt, count, dkLen, algorithm };
	        }
	    }
	    (0, index_js_4.assertArgument)(false, "unsupported key-derivation function", "kdf", kdf);
	}
	/**
	 *  Returns the account details for the JSON Keystore Wallet %%json%%
	 *  using %%password%%.
	 *
	 *  It is preferred to use the [async version](decryptKeystoreJson)
	 *  instead, which allows a [[ProgressCallback]] to keep the user informed
	 *  as to the decryption status.
	 *
	 *  This method will block the event loop (freezing all UI) until decryption
	 *  is complete, which can take quite some time, depending on the wallet
	 *  paramters and platform.
	 */
	function decryptKeystoreJsonSync(json, _password) {
	    const data = JSON.parse(json);
	    const password = (0, utils_js_1.getPassword)(_password);
	    const params = getDecryptKdfParams(data);
	    if (params.name === "pbkdf2") {
	        const { salt, count, dkLen, algorithm } = params;
	        const key = (0, index_js_2.pbkdf2)(password, salt, count, dkLen, algorithm);
	        return getAccount(data, key);
	    }
	    (0, index_js_4.assert)(params.name === "scrypt", "cannot be reached", "UNKNOWN_ERROR", { params });
	    const { salt, N, r, p, dkLen } = params;
	    const key = (0, index_js_2.scryptSync)(password, salt, N, r, p, dkLen);
	    return getAccount(data, key);
	}
	jsonKeystore.decryptKeystoreJsonSync = decryptKeystoreJsonSync;
	function stall(duration) {
	    return new Promise((resolve) => { setTimeout(() => { resolve(); }, duration); });
	}
	/**
	 *  Resolves to the decrypted JSON Keystore Wallet %%json%% using the
	 *  %%password%%.
	 *
	 *  If provided, %%progress%% will be called periodically during the
	 *  decrpytion to provide feedback, and if the function returns
	 *  ``false`` will halt decryption.
	 *
	 *  The %%progressCallback%% will **always** receive ``0`` before
	 *  decryption begins and ``1`` when complete.
	 */
	async function decryptKeystoreJson(json, _password, progress) {
	    const data = JSON.parse(json);
	    const password = (0, utils_js_1.getPassword)(_password);
	    const params = getDecryptKdfParams(data);
	    if (params.name === "pbkdf2") {
	        if (progress) {
	            progress(0);
	            await stall(0);
	        }
	        const { salt, count, dkLen, algorithm } = params;
	        const key = (0, index_js_2.pbkdf2)(password, salt, count, dkLen, algorithm);
	        if (progress) {
	            progress(1);
	            await stall(0);
	        }
	        return getAccount(data, key);
	    }
	    (0, index_js_4.assert)(params.name === "scrypt", "cannot be reached", "UNKNOWN_ERROR", { params });
	    const { salt, N, r, p, dkLen } = params;
	    const key = await (0, index_js_2.scrypt)(password, salt, N, r, p, dkLen, progress);
	    return getAccount(data, key);
	}
	jsonKeystore.decryptKeystoreJson = decryptKeystoreJson;
	function getEncryptKdfParams(options) {
	    // Check/generate the salt
	    const salt = (options.salt != null) ? (0, index_js_4.getBytes)(options.salt, "options.salt") : (0, index_js_2.randomBytes)(32);
	    // Override the scrypt password-based key derivation function parameters
	    let N = (1 << 17), r = 8, p = 1;
	    if (options.scrypt) {
	        if (options.scrypt.N) {
	            N = options.scrypt.N;
	        }
	        if (options.scrypt.r) {
	            r = options.scrypt.r;
	        }
	        if (options.scrypt.p) {
	            p = options.scrypt.p;
	        }
	    }
	    (0, index_js_4.assertArgument)(typeof (N) === "number" && N > 0 && Number.isSafeInteger(N) && (BigInt(N) & BigInt(N - 1)) === BigInt(0), "invalid scrypt N parameter", "options.N", N);
	    (0, index_js_4.assertArgument)(typeof (r) === "number" && r > 0 && Number.isSafeInteger(r), "invalid scrypt r parameter", "options.r", r);
	    (0, index_js_4.assertArgument)(typeof (p) === "number" && p > 0 && Number.isSafeInteger(p), "invalid scrypt p parameter", "options.p", p);
	    return { name: "scrypt", dkLen: 32, salt, N, r, p };
	}
	function _encryptKeystore(key, kdf, account, options) {
	    const privateKey = (0, index_js_4.getBytes)(account.privateKey, "privateKey");
	    // Override initialization vector
	    const iv = (options.iv != null) ? (0, index_js_4.getBytes)(options.iv, "options.iv") : (0, index_js_2.randomBytes)(16);
	    (0, index_js_4.assertArgument)(iv.length === 16, "invalid options.iv length", "options.iv", options.iv);
	    // Override the uuid
	    const uuidRandom = (options.uuid != null) ? (0, index_js_4.getBytes)(options.uuid, "options.uuid") : (0, index_js_2.randomBytes)(16);
	    (0, index_js_4.assertArgument)(uuidRandom.length === 16, "invalid options.uuid length", "options.uuid", options.iv);
	    // This will be used to encrypt the wallet (as per Web3 secret storage)
	    // - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)
	    // - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)
	    const derivedKey = key.slice(0, 16);
	    const macPrefix = key.slice(16, 32);
	    // Encrypt the private key
	    const aesCtr = new aes_js_1.CTR(derivedKey, iv);
	    const ciphertext = (0, index_js_4.getBytes)(aesCtr.encrypt(privateKey));
	    // Compute the message authentication code, used to check the password
	    const mac = (0, index_js_2.keccak256)((0, index_js_4.concat)([macPrefix, ciphertext]));
	    // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition
	    const data = {
	        address: account.address.substring(2).toLowerCase(),
	        id: (0, index_js_4.uuidV4)(uuidRandom),
	        version: 3,
	        Crypto: {
	            cipher: "aes-128-ctr",
	            cipherparams: {
	                iv: (0, index_js_4.hexlify)(iv).substring(2),
	            },
	            ciphertext: (0, index_js_4.hexlify)(ciphertext).substring(2),
	            kdf: "scrypt",
	            kdfparams: {
	                salt: (0, index_js_4.hexlify)(kdf.salt).substring(2),
	                n: kdf.N,
	                dklen: 32,
	                p: kdf.p,
	                r: kdf.r
	            },
	            mac: mac.substring(2)
	        }
	    };
	    // If we have a mnemonic, encrypt it into the JSON wallet
	    if (account.mnemonic) {
	        const client = (options.client != null) ? options.client : `ethers/${_version_js_1.version}`;
	        const path = account.mnemonic.path || defaultPath;
	        const locale = account.mnemonic.locale || "en";
	        const mnemonicKey = key.slice(32, 64);
	        const entropy = (0, index_js_4.getBytes)(account.mnemonic.entropy, "account.mnemonic.entropy");
	        const mnemonicIv = (0, index_js_2.randomBytes)(16);
	        const mnemonicAesCtr = new aes_js_1.CTR(mnemonicKey, mnemonicIv);
	        const mnemonicCiphertext = (0, index_js_4.getBytes)(mnemonicAesCtr.encrypt(entropy));
	        const now = new Date();
	        const timestamp = (now.getUTCFullYear() + "-" +
	            (0, utils_js_1.zpad)(now.getUTCMonth() + 1, 2) + "-" +
	            (0, utils_js_1.zpad)(now.getUTCDate(), 2) + "T" +
	            (0, utils_js_1.zpad)(now.getUTCHours(), 2) + "-" +
	            (0, utils_js_1.zpad)(now.getUTCMinutes(), 2) + "-" +
	            (0, utils_js_1.zpad)(now.getUTCSeconds(), 2) + ".0Z");
	        const gethFilename = ("UTC--" + timestamp + "--" + data.address);
	        data["x-ethers"] = {
	            client, gethFilename, path, locale,
	            mnemonicCounter: (0, index_js_4.hexlify)(mnemonicIv).substring(2),
	            mnemonicCiphertext: (0, index_js_4.hexlify)(mnemonicCiphertext).substring(2),
	            version: "0.1"
	        };
	    }
	    return JSON.stringify(data);
	}
	/**
	 *  Return the JSON Keystore Wallet for %%account%% encrypted with
	 *  %%password%%.
	 *
	 *  The %%options%% can be used to tune the password-based key
	 *  derivation function parameters, explicitly set the random values
	 *  used. Any provided [[ProgressCallback]] is ignord.
	 */
	function encryptKeystoreJsonSync(account, password, options) {
	    if (options == null) {
	        options = {};
	    }
	    const passwordBytes = (0, utils_js_1.getPassword)(password);
	    const kdf = getEncryptKdfParams(options);
	    const key = (0, index_js_2.scryptSync)(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64);
	    return _encryptKeystore((0, index_js_4.getBytes)(key), kdf, account, options);
	}
	jsonKeystore.encryptKeystoreJsonSync = encryptKeystoreJsonSync;
	/**
	 *  Resolved to the JSON Keystore Wallet for %%account%% encrypted
	 *  with %%password%%.
	 *
	 *  The %%options%% can be used to tune the password-based key
	 *  derivation function parameters, explicitly set the random values
	 *  used and provide a [[ProgressCallback]] to receive periodic updates
	 *  on the completion status..
	 */
	async function encryptKeystoreJson(account, password, options) {
	    if (options == null) {
	        options = {};
	    }
	    const passwordBytes = (0, utils_js_1.getPassword)(password);
	    const kdf = getEncryptKdfParams(options);
	    const key = await (0, index_js_2.scrypt)(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64, options.progressCallback);
	    return _encryptKeystore((0, index_js_4.getBytes)(key), kdf, account, options);
	}
	jsonKeystore.encryptKeystoreJson = encryptKeystoreJson;
	
	return jsonKeystore;
}

var hasRequiredHdwallet;

function requireHdwallet () {
	if (hasRequiredHdwallet) return hdwallet;
	hasRequiredHdwallet = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.getIndexedAccountPath = exports.getAccountPath = exports.HDNodeVoidWallet = exports.HDNodeWallet = exports.defaultPath = void 0;
		/**
		 *  Explain HD Wallets..
		 *
		 *  @_subsection: api/wallet:HD Wallets  [hd-wallets]
		 */
		const index_js_1 = requireCrypto();
		const index_js_2 = requireProviders();
		const index_js_3 = requireTransaction();
		const index_js_4 = requireUtils$3();
		const lang_en_js_1 = requireLangEn();
		const base_wallet_js_1 = requireBaseWallet();
		const mnemonic_js_1 = requireMnemonic();
		const json_keystore_js_1 = requireJsonKeystore();
		/**
		 *  The default derivation path for Ethereum HD Nodes. (i.e. ``"m/44'/60'/0'/0/0"``)
		 */
		exports.defaultPath = "m/44'/60'/0'/0/0";
		// "Bitcoin seed"
		const MasterSecret = new Uint8Array([66, 105, 116, 99, 111, 105, 110, 32, 115, 101, 101, 100]);
		const HardenedBit = 0x80000000;
		const N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
		const Nibbles = "0123456789abcdef";
		function zpad(value, length) {
		    let result = "";
		    while (value) {
		        result = Nibbles[value % 16] + result;
		        value = Math.trunc(value / 16);
		    }
		    while (result.length < length * 2) {
		        result = "0" + result;
		    }
		    return "0x" + result;
		}
		function encodeBase58Check(_value) {
		    const value = (0, index_js_4.getBytes)(_value);
		    const check = (0, index_js_4.dataSlice)((0, index_js_1.sha256)((0, index_js_1.sha256)(value)), 0, 4);
		    const bytes = (0, index_js_4.concat)([value, check]);
		    return (0, index_js_4.encodeBase58)(bytes);
		}
		const _guard = {};
		function ser_I(index, chainCode, publicKey, privateKey) {
		    const data = new Uint8Array(37);
		    if (index & HardenedBit) {
		        (0, index_js_4.assert)(privateKey != null, "cannot derive child of neutered node", "UNSUPPORTED_OPERATION", {
		            operation: "deriveChild"
		        });
		        // Data = 0x00 || ser_256(k_par)
		        data.set((0, index_js_4.getBytes)(privateKey), 1);
		    }
		    else {
		        // Data = ser_p(point(k_par))
		        data.set((0, index_js_4.getBytes)(publicKey));
		    }
		    // Data += ser_32(i)
		    for (let i = 24; i >= 0; i -= 8) {
		        data[33 + (i >> 3)] = ((index >> (24 - i)) & 0xff);
		    }
		    const I = (0, index_js_4.getBytes)((0, index_js_1.computeHmac)("sha512", chainCode, data));
		    return { IL: I.slice(0, 32), IR: I.slice(32) };
		}
		function derivePath(node, path) {
		    const components = path.split("/");
		    (0, index_js_4.assertArgument)(components.length > 0, "invalid path", "path", path);
		    if (components[0] === "m") {
		        (0, index_js_4.assertArgument)(node.depth === 0, `cannot derive root path (i.e. path starting with "m/") for a node at non-zero depth ${node.depth}`, "path", path);
		        components.shift();
		    }
		    let result = node;
		    for (let i = 0; i < components.length; i++) {
		        const component = components[i];
		        if (component.match(/^[0-9]+'$/)) {
		            const index = parseInt(component.substring(0, component.length - 1));
		            (0, index_js_4.assertArgument)(index < HardenedBit, "invalid path index", `path[${i}]`, component);
		            result = result.deriveChild(HardenedBit + index);
		        }
		        else if (component.match(/^[0-9]+$/)) {
		            const index = parseInt(component);
		            (0, index_js_4.assertArgument)(index < HardenedBit, "invalid path index", `path[${i}]`, component);
		            result = result.deriveChild(index);
		        }
		        else {
		            (0, index_js_4.assertArgument)(false, "invalid path component", `path[${i}]`, component);
		        }
		    }
		    return result;
		}
		/**
		 *  An **HDNodeWallet** is a [[Signer]] backed by the private key derived
		 *  from an HD Node using the [[link-bip-32]] stantard.
		 *
		 *  An HD Node forms a hierarchal structure with each HD Node having a
		 *  private key and the ability to derive child HD Nodes, defined by
		 *  a path indicating the index of each child.
		 */
		class HDNodeWallet extends base_wallet_js_1.BaseWallet {
		    /**
		     *  The compressed public key.
		     */
		    publicKey;
		    /**
		     *  The fingerprint.
		     *
		     *  A fingerprint allows quick qay to detect parent and child nodes,
		     *  but developers should be prepared to deal with collisions as it
		     *  is only 4 bytes.
		     */
		    fingerprint;
		    /**
		     *  The parent fingerprint.
		     */
		    parentFingerprint;
		    /**
		     *  The mnemonic used to create this HD Node, if available.
		     *
		     *  Sources such as extended keys do not encode the mnemonic, in
		     *  which case this will be ``null``.
		     */
		    mnemonic;
		    /**
		     *  The chaincode, which is effectively a public key used
		     *  to derive children.
		     */
		    chainCode;
		    /**
		     *  The derivation path of this wallet.
		     *
		     *  Since extended keys do not provider full path details, this
		     *  may be ``null``, if instantiated from a source that does not
		     *  enocde it.
		     */
		    path;
		    /**
		     *  The child index of this wallet. Values over ``2 *\* 31`` indicate
		     *  the node is hardened.
		     */
		    index;
		    /**
		     *  The depth of this wallet, which is the number of components
		     *  in its path.
		     */
		    depth;
		    /**
		     *  @private
		     */
		    constructor(guard, signingKey, parentFingerprint, chainCode, path, index, depth, mnemonic, provider) {
		        super(signingKey, provider);
		        (0, index_js_4.assertPrivate)(guard, _guard, "HDNodeWallet");
		        (0, index_js_4.defineProperties)(this, { publicKey: signingKey.compressedPublicKey });
		        const fingerprint = (0, index_js_4.dataSlice)((0, index_js_1.ripemd160)((0, index_js_1.sha256)(this.publicKey)), 0, 4);
		        (0, index_js_4.defineProperties)(this, {
		            parentFingerprint, fingerprint,
		            chainCode, path, index, depth
		        });
		        (0, index_js_4.defineProperties)(this, { mnemonic });
		    }
		    connect(provider) {
		        return new HDNodeWallet(_guard, this.signingKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.mnemonic, provider);
		    }
		    #account() {
		        const account = { address: this.address, privateKey: this.privateKey };
		        const m = this.mnemonic;
		        if (this.path && m && m.wordlist.locale === "en" && m.password === "") {
		            account.mnemonic = {
		                path: this.path,
		                locale: "en",
		                entropy: m.entropy
		            };
		        }
		        return account;
		    }
		    /**
		     *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with
		     *  %%password%%.
		     *
		     *  If %%progressCallback%% is specified, it will receive periodic
		     *  updates as the encryption process progreses.
		     */
		    async encrypt(password, progressCallback) {
		        return await (0, json_keystore_js_1.encryptKeystoreJson)(this.#account(), password, { progressCallback });
		    }
		    /**
		     *  Returns a [JSON Keystore Wallet](json-wallets) encryped with
		     *  %%password%%.
		     *
		     *  It is preferred to use the [async version](encrypt) instead,
		     *  which allows a [[ProgressCallback]] to keep the user informed.
		     *
		     *  This method will block the event loop (freezing all UI) until
		     *  it is complete, which may be a non-trivial duration.
		     */
		    encryptSync(password) {
		        return (0, json_keystore_js_1.encryptKeystoreJsonSync)(this.#account(), password);
		    }
		    /**
		     *  The extended key.
		     *
		     *  This key will begin with the prefix ``xpriv`` and can be used to
		     *  reconstruct this HD Node to derive its children.
		     */
		    get extendedKey() {
		        // We only support the mainnet values for now, but if anyone needs
		        // testnet values, let me know. I believe current sentiment is that
		        // we should always use mainnet, and use BIP-44 to derive the network
		        //   - Mainnet: public=0x0488B21E, private=0x0488ADE4
		        //   - Testnet: public=0x043587CF, private=0x04358394
		        (0, index_js_4.assert)(this.depth < 256, "Depth too deep", "UNSUPPORTED_OPERATION", { operation: "extendedKey" });
		        return encodeBase58Check((0, index_js_4.concat)([
		            "0x0488ADE4", zpad(this.depth, 1), this.parentFingerprint,
		            zpad(this.index, 4), this.chainCode,
		            (0, index_js_4.concat)(["0x00", this.privateKey])
		        ]));
		    }
		    /**
		     *  Returns true if this wallet has a path, providing a Type Guard
		     *  that the path is non-null.
		     */
		    hasPath() { return (this.path != null); }
		    /**
		     *  Returns a neutered HD Node, which removes the private details
		     *  of an HD Node.
		     *
		     *  A neutered node has no private key, but can be used to derive
		     *  child addresses and other public data about the HD Node.
		     */
		    neuter() {
		        return new HDNodeVoidWallet(_guard, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.provider);
		    }
		    /**
		     *  Return the child for %%index%%.
		     */
		    deriveChild(_index) {
		        const index = (0, index_js_4.getNumber)(_index, "index");
		        (0, index_js_4.assertArgument)(index <= 0xffffffff, "invalid index", "index", index);
		        // Base path
		        let path = this.path;
		        if (path) {
		            path += "/" + (index & ~HardenedBit);
		            if (index & HardenedBit) {
		                path += "'";
		            }
		        }
		        const { IR, IL } = ser_I(index, this.chainCode, this.publicKey, this.privateKey);
		        const ki = new index_js_1.SigningKey((0, index_js_4.toBeHex)(((0, index_js_4.toBigInt)(IL) + BigInt(this.privateKey)) % N, 32));
		        return new HDNodeWallet(_guard, ki, this.fingerprint, (0, index_js_4.hexlify)(IR), path, index, this.depth + 1, this.mnemonic, this.provider);
		    }
		    /**
		     *  Return the HDNode for %%path%% from this node.
		     */
		    derivePath(path) {
		        return derivePath(this, path);
		    }
		    static #fromSeed(_seed, mnemonic) {
		        (0, index_js_4.assertArgument)((0, index_js_4.isBytesLike)(_seed), "invalid seed", "seed", "[REDACTED]");
		        const seed = (0, index_js_4.getBytes)(_seed, "seed");
		        (0, index_js_4.assertArgument)(seed.length >= 16 && seed.length <= 64, "invalid seed", "seed", "[REDACTED]");
		        const I = (0, index_js_4.getBytes)((0, index_js_1.computeHmac)("sha512", MasterSecret, seed));
		        const signingKey = new index_js_1.SigningKey((0, index_js_4.hexlify)(I.slice(0, 32)));
		        return new HDNodeWallet(_guard, signingKey, "0x00000000", (0, index_js_4.hexlify)(I.slice(32)), "m", 0, 0, mnemonic, null);
		    }
		    /**
		     *  Creates a new HD Node from %%extendedKey%%.
		     *
		     *  If the %%extendedKey%% will either have a prefix or ``xpub`` or
		     *  ``xpriv``, returning a neutered HD Node ([[HDNodeVoidWallet]])
		     *  or full HD Node ([[HDNodeWallet) respectively.
		     */
		    static fromExtendedKey(extendedKey) {
		        const bytes = (0, index_js_4.toBeArray)((0, index_js_4.decodeBase58)(extendedKey)); // @TODO: redact
		        (0, index_js_4.assertArgument)(bytes.length === 82 || encodeBase58Check(bytes.slice(0, 78)) === extendedKey, "invalid extended key", "extendedKey", "[ REDACTED ]");
		        const depth = bytes[4];
		        const parentFingerprint = (0, index_js_4.hexlify)(bytes.slice(5, 9));
		        const index = parseInt((0, index_js_4.hexlify)(bytes.slice(9, 13)).substring(2), 16);
		        const chainCode = (0, index_js_4.hexlify)(bytes.slice(13, 45));
		        const key = bytes.slice(45, 78);
		        switch ((0, index_js_4.hexlify)(bytes.slice(0, 4))) {
		            // Public Key
		            case "0x0488b21e":
		            case "0x043587cf": {
		                const publicKey = (0, index_js_4.hexlify)(key);
		                return new HDNodeVoidWallet(_guard, (0, index_js_3.computeAddress)(publicKey), publicKey, parentFingerprint, chainCode, null, index, depth, null);
		            }
		            // Private Key
		            case "0x0488ade4":
		            case "0x04358394 ":
		                if (key[0] !== 0) {
		                    break;
		                }
		                return new HDNodeWallet(_guard, new index_js_1.SigningKey(key.slice(1)), parentFingerprint, chainCode, null, index, depth, null, null);
		        }
		        (0, index_js_4.assertArgument)(false, "invalid extended key prefix", "extendedKey", "[ REDACTED ]");
		    }
		    /**
		     *  Creates a new random HDNode.
		     */
		    static createRandom(password, path, wordlist) {
		        if (password == null) {
		            password = "";
		        }
		        if (path == null) {
		            path = exports.defaultPath;
		        }
		        if (wordlist == null) {
		            wordlist = lang_en_js_1.LangEn.wordlist();
		        }
		        const mnemonic = mnemonic_js_1.Mnemonic.fromEntropy((0, index_js_1.randomBytes)(16), password, wordlist);
		        return HDNodeWallet.#fromSeed(mnemonic.computeSeed(), mnemonic).derivePath(path);
		    }
		    /**
		     *  Create an HD Node from %%mnemonic%%.
		     */
		    static fromMnemonic(mnemonic, path) {
		        if (!path) {
		            path = exports.defaultPath;
		        }
		        return HDNodeWallet.#fromSeed(mnemonic.computeSeed(), mnemonic).derivePath(path);
		    }
		    /**
		     *  Creates an HD Node from a mnemonic %%phrase%%.
		     */
		    static fromPhrase(phrase, password, path, wordlist) {
		        if (password == null) {
		            password = "";
		        }
		        if (path == null) {
		            path = exports.defaultPath;
		        }
		        if (wordlist == null) {
		            wordlist = lang_en_js_1.LangEn.wordlist();
		        }
		        const mnemonic = mnemonic_js_1.Mnemonic.fromPhrase(phrase, password, wordlist);
		        return HDNodeWallet.#fromSeed(mnemonic.computeSeed(), mnemonic).derivePath(path);
		    }
		    /**
		     *  Creates an HD Node from a %%seed%%.
		     */
		    static fromSeed(seed) {
		        return HDNodeWallet.#fromSeed(seed, null);
		    }
		}
		exports.HDNodeWallet = HDNodeWallet;
		/**
		 *  A **HDNodeVoidWallet** cannot sign, but provides access to
		 *  the children nodes of a [[link-bip-32]] HD wallet addresses.
		 *
		 *  The can be created by using an extended ``xpub`` key to
		 *  [[HDNodeWallet_fromExtendedKey]] or by
		 *  [nuetering](HDNodeWallet-neuter) a [[HDNodeWallet]].
		 */
		class HDNodeVoidWallet extends index_js_2.VoidSigner {
		    /**
		     *  The compressed public key.
		     */
		    publicKey;
		    /**
		     *  The fingerprint.
		     *
		     *  A fingerprint allows quick qay to detect parent and child nodes,
		     *  but developers should be prepared to deal with collisions as it
		     *  is only 4 bytes.
		     */
		    fingerprint;
		    /**
		     *  The parent node fingerprint.
		     */
		    parentFingerprint;
		    /**
		     *  The chaincode, which is effectively a public key used
		     *  to derive children.
		     */
		    chainCode;
		    /**
		     *  The derivation path of this wallet.
		     *
		     *  Since extended keys do not provider full path details, this
		     *  may be ``null``, if instantiated from a source that does not
		     *  enocde it.
		     */
		    path;
		    /**
		     *  The child index of this wallet. Values over ``2 *\* 31`` indicate
		     *  the node is hardened.
		     */
		    index;
		    /**
		     *  The depth of this wallet, which is the number of components
		     *  in its path.
		     */
		    depth;
		    /**
		     *  @private
		     */
		    constructor(guard, address, publicKey, parentFingerprint, chainCode, path, index, depth, provider) {
		        super(address, provider);
		        (0, index_js_4.assertPrivate)(guard, _guard, "HDNodeVoidWallet");
		        (0, index_js_4.defineProperties)(this, { publicKey });
		        const fingerprint = (0, index_js_4.dataSlice)((0, index_js_1.ripemd160)((0, index_js_1.sha256)(publicKey)), 0, 4);
		        (0, index_js_4.defineProperties)(this, {
		            publicKey, fingerprint, parentFingerprint, chainCode, path, index, depth
		        });
		    }
		    connect(provider) {
		        return new HDNodeVoidWallet(_guard, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, provider);
		    }
		    /**
		     *  The extended key.
		     *
		     *  This key will begin with the prefix ``xpub`` and can be used to
		     *  reconstruct this neutered key to derive its children addresses.
		     */
		    get extendedKey() {
		        // We only support the mainnet values for now, but if anyone needs
		        // testnet values, let me know. I believe current sentiment is that
		        // we should always use mainnet, and use BIP-44 to derive the network
		        //   - Mainnet: public=0x0488B21E, private=0x0488ADE4
		        //   - Testnet: public=0x043587CF, private=0x04358394
		        (0, index_js_4.assert)(this.depth < 256, "Depth too deep", "UNSUPPORTED_OPERATION", { operation: "extendedKey" });
		        return encodeBase58Check((0, index_js_4.concat)([
		            "0x0488B21E",
		            zpad(this.depth, 1),
		            this.parentFingerprint,
		            zpad(this.index, 4),
		            this.chainCode,
		            this.publicKey,
		        ]));
		    }
		    /**
		     *  Returns true if this wallet has a path, providing a Type Guard
		     *  that the path is non-null.
		     */
		    hasPath() { return (this.path != null); }
		    /**
		     *  Return the child for %%index%%.
		     */
		    deriveChild(_index) {
		        const index = (0, index_js_4.getNumber)(_index, "index");
		        (0, index_js_4.assertArgument)(index <= 0xffffffff, "invalid index", "index", index);
		        // Base path
		        let path = this.path;
		        if (path) {
		            path += "/" + (index & ~HardenedBit);
		            if (index & HardenedBit) {
		                path += "'";
		            }
		        }
		        const { IR, IL } = ser_I(index, this.chainCode, this.publicKey, null);
		        const Ki = index_js_1.SigningKey.addPoints(IL, this.publicKey, true);
		        const address = (0, index_js_3.computeAddress)(Ki);
		        return new HDNodeVoidWallet(_guard, address, Ki, this.fingerprint, (0, index_js_4.hexlify)(IR), path, index, this.depth + 1, this.provider);
		    }
		    /**
		     *  Return the signer for %%path%% from this node.
		     */
		    derivePath(path) {
		        return derivePath(this, path);
		    }
		}
		exports.HDNodeVoidWallet = HDNodeVoidWallet;
		/*
		export class HDNodeWalletManager {
		    #root: HDNodeWallet;

		    constructor(phrase: string, password?: null | string, path?: null | string, locale?: null | Wordlist) {
		        if (password == null) { password = ""; }
		        if (path == null) { path = "m/44'/60'/0'/0"; }
		        if (locale == null) { locale = LangEn.wordlist(); }
		        this.#root = HDNodeWallet.fromPhrase(phrase, password, path, locale);
		    }

		    getSigner(index?: number): HDNodeWallet {
		        return this.#root.deriveChild((index == null) ? 0: index);
		    }
		}
		*/
		/**
		 *  Returns the [[link-bip-32]] path for the account at %%index%%.
		 *
		 *  This is the pattern used by wallets like Ledger.
		 *
		 *  There is also an [alternate pattern](getIndexedAccountPath) used by
		 *  some software.
		 */
		function getAccountPath(_index) {
		    const index = (0, index_js_4.getNumber)(_index, "index");
		    (0, index_js_4.assertArgument)(index >= 0 && index < HardenedBit, "invalid account index", "index", index);
		    return `m/44'/60'/${index}'/0/0`;
		}
		exports.getAccountPath = getAccountPath;
		/**
		 *  Returns the path using an alternative pattern for deriving accounts,
		 *  at %%index%%.
		 *
		 *  This derivation path uses the //index// component rather than the
		 *  //account// component to derive sequential accounts.
		 *
		 *  This is the pattern used by wallets like MetaMask.
		 */
		function getIndexedAccountPath(_index) {
		    const index = (0, index_js_4.getNumber)(_index, "index");
		    (0, index_js_4.assertArgument)(index >= 0 && index < HardenedBit, "invalid account index", "index", index);
		    return `m/44'/60'/0'/0/${index}`;
		}
		exports.getIndexedAccountPath = getIndexedAccountPath;
		
	} (hdwallet));
	return hdwallet;
}

var jsonCrowdsale = {};

var hasRequiredJsonCrowdsale;

function requireJsonCrowdsale () {
	if (hasRequiredJsonCrowdsale) return jsonCrowdsale;
	hasRequiredJsonCrowdsale = 1;
	/**
	 *  @_subsection: api/wallet:JSON Wallets  [json-wallets]
	 */
	Object.defineProperty(jsonCrowdsale, "__esModule", { value: true });
	jsonCrowdsale.decryptCrowdsaleJson = jsonCrowdsale.isCrowdsaleJson = void 0;
	const aes_js_1 = requireLib_commonjs();
	const index_js_1 = requireAddress$2();
	const index_js_2 = requireCrypto();
	const index_js_3 = requireHash();
	const index_js_4 = requireUtils$3();
	const utils_js_1 = requireUtils();
	/**
	 *  Returns true if %%json%% is a valid JSON Crowdsale wallet.
	 */
	function isCrowdsaleJson(json) {
	    try {
	        const data = JSON.parse(json);
	        if (data.encseed) {
	            return true;
	        }
	    }
	    catch (error) { }
	    return false;
	}
	jsonCrowdsale.isCrowdsaleJson = isCrowdsaleJson;
	// See: https://github.com/ethereum/pyethsaletool
	/**
	 *  Before Ethereum launched, it was necessary to create a wallet
	 *  format for backers to use, which would be used to receive ether
	 *  as a reward for contributing to the project.
	 *
	 *  The [[link-crowdsale]] format is now obsolete, but it is still
	 *  useful to support and the additional code is fairly trivial as
	 *  all the primitives required are used through core portions of
	 *  the library.
	 */
	function decryptCrowdsaleJson(json, _password) {
	    const data = JSON.parse(json);
	    const password = (0, utils_js_1.getPassword)(_password);
	    // Ethereum Address
	    const address = (0, index_js_1.getAddress)((0, utils_js_1.spelunk)(data, "ethaddr:string!"));
	    // Encrypted Seed
	    const encseed = (0, utils_js_1.looseArrayify)((0, utils_js_1.spelunk)(data, "encseed:string!"));
	    (0, index_js_4.assertArgument)(encseed && (encseed.length % 16) === 0, "invalid encseed", "json", json);
	    const key = (0, index_js_4.getBytes)((0, index_js_2.pbkdf2)(password, password, 2000, 32, "sha256")).slice(0, 16);
	    const iv = encseed.slice(0, 16);
	    const encryptedSeed = encseed.slice(16);
	    // Decrypt the seed
	    const aesCbc = new aes_js_1.CBC(key, iv);
	    const seed = (0, aes_js_1.pkcs7Strip)((0, index_js_4.getBytes)(aesCbc.decrypt(encryptedSeed)));
	    // This wallet format is weird... Convert the binary encoded hex to a string.
	    let seedHex = "";
	    for (let i = 0; i < seed.length; i++) {
	        seedHex += String.fromCharCode(seed[i]);
	    }
	    return { address, privateKey: (0, index_js_3.id)(seedHex) };
	}
	jsonCrowdsale.decryptCrowdsaleJson = decryptCrowdsaleJson;
	
	return jsonCrowdsale;
}

var wallet = {};

var hasRequiredWallet$1;

function requireWallet$1 () {
	if (hasRequiredWallet$1) return wallet;
	hasRequiredWallet$1 = 1;
	Object.defineProperty(wallet, "__esModule", { value: true });
	wallet.Wallet = void 0;
	const index_js_1 = requireCrypto();
	const index_js_2 = requireUtils$3();
	const base_wallet_js_1 = requireBaseWallet();
	const hdwallet_js_1 = requireHdwallet();
	const json_crowdsale_js_1 = requireJsonCrowdsale();
	const json_keystore_js_1 = requireJsonKeystore();
	const mnemonic_js_1 = requireMnemonic();
	function stall(duration) {
	    return new Promise((resolve) => { setTimeout(() => { resolve(); }, duration); });
	}
	/**
	 *  A **Wallet** manages a single private key which is used to sign
	 *  transactions, messages and other common payloads.
	 *
	 *  This class is generally the main entry point for developers
	 *  that wish to use a private key directly, as it can create
	 *  instances from a large variety of common sources, including
	 *  raw private key, [[link-bip-39]] mnemonics and encrypte JSON
	 *  wallets.
	 */
	class Wallet extends base_wallet_js_1.BaseWallet {
	    /**
	     *  Create a new wallet for the private %%key%%, optionally connected
	     *  to %%provider%%.
	     */
	    constructor(key, provider) {
	        if (typeof (key) === "string" && !key.startsWith("0x")) {
	            key = "0x" + key;
	        }
	        let signingKey = (typeof (key) === "string") ? new index_js_1.SigningKey(key) : key;
	        super(signingKey, provider);
	    }
	    connect(provider) {
	        return new Wallet(this.signingKey, provider);
	    }
	    /**
	     *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with
	     *  %%password%%.
	     *
	     *  If %%progressCallback%% is specified, it will receive periodic
	     *  updates as the encryption process progreses.
	     */
	    async encrypt(password, progressCallback) {
	        const account = { address: this.address, privateKey: this.privateKey };
	        return await (0, json_keystore_js_1.encryptKeystoreJson)(account, password, { progressCallback });
	    }
	    /**
	     *  Returns a [JSON Keystore Wallet](json-wallets) encryped with
	     *  %%password%%.
	     *
	     *  It is preferred to use the [async version](encrypt) instead,
	     *  which allows a [[ProgressCallback]] to keep the user informed.
	     *
	     *  This method will block the event loop (freezing all UI) until
	     *  it is complete, which may be a non-trivial duration.
	     */
	    encryptSync(password) {
	        const account = { address: this.address, privateKey: this.privateKey };
	        return (0, json_keystore_js_1.encryptKeystoreJsonSync)(account, password);
	    }
	    static #fromAccount(account) {
	        (0, index_js_2.assertArgument)(account, "invalid JSON wallet", "json", "[ REDACTED ]");
	        if ("mnemonic" in account && account.mnemonic && account.mnemonic.locale === "en") {
	            const mnemonic = mnemonic_js_1.Mnemonic.fromEntropy(account.mnemonic.entropy);
	            const wallet = hdwallet_js_1.HDNodeWallet.fromMnemonic(mnemonic, account.mnemonic.path);
	            if (wallet.address === account.address && wallet.privateKey === account.privateKey) {
	                return wallet;
	            }
	            console.log("WARNING: JSON mismatch address/privateKey != mnemonic; fallback onto private key");
	        }
	        const wallet = new Wallet(account.privateKey);
	        (0, index_js_2.assertArgument)(wallet.address === account.address, "address/privateKey mismatch", "json", "[ REDACTED ]");
	        return wallet;
	    }
	    /**
	     *  Creates (asynchronously) a **Wallet** by decrypting the %%json%%
	     *  with %%password%%.
	     *
	     *  If %%progress%% is provided, it is called periodically during
	     *  decryption so that any UI can be updated.
	     */
	    static async fromEncryptedJson(json, password, progress) {
	        let account = null;
	        if ((0, json_keystore_js_1.isKeystoreJson)(json)) {
	            account = await (0, json_keystore_js_1.decryptKeystoreJson)(json, password, progress);
	        }
	        else if ((0, json_crowdsale_js_1.isCrowdsaleJson)(json)) {
	            if (progress) {
	                progress(0);
	                await stall(0);
	            }
	            account = (0, json_crowdsale_js_1.decryptCrowdsaleJson)(json, password);
	            if (progress) {
	                progress(1);
	                await stall(0);
	            }
	        }
	        return Wallet.#fromAccount(account);
	    }
	    /**
	     *  Creates a **Wallet** by decrypting the %%json%% with %%password%%.
	     *
	     *  The [[fromEncryptedJson]] method is preferred, as this method
	     *  will lock up and freeze the UI during decryption, which may take
	     *  some time.
	     */
	    static fromEncryptedJsonSync(json, password) {
	        let account = null;
	        if ((0, json_keystore_js_1.isKeystoreJson)(json)) {
	            account = (0, json_keystore_js_1.decryptKeystoreJsonSync)(json, password);
	        }
	        else if ((0, json_crowdsale_js_1.isCrowdsaleJson)(json)) {
	            account = (0, json_crowdsale_js_1.decryptCrowdsaleJson)(json, password);
	        }
	        else {
	            (0, index_js_2.assertArgument)(false, "invalid JSON wallet", "json", "[ REDACTED ]");
	        }
	        return Wallet.#fromAccount(account);
	    }
	    /**
	     *  Creates a new random [[HDNodeWallet]] using the available
	     *  [cryptographic random source](randomBytes).
	     *
	     *  If there is no crytographic random source, this will throw.
	     */
	    static createRandom(provider) {
	        const wallet = hdwallet_js_1.HDNodeWallet.createRandom();
	        if (provider) {
	            return wallet.connect(provider);
	        }
	        return wallet;
	    }
	    /**
	     *  Creates a [[HDNodeWallet]] for %%phrase%%.
	     */
	    static fromPhrase(phrase, provider) {
	        const wallet = hdwallet_js_1.HDNodeWallet.fromPhrase(phrase);
	        if (provider) {
	            return wallet.connect(provider);
	        }
	        return wallet;
	    }
	}
	wallet.Wallet = Wallet;
	
	return wallet;
}

var hasRequiredWallet;

function requireWallet () {
	if (hasRequiredWallet) return wallet$1;
	hasRequiredWallet = 1;
	(function (exports) {
		/**
		 *  When interacting with Ethereum, it is necessary to use a private
		 *  key authenticate actions by signing a payload.
		 *
		 *  Wallets are the simplest way to expose the concept of an
		 *  //Externally Owner Account// (EOA) as it wraps a private key
		 *  and supports high-level methods to sign common types of interaction
		 *  and send transactions.
		 *
		 *  The class most developers will want to use is [[Wallet]], which
		 *  can load a private key directly or from any common wallet format.
		 *
		 *  The [[HDNodeWallet]] can be used when it is necessary to access
		 *  low-level details of how an HD wallets are derived, exported
		 *  or imported.
		 *
		 *  @_section: api/wallet:Wallets  [about-wallets]
		 */
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.Wallet = exports.Mnemonic = exports.encryptKeystoreJsonSync = exports.encryptKeystoreJson = exports.decryptKeystoreJson = exports.decryptKeystoreJsonSync = exports.isKeystoreJson = exports.decryptCrowdsaleJson = exports.isCrowdsaleJson = exports.HDNodeVoidWallet = exports.HDNodeWallet = exports.getIndexedAccountPath = exports.getAccountPath = exports.defaultPath = exports.BaseWallet = void 0;
		var base_wallet_js_1 = requireBaseWallet();
		Object.defineProperty(exports, "BaseWallet", { enumerable: true, get: function () { return base_wallet_js_1.BaseWallet; } });
		var hdwallet_js_1 = requireHdwallet();
		Object.defineProperty(exports, "defaultPath", { enumerable: true, get: function () { return hdwallet_js_1.defaultPath; } });
		Object.defineProperty(exports, "getAccountPath", { enumerable: true, get: function () { return hdwallet_js_1.getAccountPath; } });
		Object.defineProperty(exports, "getIndexedAccountPath", { enumerable: true, get: function () { return hdwallet_js_1.getIndexedAccountPath; } });
		Object.defineProperty(exports, "HDNodeWallet", { enumerable: true, get: function () { return hdwallet_js_1.HDNodeWallet; } });
		Object.defineProperty(exports, "HDNodeVoidWallet", { enumerable: true, get: function () { return hdwallet_js_1.HDNodeVoidWallet; } });
		var json_crowdsale_js_1 = requireJsonCrowdsale();
		Object.defineProperty(exports, "isCrowdsaleJson", { enumerable: true, get: function () { return json_crowdsale_js_1.isCrowdsaleJson; } });
		Object.defineProperty(exports, "decryptCrowdsaleJson", { enumerable: true, get: function () { return json_crowdsale_js_1.decryptCrowdsaleJson; } });
		var json_keystore_js_1 = requireJsonKeystore();
		Object.defineProperty(exports, "isKeystoreJson", { enumerable: true, get: function () { return json_keystore_js_1.isKeystoreJson; } });
		Object.defineProperty(exports, "decryptKeystoreJsonSync", { enumerable: true, get: function () { return json_keystore_js_1.decryptKeystoreJsonSync; } });
		Object.defineProperty(exports, "decryptKeystoreJson", { enumerable: true, get: function () { return json_keystore_js_1.decryptKeystoreJson; } });
		Object.defineProperty(exports, "encryptKeystoreJson", { enumerable: true, get: function () { return json_keystore_js_1.encryptKeystoreJson; } });
		Object.defineProperty(exports, "encryptKeystoreJsonSync", { enumerable: true, get: function () { return json_keystore_js_1.encryptKeystoreJsonSync; } });
		var mnemonic_js_1 = requireMnemonic();
		Object.defineProperty(exports, "Mnemonic", { enumerable: true, get: function () { return mnemonic_js_1.Mnemonic; } });
		var wallet_js_1 = requireWallet$1();
		Object.defineProperty(exports, "Wallet", { enumerable: true, get: function () { return wallet_js_1.Wallet; } });
		
	} (wallet$1));
	return wallet$1;
}

var wordlists$1 = {};

var wordlistOwla = {};

var decodeOwla = {};

var bitReader = {};

var hasRequiredBitReader;

function requireBitReader () {
	if (hasRequiredBitReader) return bitReader;
	hasRequiredBitReader = 1;
	Object.defineProperty(bitReader, "__esModule", { value: true });
	bitReader.decodeBits = void 0;
	const Base64 = ")!@#$%^&*(ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_";
	/**
	 *  @_ignore
	 */
	function decodeBits(width, data) {
	    const maxValue = (1 << width) - 1;
	    const result = [];
	    let accum = 0, bits = 0, flood = 0;
	    for (let i = 0; i < data.length; i++) {
	        // Accumulate 6 bits of data
	        accum = ((accum << 6) | Base64.indexOf(data[i]));
	        bits += 6;
	        // While we have enough for a word...
	        while (bits >= width) {
	            // ...read the word
	            const value = (accum >> (bits - width));
	            accum &= (1 << (bits - width)) - 1;
	            bits -= width;
	            // A value of 0 indicates we exceeded maxValue, it
	            // floods over into the next value
	            if (value === 0) {
	                flood += maxValue;
	            }
	            else {
	                result.push(value + flood);
	                flood = 0;
	            }
	        }
	    }
	    return result;
	}
	bitReader.decodeBits = decodeBits;
	
	return bitReader;
}

var hasRequiredDecodeOwla;

function requireDecodeOwla () {
	if (hasRequiredDecodeOwla) return decodeOwla;
	hasRequiredDecodeOwla = 1;
	Object.defineProperty(decodeOwla, "__esModule", { value: true });
	decodeOwla.decodeOwlA = void 0;
	const index_js_1 = requireUtils$3();
	const bit_reader_js_1 = requireBitReader();
	const decode_owl_js_1 = requireDecodeOwl();
	/**
	 *  @_ignore
	 */
	function decodeOwlA(data, accents) {
	    let words = (0, decode_owl_js_1.decodeOwl)(data).join(",");
	    // Inject the accents
	    accents.split(/,/g).forEach((accent) => {
	        const match = accent.match(/^([a-z]*)([0-9]+)([0-9])(.*)$/);
	        (0, index_js_1.assertArgument)(match !== null, "internal error parsing accents", "accents", accents);
	        let posOffset = 0;
	        const positions = (0, bit_reader_js_1.decodeBits)(parseInt(match[3]), match[4]);
	        const charCode = parseInt(match[2]);
	        const regex = new RegExp(`([${match[1]}])`, "g");
	        words = words.replace(regex, (all, letter) => {
	            const rem = --positions[posOffset];
	            if (rem === 0) {
	                letter = String.fromCharCode(letter.charCodeAt(0), charCode);
	                posOffset++;
	            }
	            return letter;
	        });
	    });
	    return words.split(",");
	}
	decodeOwla.decodeOwlA = decodeOwlA;
	
	return decodeOwla;
}

var hasRequiredWordlistOwla;

function requireWordlistOwla () {
	if (hasRequiredWordlistOwla) return wordlistOwla;
	hasRequiredWordlistOwla = 1;
	Object.defineProperty(wordlistOwla, "__esModule", { value: true });
	wordlistOwla.WordlistOwlA = void 0;
	const wordlist_owl_js_1 = requireWordlistOwl();
	const decode_owla_js_1 = requireDecodeOwla();
	/**
	 *  An OWL-A format Wordlist extends the OWL format to add an
	 *  overlay onto an OWL format Wordlist to support diacritic
	 *  marks.
	 *
	 *  This class is generally not useful to most developers as
	 *  it is used mainly internally to keep Wordlists for languages
	 *  based on latin-1 small.
	 *
	 *  If necessary, there are tools within the ``generation/`` folder
	 *  to create the necessary data.
	 */
	class WordlistOwlA extends wordlist_owl_js_1.WordlistOwl {
	    #accent;
	    /**
	     *  Creates a new Wordlist for %%locale%% using the OWLA %%data%%
	     *  and %%accent%% data and validated against the %%checksum%%.
	     */
	    constructor(locale, data, accent, checksum) {
	        super(locale, data, checksum);
	        this.#accent = accent;
	    }
	    /**
	     *  The OWLA-encoded accent data.
	     */
	    get _accent() { return this.#accent; }
	    /**
	     *  Decode all the words for the wordlist.
	     */
	    _decodeWords() {
	        return (0, decode_owla_js_1.decodeOwlA)(this._data, this._accent);
	    }
	}
	wordlistOwla.WordlistOwlA = WordlistOwlA;
	
	return wordlistOwla;
}

var wordlists = {};

var langCz = {};

var hasRequiredLangCz;

function requireLangCz () {
	if (hasRequiredLangCz) return langCz;
	hasRequiredLangCz = 1;
	Object.defineProperty(langCz, "__esModule", { value: true });
	langCz.LangCz = void 0;
	const wordlist_owl_js_1 = requireWordlistOwl();
	const words = "0itatkastcenaovo$taouleraeki&chor*teci%enbalodaeladet'!Chn=0Di#%E%^1Resa2Rese3CeT'#0EjKohol0Pu)%0A&sDul#Ekdo)Ke)Ti#Ul|3}aOgan%0FaltI$@tPi,%TmaTronom0LasL{i#Ol0Tobus4Yl:B#}<CilCul#D!_Ge)GrHnoKterieLa^L{#LkonLon-LvanLzaMbusNkom!R[rR{RmanRokoRvaTer#TohVl&Zal#Zili#Zu#3D&RanSe^StieTonZin#ZmocZ)k3CyklD]Ft-KinyLan%Og,fO]gTvaZon2AhobytAt*/E/aEdu+EskIk!Iz&Ok|Oud Ud2B-BrDl.D~H!(JkotJ|K<ysLe$R>R'?TaUb_U/!U^U+Ur!Xer2A^v#Ambo,An#AtrEp)Ike)KoLohOnzOskevUn{#Usin#Z^Zy2Bl.Bn|})D _D#D'aF{Jar(Kv?LdokLvaN^NkrRzaTikVolZola3D+tL.T'#0Ukot:PartRev&3DrDu+J/JnLaLerLkemLn?N.Nn(N'#NtrumNz<StopisT#2AlupaAp`]Ar aA)E/t!EmieI/otIrurgL`Le[Lub M_Mu,ObotO/olOd[O+,Om=Op Oro[OvRapotRl RtRupTiv(Ud.Utn!V!Vil#V(Y[Y$!Yt 0Bu+Gare)H_&HlaNkotRkusSter&Ta%TrusZin>Z(2O&2KolivUv!4It_N(0Dn(Ke)KrPot0Ak~AlIkRkot2Kli$a:L-oRe[T_Tum1E,1B!a}'#Cib_Fic Fla%KlKr{Mokr!PreseRbyS#T-tiv3Kob,zKt|O^P]mSkSp+jV`]Vo/2AhaOuhoUhopis1Es0BroByt-C@t}ut DnesH+dHo^H,JemJn?Kl`KolaKt<Kum@tLarLevaL.MaM.ntMluv M'Nut P`PisPln PosudPr'odPu$ Raz R(RtSahSl'St!-SudSy)TazT-Tk~Uf!Utn!Voz%Z`uZn!Z<%2Aho)AkAm!ikAv>AzeDolObn(OgerieOzdSn(T Z(2B@}'noD-HaH'#S SnoT(0Oj?Or>2Nam :9O]gOnomie0EktronIpsa0AilIseO%P!ie2Izo^O/aOpejOs2EjEn%K<)Kymo0Ike)0F<ie0Olu%1Eku%KurzePed?P]zeP<tT,kt:C#Jf#Kul)N!ikN)zieRmacieV< Zo+3De,%J{onN#3Al#Gu,ntLozofLtrNan%N)Xa%0Ord1An_IrtOtila2NdSf<T[lT#Ton2Ak%Es#On)2KarNk%3Zi#:LejeRant3N{i#O]g3Lot.2Azu,Ejt2LemLfi$aTi#2AfAmofonAnu+EpIlOgOtes#2Ma:D?DrLaL@#N[NopisRfaRpu&V,n3Bk(J#lJnoJtmanK)rLmaM!omR>R&S]Zky3St<ik2Ad'#AsivkyAvaEd!EnO^v>OhOup(T!Ub.U/o)0AtO)Yz0IsOjivoOut0Bl.Boj}DinyDl!Dno)D|Jn(KejLin#L#LubMo+N [No,%RalR^RizontRkoRliv>RmonRn.RoskopR$voSpo^St.T'(U[UfUp!Us#V<2Ad[An?Av(Az^Bo+kD.D]D(N-Ob#Oma^OtOu^Oz@St#Ub(Yz!2B@(B~D[KotMrS aSto)0Ozd2Bn(D,ntGie&M&Sterik:2Yl#3Ned2O&0Uze0Un a0F-%Fla%KasoOva%Sp-%Tern{Vali^Ve$<Zer%3Onie:Blko})Ho^Kmi+K(L'>N)rRmarkRoSanSnoT#V<Zyk3Din>D+Dn!_HlanKotL@L oMn(NomP?S{erV Zd>Zero3NakNdyNo/Sk,Sto)Trn?Zva3En|1Gurt5R):Bar{B_Bin{}&D{Did]HanJakJu)KaoKtusLam aLhotyLibrLn(Me,MkolivM&Ni[lNoeNt<Pal.P_aP olaP#P+Po)PrPu$aPy[,Ram_Rot#RtonSaTa]gTed,U%UzaVa+cZaj#Ze)Ziv(2EkolivEsi0Dlub@MpRami#3No2A%kAdivoAmApotAsi#AunEcEn[Ep!Es~IdImaIs&Ob*kO#nOpaOubUb'&Us!Uzk(0EnIt!Otr0IhaOt0Al?Ber>B#BlihaBylaC*rH=J@>KosKtejlLapsLe^LizeLoMandoMe)MikMn!aMo,MpasMun aN!N%ptNd?N>NfeseNgresN.NkursN)ktNzervaPan>PieP~Pr'#Rb_R-t<Rmid]RoptevRpusRu&RytoRz{S!>St#T_T+)T*lUk!Up_&Us-Uz]VbojZaZ<oh2Ab?A/Aj.Al|AsopisAv!aEd EjcarEs[Eve)Ik{ItikIzeKav>Me+cMivoOcanOkOni#Op OupaOv#T-Uh`]Up?Ut(Vin#Y/+Yp)Y$alYt2Dlan#FrJn(KlaLaj^Li/L#Lom{Ltu,NaPodivuRtRz<Til0Al aAsin#E$<2No]gS_.Ta,T?T#T'>V`]:B,d<})nDn(IkKom>M_aMpaN'#S?SoStu,Tin#V.3B#CkdyD@Dn?D'#Dv.G@^GieG,%H%Hk(H~KtvarNo/odNtil#P@#Pid]T`]T>TmoTokruhVhartV a%Vobok3B,}ot#DojedDsk(H'.Jav>L-M{#NieN#No+umStop`T.T|5Bi$aDivodGi#GopedKal aK{Mc|P!aPu/RdSosTrU^lUhU#Usk!V>3Tiv(1Cer&CiferMpSkSt,%0I%2RaRi#S.:DamD]Gi$rHagonJ{-J _J< aKakK'?Kr_aL[L.L|Lv?Min#Nd+NkoRn(SakrSkotSopu$T?Tri#Tur aZan>ZivoZl Zur#2Lo[0}anikD a%D'.LasaL*nNtol#TlaTo^TrZe,3G,%H~Hu+K.KrofonL@>Lim{rL(Mi#Nc'&Ni[rNom{Nul(S#StrX|2Ad(HaH'.OkS!Uv 1I/Ohem0BilCn(D_#Dl [HylaKroL-ulaM@t#Nar/aNoklN$rumNt|NzunSazSkytStTiva%T<#Ty#U/aUdr(Zai#Z-Zol2Am<Av@>KevTvolaZ{Zut(0T _1DrcF]nL!MieN?S{Ta%ZeumZi#nt3Sliv>0Da:B*r!}yt!Da%Dbyt-DhozDobroDpisHlasHn!Hodi+H,d Iv aJedn*Ji$oJm=K]n Kon>Krm LevoMaz!Mluv Nom{rOkoOpakO$roP`!PevnoPln P~Pos+dPr(oRod RubyRy/]S` S-!S+poSt!TolikV@-Vr/Vzd<yZv!3Be}!CkyDa+koDb!DuhGa%H{Ho^J@JprveKlidLib(Mil(MocO/o)On#PokojR(RvSmyslS*l`Tv<UronV.Zvyk+3Co)JakKamKdyKlKte,kTro5C+hHav?M.%RaR-S _Sn(UzeVinyVo)Zd,5DaD+G{T Tn(Trie3Mfa:0AlArv AvaDivEcEhn!Ejm=Ez aHajo[Iln?Jasn J-tK]p La$L-Li[LohaLu^NosOh! Oj-OutRaz>R&Ru[RysSahSluhaS)r!UvVazVin VodVyk+Yv!_Z<0AsElEn Hl` Ho)H,&It~0BojByt}odCiz Ebr!Esl!Evzd!EzvaH`%Hod J{JinudKazK*p LivLu#Ml#Oln(P`PisPl=P<Pu$ Pyk!Raz#S*d StupSunTokTudVahaVe)Vol!V,%tZ&k1I&Sajd1LasNiskoRa^Roz Ryz-2ApEn?Li#NoOuzl OvyRasaResRs-RuhUpantUr#Us 0Ejn.Iz|0AkE+)Ez L`.L*v!LuvaYl0Ehdy1Ak|As-E,%I%Il(Is|O,Oz?RavduRoti1B al}e$rGieL?LojT_0A^}~I#IvoLavaLep Ln L' N'aO[Ol Pa+cT@T,haTu^Ty/Voj 0Epl IskOpRh!Rl(RokRubyV<1A~ArEsLivn O%1Id1Do[:}!_Ci@tD*/H<-KtLan^L>LivoLu[Mf+tMls-N@#Ni#N&N|N$voNtof+Pri#Rke)RodieR)Ru#Ry[Se#Siv aSt_#T@tTro&V*kZnehtZ*r-3C#DagogJs-K]LotonNal)Ndr-NzeRiskopRoStr(Tar^T?Tro+jVn.Xeso3Ani$aHaJav?K+KnikL.Ln(Lul#Nze)Pe)S!_Sto+Tev&Vn?V'ar2A%n)Ak!Am@Ane)A$i#At Avid]AzE/Em@oEn)EsEtivoEv_Iv!N NoO/aOd.Om[OutUkYn2Bav Byt}odC Ctiv>D!D%n Deps!Dh+dDiv Dkl`Dman DnikDo[Dpo,D,zD$!aDvodDzimEzieHan#Hnut#H'<HromaHybIn)Ji$#Jm=Kaz K+sKojKrokKu)KynLedneLib-Lk~LohaLynomMaluMi~Ml#MocM$aMys+tNe/!N<#Nur(P`!P_Pis-Pla/Pros Ps!PudR`%R%RodRu/aRyvS` SedSilaSkokSlan>S*d SpoluS)vaSud-SypTahT#nT+skTom-T,vaTupaTvo,U#zUtoUzdroVahaVidlaVlakVozVr/V$!VykVzde/Zd,vZem-Zn!-Z<Zv!2Ac|Ah<yAkti#A+sAot>Ap<-AseAv^IncipKnoObud O%ntoOdejOfeseOh,Oj-tO]m Omi+Onik!Op`OrokOs[OtonOut-OvazS#v#St@Udk(UtV-Voh<y0An>OvodTruh0Actvo0Ber)}DlKav>Kl.Kr+LtMpaNcP@SaSin#St.T|Ty#3Rami^SkT_::C-}otDia%Dn?DonFtGbyKe)K'.M@oMp*/NdeRa/R aS'&StrTo+$Zan%Zid]3Ag|Ak%CeptDakt<Fer@tF+xJnokKlamaK<dKrutKt<Pu)%VizeVmaVolverZerva3Sk|Ziko5Boti#Dokm@H'#K+KokoMan{oP'odPu/aRejsSolStl.Tmi$rTopedTun^Ub@#U/oUpU,V.Vn?Zb<Z/odZd!Zezn!Zhod%Zin#ZjezdZ#zZ]haZmarZp`Zru/ZsahZtokZumZvod5Bri#}`]Kav?Kopis3BaBol'}l(D]P`]T.Z(:Di$aH!KoM>Mizd!Mo)N #Rdin#San#T_ Z[Z@?0Or0H|1B,n#CeseD`]Dim@tD]Hn!Jm=Ke,K)Kun^KvojeM@oNoRvisS` Sho,SkokSl!St,SuvSyp!T[T.Tk!T~Trv!VerZ&m2O^R~0FonLn?R#Rot-RupTua%1AfandrAliskoAnz@AutEptikIcaL`[L@?LoLuzO[O#nOroRip)RzUp.V(Vr&0Abi#Adid]An.A$Avn(Ed|Ep>EvaEz.IbI&Izn?OnOup-OvoU/UhaUn%Up#Za0A,gdE)&Il$voL*vaOgR`RkRt#Ut-Ysl0AdAhaOb0Bo)}aD'#KolP#TvaUbojUc Ud%UhlasUl`Um,kUp,vaUsedUtokUvis{0Al'&As _IsLavOd-Oj@>OluOnz<Orn(Ou$aR/aU$ 1An^AzD%NaN>Ovn!P@StUb1An?Ar(aAti#Av[EhnoEz#OdolaO+kOpaOrnoOup!Ra/ResRh~RomRu&Ud&Upn?VolYk0Bj-tBtropy}arD(KnoNd!N=Rik!aR'.0AhAl$voEtrAt[Az-Is+It-Obo^Odid]Or#Rab2Kav#KotN-N'>P!Pk(R'(S_T(:B+t#Bu+H*nJemnoJfunJgaJ Jn(Kti#Mh+MponNc|N>NkerPe)V@.Z!_3}ni#HdyKut.LefonMno)Nd@%Ni$aN<P])P&PrveRapieRmos#Xtil3}oSkopisTu+k1Ad+cAn.0Ap#Esk!UkotUpa0El1A+)Pin#PolRzoUhaU+c2Ad?Akt<AmpAsaAverzaEf E$Ez<Hav.Hl.O/uOj?Os#Ou[P%P _Pk(Ub>U/l Uhl?UsV!2DyH~H(Nd,Ri$aR&jZemsko0ArohOr[Rd(Rz2GrKev:0Oh(OzeR!R*s-RusYt'&0HoTiv(0Iv 3R` 1Edn!I$ M=0Az!_Lidn Lon Otv Roj 0I%I)Ov 0Yv`]0Av If<maIk~1Ad~L!n Ly~Out!Rav 1AnAz 0Ed~Il|Mrt N`n N=Oud Tl!Tr~0Ah|K!Lum O~Op@>R*s 1Al Oln Oz'#3D,v ElEn.L.N!:GonL/aL*nNaN^lNil#RanRhanyR|1ElkuHod0Ova0DroGe)%J%Lbl*dL{rhL _LmocLry[Nk'Ran^RzeS_#SkrzeSn?SpoduS)Ter.Ver#3B,%}rDeoh,D.D+LaN?S{Tal aZeZ #0Ezd0L`Us0Aj#AkAs>EvoHk(IvN'#Oup!1Uc|Uk0DaDiv(Doz&kD$voJ@skyJ&JskoLantL[L LnoSk'#Zid]Z'&0Ravo1Ab>A%tAhA)Ba}o+kH!StvaTu+0Ad T*p Tup0Ip4Bav Br!}|D!D,Fot H+d!H~Hod H,d Hub Jasn J{Jm=K]p Kon!L-!Maz!Mez Miz{Mys+tNe/!Nik!Nut P`!Pl! P,v Pu$ Raz R'n!Rv!Sl' SokoS)v Su~Syp!Tas Tes!Tr! Vi~Vol!Vrh_Zdob Zn!0AduBud }op D<Du/Dy/!E$upH+demKazLyk!NikOr-P*,TahT-::993Lofon::Br!Byd+t}|DarmoDus F*k!Hlt Hod H,^Hy~J!>J{Ji$ K+p!K*p Lep Mez Mot!Mys+tNe/!Nik!Pl! Poj Ps!Raz S)v Su~Taj Temn Tk~Ujm=Val Ve+tVin Vol!Vrt!Zvon 0Av RusuUd|Yt-1A+#ArmaAtn(IvoOb RojVihYm`]0L@.ManM.Pt!Z`uZdola2At Lt~Lubo#Ot' Ru[0MaMn?0Emn 0Lam!Oum!R!#Umav#0AtoEh#O[OmO$Ozvyk0Ap|ArAt-IjeIz{Ocn Odr!Rzl.Ut|0AkAl(Am@!Ovu0B,z Tav Ub-Ufa+0Lod Omal RavaR( Rud#Rvu1A^An C`]N (NoOv&Y/l Zav(1I/aR! 0B'.Br0Ed~EnkuEs_aOnR!Uk'odYk";
	const checksum = "0x25f44555f4af25b51a711136e1c7d6e50ce9f8917d39d6b1f076b2bb4d2fac1a";
	let wordlist = null;
	/**
	 *  The [[link-bip39-cz]] for [mnemonic phrases](link-bip-39).
	 *
	 *  @_docloc: api/wordlists
	 */
	class LangCz extends wordlist_owl_js_1.WordlistOwl {
	    /**
	     *  Creates a new instance of the Czech language Wordlist.
	     *
	     *  Using the constructor should be unnecessary, instead use the
	     *  [[wordlist]] singleton method.
	     *
	     *  @_ignore:
	     */
	    constructor() { super("cz", words, checksum); }
	    /**
	     *  Returns a singleton instance of a ``LangCz``, creating it
	     *  if this is the first time being called.
	     */
	    static wordlist() {
	        if (wordlist == null) {
	            wordlist = new LangCz();
	        }
	        return wordlist;
	    }
	}
	langCz.LangCz = LangCz;
	
	return langCz;
}

var langEs = {};

var hasRequiredLangEs;

function requireLangEs () {
	if (hasRequiredLangEs) return langEs;
	hasRequiredLangEs = 1;
	Object.defineProperty(langEs, "__esModule", { value: true });
	langEs.LangEs = void 0;
	const wordlist_owla_js_1 = requireWordlistOwla();
	const words = "0arertoiotadonoaRteirroenaNonaLsolocoiliaralaorrenadaChoN$n0A>Dom,EjaI!#Oga&O'Or#RazoR*Ue=U<0Ab Adem@Ce<C~Ei)ElgaEn#Ept I&L  NeOg!O<TivoToTrizTu Ud*U!&Us 0Ic#Mit*Opt Or'Ua`Ul#0Reo0Ect Ic~In Irm 0IlIt On@Os#Ot Reg R$UaU&U?aUja0OgoOr+0ReSl 0Ed_zE'Us)1Ac[nAmb_ArmaBaBumCaldeDeaEg_Ej Er%E%F?!GaGo&nIa&I,#Iv$MaMejaMib T TezaTivoToTu[Um'Z 0AbleAn)Apo]ArgoAs B Bi#E'IgoIs%dOrP oPl$0|oC@'C]D D,Em@Gu=Il=ImoIsOt T,aTiguoTojoUalUl Unc$Ad*EjoO1Ag A[#Eti#IoLic O&Or)OyoR,d!Rob Ues%U+1A&A`ArBit+BolBus#|ivoCoD!D?]DuoEaI&IesM.i-esOmaPaP.Reg=RozRugaTeTis%0AA&Al#C,<Egur EoE<rI,#I=Ist*NoOmb+P!oT?]T+Tu#Um*Un#0AjoAqueArEn#EoI>Le%OmoRa!RozUn0DazD$GeLaM,#S,)T^0AlAnceA+EEl]`E`EstruzI.I<2ErU{U'0Af[nArO)Uc Uf_Ul:BaB^|eH@IleJ Lanz/c.LdeMbuN>Nd-oRb(>RnizR+Scu]S#nSu[Tal]T!@T*Tu%UlZ 3BeBid/=S SoSt@3|oEnNgo2An>OqueUsa2ABi`BoCaCi`DaDegaIn//!oLsaMb-{dNi#N}saiRdeRr SqueTeTinVe{Zal2AvoAzoEchaEveIl=In>IsaOcaOmaOnceO)UjaUs>U#2CeoCleE'EyFan{F.HoIt_L#Rbuj(l(+Sc TacaZ.:Bal=BezaBi`B[CaoDav!D,aErFeI{ImanJaJ.LLam Lc$L&Li{dLleLm/^LvoMaMb$Mel=Mi'Mp}c!Nd?Nel-gu+Nic-#N-.ObaOsPazPi%nPo)Pt Puch((b.RcelRe%Rg(i'RneRpe%R+R%SaS>S!oSpaS#rT^ceT_U{lUsaZo3Bol]D!D+Ld/eb_Lo<Lu]M,#Niz-t+Rc(&Rez(oRr R)zaSpedT+2AcalAle>AmpuAnc]ApaAr]I>Is)IvoOqueOzaUle%Up 0Cl.EgoE=EnEr#F[G +M->NeN%P_sR>Rue]SneTaU{d2Am^AnA+AseAveI,)ImaInica2B_Cc~|i'Ci`CoDigoDoF_G!He)JinJoL/ch/eg$Lg Lin/l LmoLum`Mba)M!Mi{Mo&Mpr-deNej}g-oc!Nsej}t PaPi(az.Rba%RchoR&nR.(r!S!SmosS%2AneoAt!E Ec!Ei&EmaIaIm,Ip%IsisOmoOnicaOque%U&Uz2Ad+Ar#At+BoBr*| aEl=En#Er{Es%EvaId Lebr/p/#Mb_Mpl*N-e%O%P.Pul( R$<R<RvaTis:M-z(R&T?3B!B?Ca{C*DoF,saFin*J LfinLga&Li#M^-<N%lP^)RechoR+%Sayu'SeoSf?eSnu&Sti'Sv$TalleT,!U{3AAb=AdemaAman)A`Ar$BujoCt En)E%EzFic?G'Lem/u*N!oRec#Rig*S>Se'Sf[zVaVi'5BleCeL^Ming}N Ra&Rm*R<SSis2Ag.Oga2|aDaE=E'LceOQueR Rez(o:0A'R$0H OUa&r0AdIc~Ific$I#rUc 1Ec#Icaz3EEmp=1Efan)Eg*Em,#Ev IpseI)Ix*Og$Ud*0Bu&It*Oc~Pa)Pe'PleoP_sa0A'C go|ufeC@EmigoE+Fa&F!moGa'Igm/aceOrmeRe&SayoS, T!oTr VaseV$1Oca0Uipo0Izo0Ca]C,aCol Crib*Cu&Enc@F!aFu!zoPa{PejoP@PosaPumaQuiT TeTi=Tufa0ApaEr'Ic-@1Ad*Alu En#It 1Ac#Am,Ce<CusaEn#Ig*Il$Ist*I#P!#Plic P.!T_mo:BricaBu]|a{C?C#rE`J/d/=L<Lt MaM?@Mo<Ra.Rmaci(olRsaSeTigaU`V^X3Br!o|/izORi(ozRt?Rv^Stin3AbleAnzaArB[Cc~|aDeoEb_ElE[Es%Gu[J JoL/e)L@lLt+NNc-g*Ni#Rma2A>Au%EchaOrO%U*UjoU^2B@CaGa%G.L$Lle#N&Rm(+Rtun(z SaTo2Aca<Ag?AnjaAseAudeE*E'EsaIoI#U%2EgoEn)ErzaGaM Nc~Nd(g.R@S?TbolTu+:Ce]FasI%JoL/!i/=Mb- Nch}g-<RajeRzaSoli`St ToV?an3Me=M*NN!}$N)Ran$R,)Rm,S#3Gan)M`s$R Ro2Aci OboOr@2LLfoLo<LpeM(&R?([TaTeoZ 2A{Afi>A'AsaAtisAveIe%Il=IpeIsI#O<rUaUe<UmoUpo2An)ApoArd@Er[IaI'I.I<It [Sa'St :B!B?Bl C!|aD/l Mac(i`ZZa`3B?]B[|oLa&L$Mbr(*Rma'RoeRv*3E=Er+Ga&Gi,eJoM'S#r@5Ci>G Gu!aJaMb_Ng}^Nr((mig('St?Yo5E>ElgaEr%E<EvoI{IrMa'Me&M?deM}d*RacanR#:1O'0EalIomaO=2Lesi/uUal4EgalUs~0Ag,AnIt P P!$P.!Pul<0CapazDiceEr)FielF^meG,$Ic$M,<MuneNa#Sec#S%n)T!esTimoTu*Ut?Vi!'3AIsOn@0L/o):BaliB.M.RabeRdinR[U]Zmin3FeRinga3Ne)5R`d(obaV,Ya5ErgaEvesEzGa&rGoGue)Ic$N>Ngl-$Nt Pit!R S#V,?Zg :7Lo5A]:B$C$C[DoD+nG #GrimaGu`I>M!Mi`Mp --ch-gos%NzaPizRgoRvaStimaTaTexT*U_lV Zo3AlCc~|eC#rErG~Gumb_Ja'Ngu-#NaOnOp &S~TalT[VeY,{3B!%dB+C^D!Di EnzoGaG!oMaMi)M.Mp$NceN&Ne-go)N}t!`Qui&SoS%T!aT$T+2AgaAmaAn#AveEg En Ev Or Ov!Uv@2BoC~CoCu[GicaG+MbrizM}jaTe5|aC*G J}-esPaSt+ToZ:Ce%|oD!aD_Du+Est+F@G@GoIzL{dLe%Ll/oMaMboMutN>N&Nej Ng-iquiNj N}<N%Na`PaQuin(R>Re(f?Rg,Ri&RmolR+nR)sRzoSaSc aSivoT T!@TizTrizXimoY^Z^ca3|aDal]D$Du]J?]J^L,/.M^i-^NsajeN)NuRca&R,gueRi#SS.TaT!To&T+Zc]3E&ElEmb+G/Lag+Lit Ll.M}-!}im}u#OpeR SaS!@S?SmoTadTo5|?aC~DaDe=HoJ LdeL!Li'M,#Mi- c-ed-j-#NoRad(d!Re'R*R+Rs(%lScaStr TivoV!V?Zo5|oD EbleE]Er)Est[G_J!L/e%L%N&Nec(alRoScu=SeoSgoSicaS=:C C~D IpeRanj(izRr SalTalTivoTu[lUseaValVeVi{d3C$Ct G Goc$G+OnRv$ToUt+V V!a3|oDoEb]E#NezNoTi&Vel5Bleza|eMin(i(m()TaTic@Va#Ve]V$5BeCaCleoD?=DoE[EveEzLoM!oTr@:Sis0E<IspoJe#R(!oS!v T,!V$0AA<Ea'H,%HoIoReTavoTub_Ul#Up Urr*0I IoIsea0S)0EnsaEr%Ic$Rec!0Ro1DoR0O1AEa{Fa#IvoLaMoOrVi&0Bligo0DaZa1A>C~E[In On!T TicaUes#1Ac~A&rAlBi%CaD,EjaGa'G@Gul=I,)Ig,Il]OQues%Uga0Ad@Cu+Ez'OT[0O'Ro1EjaU=1I&Ige'0En)0O':C#D_El]Gi`GoIsJ oLabr/>Le%Li&Lm/om/p NNalNi>Nt!-ue=PaPelP?]Que)R Rcel(edR*RoRpa&RqueR[foR)S SeoS~SoS%TaT$Tr@UsaU%VoYa<3A#nCa&C!a|oDalD*G IneL L{'Le/ig+LlejoLoLuc--s N.OnOrPi'Que'R(ch(d!Rez(f?Ri>Rl(mi<R+Rs.aSaScaSimoS%`Ta=T+leoZZu`3C |.EEd[Er`EzaJam/ Lo#Mi,%N}#rNz-aOjoP(a%S Sci`SoS%T.Zca2AcaAnA%AyaAzaEi#E'OmoUmaU[l2B_CoD!D$EmaEs@E%L,Lici/=LvoMa{Me=MoMp-!Rc~R%lSa{Se!SibleS)T,c@T+Zo2A&E>zEgun%Em$EnsaE<Ev$ImoIncipeIs~Iv OaOb Oce<Oduc#OezaOfe<rOg[maOleOmesaOn#Op$OximoUeba2Bli>|!oD^Eb=Er%Es#Lg/*Lm.LpoL<M-#NalNoPaP?(e:99Ed EjaEm Er!E<Ie#ImicaInceIt :Ba'B@BoC~DicalIzMaMp-ch}goPazPi&P#SgoSpaToYoZaZ.3Acc~Ali{dBa'Bo)Ca!Ce%|azoCog!C_oC#Cur<DD.&Duc*FlejoF^maF[nFug$Ga=G*G]G_<H,I'IrJ/a#LevoLieveLle'LojM Med$M}>rNd*N%P #Pet*Po<Pt?SSca)Si`Spe#S#Sum,T*oT^'T[#Un*VesVis%YZ 3CoEgoEn{EsgoFaGi&G^Nc.N.OQuezaSaTmoToZo5BleCeCi D DeoD?]ErJizoJoM!oMp!NN>N{PaP!oSaScaSt+T 5BiB^DoE{G*I&In/e%LoMboM^Ptu[TaTi`:Ba&B!B$BleC GazG[&L/&L!oL*Lm.L.Ls/#LudLv Mb-c~Ndi-e Ng_Ni{dN}#PoQueRdin()nSt_TanU`Xof.3Cc~CoC_#C%DGu*IsL=LvaMa`M?l-d-<rNalN^P  P@Qui(RieRm.Rv*S,%S~TaT,%V!oXoX#3D[Es%E)G=G'Lab/b L,c$L]Mbo=M$R,aS)maT$Tu 5B_C$D$LLap/{&Le{dLi&Lt Luc~Mbr-de}i&No+NrisaPaPl P^)R&Rp_s()oS)nTa'5AveB*Ce<D^Eg[E=E'Er)Fr*Je#L%nM P! Pl*P.!P_moRR>Re'Rg*S#T?:Ba>BiqueB]BuCoC#JoL L>L,#Ll/.Ma'Mb^Ng}quePaPe)P@P.Qu?l(deRe(if(je%RotR+R%TuajeU+ZaZ.3At+|oC]CnicaJa&J!Ji&L/efo'MaM^Mp=NazNd!N!NisN<Ori(api(>Rmi'Rnur(+rSisSo+StigoT!aX#Z3B$Bu+nEmpoEn{Er[E<G_J!/deMb_Mi&M}%OPi>PoR(.TanT!eTu=Za5Al]B?=C Ci'DoG/&M N}#P PeQueRaxR!oRm,%RneoRoRpe&R_R<RtugaSS>S!Xi>2AbajoAc#rA!Afi>AgoAjeAmoAnceA#AumaAz EbolEguaEin%EnEp EsIbuIgoIpaIs)IunfoOfeoOmpaOn>OpaO)OzoU>Ue'Ufa2B!@BoEr#MbaM^NelNic(bin(ismoR'T^:0Ic 9C!a0B[l0I{dIrIv!<OT A3Ba'BeG,)Na0ArU $0IlOp@1A:CaC$Cu`G GoI`J?l/eLi&LleL^Lvu]Mp*oR(i R.So3Ci'C#rHicu=In)JezL/!oLozN-c!Nd-e'Ng N*N%NusRRa'RboRdeRed(j(<Rt!3AAjeBr C$CtimaDaDeoDr$EjoErnesG^LLl-ag_N}e&OlinRalRgoRtudS^Sp!aS%Tami`U&VazV!oV*Vo5LcanLum,Lv!RazT ToZ5E=Lg :::C!Te3GuaM('So9DoGaGur:F*}jaPa#Rza93N(+5MoR&";
	const accents = "aeiou7695@@BZWWavwUJkO@Y-Kn))YEGq#E@O)cI@#ZkMHv$e*))M!!)D**$GW!oKm*Acoh^k&It-pi^SYW)$^n!G)bO!Wkzam(jS#X)Og*^l^RW!bQ#QygBKXfzE))hti!Qm)Cng%%c)mJiI*HJWbmYniCLwNdYyY%WKO^bnT$PuGOr!IvHu&G(GKbtBuhiW&!eO@XMeoYQeCa#!MrTJCq!OW&CHG(WCcW%%)$rfrIegu$)w!G)JGmWWw)MnD%SXXWIT^LWAZuVWB^W)eTL^x&$WGHW(nKWEMA)#$F$x$Waekqs,n7715)W*HM-$WAcCiu(a))VCZ)GG%(*CWWdW%$D!UCO$M";
	const checksum = "0xf74fb7092aeacdfbf8959557de22098da512207fb9f109cb526994938cf40300";
	let wordlist = null;
	/**
	 *  The [[link-bip39-es]] for [mnemonic phrases](link-bip-39).
	 *
	 *  @_docloc: api/wordlists
	 */
	class LangEs extends wordlist_owla_js_1.WordlistOwlA {
	    /**
	     *  Creates a new instance of the Spanish language Wordlist.
	     *
	     *  This should be unnecessary most of the time as the exported
	     *  [[langEs]] should suffice.
	     *
	     *  @_ignore:
	     */
	    constructor() { super("es", words, accents, checksum); }
	    /**
	     *  Returns a singleton instance of a ``LangEs``, creating it
	     *  if this is the first time being called.
	     */
	    static wordlist() {
	        if (wordlist == null) {
	            wordlist = new LangEs();
	        }
	        return wordlist;
	    }
	}
	langEs.LangEs = LangEs;
	
	return langEs;
}

var langFr = {};

var hasRequiredLangFr;

function requireLangFr () {
	if (hasRequiredLangFr) return langFr;
	hasRequiredLangFr = 1;
	Object.defineProperty(langFr, "__esModule", { value: true });
	langFr.LangFr = void 0;
	const wordlist_owla_js_1 = requireWordlistOwla();
	const words = "0erreleontiteurinueiriet cegeanseali medenel q)eniluxaus ch0Ais}And$Diqu E`#Ol*Ord Ou%rOy RasifReuv Ri,Rog RuptS_-SoluS'@UsifYss=0A@m+AjouAr+nCab]Cep,Clam Cola@Cro~eCu}ErbeHatHe,Idu]I Omp&Qu *R$y?Te'TifT)l0Ep&EquatHesifJec%fJug Mett!M* Op,Or Ouc*Res<RoitUl&V be0R R$ef0Fai!Fec,Fi~eF!{Fub]0Ac Enc I#I,Raf Reab#Ru?1D Gu`#L>Mab#S/-0Ou,Us,1Arm Chim+Er&Geb!G)I_ I?ntLeg Lia.Lou Lum O'd*PagaTes<Veo#0A&'BiguB!Enag Ertu?Id$Ir=Orc O'Ovib#Phib+P#'Us/t0Aly<Apho!Ar~+Atom+C+nE/%rG#Gois<Gu#{Im=Nex N$-N)lOd(Om=+Ony?Orm=T_[Tido&X+{1Ai}Eri%fL/*Olog+Pa!`Pe]Por,Puy 0UariumUeduc0Bit!Bus&De'Doi<G_tLequ(Matu!Me?ntMoi!Mu!P_,Ra~ Riv Ro}S_icT +lTic#0PectPh=&P* S|tS v*S+t&Soc>S' TicotT!Tu-0El>O?RiumRo-Ta^T_%fT* Trap 0Ba(eB .Da-Dib#G' Ro!Tom[Tru~e0A]Anc Ari-En*Er<Eug#Ia&'I@I$I}O(eOu R`1I=Io?:D.Fou Ga.G)t&Igna@L/c Lc$Le(eLisa.Mb(Ncai!Nda.Nl+)Nn>eNqu>Rb>R`R$R^Rra.Ss(S%$Ta`#Te|T,+Udr>Vard 3Let&L>Lo&Nefi-R-|Rg Rl(eRmudaSa-Sog[Ta`Ur!3B $Cyc#Du#JouL/L(g)LlardNai!Olog+Ops+OtypeScuitS$Sto'iTu?Zar!2AfardAg)An~*Ess/tInd OndOqu Ous$2BardB(eI!I}Li@Nb$Nd*Nhe'Nif>NusRdu!R[T&Uc#Ue{Ug+Ul$Uqu(Ur<Usso#U%^Xe'2An~eAs>AveEbisE~eEuva.Ico]Iga@Ill/tIo~eI^O~u!Od Onz Ous<Oye'U?Us^Ut=Uy/t2Ff#Iss$L#%nRe|R(S% T( To*Vab#Vet&:B/$B(eChet&De|D!Fe(eIllouIss$Lcu]Lep(Lib!Lm Lomn+Lvai!Mara@M aMi$Mpag[N=Net$N$N%[NularPab#Por=Pri-Psu#P,Pu~eRab(eRb$eRes}RibouRna.Rot&R!|Rt$Sca@S>S^Ssu!U}U%$V=>V [Viar3D`#Intu!Les&Llu#Ndr>Ns' Ntr=Rc#Rebr=Ri<Rn Rve|S}2Agr(Ai<A#'Amb!An-Apit!Arb$As<'At$Auss$Av* Emi<En`#Equ>Er~ Ev=I_Iff!Ign$Im eIotLoru!OcolatOis*O<O)t&Ro?U&0Ga!Gog[M_,NemaNtr Rcu]R R^T [Toy_Tr$V`2A*$A?'Aqu As<Av>I_tIgn ImatIva.O~eOna.Opor&2B=tBraCas<Co% D Dif>Ff!Gn Hesi$Iff Inc L eLibriLl(eLma,L$elMbatMed+Mm/@MpactNc tNdui!Nf>N.]Nno,Ns$[NtactNvexePa(P+Ra`Rbe|Rda.Rni~eRpusR!ctR&.Smi^Stu?T$U@Upu!Ura.U&|Uvr*Yo&2AbeA(&Ava&Ay$Eatu!Edi,E?{Eu}Evet&Ib]I Ist=I,eOi!Oqu Ota#Uci=UelYp,2Bi^E`l*Il]eIs(eIv!Lm( L%v Mu]Pi@Ra%fR<'3Anu!C#L(d!Ni^:Ign M>Ng N<'Uph(3Batt!Bi,Bord Brid But/tC= Cemb!Ch* Cid Clar Cor Cri!Cup]Da#Duc%fEs<F_sifFi]Fray Gag Givr Glu%rGraf Jeun Li-Log M/d Me' Mol*Ni~ Nou N&l#Nud PartP_}Pha}Plac Po}R/g Rob Sast!S-n&S tSign Sobe*Ss( Str>Ta~ Tes,To' T!s<V/c V_*V( Vo*3Ab#Alog)Am/tC,Ff  G  Git=G[Lu M/~eM(u Oxy@Rec%fRig Scu,Spo}Ssip St/-V %rVi}5Ci#C&'G?IgtMa(eMici#Mp,Na&'Nj$Nn Pam(eRto*Ru!Sa.Se'Ss>Ta%$U/>Ub#U-'U,Y_2Ag$Ap Es}Ibb]Oitu!2P +P#xeRab#Rc*3Nas%e:0Lou*0Ar,HarpeHel#La* Lip<Lo!Lu<O#Onom+Or-Ou,Ra}Rem Riva(RouU?U!u`0If>Uqu 1Fac Fec%fFig+FortFray Fusi$0Ali}Ar 2Ec,1Abor Arg*Ectr$Eg/tEph/tEveIgib#I%s?O.Ucid Ud 0B=]Bell*Bry$Er|@Issi$M_ O%$Ouvo*P e'Ploy Por,Pri<Ulsi$0Cadr Ch eClaveCo~eDigu Dos}DroitDui!Erg+F/-F m Fou*Gag G(Glob Ig?Jamb JeuLev NemiNuye{Ri~*Roba.Seig[Tas}T_d!T>To' Trav Um  Vah*Viab#Voy Zy?0L+n0Aiss*Arg[At/tAu#Ic +I@m+I Ilog)I[Iso@ItapheO^ReuveRouv Uis/t0U !Uipe0Ig Osi$Re'Up%$0C=>Pad$Pe-P+g#Po*PritQuiv Say S_-S+uSor Ti?TomacTra@0Ag eA]An~eA%^E(d!Endo*Er[lH/olHi^Hn+Ir Off Oi#Onn/tO'd*R/.RoitU@0Phor+0Alu Asi$Enta`I@n-I,Olu%fOqu 1ActAg  Auc Cel]Cit/tClusifCu<Ecu,Emp#Erc H= Hor,I.n-I]Is,O%^Ped>Plor Po}Prim QuisT_sifTrai!Ul,:B#Bu#{Cet&Ci#Ctu!Ibl*Lai<Me{M`#R-'RfeluR(eRou~eSc( T=Tig)Uc$U%fVe'Vori3Bri#C$d D  L(M?M'Ndo*Od=Rm Ro-Rve'S%v=U`#Ut!Vr>3AscoCe]C%fDe#Gu!Latu!Leta.L>eL#ulLm LouLtr N/c N*O#R?Ssu!X 2A* Am?As^At&'E|E~eE'Exi$Oc$O!Uctu Ui@Uvi=2L+Nd +Ngib#Nta(eRc Rg $Rmu]Rtu[Ssi#Ud!Ug eU`]Ulu!Urmi2Agi#Ai<An~*App Aye'Ega&E( El$Em*E[s+E!Iab#Ic%$Iss$Ivo#OidOma.Ont=Ot,Uit2Gi%fI&Re'R+{R%fSi$T':Gn Lax+L +Mbad R/%rRd+nRn*Rrig)Zel#Z$3AntLa%[Lu#Ndar?N =N+NouN%lOlog+O?t!R/iumR?St)lY}3B>C]RafeV!2A-AiveIs}ObeOi!Or+{2Lfe'M?Nf]R.R`#Udr$Uff!UlotUp`#Urm/dUt&2Ad)lAffi%A(eAndApp(AtuitAv*EnatIffu!Il]Imp Ogn Ond Ot&OupeUg U% Uy e2EpardErr>I@Im|veIta!Sta%f3Mnas&Rostat:Bitu@Cho*L&Me|NgarN[t$RicotRm$+Rp$Sard3LiumMato?RbeRiss$Rm(eR$Si,U!{3B n BouLar/tStoi!V 5MardMma.Mo.[N['Nor N&{R@Riz$Rlo.Rm$eRrib#U#{Us<5BlotI#{Ma(Mb#Mi@Mo'R]3Dro?lG+[M[Pno<:2Yl#2Nor U/e4Lici&Lusi$0A.Bib I,M_<Mobi#Muab#PactP i=Plor Po}Prim Pu,0Carn C_d+Ci@ntCl( Colo!Dex Di-Duc%fEditEp%eExactF(iFlig Form Fusi$G  H= Hib Jec,Ju!No-ntOcu]Ond Scri!Sec&Sig[Soli&Sp* S%nctSul,TactT_<Ti?Trig)Tui%fU%#Vasi$V_,Vi,Voqu 3Oni^Rad>ReelRi,0O]2Oi!Res<:GuarIll*MbeNv>Rd(Ug U[Velot3Tab#T$UdiU[s<9Ind!N~ Ng]Ue'UissifUrn=Vi=Y|Ye{5Bi]Ge?ntNiorP$Ris&S%-Te{V_i#:Yak7M$oOs^:BelBi=Bo' C  Cto<Gu[I[Is}I% Mbe|Mel#MpeN-'Nga.N,[P(R.'R?Ur>VaboVo*3Ctu!G=G Gu?SsiveTt!V>Xi^Zard3As<B  B!C_-Cor[E.Ev!Gatu!Go,G)M Mi&M$a@Mpi@Neai!NgotOn-|Qui@S>eS,ThiumTi.Ttor=V!'5Gi^Inta(Is*MbricT +U UrdUt!UveY=5B+Ci@Cra%fE'Gub!Is/tM>eNai!NdiR$T,X){:Ch(eGas(G_taGi^Ig!Ill$In%_Ir+Is$Jor Lax Lefi-Lhe'Li-L#t&MmouthNda,Niab#Nqu/tN&|N)lRath$Rb!R~/dRdiRi%?R^'Rr$R&]Scot&SsifT +lT>eTra^Udi!Ussa@UveXim=3Ch/tC$nuDa`#Dec(Di,Du<Il#'L/.Lod+Mb!Moi!Nac N Nh*Ns$.NtorRc!diRi&R#Ssag Su!T=Teo!Tho@T>Ub#3Au]CrobeEt&Gn$Gr L+uLli$Mi^N-N =Nim=Nor Nu&Rac#Roi,Ssi#X&5Bi#D [El#{Ndi=Ni&'Nna+Not$eNst!Ntag[Nu?ntQ)'R-|Rsu!R% Te'TifU~eUf#Ul(Uss$Ut$Uv/t5L%p#Ni%$Ra`#Re[Rmu!Sc#SeumSic+nTa%$T T)l3Ria@R%l#S,eThi^:Ge'PpeRquoisRr Ta%$Ti$Tu!Ufra.U%^Vi!3Bu#{CtarFas&Ga%$Glig Goc>I.Rve{Ttoy Ur$eUtr$Veu3CheCkelTra&Ve|5B#CifCt'[Ir-'I<t&Ma@Mb!{Mm Rma%fTab#Tif>Toi!Urr*Uve|Va&'Vemb!Vi-5A.Anc I!Isib#M oP%=Q)Tri%f:0E*Jec%fLig Sc'S v Stac#T_*T' 0Casi$Cup E/Tob!Troy Tup]Ulai!0E'Or/t1F_}Fic>Fr*0Ive1Se|S`l$2Fac%fIv>0Bra.Ett!0Ct){Du]E!{Iri^1A#A^Er Ini$PortunPrim T Ti^1A.{An.Bi&D$n E`#G/eG)`Ifi-Ne?ntQ)T+0C`]Mo<Satu!0Ar+0Rag/Rs$T`Trag Vra.0A%$1Y@Y.[1O[:Isib#La-Lma!sLo'@Lp Na~eNdaNgol(Niqu N[|NoramaNt=$PayeP>Po,PyrusRadoxeR-l#Res<Rfum R]Ro#Rra(R<m Rtag Ru!Rv_*Ssi$S&^T [lT+n-Tr$V`l$Voi}Y Ysa.3Ig[Int!La.Lic/L#Lou<Lu~eNdu#Netr Nib#NsifN'+Pi&PlumRdrixRfor Rio@Rmu,Rp#xeRs`R&S Ta#TitTr*Up#2Ara$Ob+O^Ot$Ra<Ysi^0AnoCt'=E-Er!Euv!Lo&N-|Pet&Qu Rog)Sc(eSt$Vo,XelZza2AcardAf$dAis*An A^Astr$A&|E' ExusIa.OmbOng U+Uma.2Chet&Es+E&In&Ir>Iss$Iv!Lai!Lic>L#nLyg$eMma@Mp>Nct)lNd  NeyR%^Si%$S<d Stu!Tag Te|Ti$U-Ula(Um$Urp!Uss(Uvo*2A*+A%^Ec+{Edi!EfixeElu@EnomE<n-E&x&Evo*Imi%fIn-Is$Iv Ob#?O-d Odi.Of$dOg!sO+Oje,Olog)O?n Op!Osp eO&g O)s<Ov beU@n-U[|0Y~o<1BlicC $I}LpeLsarNai<Ni%fPit!Rif>Zz#3Rami@:99AsarE!l#Es%$Ietu@It,O%_t:C(eC$,D+{G$d(I@'Is(L_%rLl$.Mas}Pi@Sa.Tis}Vag V(Y$n 3Ac%fAg*Ali}Anim Cevo*Ci,Clam Col,Cru,Cu]Cyc]Dig Dou,Fai!F#xeForm Fra(Fu.G=+nGi$Gla.Gul>I, Je,Jou La%fLev L+fMar^Me@Mi<M$,Mpl*Mu NardNfortNif]N$c Ntr NvoiPl>Por,Pri<P%#Qu(S veS(e{Soud!SpectS,SultatTabl*T_*Ticu#Tomb Trac Uni$Uss*V/~eViv!Vol&Vulsif3Ches<De|E'Gi@Go]Nc Pos,Sib#S^T)lV=V>e5Che{M/-Mp!N-Nd(Se|S>Ta%fTorTu#U.U`#U#|U%[Y|?5B/BisCheEl#G){In Is<|S S%^3Th?:B]Bo,B!Co~eFariGes<Is*La@LiveL$Lu MediNc%$Ngl>Rcas?Rd(eT' Ug!nuUm$U,Uva.V/tV$n 1AlpelAnda#E]atEnarioEpt!HemaI_-Ind O!Ru%nUlp,1An-Cab#Ch Cou C!,Da%fDui!Ig['Jo'Lec%fMa(eMb]M_-M(=Na&'Nsib#N&n-Par Q)n-Re(R.ntR+{Rru!RumRvi-Sa?V*Vra.Xtup#3D =Ec#Eg Ff]G#Gn=L_-LiciumMp#Nc eNist!Ph$RopSmi^Tu 1I 3Ci=C#DiumIg[{LdatLe`Litu@Lub#Mb!M?`Mno]N@N.'N[t&No!Rc>R%rS+T%<Uc+{Udu!Uff#U#v UpapeUr-U%r Uv_*0Ac+{A%=Eci=H eIr=3Ab#A%$ErnumImulusIpu]RictUd+{Upe'Ylis&0Bli?BstratB%lBv_*C-sC!FfixeGg  Ive'Lfa&P bePpl>Rfa-Rica&R?n Rpri<Rs|tRv+Spect3LlabeMbo#Metr+Nap<NtaxeS&?:BacBl>C%#Il]L_tLism/L$n Mbo'Mi}Ngib#PisQu( Rd RifR%[S<TamiToua.UpeU!|X 3Mo(Mpo!lNa`#Nd!Ne'N*Nsi$Rm( R[Rrib#T(eX&2E?Eor+Erap+Orax0BiaE@Mi@Reli!Ro*SsuT/eT!Tub 5Bogg/L /tMa&Ni^N[|P$y?R~eRd!Rna@Rp`#R!ntR<Rt)TemU~ Urna.Us}X(e2Ac%$AficAgi^Ah*A(An~ Ava`Ef#Emp EsorEu`Ia.Ibun=Ico,Ilog+IompheIp]It' Ivi=Omb$eOncOpic=Oupe|2I#LipeMul&N[lRb(eTe'Toy Y|3Mp/Ph$Pi^R/:0Ues^9Ti?Tras$1Ani?If>I$I^Itai!Iv s3AniumBa(Tic/t0A.I[UelU!0I#Op+:Car?Cc(Gab$dG)Ill/tInc!Is<|Lab#Li<Ll$LveMpi!N`#Pe'R>Se{Ss=S&3C&'Det&Get=Hicu#InardLo-Nd!diN  Ng Ni?{Ntou<Rdu!R(Rn*RrouR}RtuSt$T /Tus&X/tX 3AducAn@Ctoi!D/.DeoG[t&G)'La(Lla.Naig!Ol$P eRe?ntRtuo<RusSa.Se'Si$S^{S)lT=Tes<Tico#Tr(eVa-Vipa!5Ca%$Gu I#Is(Itu!La`#Lc/L%g Lu?Ra-R&xT Ulo*Ya.Yel#:G$:3N$:Cht:3B!NithS&9Olog+";
	const accents = "e7693&)U*o&)Ry^)*)W))))#X^))))@@)#Wf)m%)#!))AG)&IIAQIIIBIIHJNAgBIILIDJGo)))HIQIIIIA(IGgJHH(BIIxX#)Ou)@*IAAPIIIJHQJ)&QIQPYI(HYAQC%)!))QHJJ@)#)^f*^AXCJ))$%CP))%&m)u)@e^A#G#))W@!(IKK%!(I%))O@QA))@GG#e))))WHJIWh))my@IIBT^)!)HAYGETHI*))!QnUDG)))nBoKAC*HwyQh))$&)G&)UGO)G)))(BX#v**)%O,e7686)I))@)&)gdMP()))ud)p#L))I^FIHYdWG))D@DFV)QA)o%MyTh%*)Z)%)n(XANc^R)YS";
	const checksum = "0x51deb7ae009149dc61a6bd18a918eb7ac78d2775726c68e598b92d002519b045";
	let wordlist = null;
	/**
	 *  The [[link-bip39-fr]] for [mnemonic phrases](link-bip-39).
	 *
	 *  @_docloc: api/wordlists
	 */
	class LangFr extends wordlist_owla_js_1.WordlistOwlA {
	    /**
	     *  Creates a new instance of the French language Wordlist.
	     *
	     *  This should be unnecessary most of the time as the exported
	     *  [[langFr]] should suffice.
	     *
	     *  @_ignore:
	     */
	    constructor() { super("fr", words, accents, checksum); }
	    /**
	     *  Returns a singleton instance of a ``LangFr``, creating it
	     *  if this is the first time being called.
	     */
	    static wordlist() {
	        if (wordlist == null) {
	            wordlist = new LangFr();
	        }
	        return wordlist;
	    }
	}
	langFr.LangFr = LangFr;
	
	return langFr;
}

var langJa = {};

var hasRequiredLangJa;

function requireLangJa () {
	if (hasRequiredLangJa) return langJa;
	hasRequiredLangJa = 1;
	Object.defineProperty(langJa, "__esModule", { value: true });
	langJa.LangJa = void 0;
	const index_js_1 = requireHash();
	const index_js_2 = requireUtils$3();
	const wordlist_js_1 = requireWordlist();
	const data = [
	    // 4-kana words
	    "AQRASRAGBAGUAIRAHBAghAURAdBAdcAnoAMEAFBAFCBKFBQRBSFBCXBCDBCHBGFBEQBpBBpQBIkBHNBeOBgFBVCBhBBhNBmOBmRBiHBiFBUFBZDBvFBsXBkFBlcBjYBwDBMBBTBBTRBWBBWXXaQXaRXQWXSRXCFXYBXpHXOQXHRXhRXuRXmXXbRXlXXwDXTRXrCXWQXWGaBWaKcaYgasFadQalmaMBacAKaRKKBKKXKKjKQRKDRKCYKCRKIDKeVKHcKlXKjHKrYNAHNBWNaRNKcNIBNIONmXNsXNdXNnBNMBNRBNrXNWDNWMNFOQABQAHQBrQXBQXFQaRQKXQKDQKOQKFQNBQNDQQgQCXQCDQGBQGDQGdQYXQpBQpQQpHQLXQHuQgBQhBQhCQuFQmXQiDQUFQZDQsFQdRQkHQbRQlOQlmQPDQjDQwXQMBQMDQcFQTBQTHQrDDXQDNFDGBDGQDGRDpFDhFDmXDZXDbRDMYDRdDTRDrXSAhSBCSBrSGQSEQSHBSVRShYShkSyQSuFSiBSdcSoESocSlmSMBSFBSFKSFNSFdSFcCByCaRCKcCSBCSRCCrCGbCEHCYXCpBCpQCIBCIHCeNCgBCgFCVECVcCmkCmwCZXCZFCdRClOClmClFCjDCjdCnXCwBCwXCcRCFQCFjGXhGNhGDEGDMGCDGCHGIFGgBGVXGVEGVRGmXGsXGdYGoSGbRGnXGwXGwDGWRGFNGFLGFOGFdGFkEABEBDEBFEXOEaBEKSENBENDEYXEIgEIkEgBEgQEgHEhFEudEuFEiBEiHEiFEZDEvBEsXEsFEdXEdREkFEbBEbRElFEPCEfkEFNYAEYAhYBNYQdYDXYSRYCEYYoYgQYgRYuRYmCYZTYdBYbEYlXYjQYRbYWRpKXpQopQnpSFpCXpIBpISphNpdBpdRpbRpcZpFBpFNpFDpFopFrLADLBuLXQLXcLaFLCXLEhLpBLpFLHXLeVLhILdHLdRLoDLbRLrXIABIBQIBCIBsIBoIBMIBRIXaIaRIKYIKRINBINuICDIGBIIDIIkIgRIxFIyQIiHIdRIbYIbRIlHIwRIMYIcRIRVITRIFBIFNIFQOABOAFOBQOaFONBONMOQFOSFOCDOGBOEQOpBOLXOIBOIFOgQOgFOyQOycOmXOsXOdIOkHOMEOMkOWWHBNHXNHXWHNXHDuHDRHSuHSRHHoHhkHmRHdRHkQHlcHlRHwBHWcgAEgAggAkgBNgBQgBEgXOgYcgLXgHjgyQgiBgsFgdagMYgWSgFQgFEVBTVXEVKBVKNVKDVKYVKRVNBVNYVDBVDxVSBVSRVCjVGNVLXVIFVhBVhcVsXVdRVbRVlRhBYhKYhDYhGShxWhmNhdahdkhbRhjohMXhTRxAXxXSxKBxNBxEQxeNxeQxhXxsFxdbxlHxjcxFBxFNxFQxFOxFoyNYyYoybcyMYuBQuBRuBruDMuCouHBudQukkuoBulVuMXuFEmCYmCRmpRmeDmiMmjdmTFmFQiADiBOiaRiKRiNBiNRiSFiGkiGFiERipRiLFiIFihYibHijBijEiMXiWBiFBiFCUBQUXFUaRUNDUNcUNRUNFUDBUSHUCDUGBUGFUEqULNULoUIRUeEUeYUgBUhFUuRUiFUsXUdFUkHUbBUjSUjYUwXUMDUcHURdUTBUrBUrXUrQZAFZXZZaRZKFZNBZQFZCXZGBZYdZpBZLDZIFZHXZHNZeQZVRZVFZmXZiBZvFZdFZkFZbHZbFZwXZcCZcRZRBvBQvBGvBLvBWvCovMYsAFsBDsaRsKFsNFsDrsSHsSFsCXsCRsEBsEHsEfspBsLBsLDsIgsIRseGsbRsFBsFQsFSdNBdSRdCVdGHdYDdHcdVbdySduDdsXdlRdwXdWYdWcdWRkBMkXOkaRkNIkNFkSFkCFkYBkpRkeNkgBkhVkmXksFklVkMBkWDkFNoBNoaQoaFoNBoNXoNaoNEoSRoEroYXoYCoYbopRopFomXojkowXorFbBEbEIbdBbjYlaRlDElMXlFDjKjjSRjGBjYBjYkjpRjLXjIBjOFjeVjbRjwBnXQnSHnpFnLXnINnMBnTRwXBwXNwXYwNFwQFwSBwGFwLXwLDweNwgBwuHwjDwnXMBXMpFMIBMeNMTHcaQcNBcDHcSFcCXcpBcLXcLDcgFcuFcnXcwXccDcTQcrFTQErXNrCHrpFrgFrbFrTHrFcWNYWNbWEHWMXWTR",
	    // 5-kana words
	    "ABGHABIJAEAVAYJQALZJAIaRAHNXAHdcAHbRAZJMAZJRAZTRAdVJAklmAbcNAjdRAMnRAMWYAWpRAWgRAFgBAFhBAFdcBNJBBNJDBQKBBQhcBQlmBDEJBYJkBYJTBpNBBpJFBIJBBIJDBIcABOKXBOEJBOVJBOiJBOZJBepBBeLXBeIFBegBBgGJBVJXBuocBiJRBUJQBlXVBlITBwNFBMYVBcqXBTlmBWNFBWiJBWnRBFGHBFwXXKGJXNJBXNZJXDTTXSHSXSVRXSlHXCJDXGQJXEhXXYQJXYbRXOfXXeNcXVJFXhQJXhEJXdTRXjdXXMhBXcQTXRGBXTEBXTnQXFCXXFOFXFgFaBaFaBNJaBCJaBpBaBwXaNJKaNJDaQIBaDpRaEPDaHMFamDJalEJaMZJaFaFaFNBaFQJaFLDaFVHKBCYKBEBKBHDKXaFKXGdKXEJKXpHKXIBKXZDKXwXKKwLKNacKNYJKNJoKNWcKDGdKDTRKChXKGaRKGhBKGbRKEBTKEaRKEPTKLMDKLWRKOHDKVJcKdBcKlIBKlOPKFSBKFEPKFpFNBNJNJBQNBGHNBEPNBHXNBgFNBVXNBZDNBsXNBwXNNaRNNJDNNJENNJkNDCJNDVDNGJRNJiDNZJNNsCJNJFNNFSBNFCXNFEPNFLXNFIFQJBFQCaRQJEQQLJDQLJFQIaRQOqXQHaFQHHQQVJXQVJDQhNJQmEIQZJFQsJXQJrFQWbRDJABDBYJDXNFDXCXDXLXDXZDDXsJDQqXDSJFDJCXDEPkDEqXDYmQDpSJDOCkDOGQDHEIDVJDDuDuDWEBDJFgSBNDSBSFSBGHSBIBSBTQSKVYSJQNSJQiSJCXSEqXSJYVSIiJSOMYSHAHSHaQSeCFSepQSegBSHdHSHrFShSJSJuHSJUFSkNRSrSrSWEBSFaHSJFQSFCXSFGDSFYXSFODSFgBSFVXSFhBSFxFSFkFSFbBSFMFCADdCJXBCXaFCXKFCXNFCXCXCXGBCXEJCXYBCXLDCXIBCXOPCXHXCXgBCXhBCXiBCXlDCXcHCJNBCJNFCDCJCDGBCDVXCDhBCDiDCDJdCCmNCpJFCIaRCOqXCHCHCHZJCViJCuCuCmddCJiFCdNBCdHhClEJCnUJCreSCWlgCWTRCFBFCFNBCFYBCFVFCFhFCFdSCFTBCFWDGBNBGBQFGJBCGBEqGBpBGBgQGNBEGNJYGNkOGNJRGDUFGJpQGHaBGJeNGJeEGVBlGVKjGiJDGvJHGsVJGkEBGMIJGWjNGFBFGFCXGFGBGFYXGFpBGFMFEASJEAWpEJNFECJVEIXSEIQJEOqXEOcFEeNcEHEJEHlFEJgFEhlmEmDJEmZJEiMBEUqXEoSREPBFEPXFEPKFEPSFEPEFEPpFEPLXEPIBEJPdEPcFEPTBEJnXEqlHEMpREFCXEFODEFcFYASJYJAFYBaBYBVXYXpFYDhBYCJBYJGFYYbRYeNcYJeVYiIJYZJcYvJgYvJRYJsXYsJFYMYMYreVpBNHpBEJpBwXpQxFpYEJpeNDpJeDpeSFpeCHpHUJpHbBpHcHpmUJpiiJpUJrpsJuplITpFaBpFQqpFGBpFEfpFYBpFpBpFLJpFIDpFgBpFVXpFyQpFuFpFlFpFjDpFnXpFwXpJFMpFTBLXCJLXEFLXhFLXUJLXbFLalmLNJBLSJQLCLCLGJBLLDJLHaFLeNFLeSHLeCXLepFLhaRLZsJLsJDLsJrLocaLlLlLMdbLFNBLFSBLFEHLFkFIBBFIBXFIBaQIBKXIBSFIBpHIBLXIBgBIBhBIBuHIBmXIBiFIBZXIBvFIBbFIBjQIBwXIBWFIKTRIQUJIDGFICjQIYSRIINXIJeCIVaRImEkIZJFIvJRIsJXIdCJIJoRIbBQIjYBIcqXITFVIreVIFKFIFSFIFCJIFGFIFLDIFIBIJFOIFgBIFVXIJFhIFxFIFmXIFdHIFbBIJFrIJFWOBGBOQfXOOKjOUqXOfXBOqXEOcqXORVJOFIBOFlDHBIOHXiFHNTRHCJXHIaRHHJDHHEJHVbRHZJYHbIBHRsJHRkDHWlmgBKFgBSBgBCDgBGHgBpBgBIBgBVJgBuBgBvFgKDTgQVXgDUJgGSJgOqXgmUMgZIJgTUJgWIEgFBFgFNBgFDJgFSFgFGBgFYXgJFOgFgQgFVXgFhBgFbHgJFWVJABVQKcVDgFVOfXVeDFVhaRVmGdViJYVMaRVFNHhBNDhBCXhBEqhBpFhBLXhNJBhSJRheVXhhKEhxlmhZIJhdBQhkIJhbMNhMUJhMZJxNJgxQUJxDEkxDdFxSJRxplmxeSBxeCXxeGFxeYXxepQxegBxWVcxFEQxFLXxFIBxFgBxFxDxFZtxFdcxFbBxFwXyDJXyDlcuASJuDJpuDIBuCpJuGSJuIJFueEFuZIJusJXudWEuoIBuWGJuFBcuFKEuFNFuFQFuFDJuFGJuFVJuFUtuFdHuFTBmBYJmNJYmQhkmLJDmLJomIdXmiJYmvJRmsJRmklmmMBymMuCmclmmcnQiJABiJBNiJBDiBSFiBCJiBEFiBYBiBpFiBLXiBTHiJNciDEfiCZJiECJiJEqiOkHiHKFieNDiHJQieQcieDHieSFieCXieGFieEFieIHiegFihUJixNoioNXiFaBiFKFiFNDiFEPiFYXitFOitFHiFgBiFVEiFmXiFitiFbBiFMFiFrFUCXQUIoQUIJcUHQJUeCEUHwXUUJDUUqXUdWcUcqXUrnQUFNDUFSHUFCFUFEfUFLXUtFOZBXOZXSBZXpFZXVXZEQJZEJkZpDJZOqXZeNHZeCDZUqXZFBQZFEHZFLXvBAFvBKFvBCXvBEPvBpHvBIDvBgFvBuHvQNJvFNFvFGBvFIBvJFcsXCDsXLXsXsXsXlFsXcHsQqXsJQFsEqXseIFsFEHsFjDdBxOdNpRdNJRdEJbdpJRdhZJdnSJdrjNdFNJdFQHdFhNkNJDkYaRkHNRkHSRkVbRkuMRkjSJkcqDoSJFoEiJoYZJoOfXohEBoMGQocqXbBAFbBXFbBaFbBNDbBGBbBLXbBTBbBWDbGJYbIJHbFQqbFpQlDgQlOrFlVJRjGEBjZJRnXvJnXbBnEfHnOPDngJRnxfXnUJWwXEJwNpJwDpBwEfXwrEBMDCJMDGHMDIJMLJDcQGDcQpHcqXccqNFcqCXcFCJRBSBRBGBRBEJRBpQTBNFTBQJTBpBTBVXTFABTFSBTFCFTFGBTFMDrXCJrXLDrDNJrEfHrFQJrFitWNjdWNTR",
	    // 6-kana words
	    "AKLJMANOPFASNJIAEJWXAYJNRAIIbRAIcdaAeEfDAgidRAdjNYAMYEJAMIbRAFNJBAFpJFBBIJYBDZJFBSiJhBGdEBBEJfXBEJqXBEJWRBpaUJBLXrXBIYJMBOcfXBeEfFBestXBjNJRBcDJOBFEqXXNvJRXDMBhXCJNYXOAWpXONJWXHDEBXeIaRXhYJDXZJSJXMDJOXcASJXFVJXaBQqXaBZJFasXdQaFSJQaFEfXaFpJHaFOqXKBNSRKXvJBKQJhXKEJQJKEJGFKINJBKIJjNKgJNSKVElmKVhEBKiJGFKlBgJKjnUJKwsJYKMFIJKFNJDKFIJFKFOfXNJBSFNJBCXNBpJFNJBvQNJBMBNJLJXNJOqXNJeCXNJeGFNdsJCNbTKFNwXUJQNFEPQDiJcQDMSJQSFpBQGMQJQJeOcQyCJEQUJEBQJFBrQFEJqDXDJFDJXpBDJXIMDGiJhDIJGRDJeYcDHrDJDVXgFDkAWpDkIgRDjDEqDMvJRDJFNFDJFIBSKclmSJQOFSJQVHSJQjDSJGJBSJGJFSECJoSHEJqSJHTBSJVJDSViJYSZJNBSJsJDSFSJFSFEfXSJFLXCBUJVCJXSBCJXpBCXVJXCJXsXCJXdFCJNJHCLIJgCHiJFCVNJMChCJhCUHEJCsJTRCJdYcCoQJCCFEfXCFIJgCFUJxCFstFGJBaQGJBIDGQJqXGYJNRGJHKFGeQqDGHEJFGJeLXGHIiJGHdBlGUJEBGkIJTGFQPDGJFEqEAGegEJIJBEJVJXEhQJTEiJNcEJZJFEJoEqEjDEqEPDsXEPGJBEPOqXEPeQFEfDiDEJfEFEfepQEfMiJEqXNBEqDIDEqeSFEqVJXEMvJRYXNJDYXEJHYKVJcYYJEBYJeEcYJUqXYFpJFYFstXpAZJMpBSJFpNBNFpeQPDpHLJDpHIJFpHgJFpeitFpHZJFpJFADpFSJFpJFCJpFOqXpFitBpJFZJLXIJFLIJgRLVNJWLVHJMLwNpJLFGJBLFLJDLFOqXLJFUJIBDJXIBGJBIJBYQIJBIBIBOqXIBcqDIEGJFILNJTIIJEBIOiJhIJeNBIJeIBIhiJIIWoTRIJFAHIJFpBIJFuHIFUtFIJFTHOSBYJOEcqXOHEJqOvBpFOkVJrObBVJOncqDOcNJkHhNJRHuHJuHdMhBgBUqXgBsJXgONJBgHNJDgHHJQgJeitgHsJXgJyNagyDJBgZJDrgsVJQgkEJNgkjSJgJFAHgFCJDgFZtMVJXNFVXQfXVJXDJVXoQJVQVJQVDEfXVDvJHVEqNFVeQfXVHpJFVHxfXVVJSRVVmaRVlIJOhCXVJhHjYkhxCJVhWVUJhWiJcxBNJIxeEqDxfXBFxcFEPxFSJFxFYJXyBDQJydaUJyFOPDuYCJYuLvJRuHLJXuZJLDuFOPDuFZJHuFcqXmKHJdmCQJcmOsVJiJAGFitLCFieOfXiestXiZJMEikNJQirXzFiFQqXiFIJFiFZJFiFvtFUHpJFUteIcUteOcUVCJkUhdHcUbEJEUJqXQUMNJhURjYkUFitFZDGJHZJIxDZJVJXZJFDJZJFpQvBNJBvBSJFvJxBrseQqDsVFVJdFLJDkEJNBkmNJYkFLJDoQJOPoGsJRoEAHBoEJfFbBQqDbBZJHbFVJXlFIJBjYIrXjeitcjjCEBjWMNBwXQfXwXOaFwDsJXwCJTRwrCZJMDNJQcDDJFcqDOPRYiJFTBsJXTQIJBTFEfXTFLJDrXEJFrEJXMrFZJFWEJdEWYTlm",
	    // 7-kana words
	    "ABCDEFACNJTRAMBDJdAcNJVXBLNJEBXSIdWRXErNJkXYDJMBXZJCJaXMNJaYKKVJKcKDEJqXKDcNJhKVJrNYKbgJVXKFVJSBNBYBwDNJeQfXNJeEqXNhGJWENJFiJRQlIJbEQJfXxDQqXcfXQFNDEJQFwXUJDYcnUJDJIBgQDIUJTRDJFEqDSJQSJFSJQIJFSOPeZtSJFZJHCJXQfXCTDEqFGJBSJFGJBOfXGJBcqXGJHNJDGJRLiJEJfXEqEJFEJPEFpBEJYJBZJFYBwXUJYiJMEBYJZJyTYTONJXpQMFXFpeGIDdpJFstXpJFcPDLBVSJRLHQJqXLJFZJFIJBNJDIJBUqXIBkFDJIJEJPTIYJGWRIJeQPDIJeEfHIJFsJXOqGDSFHXEJqXgJCsJCgGQJqXgdQYJEgFMFNBgJFcqDVJwXUJVJFZJchIgJCCxOEJqXxOwXUJyDJBVRuscisciJBiJBieUtqXiJFDJkiFsJXQUGEZJcUJFsJXZtXIrXZDZJDrZJFNJDZJFstXvJFQqXvJFCJEsJXQJqkhkNGBbDJdTRbYJMEBlDwXUJMEFiJFcfXNJDRcNJWMTBLJXC",
	    // 8-kana words
	    "BraFUtHBFSJFdbNBLJXVJQoYJNEBSJBEJfHSJHwXUJCJdAZJMGjaFVJXEJPNJBlEJfFiJFpFbFEJqIJBVJCrIBdHiJhOPFChvJVJZJNJWxGFNIFLueIBQJqUHEJfUFstOZJDrlXEASJRlXVJXSFwVJNJWD",
	    // 9-kana words
	    "QJEJNNJDQJEJIBSFQJEJxegBQJEJfHEPSJBmXEJFSJCDEJqXLXNJFQqXIcQsFNJFIFEJqXUJgFsJXIJBUJEJfHNFvJxEqXNJnXUJFQqD",
	    // 10-kana words
	    "IJBEJqXZJ"
	];
	// Maps each character into its kana value (the index)
	const mapping = "~~AzB~X~a~KN~Q~D~S~C~G~E~Y~p~L~I~O~eH~g~V~hxyumi~~U~~Z~~v~~s~~dkoblPjfnqwMcRTr~W~~~F~~~~~Jt";
	let _wordlist = null;
	function hex(word) {
	    return (0, index_js_2.hexlify)((0, index_js_2.toUtf8Bytes)(word));
	}
	const KiYoKu = "0xe3818de38284e3818f";
	const KyoKu = "0xe3818de38283e3818f";
	function toString(data) {
	    return (0, index_js_2.toUtf8String)(new Uint8Array(data));
	}
	function loadWords() {
	    if (_wordlist !== null) {
	        return _wordlist;
	    }
	    const wordlist = [];
	    // Transforms for normalizing (sort is a not quite UTF-8)
	    const transform = {};
	    // Delete the diacritic marks
	    transform[toString([227, 130, 154])] = false;
	    transform[toString([227, 130, 153])] = false;
	    // Some simple transforms that sort out most of the order
	    transform[toString([227, 130, 133])] = toString([227, 130, 134]);
	    transform[toString([227, 129, 163])] = toString([227, 129, 164]);
	    transform[toString([227, 130, 131])] = toString([227, 130, 132]);
	    transform[toString([227, 130, 135])] = toString([227, 130, 136]);
	    // Normalize words using the transform
	    function normalize(word) {
	        let result = "";
	        for (let i = 0; i < word.length; i++) {
	            let kana = word[i];
	            const target = transform[kana];
	            if (target === false) {
	                continue;
	            }
	            if (target) {
	                kana = target;
	            }
	            result += kana;
	        }
	        return result;
	    }
	    // Sort how the Japanese list is sorted
	    function sortJapanese(a, b) {
	        a = normalize(a);
	        b = normalize(b);
	        if (a < b) {
	            return -1;
	        }
	        if (a > b) {
	            return 1;
	        }
	        return 0;
	    }
	    // Load all the words
	    for (let length = 3; length <= 9; length++) {
	        const d = data[length - 3];
	        for (let offset = 0; offset < d.length; offset += length) {
	            const word = [];
	            for (let i = 0; i < length; i++) {
	                const k = mapping.indexOf(d[offset + i]);
	                word.push(227);
	                word.push((k & 0x40) ? 130 : 129);
	                word.push((k & 0x3f) + 128);
	            }
	            wordlist.push(toString(word));
	        }
	    }
	    wordlist.sort(sortJapanese);
	    // For some reason kyoku and kiyoku are flipped in node (!!).
	    // The order SHOULD be:
	    //   - kyoku
	    //   - kiyoku
	    // This should ignore "if", but that doesn't work here??
	    /* c8 ignore start */
	    if (hex(wordlist[442]) === KiYoKu && hex(wordlist[443]) === KyoKu) {
	        const tmp = wordlist[442];
	        wordlist[442] = wordlist[443];
	        wordlist[443] = tmp;
	    }
	    /* c8 ignore stop */
	    // Verify the computed list matches the official list
	    /* istanbul ignore if */
	    const checksum = (0, index_js_1.id)(wordlist.join("\n") + "\n");
	    /* c8 ignore start */
	    if (checksum !== "0xcb36b09e6baa935787fd762ce65e80b0c6a8dabdfbc3a7f86ac0e2c4fd111600") {
	        throw new Error("BIP39 Wordlist for ja (Japanese) FAILED");
	    }
	    /* c8 ignore stop */
	    _wordlist = wordlist;
	    return wordlist;
	}
	let wordlist = null;
	/**
	 *  The [[link-bip39-ja]] for [mnemonic phrases](link-bip-39).
	 *
	 *  @_docloc: api/wordlists
	 */
	class LangJa extends wordlist_js_1.Wordlist {
	    /**
	     *  Creates a new instance of the Japanese language Wordlist.
	     *
	     *  This should be unnecessary most of the time as the exported
	     *  [[langJa]] should suffice.
	     *
	     *  @_ignore:
	     */
	    constructor() { super("ja"); }
	    getWord(index) {
	        const words = loadWords();
	        (0, index_js_2.assertArgument)(index >= 0 && index < words.length, `invalid word index: ${index}`, "index", index);
	        return words[index];
	    }
	    getWordIndex(word) {
	        return loadWords().indexOf(word);
	    }
	    split(phrase) {
	        //logger.assertNormalize();
	        return phrase.split(/(?:\u3000| )+/g);
	    }
	    join(words) {
	        return words.join("\u3000");
	    }
	    /**
	     *  Returns a singleton instance of a ``LangJa``, creating it
	     *  if this is the first time being called.
	     */
	    static wordlist() {
	        if (wordlist == null) {
	            wordlist = new LangJa();
	        }
	        return wordlist;
	    }
	}
	langJa.LangJa = LangJa;
	
	return langJa;
}

var langKo = {};

var hasRequiredLangKo;

function requireLangKo () {
	if (hasRequiredLangKo) return langKo;
	hasRequiredLangKo = 1;
	Object.defineProperty(langKo, "__esModule", { value: true });
	langKo.LangKo = void 0;
	const index_js_1 = requireHash();
	const index_js_2 = requireUtils$3();
	const wordlist_js_1 = requireWordlist();
	const data = [
	    "OYAa",
	    "ATAZoATBl3ATCTrATCl8ATDloATGg3ATHT8ATJT8ATJl3ATLlvATLn4ATMT8ATMX8ATMboATMgoAToLbAToMTATrHgATvHnAT3AnAT3JbAT3MTAT8DbAT8JTAT8LmAT8MYAT8MbAT#LnAUHT8AUHZvAUJXrAUJX8AULnrAXJnvAXLUoAXLgvAXMn6AXRg3AXrMbAX3JTAX3QbAYLn3AZLgvAZrSUAZvAcAZ8AaAZ8AbAZ8AnAZ8HnAZ8LgAZ8MYAZ8MgAZ8OnAaAboAaDTrAaFTrAaJTrAaJboAaLVoAaMXvAaOl8AaSeoAbAUoAbAg8AbAl4AbGnrAbMT8AbMXrAbMn4AbQb8AbSV8AbvRlAb8AUAb8AnAb8HgAb8JTAb8NTAb8RbAcGboAcLnvAcMT8AcMX8AcSToAcrAaAcrFnAc8AbAc8MgAfGgrAfHboAfJnvAfLV8AfLkoAfMT8AfMnoAfQb8AfScrAfSgrAgAZ8AgFl3AgGX8AgHZvAgHgrAgJXoAgJX8AgJboAgLZoAgLn4AgOX8AgoATAgoAnAgoCUAgoJgAgoLXAgoMYAgoSeAgrDUAgrJTAhrFnAhrLjAhrQgAjAgoAjJnrAkMX8AkOnoAlCTvAlCV8AlClvAlFg4AlFl6AlFn3AloSnAlrAXAlrAfAlrFUAlrFbAlrGgAlrOXAlvKnAlvMTAl3AbAl3MnAnATrAnAcrAnCZ3AnCl8AnDg8AnFboAnFl3AnHX4AnHbrAnHgrAnIl3AnJgvAnLXoAnLX4AnLbrAnLgrAnLhrAnMXoAnMgrAnOn3AnSbrAnSeoAnvLnAn3OnCTGgvCTSlvCTvAUCTvKnCTvNTCT3CZCT3GUCT3MTCT8HnCUCZrCULf8CULnvCU3HnCU3JUCY6NUCbDb8CbFZoCbLnrCboOTCboScCbrFnCbvLnCb8AgCb8HgCb$LnCkLfoClBn3CloDUDTHT8DTLl3DTSU8DTrAaDTrLXDTrLjDTrOYDTrOgDTvFXDTvFnDT3HUDT3LfDUCT9DUDT4DUFVoDUFV8DUFkoDUGgrDUJnrDULl8DUMT8DUMXrDUMX4DUMg8DUOUoDUOgvDUOg8DUSToDUSZ8DbDXoDbDgoDbGT8DbJn3DbLg3DbLn4DbMXrDbMg8DbOToDboJXGTClvGTDT8GTFZrGTLVoGTLlvGTLl3GTMg8GTOTvGTSlrGToCUGTrDgGTrJYGTrScGTtLnGTvAnGTvQgGUCZrGUDTvGUFZoGUHXrGULnvGUMT8GUoMgGXoLnGXrMXGXrMnGXvFnGYLnvGZOnvGZvOnGZ8LaGZ8LmGbAl3GbDYvGbDlrGbHX3GbJl4GbLV8GbLn3GbMn4GboJTGboRfGbvFUGb3GUGb4JnGgDX3GgFl$GgJlrGgLX6GgLZoGgLf8GgOXoGgrAgGgrJXGgrMYGgrScGgvATGgvOYGnAgoGnJgvGnLZoGnLg3GnLnrGnQn8GnSbrGnrMgHTClvHTDToHTFT3HTQT8HToJTHToJgHTrDUHTrMnHTvFYHTvRfHT8MnHT8SUHUAZ8HUBb4HUDTvHUoMYHXFl6HXJX6HXQlrHXrAUHXrMnHXrSbHXvFYHXvKXHX3LjHX3MeHYvQlHZrScHZvDbHbAcrHbFT3HbFl3HbJT8HbLTrHbMT8HbMXrHbMbrHbQb8HbSX3HboDbHboJTHbrFUHbrHgHbrJTHb8JTHb8MnHb8QgHgAlrHgDT3HgGgrHgHgrHgJTrHgJT8HgLX@HgLnrHgMT8HgMX8HgMboHgOnrHgQToHgRg3HgoHgHgrCbHgrFnHgrLVHgvAcHgvAfHnAloHnCTrHnCnvHnGTrHnGZ8HnGnvHnJT8HnLf8HnLkvHnMg8HnRTrITvFUITvFnJTAXrJTCV8JTFT3JTFT8JTFn4JTGgvJTHT8JTJT8JTJXvJTJl3JTJnvJTLX4JTLf8JTLhvJTMT8JTMXrJTMnrJTObrJTQT8JTSlvJT8DUJT8FkJT8MTJT8OXJT8OgJT8QUJT8RfJUHZoJXFT4JXFlrJXGZ8JXGnrJXLV8JXLgvJXMXoJXMX3JXNboJXPlvJXoJTJXoLkJXrAXJXrHUJXrJgJXvJTJXvOnJX4KnJYAl3JYJT8JYLhvJYQToJYrQXJY6NUJbAl3JbCZrJbDloJbGT8JbGgrJbJXvJbJboJbLf8JbLhrJbLl3JbMnvJbRg8JbSZ8JboDbJbrCZJbrSUJb3KnJb8LnJfRn8JgAXrJgCZrJgDTrJgGZrJgGZ8JgHToJgJT8JgJXoJgJgvJgLX4JgLZ3JgLZ8JgLn4JgMgrJgMn4JgOgvJgPX6JgRnvJgSToJgoCZJgoJbJgoMYJgrJXJgrJgJgrLjJg6MTJlCn3JlGgvJlJl8Jl4AnJl8FnJl8HgJnAToJnATrJnAbvJnDUoJnGnrJnJXrJnJXvJnLhvJnLnrJnLnvJnMToJnMT8JnMXvJnMX3JnMg8JnMlrJnMn4JnOX8JnST4JnSX3JnoAgJnoAnJnoJTJnoObJnrAbJnrAkJnrHnJnrJTJnrJYJnrOYJnrScJnvCUJnvFaJnvJgJnvJnJnvOYJnvQUJnvRUJn3FnJn3JTKnFl3KnLT6LTDlvLTMnoLTOn3LTRl3LTSb4LTSlrLToAnLToJgLTrAULTrAcLTrCULTrHgLTrMgLT3JnLULnrLUMX8LUoJgLVATrLVDTrLVLb8LVoJgLV8MgLV8RTLXDg3LXFlrLXrCnLXrLXLX3GTLX4GgLX4OYLZAXrLZAcrLZAgrLZAhrLZDXyLZDlrLZFbrLZFl3LZJX6LZJX8LZLc8LZLnrLZSU8LZoJTLZoJnLZrAgLZrAnLZrJYLZrLULZrMgLZrSkLZvAnLZvGULZvJeLZvOTLZ3FZLZ4JXLZ8STLZ8ScLaAT3LaAl3LaHT8LaJTrLaJT8LaJXrLaJgvLaJl4LaLVoLaMXrLaMXvLaMX8LbClvLbFToLbHlrLbJn4LbLZ3LbLhvLbMXrLbMnoLbvSULcLnrLc8HnLc8MTLdrMnLeAgoLeOgvLeOn3LfAl3LfLnvLfMl3LfOX8Lf8AnLf8JXLf8LXLgJTrLgJXrLgJl8LgMX8LgRZrLhCToLhrAbLhrFULhrJXLhvJYLjHTrLjHX4LjJX8LjLhrLjSX3LjSZ4LkFX4LkGZ8LkGgvLkJTrLkMXoLkSToLkSU8LkSZ8LkoOYLl3FfLl3MgLmAZrLmCbrLmGgrLmHboLmJnoLmJn3LmLfoLmLhrLmSToLnAX6LnAb6LnCZ3LnCb3LnDTvLnDb8LnFl3LnGnrLnHZvLnHgvLnITvLnJT8LnJX8LnJlvLnLf8LnLg6LnLhvLnLnoLnMXrLnMg8LnQlvLnSbrLnrAgLnrAnLnrDbLnrFkLnrJdLnrMULnrOYLnrSTLnvAnLnvDULnvHgLnvOYLnvOnLn3GgLn4DULn4JTLn4JnMTAZoMTAloMTDb8MTFT8MTJnoMTJnrMTLZrMTLhrMTLkvMTMX8MTRTrMToATMTrDnMTrOnMT3JnMT4MnMT8FUMT8FaMT8FlMT8GTMT8GbMT8GnMT8HnMT8JTMT8JbMT8OTMUCl8MUJTrMUJU8MUMX8MURTrMUSToMXAX6MXAb6MXCZoMXFXrMXHXrMXLgvMXOgoMXrAUMXrAnMXrHgMXrJYMXrJnMXrMTMXrMgMXrOYMXrSZMXrSgMXvDUMXvOTMX3JgMX3OTMX4JnMX8DbMX8FnMX8HbMX8HgMX8HnMX8LbMX8MnMX8OnMYAb8MYGboMYHTvMYHX4MYLTrMYLnvMYMToMYOgvMYRg3MYSTrMbAToMbAXrMbAl3MbAn8MbGZ8MbJT8MbJXrMbMXvMbMX8MbMnoMbrMUMb8AfMb8FbMb8FkMcJXoMeLnrMgFl3MgGTvMgGXoMgGgrMgGnrMgHT8MgHZrMgJnoMgLnrMgLnvMgMT8MgQUoMgrHnMgvAnMg8HgMg8JYMg8LfMloJnMl8ATMl8AXMl8JYMnAToMnAT4MnAZ8MnAl3MnAl4MnCl8MnHT8MnHg8MnJnoMnLZoMnLhrMnMXoMnMX3MnMnrMnOgvMnrFbMnrFfMnrFnMnrNTMnvJXNTMl8OTCT3OTFV8OTFn3OTHZvOTJXrOTOl3OT3ATOT3JUOT3LZOT3LeOT3MbOT8ATOT8AbOT8AgOT8MbOUCXvOUMX3OXHXvOXLl3OXrMUOXvDbOX6NUOX8JbOYFZoOYLbrOYLkoOYMg8OYSX3ObHTrObHT4ObJgrObLhrObMX3ObOX8Ob8FnOeAlrOeJT8OeJXrOeJnrOeLToOeMb8OgJXoOgLXoOgMnrOgOXrOgOloOgoAgOgoJbOgoMYOgoSTOg8AbOjLX4OjMnoOjSV8OnLVoOnrAgOn3DUPXQlrPXvFXPbvFTPdAT3PlFn3PnvFbQTLn4QToAgQToMTQULV8QURg8QUoJnQXCXvQbFbrQb8AaQb8AcQb8FbQb8MYQb8ScQeAlrQeLhrQjAn3QlFXoQloJgQloSnRTLnvRTrGURTrJTRUJZrRUoJlRUrQnRZrLmRZrMnRZrSnRZ8ATRZ8JbRZ8ScRbMT8RbST3RfGZrRfMX8RfMgrRfSZrRnAbrRnGT8RnvJgRnvLfRnvMTRn8AaSTClvSTJgrSTOXrSTRg3STRnvSToAcSToAfSToAnSToHnSToLjSToMTSTrAaSTrEUST3BYST8AgST8LmSUAZvSUAgrSUDT4SUDT8SUGgvSUJXoSUJXvSULTrSU8JTSU8LjSV8AnSV8JgSXFToSXLf8SYvAnSZrDUSZrMUSZrMnSZ8HgSZ8JTSZ8JgSZ8MYSZ8QUSaQUoSbCT3SbHToSbQYvSbSl4SboJnSbvFbSb8HbSb8JgSb8OTScGZrScHgrScJTvScMT8ScSToScoHbScrMTScvAnSeAZrSeAcrSeHboSeJUoSeLhrSeMT8SeMXrSe6JgSgHTrSkJnoSkLnvSk8CUSlFl3SlrSnSl8GnSmAboSmGT8SmJU8",
	    "ATLnDlATrAZoATrJX4ATrMT8ATrMX4ATrRTrATvDl8ATvJUoATvMl8AT3AToAT3MX8AT8CT3AT8DT8AT8HZrAT8HgoAUAgFnAUCTFnAXoMX8AXrAT8AXrGgvAXrJXvAXrOgoAXvLl3AZvAgoAZvFbrAZvJXoAZvJl8AZvJn3AZvMX8AZvSbrAZ8FZoAZ8LZ8AZ8MU8AZ8OTvAZ8SV8AZ8SX3AbAgFZAboJnoAbvGboAb8ATrAb8AZoAb8AgrAb8Al4Ab8Db8Ab8JnoAb8LX4Ab8LZrAb8LhrAb8MT8Ab8OUoAb8Qb8Ab8ST8AcrAUoAcrAc8AcrCZ3AcrFT3AcrFZrAcrJl4AcrJn3AcrMX3AcrOTvAc8AZ8Ac8MT8AfAcJXAgoFn4AgoGgvAgoGnrAgoLc8AgoMXoAgrLnrAkrSZ8AlFXCTAloHboAlrHbrAlrLhrAlrLkoAl3CZrAl3LUoAl3LZrAnrAl4AnrMT8An3HT4BT3IToBX4MnvBb!Ln$CTGXMnCToLZ4CTrHT8CT3JTrCT3RZrCT#GTvCU6GgvCU8Db8CU8GZrCU8HT8CboLl3CbrGgrCbrMU8Cb8DT3Cb8GnrCb8LX4Cb8MT8Cb8ObrCgrGgvCgrKX4Cl8FZoDTrAbvDTrDboDTrGT6DTrJgrDTrMX3DTrRZrDTrRg8DTvAVvDTvFZoDT3DT8DT3Ln3DT4HZrDT4MT8DT8AlrDT8MT8DUAkGbDUDbJnDYLnQlDbDUOYDbMTAnDbMXSnDboAT3DboFn4DboLnvDj6JTrGTCgFTGTGgFnGTJTMnGTLnPlGToJT8GTrCT3GTrLVoGTrLnvGTrMX3GTrMboGTvKl3GZClFnGZrDT3GZ8DTrGZ8FZ8GZ8MXvGZ8On8GZ8ST3GbCnQXGbMbFnGboFboGboJg3GboMXoGb3JTvGb3JboGb3Mn6Gb3Qb8GgDXLjGgMnAUGgrDloGgrHX4GgrSToGgvAXrGgvAZvGgvFbrGgvLl3GgvMnvGnDnLXGnrATrGnrMboGnuLl3HTATMnHTAgCnHTCTCTHTrGTvHTrHTvHTrJX8HTrLl8HTrMT8HTrMgoHTrOTrHTuOn3HTvAZrHTvDTvHTvGboHTvJU8HTvLl3HTvMXrHTvQb4HT4GT6HT4JT8HT4Jb#HT8Al3HT8GZrHT8GgrHT8HX4HT8Jb8HT8JnoHT8LTrHT8LgvHT8SToHT8SV8HUoJUoHUoJX8HUoLnrHXrLZoHXvAl3HX3LnrHX4FkvHX4LhrHX4MXoHX4OnoHZrAZ8HZrDb8HZrGZ8HZrJnrHZvGZ8HZvLnvHZ8JnvHZ8LhrHbCXJlHbMTAnHboJl4HbpLl3HbrJX8HbrLnrHbrMnvHbvRYrHgoSTrHgrFV8HgrGZ8HgrJXoHgrRnvHgvBb!HgvGTrHgvHX4HgvHn!HgvLTrHgvSU8HnDnLbHnFbJbHnvDn8Hn6GgvHn!BTvJTCTLnJTQgFnJTrAnvJTrLX4JTrOUoJTvFn3JTvLnrJTvNToJT3AgoJT3Jn4JT3LhvJT3ObrJT8AcrJT8Al3JT8JT8JT8JnoJT8LX4JT8LnrJT8MX3JT8Rg3JT8Sc8JUoBTvJU8AToJU8GZ8JU8GgvJU8JTrJU8JXrJU8JnrJU8LnvJU8ScvJXHnJlJXrGgvJXrJU8JXrLhrJXrMT8JXrMXrJXrQUoJXvCTvJXvGZ8JXvGgrJXvQT8JX8Ab8JX8DT8JX8GZ8JX8HZvJX8LnrJX8MT8JX8MXoJX8MnvJX8ST3JYGnCTJbAkGbJbCTAnJbLTAcJboDT3JboLb6JbrAnvJbrCn3JbrDl8JbrGboJbrIZoJbrJnvJbrMnvJbrQb4Jb8RZrJeAbAnJgJnFbJgScAnJgrATrJgvHZ8JgvMn4JlJlFbJlLiQXJlLjOnJlRbOlJlvNXoJlvRl3Jl4AcrJl8AUoJl8MnrJnFnMlJnHgGbJnoDT8JnoFV8JnoGgvJnoIT8JnoQToJnoRg3JnrCZ3JnrGgrJnrHTvJnrLf8JnrOX8JnvAT3JnvFZoJnvGT8JnvJl4JnvMT8JnvMX8JnvOXrJnvPX6JnvSX3JnvSZrJn3MT8Jn3MX8Jn3RTrLTATKnLTJnLTLTMXKnLTRTQlLToGb8LTrAZ8LTrCZ8LTrDb8LTrHT8LT3PX6LT4FZoLT$CTvLT$GgrLUvHX3LVoATrLVoAgoLVoJboLVoMX3LVoRg3LV8CZ3LV8FZoLV8GTvLXrDXoLXrFbrLXvAgvLXvFlrLXvLl3LXvRn6LX4Mb8LX8GT8LYCXMnLYrMnrLZoSTvLZrAZvLZrAloLZrFToLZrJXvLZrJboLZrJl4LZrLnrLZrMT8LZrOgvLZrRnvLZrST4LZvMX8LZvSlvLZ8AgoLZ8CT3LZ8JT8LZ8LV8LZ8LZoLZ8Lg8LZ8SV8LZ8SbrLZ$HT8LZ$Mn4La6CTvLbFbMnLbRYFTLbSnFZLboJT8LbrAT9LbrGb3LbrQb8LcrJX8LcrMXrLerHTvLerJbrLerNboLgrDb8LgrGZ8LgrHTrLgrMXrLgrSU8LgvJTrLgvLl3Lg6Ll3LhrLnrLhrMT8LhvAl4LiLnQXLkoAgrLkoJT8LkoJn4LlrSU8Ll3FZoLl3HTrLl3JX8Ll3JnoLl3LToLmLeFbLnDUFbLnLVAnLnrATrLnrAZoLnrAb8LnrAlrLnrGgvLnrJU8LnrLZrLnrLhrLnrMb8LnrOXrLnrSZ8LnvAb4LnvDTrLnvDl8LnvHTrLnvHbrLnvJT8LnvJU8LnvJbrLnvLhvLnvMX8LnvMb8LnvNnoLnvSU8Ln3Al3Ln4FZoLn4GT6Ln4JgvLn4LhrLn4MT8Ln4SToMToCZrMToJX8MToLX4MToLf8MToRg3MTrEloMTvGb6MT3BTrMT3Lb6MT8AcrMT8AgrMT8GZrMT8JnoMT8LnrMT8MX3MUOUAnMXAbFnMXoAloMXoJX8MXoLf8MXoLl8MXrAb8MXrDTvMXrGT8MXrGgrMXrHTrMXrLf8MXrMU8MXrOXvMXrQb8MXvGT8MXvHTrMXvLVoMX3AX3MX3Jn3MX3LhrMX3MX3MX4AlrMX4OboMX8GTvMX8GZrMX8GgrMX8JT8MX8JX8MX8LhrMX8MT8MYDUFbMYMgDbMbGnFfMbvLX4MbvLl3Mb8Mb8Mb8ST4MgGXCnMg8ATrMg8AgoMg8CZrMg8DTrMg8DboMg8HTrMg8JgrMg8LT8MloJXoMl8AhrMl8JT8MnLgAUMnoJXrMnoLX4MnoLhrMnoMT8MnrAl4MnrDb8MnrOTvMnrOgvMnrQb8MnrSU8MnvGgrMnvHZ8Mn3MToMn4DTrMn4LTrMn4Mg8NnBXAnOTFTFnOToAToOTrGgvOTrJX8OT3JXoOT6MTrOT8GgrOT8HTpOT8MToOUoHT8OUoJT8OUoLn3OXrAgoOXrDg8OXrMT8OXvSToOX6CTvOX8CZrOX8OgrOb6HgvOb8AToOb8MT8OcvLZ8OgvAlrOgvHTvOgvJTrOgvJnrOgvLZrOgvLn4OgvMT8OgvRTrOg8AZoOg8DbvOnrOXoOnvJn4OnvLhvOnvRTrOn3GgoOn3JnvOn6JbvOn8OTrPTGYFTPbBnFnPbGnDnPgDYQTPlrAnvPlrETvPlrLnvPlrMXvPlvFX4QTMTAnQTrJU8QYCnJlQYJlQlQbGTQbQb8JnrQb8LZoQb8LnvQb8MT8Qb8Ml8Qb8ST4QloAl4QloHZvQloJX8QloMn8QnJZOlRTrAZvRTrDTrRTvJn4RTvLhvRT4Jb8RZrAZrRZ8AkrRZ8JU8RZ8LV8RZ8LnvRbJlQXRg3GboRg3MnvRg8AZ8Rg8JboRg8Jl4RnLTCbRnvFl3RnvQb8SToAl4SToCZrSToFZoSToHXrSToJU8SToJgvSToJl4SToLhrSToMX3STrAlvSTrCT9STrCgrSTrGgrSTrHXrSTrHboSTrJnoSTrNboSTvLnrST4AZoST8Ab8ST8JT8SUoJn3SU6HZ#SU6JTvSU8Db8SU8HboSU8LgrSV8JT8SZrAcrSZrAl3SZrJT8SZrJnvSZrMT8SZvLUoSZ4FZoSZ8JnoSZ8RZrScoLnrScoMT8ScoMX8ScrAT4ScrAZ8ScrLZ8ScrLkvScvDb8ScvLf8ScvNToSgrFZrShvKnrSloHUoSloLnrSlrMXoSl8HgrSmrJUoSn3BX6",
	    "ATFlOn3ATLgrDYAT4MTAnAT8LTMnAYJnRTrAbGgJnrAbLV8LnAbvNTAnAeFbLg3AgOYMXoAlQbFboAnDboAfAnJgoJTBToDgAnBUJbAl3BboDUAnCTDlvLnCTFTrSnCYoQTLnDTwAbAnDUDTrSnDUHgHgrDX8LXFnDbJXAcrETvLTLnGTFTQbrGTMnGToGT3DUFbGUJlPX3GbQg8LnGboJbFnGb3GgAYGgAg8ScGgMbAXrGgvAbAnGnJTLnvGnvATFgHTDT6ATHTrDlJnHYLnMn8HZrSbJTHZ8LTFnHbFTJUoHgSeMT8HgrLjAnHgvAbAnHlFUrDlHnDgvAnHnHTFT3HnQTGnrJTAaMXvJTGbCn3JTOgrAnJXvAXMnJbMg8SnJbMnRg3Jb8LTMnJnAl3OnJnGYrQlJnJlQY3LTDlCn3LTJjLg3LTLgvFXLTMg3GTLV8HUOgLXFZLg3LXNXrMnLX8QXFnLX9AlMYLYLXPXrLZAbJU8LZDUJU8LZMXrSnLZ$AgFnLaPXrDULbFYrMnLbMn8LXLboJgJgLeFbLg3LgLZrSnLgOYAgoLhrRnJlLkCTrSnLkOnLhrLnFX%AYLnFZoJXLnHTvJbLnLloAbMTATLf8MTHgJn3MTMXrAXMT3MTFnMUITvFnMXFX%AYMXMXvFbMXrFTDbMYAcMX3MbLf8SnMb8JbFnMgMXrMTMgvAXFnMgvGgCmMnAloSnMnFnJTrOXvMXSnOX8HTMnObJT8ScObLZFl3ObMXCZoPTLgrQXPUFnoQXPU3RXJlPX3RkQXPbrJXQlPlrJbFnQUAhrDbQXGnCXvQYLnHlvQbLfLnvRTOgvJbRXJYrQlRYLnrQlRbLnrQlRlFT8JlRlFnrQXSTClCn3STHTrAnSTLZQlrSTMnGTrSToHgGbSTrGTDnSTvGXCnST3HgFbSU3HXAXSbAnJn3SbFT8LnScLfLnv",
	    "AT3JgJX8AT8FZoSnAT8JgFV8AT8LhrDbAZ8JT8DbAb8GgLhrAb8SkLnvAe8MT8SnAlMYJXLVAl3GYDTvAl3LfLnvBUDTvLl3CTOn3HTrCT3DUGgrCU8MT8AbCbFTrJUoCgrDb8MTDTLV8JX8DTLnLXQlDT8LZrSnDUQb8FZ8DUST4JnvDb8ScOUoDj6GbJl4GTLfCYMlGToAXvFnGboAXvLnGgAcrJn3GgvFnSToGnLf8JnvGn#HTDToHTLnFXJlHTvATFToHTvHTDToHTvMTAgoHT3STClvHT4AlFl6HT8HTDToHUoDgJTrHUoScMX3HbRZrMXoHboJg8LTHgDb8JTrHgMToLf8HgvLnLnoHnHn3HT4Hn6MgvAnJTJU8ScvJT3AaQT8JT8HTrAnJXrRg8AnJbAloMXoJbrATFToJbvMnoSnJgDb6GgvJgDb8MXoJgSX3JU8JguATFToJlPYLnQlJlQkDnLbJlQlFYJlJl8Lf8OTJnCTFnLbJnLTHXMnJnLXGXCnJnoFfRg3JnrMYRg3Jn3HgFl3KT8Dg8LnLTRlFnPTLTvPbLbvLVoSbrCZLXMY6HT3LXNU7DlrLXNXDTATLX8DX8LnLZDb8JU8LZMnoLhrLZSToJU8LZrLaLnrLZvJn3SnLZ8LhrSnLaJnoMT8LbFlrHTvLbrFTLnrLbvATLlvLb6OTFn3LcLnJZOlLeAT6Mn4LeJT3ObrLg6LXFlrLhrJg8LnLhvDlPX4LhvLfLnvLj6JTFT3LnFbrMXoLnQluCTvLnrQXCY6LnvLfLnvLnvMgLnvLnvSeLf8MTMbrJn3MT3JgST3MT8AnATrMT8LULnrMUMToCZrMUScvLf8MXoDT8SnMX6ATFToMX8AXMT8MX8FkMT8MX8HTrDUMX8ScoSnMYJT6CTvMgAcrMXoMg8SToAfMlvAXLg3MnFl3AnvOT3AnFl3OUoATHT8OU3RnLXrOXrOXrSnObPbvFn6Og8HgrSnOg8OX8DbPTvAgoJgPU3RYLnrPXrDnJZrPb8CTGgvPlrLTDlvPlvFUJnoQUvFXrQlQeMnoAl3QlrQlrSnRTFTrJUoSTDlLiLXSTFg6HT3STJgoMn4STrFTJTrSTrLZFl3ST4FnMXoSUrDlHUoScvHTvSnSfLkvMXo",
	    "AUoAcrMXoAZ8HboAg8AbOg6ATFgAg8AloMXoAl3AT8JTrAl8MX8MXoCT3SToJU8Cl8Db8MXoDT8HgrATrDboOT8MXoGTOTrATMnGT8LhrAZ8GnvFnGnQXHToGgvAcrHTvAXvLl3HbrAZoMXoHgBlFXLg3HgMnFXrSnHgrSb8JUoHn6HT8LgvITvATrJUoJUoLZrRnvJU8HT8Jb8JXvFX8QT8JXvLToJTrJYrQnGnQXJgrJnoATrJnoJU8ScvJnvMnvMXoLTCTLgrJXLTJlRTvQlLbRnJlQYvLbrMb8LnvLbvFn3RnoLdCVSTGZrLeSTvGXCnLg3MnoLn3MToLlrETvMT8SToAl3MbrDU6GTvMb8LX4LhrPlrLXGXCnSToLf8Rg3STrDb8LTrSTvLTHXMnSb3RYLnMnSgOg6ATFg",
	    "HUDlGnrQXrJTrHgLnrAcJYMb8DULc8LTvFgGnCk3Mg8JbAnLX4QYvFYHnMXrRUoJnGnvFnRlvFTJlQnoSTrBXHXrLYSUJgLfoMT8Se8DTrHbDb",
	    "AbDl8SToJU8An3RbAb8ST8DUSTrGnrAgoLbFU6Db8LTrMg8AaHT8Jb8ObDl8SToJU8Pb3RlvFYoJl"
	];
	const codes = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*";
	function getHangul(code) {
	    if (code >= 40) {
	        code = code + 168 - 40;
	    }
	    else if (code >= 19) {
	        code = code + 97 - 19;
	    }
	    return (0, index_js_2.toUtf8String)(new Uint8Array([225, (code >> 6) + 132, (code & 0x3f) + 128]));
	}
	let _wordlist = null;
	function loadWords() {
	    if (_wordlist != null) {
	        return _wordlist;
	    }
	    const wordlist = [];
	    data.forEach((data, length) => {
	        length += 4;
	        for (let i = 0; i < data.length; i += length) {
	            let word = "";
	            for (let j = 0; j < length; j++) {
	                word += getHangul(codes.indexOf(data[i + j]));
	            }
	            wordlist.push(word);
	        }
	    });
	    wordlist.sort();
	    // Verify the computed list matches the official list
	    /* istanbul ignore if */
	    const checksum = (0, index_js_1.id)(wordlist.join("\n") + "\n");
	    /* c8 ignore start */
	    if (checksum !== "0xf9eddeace9c5d3da9c93cf7d3cd38f6a13ed3affb933259ae865714e8a3ae71a") {
	        throw new Error("BIP39 Wordlist for ko (Korean) FAILED");
	    }
	    /* c8 ignore stop */
	    _wordlist = wordlist;
	    return wordlist;
	}
	let wordlist = null;
	/**
	 *  The [[link-bip39-ko]] for [mnemonic phrases](link-bip-39).
	 *
	 *  @_docloc: api/wordlists
	 */
	class LangKo extends wordlist_js_1.Wordlist {
	    /**
	     *  Creates a new instance of the Korean language Wordlist.
	     *
	     *  This should be unnecessary most of the time as the exported
	     *  [[langKo]] should suffice.
	     *
	     *  @_ignore:
	     */
	    constructor() {
	        super("ko");
	    }
	    getWord(index) {
	        const words = loadWords();
	        (0, index_js_2.assertArgument)(index >= 0 && index < words.length, `invalid word index: ${index}`, "index", index);
	        return words[index];
	    }
	    getWordIndex(word) {
	        return loadWords().indexOf(word);
	    }
	    /**
	     *  Returns a singleton instance of a ``LangKo``, creating it
	     *  if this is the first time being called.
	     */
	    static wordlist() {
	        if (wordlist == null) {
	            wordlist = new LangKo();
	        }
	        return wordlist;
	    }
	}
	langKo.LangKo = LangKo;
	
	return langKo;
}

var langIt = {};

var hasRequiredLangIt;

function requireLangIt () {
	if (hasRequiredLangIt) return langIt;
	hasRequiredLangIt = 1;
	Object.defineProperty(langIt, "__esModule", { value: true });
	langIt.LangIt = void 0;
	const wordlist_owl_js_1 = requireWordlistOwl();
	const words = "0torea noica!iosorolotaleratelanena%oiadoencotivomai t ca%a0A]Bagl'Bin#E.Is(Oli!Rasi_Rog#0Cade!C[$Cus#E <Hil,I@QuaReRil>Roba+U 0Ag'Deb{DomeEgu#Eri!IpeOtt&Ul&1Fabi,Fe|Fis(F-n Oris`O(R~$0AveEn.E_,Ganc'I!It&OnismoR>*Rume Uzzo4AbardaA Bat)Ber#BoBumeCeCol>E|<FaGeb-Ian.IbiIm[ Lag#Leg)Lie_Lo@/Lusi_Me$Oge$Pa}Pest!Ta,=Ter$T%c'T)veUn$Veo*Z&0Alga`Ani+A!=B{Br#EbaEr~E^s+I]Mas(M[daMir&Mon{O!P'Pli&U, 0A}r@Ag-feAlis+Arch?At-CaCel/Co-D&D!aEl*Ge*Gol&Gus I`Neg&Nid#NoNunc'OnimoT%ipoZi1At>Ertu-OdePari!Pe^ Pogg'P)@Pun Ri,1Ab~AchideAgos+Ald~Anc'Atu-AzzoBit)Chiv'D{Eni,G[ Gi<Gu IaMon?NeseRed#RingaRos S[>SoTef%eZil*0Ciu|Col EpsiEtt>Fal I$O/Pir#P)Sagg'SeSolu Sur@TaT[u T%eT-|0Av>EismoOm>O$TesaTiv&Tor$Tr{Tua,0Sil'Str?Tis+To$moTun$0Anz#E!V[i!Vi(Volge!3Io<O ZimoZur):Be,C}$Ci$CoDessaDi/+Gn#I+L]<L@Le=L/+Lza$Mbi$Ndi!RaondaRba)R}R{$RlumeRoc]Sil>S(Tos+Ttu U,VaVosa3C]FfaLg'LvaNdaNe_,Nig$Nzi=ReRli=Ta3Bi+CiDo<Fi@GaLanc?MboNo]*O*goPedePol&Rban.R-S]|Ses S$n$Son.SturiZzar)2An@At+2Ll{Nif>R@S]Tan>T^$Zzo*2Acc'AdipoA`An}Avu-E.l/Eve|EzzaIgl?Il/n.Ind&Oc]*O@Onzi=Ul*U$2Bbo<CaDi$Ffo<IoLboO$R*<R-s}S(/S+:De|Du]La`)L]*LesseLib)LmoLor?MbusaMe-+M%?Mmi$Mo/Mpa,NapaNde/NeNi$No|N^=PacePel*P{*Pogi)Ppe)P-Psu/RapaceR}ssaR@Ris`Rova=R!|R li=Sacc'S}+Ser`SoS(<S.l*Sua,Tas+Te=T-meU Vil*3Dibi,D-+Fa*Leb!Llul&NaNo<N.simoRam~Rc&R RumeRvel*So?SpoTo2E/Ia)Ic}Iede!Ime-I=IrurgoI+r-0AoClismoFr&G$Lind)O|*R}R)siTr>T+di$UffoVet+Vi,2Ass>In~O)2C]Dar@D%eE!n.G$meLl&Lm#Lo!Lpo(L^v#LzaMaMe+M`n@Mo@Mpu.rMu<Nci(Ndur!Nfer`Ngel&NiugeN<s(Nosce!NsumoN^nuoNveg$Per P'<Pp?Pr~poRazzaRda+R%#Rn%eRol/RpoR!@Rs?R.seSm>S+n.Ttu-V#2A.!Avat+E#Ede!Emo(Esci+E+Ice I=,IsiIt>OceO=}Os++Uc?,Us}2Ci!Cu*Gi$Ll#Po/R#!R(!R_Sci$S de:DoI$L`+Meri$Nie/N$(Nz&T#Van^Vve)3Bu|C[n'Ci(Cli$Col*C! D%#Fin{FormeG$Leg&Lfi$Lir'L+M[zaNot#Nt)Pos{Rapa+Riv&RogaScri|Ser Sider'Sume!Tersi_Vo 3Amet)Cemb!Ed)Fe(Ffu(Geri!Gi+,Luv'Nam>N=nziPin P*`Po*Rad&ReRo|RupoSag'Sc! Sf&Sge*Spos S+nzaSu`$ToVa$Vel Vide!Vor#5B*<C[.Ga=,G`LceM#M[~Min&N@*NoRmi!TeT !Vu Zzi=2AgoUi@2Bb'Bit&Ca,NaOmoPl%eRatu):0A$0Ces(CoLissiO$m?0E-I]/I,I r?Uc&2Emon?LiOismoReg'4Abor#Argi!Egan.Enc#E|Ev&F>I}MoSaU(0An#B,`Es(I)O^_Oz'<Pir>U*0Dem>Du)Erg?FasiO.}Tr&Zi`1A^.I*goI(d'O},Pu!0U#!0Ar'BaBo(EdeEmi+Ige!Met>OeOsi_Ran.0Ago$AmeAnimeAudi!CaEmp'Erc{Ib{Ig[.Is.!I OfagoOrt#O(Pan(P!s(S[zaSoTe(Tim&Ton?T)(Ult&0Il>N>Rus]To0ClideoRopa0A(Id[zaIt#Olu Viva:Bbr~Cc[daChi)L]Migl?Na,Nfa-NgoN+s`ReRfal/Ri$(R`]Sc?S (Sul*T%&ToVo*(3Bb!Co/DeG#LpaLt)Mmi=Nde!Nome$Rm[ R)R^,Ssu-S^_T+U@3AbaDuc?FaGur#LoNanzaNest-Ni!O!S},S>Ume2A]<Am[]EboEm`Ori@U[.Uo)2B>Cacc?Co(Der#Gl'La+Lc*!Lgo!Nd[.Net>N?N+=Rb{Rchet+Res+Rm~R='RoR.zzaRz&Sf#S(2A}s(A=Assi$A.l*Eccet+E=+Es]IgoOlli$OndeUga,Ut+2Ci/+Cs?Gg[.Lmi<L_Man.Me|Mo(NeNz'<O]RboRgo<Ro!SoTi,:Bb?$FfeLa.oLli=LoppoMbe)M`Ranz?RboRofa$Rzo<S@|Sol'Str>T Ud'ZeboZzel/3CoLa^=L(Mel*Mm#NeN{!N='No^poRgo2Epar@Iacc'Isa0Al*LdaNep)Oc&Oiel*Or$OveR#Ro<T++Udiz'Ur#Us 2Obu*U^<1Omo0BbaLfM{Mmo<Nf'N=Ver$2Aci,A@Af>AmmoAndeAtt&A_(Az?E}EggeIfo<Ig'InzaOt+Uppo2Adag$A'An Ard&FoId&::0Ern#0O=0Ent>Ill'O*RaR>Roge$2Ie<Na)Nor#4A!Le(Log>Lude!0Bal*Bevu Boc]Bu Ma<Mer(Mol#Pac]Pe PiegoPor P)n+0Al&Arc&At^_Can C[d'Chi$Cisi_Clu(Cont)C)c'CuboDagi<D?Do,Ed{Fat^Fil&Fli|Gagg'Geg$G,seGor@G)s(Nes]O@!Oltr&Ond#Sa$Se|SiemeSonn?Suli=Tas#Te)To=]Tu{Umidi!Vali@VeceV{1Erbo,Not>O.siP~1IdeLandaOn>Rig#Ror&0Ol#O poTer>Titu Tr%e0Al?Er&:::Bb)Birin C}Cer#Cri`Cu=D@veGoMpoNcet+N.r=R@(RgaRingeSt-T[zaTi$TtugaVag=Vo)3Ga,Gge)MboN.zzaNzaO<P!Si_Ss#S T.-,VaVig#3Be)DoEv{L/Matu-Mit&Mpi@Ne&NguaQui@RaR~S}TeTig'V!a5CandaDeG~Mb&Nd-Nge_QuaceR[zoToT.r?5CeCid#Ma}Mi$(NgoPoPpo*SingaS(T :Cab)Cchi=Ce)Cin#Da`G>Gl?G<.G)Iol~LafedeLg-@Lin.(Lsa$L Lumo!NaNc?N@r/Ngi&Nifes N=)Nov-NsardaN^deNubr'PpaR#=Rci!Ret+RmoRsup'Sche-Ssa?S^$Te-s(Tr>/T <Tu)Zur}3And)C}n>Ce=.DesimoDit&GaLassaLisLod?NingeNoN(/Rcur'R[daR*Schi$SeSse!S *Tal*To@T.!3Agol&CaCel'Che,C)boDol*E,Gl'!La$Li.MosaNe-,NiNo!Ri$R^l*Sce/SsivaS Sur&TezzaTig&T-T.n.4Emon>0Del*Dif~Du*Ga$G'LeLos(Nas.)N]Ndi=Ne+r'Ni,No $N(<Nt#Nvi(RaRde!Rs%#St)Tiv#TosegaT V[zaVim[ Zzo5C}CosaFfaGhe|G='La|Li<l*L^p*Mm?N Ove!Ra,SaS]*S~Te_,To:BabboF+Nomet)Rci(R%eRr#Sce!Str&Tu-,Ut~Vigl'3Bu*saC)siGa^_Goz'Mme$Ofi+Re|R_Ssu$Ttu$Ut-,VeV)t>3Cch?NfaTi@5Bi,Ci_DoMeMi=Rd>R`,RvegeseSt-$T&Tiz?Ttur$Vel/5C,oL/Me)O_Tri!Vo/Z?,:Si0Bedi!BligoElis]L'O*So, 0Cas'<Ch'Cid[.Cor!!Cult&RaUl#0Ier$Or&1Fer+Fri!Fusc#0Ge|GiNu$4AndeseFa|I#IvaOg-m`T!0Agg'Bel>B-EgaIss'<0Do(E!IceNi_)O!_,Ta1Er#In'<Pos 1A]*AfoDi<Ecchi$Ef%eFa$Gan>Igi<Izzon.MaMegg'Na^_O*g'R[@Ribi,T[s?T~Za+Zo0A!Cur&MosiPeda,Pi.SaSid&Ta]*Te0I.ReTago$TimoTob!1A,EstI$Ipa)Oc{UnqueVi&3Io:Cche|CeCif>Del/D)<EseGaGi=Lazzi=Les&Lli@LoLudeN@)N<l*O*O=zzoPr~Rabo/Rcel/Re!Rgo*RiRl#Ro/R^!Rv[zaRz?,Ssi_St%}Tac}To*g?TtumeVo<3Cc#Dal&Do=,Gg'Lo(N&Nd%eNi(/Nnu Nomb-Ns&N /PePi+Rbe<R]r(R@n#Rfor&Rgame=R'@Rmes(R$Rp,s(Rsua(Rtug'Rva(S#!Sis+SoS^fe)Ta*T^<Tu/n.Zzo3Ace!An+At^$Cci$CozzaEgaEt-Ffe)G?`Gol'G)LaLife)L*/Lo+Mpan.Ne+N=No*Ogg?OmboRamideRet>Ri.RolisiTo<Zz>2AceboAn&As`A+$E=r'2ChezzaDe)(DismoEs?Ggi&L[+Ligo$Ll%eLmoni.Lpet+L(Lt)=Lve!M%eMo@)N.Po*(Rfi@Ro(Rpo-R!R++SaSi^_Sses(Stul#Tass'Te!2AnzoAssiAt~Eclu(Ed~Efis(Egi#Elie_Eme!E$t&Epar#Es[zaE.s Eval(I`IncipeIv#Ob,`Ocu-Odur!OfumoOge|OlungaOmessaO$meOpos+O)gaO.(OvaUd[.Ug=Ur{0Iche1Bbl>D~Gil#G$LceL{Lsan.Nt&PazzoPil/Ro:99Ad)Al]saAsiE!/O+:C]l D@pp'D~,Dun#Ff~GazzoG'<G$Mar)MingoMoNdag'N l&P#Pi=Pp!(Satu-Schi#S[.Sseg=St!l*TaVvedu 3A,Cepi!Cin Clu+Cond{Cupe)Dd{Dime!Gal#Gist)Go/G!s(Laz'<M&Mo N=Pl~Prime!Put&SaSid[.Spon(S+u)TeTi=Tor~T^f~Voc#3Assun Badi!Bel,B!zzoCar~C]Ceve!C%l#Cor@C!du D>*Dur!Fas&F,s(For`Fug'G&Gett#Ghel*Lass#Lev#Ma<!MbalzoMed'Morch'Nasci+N})NforzoN$_Nom#Nsav{N c]Nunc?Nv[i!Par#Petu Pie$Port&P!saPuli!Sa+Sch'ServaSibi,SoSpe|S )Sult#S_l Tar@Teg$Tm>T)_Un'<VaVer(Vinci+Vol Zo`5BaBot>Bus Cc?CoDagg'De!D{!G{Ll'Mant>Mpe!Nz'Sol&SpoTan.Ton@Tu/Vesc'5BizzoBr~GaLli$Mi<Mo)(O*PeSs&St>:B#Bbi&Bot#Go`Las(Ldatu-Lgem`Liv&Lmo<Lo<Lt&Lu L_Pe!Pi@Por{Race$R}smoR S((Telli.Ti-Tol*Tur$Va=V'Zi#0Adigl'AlzoAnc#Ar-At.!Av&End&Irci&Locc#Occi#Rin&Ruffo<Uff&0Ab)(Ad[zaA/Ambi&Anda*Apo/Ar(A.n&Av#El En>Ett)HedaHie=IarpaI[zaInde!IppoI)ppoI_*Ler&Odel/Olp{Ompar Onfor Opri!Or+Os(<OzzeseRibaRoll&Ru^n'Uder?Ul !Uo/U)Us&0Ebit&Ogan&0C}tu-Con@Da$Gg'/G=l#G!g#Gu{Lci#Let^_L/Lvagg'Mafo)Mbr&MeMin#Mp!N(N^!Pol Qu[zaRa+Rb#Re$R'Rp[.R-gl'Rvi!S^=To/T^`=0Ace*Ald&Am#Arzo(At%#E-IdaIl#IngeOc#Oder&OgoOl^!Orz#Ra|Rutt#Ugg{Um&U(0Abel*Arb#Onfi&Orb'Rass#Uar@1Bi*C]meEr-G/G$!L[z'L/baMbo*Mpat>Mul#Nfon?Ngo*Nist)NoN.siNu(idePar'S`S ,Tu#2It+Ogatu-Ove$0Arr{Emor#En^ E-l@IlzoOnt&Ott#Uss#0Elli!Erv#O@0BbalzoBr'C]r(C?,Da,Ffi|G$Ld#L[<Li@L/zzoLoLubi,Lv[.Mat>M`NdaNe|Nnife)Pi!Ppe(P-Rge!Rpas(Rri(R(R.gg'R_l#Spi)S+T^,0AdaAl/Arge!A /Av[ Azzo/EcieEdi!Eg<!E/tu-E-nzaEs(!Ett-,Ezz#IaIgo*(Ill#I$(I-,L[di@Or^_O(RangaRec&Ron#RuzzoUn^$0Uil*0Ad%&O l#1Abi,Ac]AffaAgn&Amp#Ant'Arnu Ase-Atu E*EppaErzoI,|I`IrpeIva,Izzo(On#Or>RappoReg#Ridu*Rozz&Ru|Ucc&UfoUp[@0B[t)C](Do!Gger{GoL+$On&PerboPpor Rgel#R)g#Ssur)Tu-0Ag&EdeseEgl'El&Enu Ez?IluppoIs+Izze-Ol+Uot&:Bac]Bul#Cci&Citur$LeLis`$Mpo<Nni$RaRdi_Rg#RiffaRp&R+rugaS Tt>Ver=Vo/+Zza3CaCn>Lefo$Me-r'MpoMu N@<Ne)Ns'<N+]*O!`RmeR-zzoRze|SiSser#St#T)T ?3F&Gel/Mb)N P>Pog-foRagg'RoTan'To*Tuban.Z'Zzo<5Cc&L,r&L Mbo/MoNfoNsil/Paz'Po*g?PpaRbaRn&R)<R -S}$Ssi!S+tu-Ta$2Aboc]AcheaAfi/Aged?Alc'Amon Ans{Apa$Ar!As*]Att#AveEcc?Emol'Espo*Ibu Iche]Ifogl'Il*InceaIoIs.zzaItur#Ivel/OmbaO$OppoO|/Ov&Ucc#2Batu-Ff#Lipa$Mul Nis?Rb&Rchi$TaTe/:0Ic#0Cel*Ci(!0I!I^_1FaF%'0Ua,4IsseTim#0A$I,Orismo0Ci<|Ge!Ghe!seI]r$If%#I($I+r'Te0Vo0Upa1Aga$G[zaLo0AnzaA C{Ig$*U-'0Ensi,IlizzoOp?:Can.Ccin#Gabon@Gli#LangaLgoL>L,t+Lo)(Lut&L_/Mpa+Ng&N{(NoN+gg'Nve-Po!Ra$Rc#R?n.S}3Det+DovaDu Ge+,I]*Lc)Li=Llu LoceN#Ndemm?N RaceRba,Rgog=Rif~RoRru}Rt~,Sc~Ssil*S+,Te-$Tri=Tus 3Andan.B-n.C[daChingoCi=nzaDim&Gil?G< Go!LeL/$MiniNc{!O/Pe-Rgo/Ro*goRu,n S](S'<SpoSsu Su-TaTel*T^`VandaVi@Zi&5CeGaLa^,Le!LpeRagi<5L}$::::Mpog=N=Pp#T.-Vor-3Fi)Lan.LoNze)Rbi$3Be|N]R]<T 5L/T>5Cche)Fo*LuPpa";
	const checksum = "0x5c1362d88fd4cf614a96f3234941d29f7d37c08c5292fde03bf62c2db6ff7620";
	let wordlist = null;
	/**
	 *  The [[link-bip39-it]] for [mnemonic phrases](link-bip-39).
	 *
	 *  @_docloc: api/wordlists
	 */
	class LangIt extends wordlist_owl_js_1.WordlistOwl {
	    /**
	     *  Creates a new instance of the Italian language Wordlist.
	     *
	     *  This should be unnecessary most of the time as the exported
	     *  [[langIt]] should suffice.
	     *
	     *  @_ignore:
	     */
	    constructor() { super("it", words, checksum); }
	    /**
	     *  Returns a singleton instance of a ``LangIt``, creating it
	     *  if this is the first time being called.
	     */
	    static wordlist() {
	        if (wordlist == null) {
	            wordlist = new LangIt();
	        }
	        return wordlist;
	    }
	}
	langIt.LangIt = LangIt;
	
	return langIt;
}

var langPt = {};

var hasRequiredLangPt;

function requireLangPt () {
	if (hasRequiredLangPt) return langPt;
	hasRequiredLangPt = 1;
	Object.defineProperty(langPt, "__esModule", { value: true });
	langPt.LangPt = void 0;
	const wordlist_owl_js_1 = requireWordlistOwl();
	const words = "0arad!ototealirertainrasoent hoandoaR#riareha!aroele'oronul0Aca%AixoAl A%rDuz'El]Er$IsmoO$ R<g(Revi Rig Rup$S*$Solu$Sur=Ut[0Ab#Alm Amp Anh A,Ei.El( En ErvoEss E$naHa.IdezImaI}#Irr Lam LiveOlhidaOmod Opl Ord Um~ Us?0Ap.EgaEnt_Ep$Equ Er-%EsivoEusI<%ItivoJetivoJun$M' Or Qu''UboV(,Vog#0R}ave0As.Er'EtivoIn?Iv` Li$Lu-%R}.0Ach Arr As&/Enci Iliz Io)It#O+R! Res%Rup U d Ul]2O`h Ud Us.1AmedaArmeAstr Av<caB(gueB*oCat+De@EcrimEgr@Er.FaceF*e%GumHeioI Ica%I- Inh Ivi Mof^Oc Pis%T( TitudeUc* Ug UnoUsivoVo0Aci A=rA[loAss BasBi-%EixaEniz I=Is$,Iz!eOl?On$ O_,Ost+P  Pli Pola0Ag+maAlis Arqu@A$m@DaimeElExoG~ Im JoOm&@Ot#Sio,T(i|Uid!eUnci Zol1Ag?Alp Anh#EgoEli=Ert^Es Eti%I$Lau,Lic^OioOn.Os)R-dizRov 0Uec(0AmeAn]A+C^D-%E@Ej Eni$Es)Gilo,GolaMaQuivoRai&Reba%Risc Rob>um S-&T(i&TigoVo[=0F&.Il#P' S?S* So&/Sun$Tr&0Ac#Adu+Al/A[f E End(Er_EuIng'Ir?IvoOl{oRac Revi=RizU&Um0Di$rM-.R>o+TismoT|@Tu 0Ali An%Ar@Ent&Es,I?Is Ul,1Ila1Ar E=Ei%Ulejo:B BosaC&]uCh `C@GagemI<oIl I}e)Ir_Ixis)J~ Le@LizaLsaN&Nd{aN/N'Nque%Ra$Rb#R}es>+c>~/Se#S)n%Ta)Te=rTidaTomTuc Unil]3B(IjoIr^IsebolLd!eLezaLgaLisc Ndi$Ng&aNz(RimbauRl*d>_Sou_XigaZ(_3CoCu=En&Foc&Furc G|naLhe%Mest[Mo$rOlog@OmboOsf(aPol Rr-$Scoi$Sne$SpoSsex$TolaZ _2Ind#OcoOque 2A$BagemC#CejoChec]Ico.L^LetimL]LoMb{oNdeNecoNi)Rb~h>d>e&R+c]V*oXe?2AncoAsaAvezaEuIgaIl/Inc OaOchu+Onze O$Uxo2C]DismoF LeRacoScaS$Z*a:B<aB`oBideBoBri$CauCet^C/r_CiqueDast_De#Fez&IaqueIp'aIxo%J#JuLafrioLc~ Ld{aLibr Lm<%Lo)M^Mbis)MisaMomilaMp<]Mufl Navi&Nc` Ne)NguruN/$Nive%NoaNs#N.Nu=Pac/P`aP* Po.Pric/Pt?PuzRacolRb}oRde&Rec>imb Rn{oRpe%R['>)zRv&/SacoScaSeb[S%loS~oT a)Tiv UleUs?U%l V&oV(na3BolaDil]G}]Lebr L~ Nou+N,N%ioRc Rr#R%'oRvejaTimV^2Aco)Al{aAm#Ap^ArmeAticeAveEfeEg^E'oEqueIco%If[In`oOc&/Ov(UmboU.Uva0CatrizCl}eD!eD['aEn%G<aM-$N$Nz><d>cui$Rurg@T 2A[zaE_Ic OneUbe2A=Ag'Ba@B($rBr C^El/Ent_E,Gum`oIb'IfaIo%L L{aLh(Lid'Lme@L}oLunaM<=Mb* M-.MitivaMov(MplexoMumNc]N=rNec.Nfu,Ng` Nhec(Njug Nsum'Nt+$Nvi%Op( P{oPi?PoQue%lRagemRdi&Rne)R}h>p|&R[ioR%joRuj>voSs-oS%laT}e%U_UveVilZ*]2A%+AvoEcheE=rEmeErEspoI^Im*&Io~oIseItic Os)UaUz{o2B<oEcaId#JoLat+Lm* Lp Ltu+Mpr'Nh#Pi=RativoRr&Rs R$Sp'S% T`o:MascoT 3Ba%rBi.BocheB~h C&queCim&CliveCo%C[.D&Dic#Duz'FesaFum G`oG+uGus.It#Ix La$rLeg#L*e L}gaM<daMit'Moli=Ntis)P-#Pil PoisP[ssaPur Riv>+m SafioSbo.Sc<,S-/Sfi#Sgas%Sigu&SlizeSmam SovaSpesaS)queSvi T&h T-$rT} Tri$UsaV(Vi=Vot#Z-a3Ag+maAle$Da)Fu,Gi.Lat#Lu-%M*u'Nast@Nh{oOceseRe$Sc[)Sf ceSp oSque%Ssip S)n%T?UrnoV(,Vi,rV~g Z(5Br?L|i=M?M*#NativoNz`>m-%Rs&SagemUr#U$r2EnagemIbleOg @2El EndeE$PloQues><%Vi=,:1Lod'O Olog@0Ific It&Uc#1Ei$Etiv 3E.1Ab| Eg(Ei$rEncoEv?Im* Ogi 0B goBol#Br~/Buti=EndaErg'Is,rPat@P-/P*#Polg P[goPurr Ul?0CaixeC-#Ch-%C}t_Deus Doss Faix Fei%FimGaj#G-/Glob Gom#G+x Gu@Jo La.Qu<$Raiz Rol#Rug SaioSe^S*oSop#T<$Te#Tid!eT|.Tr^T~/V(g Vi#Volv(XameX($Xof[Xu$1Id(me0Uip 0E$Gui=Ra)VaVil]0B<j B`$CamaColaCri)Cu)F*geFol F[g Fum#GrimaM&%P<$P`/PigaP}jaP[i)Pum Qu(daTacaT{aTic Tof#T[laTu=Vazi 0AnolIque)0F|i>opeu0Acu Ap| AsivoEntu&Id-%Olu'1Ag(oAl Am* A$Aus$Ces,Ci.Clam Ecu.EmploIb'Ig-%On( P<d'P`'P' Pl< Pos$P[s,P~s T(noT*$T+$:Bric B~o,Ce)Ci&DaDigaIxaL L)Mili Nd<goNf +N$cheRd#R`oR*h>of>p>tu+T@T|V|i)X*aZ-da3Ch#Ijo^I+n%L*oM**oNdaNoR>i#RrugemRv(S%j T&Ud&3ApoB_seC Ch{oGur#L{aL/LmeLtr RmezaSg^Ssu+TaV`aX?Xo2AcidezAm*goAn`aEch^O+Utu Uxo2C&C*/Foc GoGue%IceLg#Lhe$Rj Rmig>noR%ScoSsa2Aga)AldaAngoAscoA%rnoE'aEn%E.IezaI,Itu+On]Ustr U%'a2G'L<oLigemNd NgoNilR?Rio,Tebol:B i$B*e%DoIa$IolaIvo)LegaL/L*]Loc]Nh RagemRfoRg&oRimpoRoup>+faSodu$S$TaTil/Ve)Z`a3L#Le@LoM^M(Mi=N(o,NgivaNi&NomaN_Ologi>?Rm* S,S$r3Nas)Nc<aNg#Raf>*o2Aci&IcoseOb&Orio,2ElaIabaLfeLpe Rdu+Rje)R_S$,T{aV(n 2AcejoAdu&Afi%Al]AmpoAn^Atui$Ave$AxaEgoElh EveIloIs&/I.@Os,O%scoUd#Unhi=U)2AcheA+niAx*imEr[ I Inc/Is#LaLo,Ru:Bi.Rm}@S%V(3C.eRd Res@Si.3A$B(n D+.EnaNoPismoPnosePo%ca5JeLofo%MemNes$Nr#Rm}&Sped 5M|#:Te2E@O,2N|#RejaU<a4E,HaUdi=Um* Ustr 0AgemEd@$En,ErsivoIn-%It?Ort&Pac$Ped'Pl<%P|Pr-saPuneUniz 0Al?Ap$AtivoC-,Ch Cid'Clu'Col|Deci,D'e$Du$rEficazEr-%F<tilFes.F*i$Flam F|m&F+$rG('Ibi=Ici&ImigoJe.Oc-%O=_Ov?OxQuie$Scri$Se$Sist'Spe$rSt& S~$Tac$Tegr&Tim Toc#TrigaVa,rV(noVic$Voc 0Gur%2Ani<oOniz Re&Rit#0CaEn$Ol#Qu{o0Ali<o:N{oNg^N)R ac>dimR_SmimToV&iZida3Jum9An*]Elh^G?I>n&Rr Vem5BaDeuDocaIzLg?L/R#Ris)RoS)::B edaB|&C[C)n%Dril/G )GoaJeMb(M-.M* MpejoNchePid P,R<j>{>gu+S<]St_T(&Ti=V<daVou+Vr?X<%Z(3Ald!eB[G#G-d Gis)IgoIlo Itu+Mb[%MeNh?Ntil]OaSmaS%TivoT['oV VezaVi.3B(&Bi=D( G G{oMi.Mo{oMp?NdaNe N]gemQuidezS)gemSu+T|&V_XaX{a5C?Cu$rJis)MboNaNgeNt+RdeT#T(@Ucu+UsaUv 5ArCidezC_Ne)St[T?Va:CacoCe%Ch#CioD{aDr*]Gna)G[zaI|IsL<d_L]Lo%LucoMiloMo{oMu%N^Nc]Nda$NequimN/,Niv`aNobr NsaN%rNuse Pe#Qu* Rc?Resi>fimRgemR*/Rmi)Ro$RquiseR[coR%loRujoSco%Sm|+SsagemStig Tag&T(noT*&Tu.Xil 3D&]DidaDusaGaf}eIgaL<c@L/rMb_M|i&N*oNosNsagemNt&Rec(Rg~/S^Scl SmoSqui)St[T!eTeo_T+gemX(Xic<o3C_G&]Gr Lag[L- Lh M#N( N/caNist_N|@OloR<%RtiloStur 5Cid!eD(noD~ EdaErIn/I)Ldu+LezaL/L*e%LuscoN)n]Quec><goRcegoR=moR-aSaicoSque%S.daT`TimToTriz5DaI$La)Lh(L.Ndi&Ni=R&h>c/Sc~ SeuSic&:Ci}&D?JaMo_R*>r#Sc(TivaTu[zaV&]Veg Vio3Bl*aB~o,GativaGoci Gri$Rvo,TaUr&VascaVo{o3N N/TidezV` 5B[zaI%IvaMe M*&Rdes%R% T Tici TurnoV`oVil/Vo5Bl#DezM(&Pci&Tr'Vem:0Cec#Edec(JetivoRig#Scu_S%t+T(Tur 0Id-%Io,Orr(Ulis)Up#2Eg<%EnsivaEr-daIc*aUsc#0Iva4Ar@Eo,H Iv{a0B_Ele%Is,It'0D~#E_,Tem1Ci}&Er?On-%OrtunoOs$1ArBi.DemD*&F<a$GasmoG~/I-t&IgemIun=LaTo=xoV&/0Cil S^SoT-.0Imismo0S!@T}oTub_Vi=0El]Ul 1Id Ig- :Ca$Ci-%Co%Ctu D @Dr*/G GodeIn`Ir IsagemLav+Lest+Lhe)Li$Lm^Lpi.Nc^N`aNfle$NquecaN)n&PagaioP`^P'oRaf*>ci&Rd&RedeRtidaSmoSs#S%lTam T-%T* T_noUl^Us 3C~i D& Dest[D@t+D+G^I$r&IxeLeLic<oNcaNdur N{aN]scoNs?N%Rceb(Rfei$Rgun)Ri$Rmit'Rn>plexoRsi<>%nceRucaSc#SquisaS,aTisc 3AdaC#Ed!eGm-$Last+Lh#Lo.M-)Nc`NguimN]No%N.On{oPocaQue%R<h>esRue)Sc S$laT<gaVe%2An)Aque)At*aEbeuUmagemUvi&1Eu0DaE'aEtisaLeg^Lici Lu-%Lvil/M MbaNd( N.@P~o,R)Ssu'St&TeUp U,Vo 2A@Anc]A$AxeEceEd?Efei$Emi Ens Ep  Esil]E%x$Ev-'Ez Ima)IncesaIsmaIv#Oces,Odu$Ofe)Oibi=Oje$Ome%rOpag OsaO%$rOv?2Blic DimL Lm} Ls{aNh&N'PiloRezaX?:99Ad+Ant@Ar$AseEbr EdaEijoEn%Eri=Im}oInaIosque:B<^BiscoCh Ci} Di&I In]IoIvaJ^L#M&Ng(Nhu+P!u+P`PidezPosaQue%Rid!eS<%Scun/Sg Sp?S%'aSur Taz<aTo{a3AlezaAnim Av(Baix B`deBol C#C-%CheioCiboC|d Cru.Cu DeDim'D}daDuzidaEnvioF* Flet'Fog F[scoFugi G&@GimeG+In#I$rJei.LativoM?M-=M|,Nov#P oP`'Ple$Pol/P[saPudi Qu((S-]Sfri Sga.Sid'Solv(Spei$SsacaS)n%Sum'T&/T(T' Tom^T+.V` Vi,rVol)3Ac/CaGidezGo_,M NgueS^ScoS}/5B&oChe=D^DeioDov@E=rLe)M<oNc S#S{aS$TaT{oT*aT~ UcoUpaXo5B_Gi=Go,IvoMoPest[S,:B|Ci ColaCud'DioF'aGaGr^Ib_L^L{oLg#LivaLpic Lsic]L.Lv?Mb Mu+iN Nf}aNgueNid!ePa$Rd>g-$Rje)Tur Ud!eXof}eZ}&3C C~ DaD-$Di#Do,Du$rGm-$G[=Gun=IvaLe$LvagemM<&M-%N?N/rNsu&Nt#P #Rei>*g>+RvoTemb_T|3GiloLhue)Lic}eMetr@Mpat@M~ N&Nc(oNg~ NopseN$ni>-eRiTu#5B(<oB+C|_G_JaLdaLetr L%'oMbrioNa)Nd Neg Nh?NoP+noQue%Rr'R%ioSsegoTaqueT(r V#Z*/5Aviz BidaBm(,B,loBt+'Ca)Ces,CoDes%FixoG?G('Jei$Lfa$M'OrP(i|Plic Pos$Prim'Rd*>fis)Rp[s>[&Rt'Sp'oS%n$:B`aBle%Bu^C/G `aLh(LoLvezM</Mb|imMpaNg-%N$P Pioc>dioRef>j>+xaTuagemUr*oXativoXis)3Atr&C(Ci=Cl#Dio,IaIm Lef}eLh#Mp(oN-%N,rN.Rm&RnoRr-oSeSou+St#ToXtu+Xugo3A+G`aJoloMbr MidezNgi=N%'oRagemT~ 5Al]C]L( LiceM^Mil/N`Ntu+Pe%R>ci=RneioRqueRr!>$S.UcaUp{aX*a2Ab&/Acej Adu$rAfeg Aje$AmaAnc ApoAs{oAt?Av E*oEm(Epid EvoIagemIboIcicloId-%Ilog@Ind!eIploItur Iunf&Oc Ombe)OvaUnfoUque2B~ C<oDoLipaPiRboRm>quesaT` T|i&:7V 3Bigo0HaId!eIf|me3Olog@SoTigaUbu0A=InaUfru':C*aDi G o,I=,LaL-%Lid!eLo[sN)gemQu{oR<d>e)Rr(Sc~ Sil]S,u+Z Zio3A=D Ge.Ic~ L{oLhiceLu=Nce=rNdav&N( Nt[Rb&Rd!eRe?Rg}h>m`/RnizRs R%n%SpaSti=T|i&3Adu$AgemAj Atu+Br?D{aDr @ElaGaG-%Gi G| L ejoNcoNhe)NilOle)R!>tudeSi.S$Tr&V{oZ*/5A=rArG&L<%LeibolL)gemLumo,Nt!e5L$Vuz`a::D[zRope3QueRe.Rife3Ng ::Ng#Rp 3BuL?9Mb Olog@5Mbi=";
	const checksum = "0x2219000926df7b50d8aa0a3d495826b988287df4657fbd100e6fe596c8f737ac";
	let wordlist = null;
	/**
	 *  The [[link-bip39-pt]] for [mnemonic phrases](link-bip-39).
	 *
	 *  @_docloc: api/wordlists
	 */
	class LangPt extends wordlist_owl_js_1.WordlistOwl {
	    /**
	     *  Creates a new instance of the Portuguese language Wordlist.
	     *
	     *  This should be unnecessary most of the time as the exported
	     *  [[langPt]] should suffice.
	     *
	     *  @_ignore:
	     */
	    constructor() { super("pt", words, checksum); }
	    /**
	     *  Returns a singleton instance of a ``LangPt``, creating it
	     *  if this is the first time being called.
	     */
	    static wordlist() {
	        if (wordlist == null) {
	            wordlist = new LangPt();
	        }
	        return wordlist;
	    }
	}
	langPt.LangPt = LangPt;
	
	return langPt;
}

var langZh = {};

var hasRequiredLangZh;

function requireLangZh () {
	if (hasRequiredLangZh) return langZh;
	hasRequiredLangZh = 1;
	Object.defineProperty(langZh, "__esModule", { value: true });
	langZh.LangZh = void 0;
	const index_js_1 = requireHash();
	const index_js_2 = requireUtils$3();
	const wordlist_js_1 = requireWordlist();
	const data = "}aE#4A=Yv&co#4N#6G=cJ&SM#66|/Z#4t&kn~46#4K~4q%b9=IR#7l,mB#7W_X2*dl}Uo~7s}Uf&Iw#9c&cw~6O&H6&wx&IG%v5=IQ~8a&Pv#47$PR&50%Ko&QM&3l#5f,D9#4L|/H&tQ;v0~6n]nN<di,AM=W5%QO&ka&ua,hM^tm=zV=JA=wR&+X]7P&NB#4J#5L|/b[dA}tJ<Do&6m&u2[U1&Kb.HM&mC=w0&MW<rY,Hq#6M}QG,13&wP}Jp]Ow%ue&Kg<HP<D9~4k~9T&I2_c6$9T#9/[C5~7O~4a=cs&O7=KK=An&l9$6U$8A&uD&QI|/Y&bg}Ux&F2#6b}E2&JN&kW&kp=U/&bb=Xl<Cj}k+~5J#6L&5z&9i}b4&Fo,ho(X0_g3~4O$Fz&QE<HN=Ww]6/%GF-Vw=tj&/D&PN#9g=YO}cL&Of&PI~5I&Ip=vU=IW#9G;0o-wU}ss&QR<BT&R9=tk$PY_dh&Pq-yh]7T,nj.Xu=EP&76=cI&Fs*Xg}z7$Gb&+I=DF,AF=cA}rL#7j=Dz&3y<Aa$52=PQ}b0(iY$Fa}oL&xV#6U=ec=WZ,xh%RY<dp#9N&Fl&44=WH*A7=sh&TB&8P=07;u+&PK}uh}J5#72)V/=xC,AB$k0&f6;1E|+5=1B,3v]6n&wR%b+&xx]7f=Ol}fl;+D^wG]7E;nB;uh^Ir&l5=JL,nS=cf=g5;u6|/Q$Gc=MH%Hg#5d%M6^86=U+$Gz,l/,ir^5y&Ba&/F-IY&FI&be%IZ#77&PW_Nu$kE(Yf&NX]7Z,Jy&FJ(Xo&Nz#/d=y7&MX<Ag}Z+;nE]Dt(iG#4D=13&Pj~4c%v8&Zo%OL&/X#4W<HR&ie~6J_1O(Y2=y5=Ad*cv_eB#6k&PX:BU#7A;uk&Ft&Fx_dD=U2;vB=U5=4F}+O&GN.HH:9s=b0%NV(jO&IH=JT}Z9=VZ<Af,Kx^4m&uJ%c6,6r;9m#+L}cf%Kh&F3~4H=vP}bu,Hz|++,1w]nv}k6;uu$jw*Kl*WX&uM[x7&Fr[m7$NO&QN]hu=JN}nR^8g#/h(ps|KC;vd}xz=V0}p6&FD$G1#7K<bG_4p~8g&cf;u4=tl}+k%5/}fz;uw<cA=u1}gU}VM=LJ=eX&+L&Pr#4U}p2:nC,2K]7H:jF&9x}uX#9O=MB<fz~8X~5m&4D&kN&u5%E/(h7(ZF&VG<de(qM|/e-Wt=3x(a+,/R]f/&ND$Ro&nU}0g=KA%kH&NK$Ke<dS}cB&IX~5g$TN]6m=Uv,Is&Py=Ef%Kz#+/%bi&+A<F4$OG&4C&FL#9V<Zk=2I_eE&6c]nw&kq$HG}y+&A8$P3}OH=XP]70%IS(AJ_gH%GZ&tY&AZ=vb~6y&/r=VI=Wv<Zi=fl=xf&eL}c8}OL=MJ=g8$F7=YT}9u=0+^xC}JH&nL^N0~4T]K2,Cy%OC#6s;vG(AC^xe^cG&MF}Br#9P;wD-7h$O/&xA}Fn^PC]6i]7G&8V$Qs;vl(TB~73~4l<mW&6V=2y&uY&+3)aP}XF;LP&kx$wU=t7;uy<FN&lz)7E=Oo*Y+;wI}9q}le;J6&Ri&4t&Qr#8B=cb&vG=J5|Ql(h5<Yy~4+}QD,Lx=wn%K/&RK=dO&Pw,Q9=co%4u;9u}g0@6a^4I%b0=zo|/c&tX=dQ=OS#+b=yz_AB&wB&Pm=W9$HP_gR=62=AO=ti=hI,oA&jr&dH=tm&b6$P2(x8=zi;nG~7F;05]0n[Ix&3m}rg=Xp=cd&uz]7t;97=cN;vV<jf&FF&F1=6Q&Ik*Kk&P4,2z=fQ]7D&3u,H0=d/}Uw<ZN<7R}Kv;0f$H7,MD]7n$F0#88~9Z%da=by;+T#/u=VF&fO&kr^kf<AB]sU,I5$Ng&Pz;0i&QD&vM=Yl:BM;nJ_xJ]U7&Kf&30,3f|Z9*dC)je_jA&Q4&Kp$NH(Yz#6S&Id%Ib=KX,AD=KV%dP}tW&Pk^+E_Ni=cq,3R}VZ(Si=b+}rv;0j}rZ]uA,/w(Sx&Jv$w9&4d&wE,NJ$Gy=J/]Ls#7k<ZQ<Y/&uj]Ov$PM;v3,2F&+u:up=On&3e,Jv;90=J+&Qm]6q}bK#+d~8Y(h2]hA;99&AS=I/}qB&dQ}yJ-VM}Vl&ui,iB&G3|Dc]7d=eQ%dX%JC_1L~4d^NP;vJ&/1)ZI#7N]9X[bQ&PL=0L(UZ,Lm&kc&IR}n7(iR<AQ<dg=33=vN}ft}au]7I,Ba=x9=dR~6R&Tq=Xi,3d$Nr&Bc}DI&ku&vf]Dn,/F&iD,Ll&Nw=0y&I7=Ls=/A&tU=Qe}Ua&uk&+F=g4=gh=Vj#+1&Qn}Uy*44#5F,Pc&Rz*Xn=oh=5W;0n_Nf(iE<Y7=vr=Zu]oz#5Z%mI=kN=Bv_Jp(T2;vt_Ml<FS&uI=L/&6P]64$M7}86<bo%QX(SI%IY&VK=Al&Ux;vv;ut*E/%uh<ZE|O3,M2(yc]yu=Wk&tp:Ex}hr,Cl&WE)+Z=8U}I2_4Q,hA_si=iw=OM=tM=yZ%Ia=U7;wT}b+;uo=Za}yS!5x}HD}fb#5O_dA;Nv%uB(yB;01(Sf}Fk;v7}Pt#8v<mZ#7L,/r&Pl~4w&f5=Ph$Fw_LF&8m,bL=yJ&BH}p/*Jn}tU~5Q;wB(h6]Df]8p^+B;E4&Wc=d+;Ea&bw$8C&FN,DM=Yf}mP~5w=fT#6V=mC=Fi=AV}jB&AN}lW}aH#/D)dZ;hl;vE}/7,CJ;31&w8,hj%u9_Js=jJ&4M~8k=TN&eC}nL&uc-wi&lX}dj=Mv=e2#6u=cr$uq$6G]8W}Jb:nm=Yg<b3(UA;vX&6n&xF=KT,jC,De&R8&oY=Zv&oB]7/=Z2&Oa}bf,hh(4h^tZ&72&Nx;D2&xL~5h~40)ZG)h+=OJ&RA]Bv$yB=Oq=df,AQ%Jn}OJ;11,3z&Tl&tj;v+^Hv,Dh(id=s+]7N&N3)9Q~8f,S4=uW=w4&uX,LX&3d]CJ&yp&8x<b2_do&lP=y/<cy_dG=Oi=7R(VH(lt_1T,Iq_AA;12^6T%k6#8K[B1{oO<AU[Bt;1b$9S&Ps<8T=St{bY,jB(Zp&63&Uv$9V,PM]6v&Af}zW[bW_oq}sm}nB&Kq&gC&ff_eq_2m&5F&TI}rf}Gf;Zr_z9;ER&jk}iz_sn<BN~+n&vo=Vi%97|ZR=Wc,WE&6t]6z%85(ly#84=KY)6m_5/=aX,N3}Tm&he&6K]tR_B2-I3;u/&hU&lH<AP=iB&IA=XL;/5&Nh=wv<BH#79=vS=zl<AA=0X_RG}Bw&9p$NW,AX&kP_Lp&/Z(Tc]Mu}hs#6I}5B&cI<bq&H9#6m=K9}vH(Y1(Y0#4B&w6,/9&gG<bE,/O=zb}I4_l8<B/;wL%Qo<HO[Mq=XX}0v&BP&F4(mG}0i}nm,EC=9u{I3,xG&/9=JY*DK&hR)BX=EI=cx=b/{6k}yX%A+&wa}Xb=la;wi^lL;0t}jo&Qb=xg=XB}iO<qo{bR=NV&8f=a0&Jy;0v=uK)HK;vN#6h&jB(h/%ud&NI%wY.X7=Pt}Cu-uL&Gs_hl%mH,tm]78=Lb^Q0#7Y=1u<Bt&+Q=Co_RH,w3;1e}ux<aU;ui}U3&Q5%bt]63&UQ|0l&uL}O7&3o,AV&dm|Nj(Xt*5+(Uu&Hh(p7(UF=VR=Bp^Jl&Hd[ix)9/=Iq]C8<67]66}mB%6f}bb}JI]8T$HA}db=YM&pa=2J}tS&Y0=PS&y4=cX$6E,hX,XP&nR;04,FQ&l0&Vm_Dv#5Y~8Z=Bi%MA]6x=JO:+p,Az&9q,Hj~6/}SD=K1:EJ}nA;Qo#/E]9R,Ie&6X%W3]61&v4=xX_MC=0q;06(Xq=fs}IG}Dv=0l}o7$iZ;9v&LH&DP-7a&OY,SZ,Kz,Cv&dh=fx|Nh,F/~7q=XF&w+;9n&Gw;0h}Z7<7O&JK(S7&LS<AD<ac=wo<Dt&zw%4B=4v#8P;9o~6p*vV=Tm,Or&I6=1q}nY=P0=gq&Bl&Uu,Ch%yb}UY=zh}dh}rl(T4_xk(YA#8R*xH,IN}Jn]7V}C4&Ty}j3]7p=cL=3h&wW%Qv<Z3=f0&RI&+S(ic_zq}oN&/Y=z1;Td=LW=0e=OI(Vc,+b^ju(UL;0r:Za%8v=Rp=zw&58&73&wK}qX]6y&8E)a2}WR=wP^ur&nQ<cH}Re=Aq&wk}Q0&+q=PP,Gc|/d^k5,Fw]8Y}Pg]p3=ju=ed}r5_yf&Cs]7z$/G<Cm&Jp&54_1G_gP_Ll}JZ;0u]k8_7k(Sg]65{9i=LN&Sx&WK,iW&fD&Lk{9a}Em-9c#8N&io=sy]8d&nT&IK(lx#7/$lW(Td<s8~49,3o<7Y=MW(T+_Jr&Wd,iL}Ct=xh&5V;v4&8n%Kx=iF&l2_0B{B+,If(J0,Lv;u8=Kx-vB=HC&vS=Z6&fU&vE^xK;3D=4h=MR#45:Jw;0d}iw=LU}I5=I0]gB*im,K9}GU,1k_4U&Tt=Vs(iX&lU(TF#7y,ZO}oA&m5#5P}PN}Uz=hM<B1&FB<aG,e6~7T<tP(UQ_ZT=wu&F8)aQ]iN,1r_Lo&/g:CD}84{J1_Ki&Na&3n$jz&FE=dc;uv;va}in}ll=fv(h1&3h}fp=Cy}BM(+E~8m}lo%v7=hC(T6$cj=BQ=Bw(DR,2j=Ks,NS|F+;00=fU=70}Mb(YU;+G&m7&hr=Sk%Co]t+(X5_Jw}0r}gC(AS-IP&QK<Z2#8Q$WC]WX}T2&pG_Ka,HC=R4&/N;Z+;ch(C7,D4$3p_Mk&B2$8D=n9%Ky#5z(CT&QJ#7B]DC]gW}nf~5M;Iw#80}Tc_1F#4Z-aC}Hl=ph=fz,/3=aW}JM}nn;DG;vm}wn,4P}T3;wx&RG$u+}zK=0b;+J_Ek{re<aZ=AS}yY#5D]7q,Cp}xN=VP*2C}GZ}aG~+m_Cs=OY#6r]6g<GS}LC(UB=3A=Bo}Jy<c4}Is;1P<AG}Op<Z1}ld}nS=1Z,yM&95&98=CJ(4t:2L$Hk=Zo}Vc;+I}np&N1}9y=iv}CO*7p=jL)px]tb^zh&GS&Vl%v/;vR=14=zJ&49|/f]hF}WG;03=8P}o/&Gg&rp;DB,Kv}Ji&Pb;aA^ll(4j%yt}+K$Ht#4y&hY]7Y<F1,eN}bG(Uh%6Z]t5%G7;+F_RE;it}tL=LS&Da=Xx(S+(4f=8G=yI}cJ}WP=37=jS}pX}hd)fp<A8=Jt~+o$HJ=M6}iX=g9}CS=dv=Cj(mP%Kd,xq|+9&LD(4/=Xm&QP=Lc}LX&fL;+K=Op(lu=Qs.qC:+e&L+=Jj#8w;SL]7S(b+#4I=c1&nG_Lf&uH;+R)ZV<bV%B/,TE&0H&Jq&Ah%OF&Ss(p2,Wv&I3=Wl}Vq;1L&lJ#9b_1H=8r=b8=JH(SZ=hD=J2#7U,/U#/X~6P,FU<eL=jx,mG=hG=CE&PU=Se(qX&LY=X6=y4&tk&QQ&tf=4g&xI}W+&mZ=Dc#7w}Lg;DA;wQ_Kb(cJ=hR%yX&Yb,hw{bX_4X;EP;1W_2M}Uc=b5(YF,CM&Tp^OJ{DD]6s=vF=Yo~8q}XH}Fu%P5(SJ=Qt;MO]s8<F3&B3&8T(Ul-BS*dw&dR<87}/8]62$PZ]Lx<Au}9Q]7c=ja=KR,Go,Us&v6(qk}pG&G2=ev^GM%w4&H4]7F&dv]J6}Ew:9w=sj-ZL}Ym$+h(Ut(Um~4n=Xs(U7%eE=Qc_JR<CA#6t<Fv|/I,IS,EG<F2(Xy$/n<Fa(h9}+9_2o&N4#7X<Zq|+f_Dp=dt&na,Ca=NJ)jY=8C=YG=s6&Q+<DO}D3=xB&R1(lw;Qn<bF(Cu|/B}HV=SS&n7,10&u0]Dm%A6^4Q=WR(TD=Xo<GH,Rj(l8)bP&n/=LM&CF,F5&ml=PJ;0k=LG=tq,Rh,D6@4i=1p&+9=YC%er_Mh;nI;0q=Fw]80=xq=FM$Gv;v6&nc;wK%H2&Kj;vs,AA=YP,66}bI(qR~5U=6q~4b$Ni=K5.X3$So&Iu(p+]8G=Cf=RY(TS_O3(iH&57=fE=Dg_Do#9z#7H;FK{qd_2k%JR}en&gh_z8;Rx}9p<cN_Ne,DO;LN_7o~/p=NF=5Y}gN<ce<C1,QE]Wv=3u<BC}GK]yq}DY&u/_hj=II(pz&rC,jV&+Z}ut=NQ;Cg-SR_ZS,+o=u/;Oy_RK_QF(Fx&xP}Wr&TA,Uh&g1=yr{ax[VF$Pg(YB;Ox=Vy;+W(Sp}XV%dd&33(l/]l4#4Y}OE=6c=bw(A7&9t%wd&N/&mo,JH&Qe)fm=Ao}fu=tH";
	const deltaData = "FAZDC6BALcLZCA+GBARCW8wNCcDDZ8LVFBOqqDUiou+M42TFAyERXFb7EjhP+vmBFpFrUpfDV2F7eB+eCltCHJFWLFCED+pWTojEIHFXc3aFn4F68zqjEuKidS1QBVPDEhE7NA4mhMF7oThD49ot3FgtzHFCK0acW1x8DH1EmLoIlrWFBLE+y5+NA3Cx65wJHTaEZVaK1mWAmPGxgYCdxwOjTDIt/faOEhTl1vqNsKtJCOhJWuio2g07KLZEQsFBUpNtwEByBgxFslFheFbiEPvi61msDvApxCzB6rBCzox7joYA5UdDc+Cb4FSgIabpXFAj3bjkmFAxCZE+mD/SFf/0ELecYCt3nLoxC6WEZf2tKDB4oZvrEmqFkKk7BwILA7gtYBpsTq//D4jD0F0wEB9pyQ1BD5Ba0oYHDI+sbDFhvrHXdDHfgFEIJLi5r8qercNFBgFLC4bo5ERJtamWBDFy73KCEb6M8VpmEt330ygCTK58EIIFkYgF84gtGA9Uyh3m68iVrFbWFbcbqiCYHZ9J1jeRPbL8yswhMiDbhEhdNoSwFbZrLT740ABEqgCkO8J1BLd1VhKKR4sD1yUo0z+FF59Mvg71CFbyEhbHSFBKEIKyoQNgQppq9T0KAqePu0ZFGrXOHdKJqkoTFhYvpDNyuuznrN84thJbsCoO6Cu6Xlvntvy0QYuAExQEYtTUBf3CoCqwgGFZ4u1HJFzDVwEy3cjcpV4QvsPaBC3rCGyCF23o4K3pp2gberGgFEJEHo4nHICtyKH2ZqyxhN05KBBJIQlKh/Oujv/DH32VrlqFdIFC7Fz9Ct4kaqFME0UETLprnN9kfy+kFmtQBB0+5CFu0N9Ij8l/VvJDh2oq3hT6EzjTHKFN7ZjZwoTsAZ4Exsko6Fpa6WC+sduz8jyrLpegTv2h1EBeYpLpm2czQW0KoCcS0bCVXCmuWJDBjN1nQNLdF58SFJ0h7i3pC3oEOKy/FjBklL70XvBEEIWp2yZ04xObzAWDDJG7f+DbqBEA7LyiR95j7MDVdDViz2RE5vWlBMv5e4+VfhP3aXNPhvLSynb9O2x4uFBV+3jqu6d5pCG28/sETByvmu/+IJ0L3wb4rj9DNOLBF6XPIODr4L19U9RRofAG6Nxydi8Bki8BhGJbBAJKzbJxkZSlF9Q2Cu8oKqggB9hBArwLLqEBWEtFowy8XK8bEyw9snT+BeyFk1ZCSrdmgfEwFePTgCjELBEnIbjaDDPJm36rG9pztcEzT8dGk23SBhXBB1H4z+OWze0ooFzz8pDBYFvp9j9tvFByf9y4EFdVnz026CGR5qMr7fxMHN8UUdlyJAzlTBDRC28k+L4FB8078ljyD91tUj1ocnTs8vdEf7znbzm+GIjEZnoZE5rnLL700Xc7yHfz05nWxy03vBB9YGHYOWxgMQGBCR24CVYNE1hpfKxN0zKnfJDmmMgMmBWqNbjfSyFCBWSCGCgR8yFXiHyEj+VtD1FB3FpC1zI0kFbzifiKTLm9yq5zFmur+q8FHqjoOBWsBPiDbnCC2ErunV6cJ6TygXFYHYp7MKN9RUlSIS8/xBAGYLzeqUnBF4QbsTuUkUqGs6CaiDWKWjQK9EJkjpkTmNCPYXL";
	const _wordlist = {
	    zh_cn: null,
	    zh_tw: null
	};
	const Checks = {
	    zh_cn: "0x17bcc4d8547e5a7135e365d1ab443aaae95e76d8230c2782c67305d4f21497a1",
	    zh_tw: "0x51e720e90c7b87bec1d70eb6e74a21a449bd3ec9c020b01d3a40ed991b60ce5d"
	};
	const codes = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
	const style = "~!@#$%^&*_-=[]{}|;:,.()<>?";
	function loadWords(locale) {
	    if (_wordlist[locale] != null) {
	        return _wordlist[locale];
	    }
	    const wordlist = [];
	    let deltaOffset = 0;
	    for (let i = 0; i < 2048; i++) {
	        const s = style.indexOf(data[i * 3]);
	        const bytes = [
	            228 + (s >> 2),
	            128 + codes.indexOf(data[i * 3 + 1]),
	            128 + codes.indexOf(data[i * 3 + 2]),
	        ];
	        if (locale === "zh_tw") {
	            const common = s % 4;
	            for (let i = common; i < 3; i++) {
	                bytes[i] = codes.indexOf(deltaData[deltaOffset++]) + ((i == 0) ? 228 : 128);
	            }
	        }
	        wordlist.push((0, index_js_2.toUtf8String)(new Uint8Array(bytes)));
	    }
	    // Verify the computed list matches the official list
	    const checksum = (0, index_js_1.id)(wordlist.join("\n") + "\n");
	    /* c8 ignore start */
	    if (checksum !== Checks[locale]) {
	        throw new Error(`BIP39 Wordlist for ${locale} (Chinese) FAILED`);
	    }
	    /* c8 ignore stop */
	    _wordlist[locale] = wordlist;
	    return wordlist;
	}
	const wordlists = {};
	/**
	 *  The [[link-bip39-zh_cn]] and [[link-bip39-zh_tw]] for
	 *  [mnemonic phrases](link-bip-39).
	 *
	 *  @_docloc: api/wordlists
	 */
	class LangZh extends wordlist_js_1.Wordlist {
	    /**
	     *  Creates a new instance of the Chinese language Wordlist for
	     *  the %%dialect%%, either ``"cn"`` or ``"tw"`` for simplified
	     *  or traditional, respectively.
	     *
	     *  This should be unnecessary most of the time as the exported
	     *  [[langZhCn]] and [[langZhTw]] should suffice.
	     *
	     *  @_ignore:
	     */
	    constructor(dialect) { super("zh_" + dialect); }
	    getWord(index) {
	        const words = loadWords(this.locale);
	        (0, index_js_2.assertArgument)(index >= 0 && index < words.length, `invalid word index: ${index}`, "index", index);
	        return words[index];
	    }
	    getWordIndex(word) {
	        return loadWords(this.locale).indexOf(word);
	    }
	    split(phrase) {
	        phrase = phrase.replace(/(?:\u3000| )+/g, "");
	        return phrase.split("");
	    }
	    /**
	     *  Returns a singleton instance of a ``LangZh`` for %%dialect%%,
	     *  creating it if this is the first time being called.
	     *
	     *  Use the %%dialect%% ``"cn"`` or ``"tw"`` for simplified or
	     *  traditional, respectively.
	     */
	    static wordlist(dialect) {
	        if (wordlists[dialect] == null) {
	            wordlists[dialect] = new LangZh(dialect);
	        }
	        return wordlists[dialect];
	    }
	}
	langZh.LangZh = LangZh;
	
	return langZh;
}

var hasRequiredWordlists$1;

function requireWordlists$1 () {
	if (hasRequiredWordlists$1) return wordlists;
	hasRequiredWordlists$1 = 1;
	Object.defineProperty(wordlists, "__esModule", { value: true });
	wordlists.wordlists = void 0;
	const lang_cz_js_1 = requireLangCz();
	const lang_en_js_1 = requireLangEn();
	const lang_es_js_1 = requireLangEs();
	const lang_fr_js_1 = requireLangFr();
	const lang_ja_js_1 = requireLangJa();
	const lang_ko_js_1 = requireLangKo();
	const lang_it_js_1 = requireLangIt();
	const lang_pt_js_1 = requireLangPt();
	const lang_zh_js_1 = requireLangZh();
	/**
	 *  The available Wordlists by their
	 *  [ISO 639-1 Language Code](link-wiki-iso639).
	 *
	 *  (**i.e.** [cz](LangCz), [en](LangEn), [es](LangEs), [fr](LangFr),
	 *  [ja](LangJa), [ko](LangKo), [it](LangIt), [pt](LangPt),
	 *  [zh_cn](LangZh), [zh_tw](LangZh))
	 *
	 *  The dist files (in the ``/dist`` folder) have had all languages
	 *  except English stripped out, which reduces the library size by
	 *  about 80kb. If required, they are available by importing the
	 *  included ``wordlists-extra.min.js`` file.
	 */
	wordlists.wordlists = {
	    cz: lang_cz_js_1.LangCz.wordlist(),
	    en: lang_en_js_1.LangEn.wordlist(),
	    es: lang_es_js_1.LangEs.wordlist(),
	    fr: lang_fr_js_1.LangFr.wordlist(),
	    it: lang_it_js_1.LangIt.wordlist(),
	    pt: lang_pt_js_1.LangPt.wordlist(),
	    ja: lang_ja_js_1.LangJa.wordlist(),
	    ko: lang_ko_js_1.LangKo.wordlist(),
	    zh_cn: lang_zh_js_1.LangZh.wordlist("cn"),
	    zh_tw: lang_zh_js_1.LangZh.wordlist("tw"),
	};
	
	return wordlists;
}

var hasRequiredWordlists;

function requireWordlists () {
	if (hasRequiredWordlists) return wordlists$1;
	hasRequiredWordlists = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.wordlists = exports.WordlistOwlA = exports.WordlistOwl = exports.LangEn = exports.Wordlist = void 0;
		/**
		 *  A Wordlist is a set of 2048 words used to encode private keys
		 *  (or other binary data) that is easier for humans to write down,
		 *  transcribe and dictate.
		 *
		 *  The [[link-bip-39]] standard includes several checksum bits,
		 *  depending on the size of the mnemonic phrase.
		 *
		 *  A mnemonic phrase may be 12, 15, 18, 21 or 24 words long. For
		 *  most purposes 12 word mnemonics should be used, as including
		 *  additional words increases the difficulty and potential for
		 *  mistakes and does not offer any effective improvement on security.
		 *
		 *  There are a variety of [[link-bip39-wordlists]] for different
		 *  languages, but for maximal compatibility, the
		 *  [English Wordlist](LangEn) is recommended.
		 *
		 *  @_section: api/wordlists:Wordlists [about-wordlists]
		 */
		var wordlist_js_1 = requireWordlist();
		Object.defineProperty(exports, "Wordlist", { enumerable: true, get: function () { return wordlist_js_1.Wordlist; } });
		var lang_en_js_1 = requireLangEn();
		Object.defineProperty(exports, "LangEn", { enumerable: true, get: function () { return lang_en_js_1.LangEn; } });
		var wordlist_owl_js_1 = requireWordlistOwl();
		Object.defineProperty(exports, "WordlistOwl", { enumerable: true, get: function () { return wordlist_owl_js_1.WordlistOwl; } });
		var wordlist_owla_js_1 = requireWordlistOwla();
		Object.defineProperty(exports, "WordlistOwlA", { enumerable: true, get: function () { return wordlist_owla_js_1.WordlistOwlA; } });
		var wordlists_js_1 = requireWordlists$1();
		Object.defineProperty(exports, "wordlists", { enumerable: true, get: function () { return wordlists_js_1.wordlists; } });
		
	} (wordlists$1));
	return wordlists$1;
}

var hasRequiredEthers;

function requireEthers () {
	if (hasRequiredEthers) return ethers$4;
	hasRequiredEthers = 1;
	(function (exports) {
		/////////////////////////////
		//
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.ripemd160 = exports.keccak256 = exports.randomBytes = exports.computeHmac = exports.UndecodedEventLog = exports.EventLog = exports.ContractUnknownEventPayload = exports.ContractTransactionResponse = exports.ContractTransactionReceipt = exports.ContractEventPayload = exports.ContractFactory = exports.Contract = exports.BaseContract = exports.MessagePrefix = exports.EtherSymbol = exports.ZeroHash = exports.N = exports.MaxInt256 = exports.MinInt256 = exports.MaxUint256 = exports.WeiPerEther = exports.ZeroAddress = exports.resolveAddress = exports.isAddress = exports.isAddressable = exports.getCreate2Address = exports.getCreateAddress = exports.getIcapAddress = exports.getAddress = exports.Typed = exports.TransactionDescription = exports.Result = exports.LogDescription = exports.Interface = exports.Indexed = exports.ErrorDescription = exports.checkResultErrors = exports.StructFragment = exports.ParamType = exports.NamedFragment = exports.FunctionFragment = exports.FallbackFragment = exports.Fragment = exports.EventFragment = exports.ErrorFragment = exports.ConstructorFragment = exports.AbiCoder = exports.encodeBytes32String = exports.decodeBytes32String = exports.version = void 0;
		exports.EtherscanPlugin = exports.EnsPlugin = exports.Network = exports.EnsResolver = exports.WebSocketProvider = exports.SocketProvider = exports.IpcSocketProvider = exports.QuickNodeProvider = exports.PocketProvider = exports.InfuraWebSocketProvider = exports.InfuraProvider = exports.EtherscanProvider = exports.CloudflareProvider = exports.AnkrProvider = exports.AlchemyProvider = exports.BrowserProvider = exports.JsonRpcSigner = exports.JsonRpcProvider = exports.JsonRpcApiProvider = exports.FallbackProvider = exports.AbstractProvider = exports.VoidSigner = exports.NonceManager = exports.AbstractSigner = exports.TransactionResponse = exports.TransactionReceipt = exports.Log = exports.FeeData = exports.Block = exports.getDefaultProvider = exports.verifyTypedData = exports.TypedDataEncoder = exports.solidityPackedSha256 = exports.solidityPackedKeccak256 = exports.solidityPacked = exports.verifyMessage = exports.hashMessage = exports.dnsEncode = exports.namehash = exports.isValidName = exports.ensNormalize = exports.id = exports.SigningKey = exports.Signature = exports.lock = exports.scryptSync = exports.scrypt = exports.pbkdf2 = exports.sha512 = exports.sha256 = void 0;
		exports.toBeArray = exports.getUint = exports.getNumber = exports.getBigInt = exports.FixedNumber = exports.FetchCancelSignal = exports.FetchResponse = exports.FetchRequest = exports.EventPayload = exports.isError = exports.isCallException = exports.makeError = exports.assertPrivate = exports.assertNormalize = exports.assertArgumentCount = exports.assertArgument = exports.assert = exports.resolveProperties = exports.defineProperties = exports.zeroPadValue = exports.zeroPadBytes = exports.stripZerosLeft = exports.isBytesLike = exports.isHexString = exports.hexlify = exports.getBytesCopy = exports.getBytes = exports.dataSlice = exports.dataLength = exports.concat = exports.encodeBase64 = exports.decodeBase64 = exports.encodeBase58 = exports.decodeBase58 = exports.Transaction = exports.recoverAddress = exports.computeAddress = exports.accessListify = exports.showThrottleMessage = exports.copyRequest = exports.UnmanagedSubscriber = exports.SocketSubscriber = exports.SocketPendingSubscriber = exports.SocketEventSubscriber = exports.SocketBlockSubscriber = exports.MulticoinProviderPlugin = exports.NetworkPlugin = exports.GasCostPlugin = exports.FetchUrlFeeDataNetworkPlugin = exports.FeeDataNetworkPlugin = void 0;
		exports.wordlists = exports.WordlistOwlA = exports.WordlistOwl = exports.LangEn = exports.Wordlist = exports.encryptKeystoreJsonSync = exports.encryptKeystoreJson = exports.decryptKeystoreJson = exports.decryptKeystoreJsonSync = exports.decryptCrowdsaleJson = exports.isKeystoreJson = exports.isCrowdsaleJson = exports.getIndexedAccountPath = exports.getAccountPath = exports.defaultPath = exports.Wallet = exports.HDNodeVoidWallet = exports.HDNodeWallet = exports.BaseWallet = exports.Mnemonic = exports.uuidV4 = exports.encodeRlp = exports.decodeRlp = exports.Utf8ErrorFuncs = exports.toUtf8String = exports.toUtf8CodePoints = exports.toUtf8Bytes = exports.parseUnits = exports.formatUnits = exports.parseEther = exports.formatEther = exports.mask = exports.toTwos = exports.fromTwos = exports.toQuantity = exports.toNumber = exports.toBeHex = exports.toBigInt = void 0;
		var _version_js_1 = require_version();
		Object.defineProperty(exports, "version", { enumerable: true, get: function () { return _version_js_1.version; } });
		var index_js_1 = requireAbi();
		Object.defineProperty(exports, "decodeBytes32String", { enumerable: true, get: function () { return index_js_1.decodeBytes32String; } });
		Object.defineProperty(exports, "encodeBytes32String", { enumerable: true, get: function () { return index_js_1.encodeBytes32String; } });
		Object.defineProperty(exports, "AbiCoder", { enumerable: true, get: function () { return index_js_1.AbiCoder; } });
		Object.defineProperty(exports, "ConstructorFragment", { enumerable: true, get: function () { return index_js_1.ConstructorFragment; } });
		Object.defineProperty(exports, "ErrorFragment", { enumerable: true, get: function () { return index_js_1.ErrorFragment; } });
		Object.defineProperty(exports, "EventFragment", { enumerable: true, get: function () { return index_js_1.EventFragment; } });
		Object.defineProperty(exports, "Fragment", { enumerable: true, get: function () { return index_js_1.Fragment; } });
		Object.defineProperty(exports, "FallbackFragment", { enumerable: true, get: function () { return index_js_1.FallbackFragment; } });
		Object.defineProperty(exports, "FunctionFragment", { enumerable: true, get: function () { return index_js_1.FunctionFragment; } });
		Object.defineProperty(exports, "NamedFragment", { enumerable: true, get: function () { return index_js_1.NamedFragment; } });
		Object.defineProperty(exports, "ParamType", { enumerable: true, get: function () { return index_js_1.ParamType; } });
		Object.defineProperty(exports, "StructFragment", { enumerable: true, get: function () { return index_js_1.StructFragment; } });
		Object.defineProperty(exports, "checkResultErrors", { enumerable: true, get: function () { return index_js_1.checkResultErrors; } });
		Object.defineProperty(exports, "ErrorDescription", { enumerable: true, get: function () { return index_js_1.ErrorDescription; } });
		Object.defineProperty(exports, "Indexed", { enumerable: true, get: function () { return index_js_1.Indexed; } });
		Object.defineProperty(exports, "Interface", { enumerable: true, get: function () { return index_js_1.Interface; } });
		Object.defineProperty(exports, "LogDescription", { enumerable: true, get: function () { return index_js_1.LogDescription; } });
		Object.defineProperty(exports, "Result", { enumerable: true, get: function () { return index_js_1.Result; } });
		Object.defineProperty(exports, "TransactionDescription", { enumerable: true, get: function () { return index_js_1.TransactionDescription; } });
		Object.defineProperty(exports, "Typed", { enumerable: true, get: function () { return index_js_1.Typed; } });
		var index_js_2 = requireAddress$2();
		Object.defineProperty(exports, "getAddress", { enumerable: true, get: function () { return index_js_2.getAddress; } });
		Object.defineProperty(exports, "getIcapAddress", { enumerable: true, get: function () { return index_js_2.getIcapAddress; } });
		Object.defineProperty(exports, "getCreateAddress", { enumerable: true, get: function () { return index_js_2.getCreateAddress; } });
		Object.defineProperty(exports, "getCreate2Address", { enumerable: true, get: function () { return index_js_2.getCreate2Address; } });
		Object.defineProperty(exports, "isAddressable", { enumerable: true, get: function () { return index_js_2.isAddressable; } });
		Object.defineProperty(exports, "isAddress", { enumerable: true, get: function () { return index_js_2.isAddress; } });
		Object.defineProperty(exports, "resolveAddress", { enumerable: true, get: function () { return index_js_2.resolveAddress; } });
		var index_js_3 = requireConstants$1();
		Object.defineProperty(exports, "ZeroAddress", { enumerable: true, get: function () { return index_js_3.ZeroAddress; } });
		Object.defineProperty(exports, "WeiPerEther", { enumerable: true, get: function () { return index_js_3.WeiPerEther; } });
		Object.defineProperty(exports, "MaxUint256", { enumerable: true, get: function () { return index_js_3.MaxUint256; } });
		Object.defineProperty(exports, "MinInt256", { enumerable: true, get: function () { return index_js_3.MinInt256; } });
		Object.defineProperty(exports, "MaxInt256", { enumerable: true, get: function () { return index_js_3.MaxInt256; } });
		Object.defineProperty(exports, "N", { enumerable: true, get: function () { return index_js_3.N; } });
		Object.defineProperty(exports, "ZeroHash", { enumerable: true, get: function () { return index_js_3.ZeroHash; } });
		Object.defineProperty(exports, "EtherSymbol", { enumerable: true, get: function () { return index_js_3.EtherSymbol; } });
		Object.defineProperty(exports, "MessagePrefix", { enumerable: true, get: function () { return index_js_3.MessagePrefix; } });
		var index_js_4 = requireContract();
		Object.defineProperty(exports, "BaseContract", { enumerable: true, get: function () { return index_js_4.BaseContract; } });
		Object.defineProperty(exports, "Contract", { enumerable: true, get: function () { return index_js_4.Contract; } });
		Object.defineProperty(exports, "ContractFactory", { enumerable: true, get: function () { return index_js_4.ContractFactory; } });
		Object.defineProperty(exports, "ContractEventPayload", { enumerable: true, get: function () { return index_js_4.ContractEventPayload; } });
		Object.defineProperty(exports, "ContractTransactionReceipt", { enumerable: true, get: function () { return index_js_4.ContractTransactionReceipt; } });
		Object.defineProperty(exports, "ContractTransactionResponse", { enumerable: true, get: function () { return index_js_4.ContractTransactionResponse; } });
		Object.defineProperty(exports, "ContractUnknownEventPayload", { enumerable: true, get: function () { return index_js_4.ContractUnknownEventPayload; } });
		Object.defineProperty(exports, "EventLog", { enumerable: true, get: function () { return index_js_4.EventLog; } });
		Object.defineProperty(exports, "UndecodedEventLog", { enumerable: true, get: function () { return index_js_4.UndecodedEventLog; } });
		var index_js_5 = requireCrypto();
		Object.defineProperty(exports, "computeHmac", { enumerable: true, get: function () { return index_js_5.computeHmac; } });
		Object.defineProperty(exports, "randomBytes", { enumerable: true, get: function () { return index_js_5.randomBytes; } });
		Object.defineProperty(exports, "keccak256", { enumerable: true, get: function () { return index_js_5.keccak256; } });
		Object.defineProperty(exports, "ripemd160", { enumerable: true, get: function () { return index_js_5.ripemd160; } });
		Object.defineProperty(exports, "sha256", { enumerable: true, get: function () { return index_js_5.sha256; } });
		Object.defineProperty(exports, "sha512", { enumerable: true, get: function () { return index_js_5.sha512; } });
		Object.defineProperty(exports, "pbkdf2", { enumerable: true, get: function () { return index_js_5.pbkdf2; } });
		Object.defineProperty(exports, "scrypt", { enumerable: true, get: function () { return index_js_5.scrypt; } });
		Object.defineProperty(exports, "scryptSync", { enumerable: true, get: function () { return index_js_5.scryptSync; } });
		Object.defineProperty(exports, "lock", { enumerable: true, get: function () { return index_js_5.lock; } });
		Object.defineProperty(exports, "Signature", { enumerable: true, get: function () { return index_js_5.Signature; } });
		Object.defineProperty(exports, "SigningKey", { enumerable: true, get: function () { return index_js_5.SigningKey; } });
		var index_js_6 = requireHash();
		Object.defineProperty(exports, "id", { enumerable: true, get: function () { return index_js_6.id; } });
		Object.defineProperty(exports, "ensNormalize", { enumerable: true, get: function () { return index_js_6.ensNormalize; } });
		Object.defineProperty(exports, "isValidName", { enumerable: true, get: function () { return index_js_6.isValidName; } });
		Object.defineProperty(exports, "namehash", { enumerable: true, get: function () { return index_js_6.namehash; } });
		Object.defineProperty(exports, "dnsEncode", { enumerable: true, get: function () { return index_js_6.dnsEncode; } });
		Object.defineProperty(exports, "hashMessage", { enumerable: true, get: function () { return index_js_6.hashMessage; } });
		Object.defineProperty(exports, "verifyMessage", { enumerable: true, get: function () { return index_js_6.verifyMessage; } });
		Object.defineProperty(exports, "solidityPacked", { enumerable: true, get: function () { return index_js_6.solidityPacked; } });
		Object.defineProperty(exports, "solidityPackedKeccak256", { enumerable: true, get: function () { return index_js_6.solidityPackedKeccak256; } });
		Object.defineProperty(exports, "solidityPackedSha256", { enumerable: true, get: function () { return index_js_6.solidityPackedSha256; } });
		Object.defineProperty(exports, "TypedDataEncoder", { enumerable: true, get: function () { return index_js_6.TypedDataEncoder; } });
		Object.defineProperty(exports, "verifyTypedData", { enumerable: true, get: function () { return index_js_6.verifyTypedData; } });
		var index_js_7 = requireProviders();
		Object.defineProperty(exports, "getDefaultProvider", { enumerable: true, get: function () { return index_js_7.getDefaultProvider; } });
		Object.defineProperty(exports, "Block", { enumerable: true, get: function () { return index_js_7.Block; } });
		Object.defineProperty(exports, "FeeData", { enumerable: true, get: function () { return index_js_7.FeeData; } });
		Object.defineProperty(exports, "Log", { enumerable: true, get: function () { return index_js_7.Log; } });
		Object.defineProperty(exports, "TransactionReceipt", { enumerable: true, get: function () { return index_js_7.TransactionReceipt; } });
		Object.defineProperty(exports, "TransactionResponse", { enumerable: true, get: function () { return index_js_7.TransactionResponse; } });
		Object.defineProperty(exports, "AbstractSigner", { enumerable: true, get: function () { return index_js_7.AbstractSigner; } });
		Object.defineProperty(exports, "NonceManager", { enumerable: true, get: function () { return index_js_7.NonceManager; } });
		Object.defineProperty(exports, "VoidSigner", { enumerable: true, get: function () { return index_js_7.VoidSigner; } });
		Object.defineProperty(exports, "AbstractProvider", { enumerable: true, get: function () { return index_js_7.AbstractProvider; } });
		Object.defineProperty(exports, "FallbackProvider", { enumerable: true, get: function () { return index_js_7.FallbackProvider; } });
		Object.defineProperty(exports, "JsonRpcApiProvider", { enumerable: true, get: function () { return index_js_7.JsonRpcApiProvider; } });
		Object.defineProperty(exports, "JsonRpcProvider", { enumerable: true, get: function () { return index_js_7.JsonRpcProvider; } });
		Object.defineProperty(exports, "JsonRpcSigner", { enumerable: true, get: function () { return index_js_7.JsonRpcSigner; } });
		Object.defineProperty(exports, "BrowserProvider", { enumerable: true, get: function () { return index_js_7.BrowserProvider; } });
		Object.defineProperty(exports, "AlchemyProvider", { enumerable: true, get: function () { return index_js_7.AlchemyProvider; } });
		Object.defineProperty(exports, "AnkrProvider", { enumerable: true, get: function () { return index_js_7.AnkrProvider; } });
		Object.defineProperty(exports, "CloudflareProvider", { enumerable: true, get: function () { return index_js_7.CloudflareProvider; } });
		Object.defineProperty(exports, "EtherscanProvider", { enumerable: true, get: function () { return index_js_7.EtherscanProvider; } });
		Object.defineProperty(exports, "InfuraProvider", { enumerable: true, get: function () { return index_js_7.InfuraProvider; } });
		Object.defineProperty(exports, "InfuraWebSocketProvider", { enumerable: true, get: function () { return index_js_7.InfuraWebSocketProvider; } });
		Object.defineProperty(exports, "PocketProvider", { enumerable: true, get: function () { return index_js_7.PocketProvider; } });
		Object.defineProperty(exports, "QuickNodeProvider", { enumerable: true, get: function () { return index_js_7.QuickNodeProvider; } });
		Object.defineProperty(exports, "IpcSocketProvider", { enumerable: true, get: function () { return index_js_7.IpcSocketProvider; } });
		Object.defineProperty(exports, "SocketProvider", { enumerable: true, get: function () { return index_js_7.SocketProvider; } });
		Object.defineProperty(exports, "WebSocketProvider", { enumerable: true, get: function () { return index_js_7.WebSocketProvider; } });
		Object.defineProperty(exports, "EnsResolver", { enumerable: true, get: function () { return index_js_7.EnsResolver; } });
		Object.defineProperty(exports, "Network", { enumerable: true, get: function () { return index_js_7.Network; } });
		Object.defineProperty(exports, "EnsPlugin", { enumerable: true, get: function () { return index_js_7.EnsPlugin; } });
		Object.defineProperty(exports, "EtherscanPlugin", { enumerable: true, get: function () { return index_js_7.EtherscanPlugin; } });
		Object.defineProperty(exports, "FeeDataNetworkPlugin", { enumerable: true, get: function () { return index_js_7.FeeDataNetworkPlugin; } });
		Object.defineProperty(exports, "FetchUrlFeeDataNetworkPlugin", { enumerable: true, get: function () { return index_js_7.FetchUrlFeeDataNetworkPlugin; } });
		Object.defineProperty(exports, "GasCostPlugin", { enumerable: true, get: function () { return index_js_7.GasCostPlugin; } });
		Object.defineProperty(exports, "NetworkPlugin", { enumerable: true, get: function () { return index_js_7.NetworkPlugin; } });
		Object.defineProperty(exports, "MulticoinProviderPlugin", { enumerable: true, get: function () { return index_js_7.MulticoinProviderPlugin; } });
		Object.defineProperty(exports, "SocketBlockSubscriber", { enumerable: true, get: function () { return index_js_7.SocketBlockSubscriber; } });
		Object.defineProperty(exports, "SocketEventSubscriber", { enumerable: true, get: function () { return index_js_7.SocketEventSubscriber; } });
		Object.defineProperty(exports, "SocketPendingSubscriber", { enumerable: true, get: function () { return index_js_7.SocketPendingSubscriber; } });
		Object.defineProperty(exports, "SocketSubscriber", { enumerable: true, get: function () { return index_js_7.SocketSubscriber; } });
		Object.defineProperty(exports, "UnmanagedSubscriber", { enumerable: true, get: function () { return index_js_7.UnmanagedSubscriber; } });
		Object.defineProperty(exports, "copyRequest", { enumerable: true, get: function () { return index_js_7.copyRequest; } });
		Object.defineProperty(exports, "showThrottleMessage", { enumerable: true, get: function () { return index_js_7.showThrottleMessage; } });
		var index_js_8 = requireTransaction();
		Object.defineProperty(exports, "accessListify", { enumerable: true, get: function () { return index_js_8.accessListify; } });
		Object.defineProperty(exports, "computeAddress", { enumerable: true, get: function () { return index_js_8.computeAddress; } });
		Object.defineProperty(exports, "recoverAddress", { enumerable: true, get: function () { return index_js_8.recoverAddress; } });
		Object.defineProperty(exports, "Transaction", { enumerable: true, get: function () { return index_js_8.Transaction; } });
		var index_js_9 = requireUtils$3();
		Object.defineProperty(exports, "decodeBase58", { enumerable: true, get: function () { return index_js_9.decodeBase58; } });
		Object.defineProperty(exports, "encodeBase58", { enumerable: true, get: function () { return index_js_9.encodeBase58; } });
		Object.defineProperty(exports, "decodeBase64", { enumerable: true, get: function () { return index_js_9.decodeBase64; } });
		Object.defineProperty(exports, "encodeBase64", { enumerable: true, get: function () { return index_js_9.encodeBase64; } });
		Object.defineProperty(exports, "concat", { enumerable: true, get: function () { return index_js_9.concat; } });
		Object.defineProperty(exports, "dataLength", { enumerable: true, get: function () { return index_js_9.dataLength; } });
		Object.defineProperty(exports, "dataSlice", { enumerable: true, get: function () { return index_js_9.dataSlice; } });
		Object.defineProperty(exports, "getBytes", { enumerable: true, get: function () { return index_js_9.getBytes; } });
		Object.defineProperty(exports, "getBytesCopy", { enumerable: true, get: function () { return index_js_9.getBytesCopy; } });
		Object.defineProperty(exports, "hexlify", { enumerable: true, get: function () { return index_js_9.hexlify; } });
		Object.defineProperty(exports, "isHexString", { enumerable: true, get: function () { return index_js_9.isHexString; } });
		Object.defineProperty(exports, "isBytesLike", { enumerable: true, get: function () { return index_js_9.isBytesLike; } });
		Object.defineProperty(exports, "stripZerosLeft", { enumerable: true, get: function () { return index_js_9.stripZerosLeft; } });
		Object.defineProperty(exports, "zeroPadBytes", { enumerable: true, get: function () { return index_js_9.zeroPadBytes; } });
		Object.defineProperty(exports, "zeroPadValue", { enumerable: true, get: function () { return index_js_9.zeroPadValue; } });
		Object.defineProperty(exports, "defineProperties", { enumerable: true, get: function () { return index_js_9.defineProperties; } });
		Object.defineProperty(exports, "resolveProperties", { enumerable: true, get: function () { return index_js_9.resolveProperties; } });
		Object.defineProperty(exports, "assert", { enumerable: true, get: function () { return index_js_9.assert; } });
		Object.defineProperty(exports, "assertArgument", { enumerable: true, get: function () { return index_js_9.assertArgument; } });
		Object.defineProperty(exports, "assertArgumentCount", { enumerable: true, get: function () { return index_js_9.assertArgumentCount; } });
		Object.defineProperty(exports, "assertNormalize", { enumerable: true, get: function () { return index_js_9.assertNormalize; } });
		Object.defineProperty(exports, "assertPrivate", { enumerable: true, get: function () { return index_js_9.assertPrivate; } });
		Object.defineProperty(exports, "makeError", { enumerable: true, get: function () { return index_js_9.makeError; } });
		Object.defineProperty(exports, "isCallException", { enumerable: true, get: function () { return index_js_9.isCallException; } });
		Object.defineProperty(exports, "isError", { enumerable: true, get: function () { return index_js_9.isError; } });
		Object.defineProperty(exports, "EventPayload", { enumerable: true, get: function () { return index_js_9.EventPayload; } });
		Object.defineProperty(exports, "FetchRequest", { enumerable: true, get: function () { return index_js_9.FetchRequest; } });
		Object.defineProperty(exports, "FetchResponse", { enumerable: true, get: function () { return index_js_9.FetchResponse; } });
		Object.defineProperty(exports, "FetchCancelSignal", { enumerable: true, get: function () { return index_js_9.FetchCancelSignal; } });
		Object.defineProperty(exports, "FixedNumber", { enumerable: true, get: function () { return index_js_9.FixedNumber; } });
		Object.defineProperty(exports, "getBigInt", { enumerable: true, get: function () { return index_js_9.getBigInt; } });
		Object.defineProperty(exports, "getNumber", { enumerable: true, get: function () { return index_js_9.getNumber; } });
		Object.defineProperty(exports, "getUint", { enumerable: true, get: function () { return index_js_9.getUint; } });
		Object.defineProperty(exports, "toBeArray", { enumerable: true, get: function () { return index_js_9.toBeArray; } });
		Object.defineProperty(exports, "toBigInt", { enumerable: true, get: function () { return index_js_9.toBigInt; } });
		Object.defineProperty(exports, "toBeHex", { enumerable: true, get: function () { return index_js_9.toBeHex; } });
		Object.defineProperty(exports, "toNumber", { enumerable: true, get: function () { return index_js_9.toNumber; } });
		Object.defineProperty(exports, "toQuantity", { enumerable: true, get: function () { return index_js_9.toQuantity; } });
		Object.defineProperty(exports, "fromTwos", { enumerable: true, get: function () { return index_js_9.fromTwos; } });
		Object.defineProperty(exports, "toTwos", { enumerable: true, get: function () { return index_js_9.toTwos; } });
		Object.defineProperty(exports, "mask", { enumerable: true, get: function () { return index_js_9.mask; } });
		Object.defineProperty(exports, "formatEther", { enumerable: true, get: function () { return index_js_9.formatEther; } });
		Object.defineProperty(exports, "parseEther", { enumerable: true, get: function () { return index_js_9.parseEther; } });
		Object.defineProperty(exports, "formatUnits", { enumerable: true, get: function () { return index_js_9.formatUnits; } });
		Object.defineProperty(exports, "parseUnits", { enumerable: true, get: function () { return index_js_9.parseUnits; } });
		Object.defineProperty(exports, "toUtf8Bytes", { enumerable: true, get: function () { return index_js_9.toUtf8Bytes; } });
		Object.defineProperty(exports, "toUtf8CodePoints", { enumerable: true, get: function () { return index_js_9.toUtf8CodePoints; } });
		Object.defineProperty(exports, "toUtf8String", { enumerable: true, get: function () { return index_js_9.toUtf8String; } });
		Object.defineProperty(exports, "Utf8ErrorFuncs", { enumerable: true, get: function () { return index_js_9.Utf8ErrorFuncs; } });
		Object.defineProperty(exports, "decodeRlp", { enumerable: true, get: function () { return index_js_9.decodeRlp; } });
		Object.defineProperty(exports, "encodeRlp", { enumerable: true, get: function () { return index_js_9.encodeRlp; } });
		Object.defineProperty(exports, "uuidV4", { enumerable: true, get: function () { return index_js_9.uuidV4; } });
		var index_js_10 = requireWallet();
		Object.defineProperty(exports, "Mnemonic", { enumerable: true, get: function () { return index_js_10.Mnemonic; } });
		Object.defineProperty(exports, "BaseWallet", { enumerable: true, get: function () { return index_js_10.BaseWallet; } });
		Object.defineProperty(exports, "HDNodeWallet", { enumerable: true, get: function () { return index_js_10.HDNodeWallet; } });
		Object.defineProperty(exports, "HDNodeVoidWallet", { enumerable: true, get: function () { return index_js_10.HDNodeVoidWallet; } });
		Object.defineProperty(exports, "Wallet", { enumerable: true, get: function () { return index_js_10.Wallet; } });
		Object.defineProperty(exports, "defaultPath", { enumerable: true, get: function () { return index_js_10.defaultPath; } });
		Object.defineProperty(exports, "getAccountPath", { enumerable: true, get: function () { return index_js_10.getAccountPath; } });
		Object.defineProperty(exports, "getIndexedAccountPath", { enumerable: true, get: function () { return index_js_10.getIndexedAccountPath; } });
		Object.defineProperty(exports, "isCrowdsaleJson", { enumerable: true, get: function () { return index_js_10.isCrowdsaleJson; } });
		Object.defineProperty(exports, "isKeystoreJson", { enumerable: true, get: function () { return index_js_10.isKeystoreJson; } });
		Object.defineProperty(exports, "decryptCrowdsaleJson", { enumerable: true, get: function () { return index_js_10.decryptCrowdsaleJson; } });
		Object.defineProperty(exports, "decryptKeystoreJsonSync", { enumerable: true, get: function () { return index_js_10.decryptKeystoreJsonSync; } });
		Object.defineProperty(exports, "decryptKeystoreJson", { enumerable: true, get: function () { return index_js_10.decryptKeystoreJson; } });
		Object.defineProperty(exports, "encryptKeystoreJson", { enumerable: true, get: function () { return index_js_10.encryptKeystoreJson; } });
		Object.defineProperty(exports, "encryptKeystoreJsonSync", { enumerable: true, get: function () { return index_js_10.encryptKeystoreJsonSync; } });
		var index_js_11 = requireWordlists();
		Object.defineProperty(exports, "Wordlist", { enumerable: true, get: function () { return index_js_11.Wordlist; } });
		Object.defineProperty(exports, "LangEn", { enumerable: true, get: function () { return index_js_11.LangEn; } });
		Object.defineProperty(exports, "WordlistOwl", { enumerable: true, get: function () { return index_js_11.WordlistOwl; } });
		Object.defineProperty(exports, "WordlistOwlA", { enumerable: true, get: function () { return index_js_11.WordlistOwlA; } });
		Object.defineProperty(exports, "wordlists", { enumerable: true, get: function () { return index_js_11.wordlists; } });
		
	} (ethers$4));
	return ethers$4;
}

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.ethers = void 0;
	const tslib_1 = require$$0$1;
	/**
	 *  The Application Programming Interface (API) is the collection of
	 *  functions, classes and types offered by the Ethers library.
	 *
	 *  @_section: api:Application Programming Interface  [about-api]
	 *  @_navTitle: API
	 */
	const ethers = tslib_1.__importStar(requireEthers());
	exports.ethers = ethers;
	tslib_1.__exportStar(requireEthers(), exports);
	
} (lib_commonjs$1));

var cjs$4 = {};

var eip1559Transaction = {};

var cjs$3 = {};

Object.defineProperty(cjs$3, "__esModule", { value: true });
cjs$3.RLP = cjs$3.utils = cjs$3.decode = cjs$3.encode = void 0;
/**
 * RLP Encoding based on https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/
 * This function takes in data, converts it to Uint8Array if not,
 * and adds a length for recursion.
 * @param input Will be converted to Uint8Array
 * @returns Uint8Array of encoded data
 **/
function encode$2(input) {
    if (Array.isArray(input)) {
        const output = [];
        let outputLength = 0;
        for (let i = 0; i < input.length; i++) {
            const encoded = encode$2(input[i]);
            output.push(encoded);
            outputLength += encoded.length;
        }
        return concatBytes$1(encodeLength(outputLength, 192), ...output);
    }
    const inputBuf = toBytes(input);
    if (inputBuf.length === 1 && inputBuf[0] < 128) {
        return inputBuf;
    }
    return concatBytes$1(encodeLength(inputBuf.length, 128), inputBuf);
}
cjs$3.encode = encode$2;
/**
 * Slices a Uint8Array, throws if the slice goes out-of-bounds of the Uint8Array.
 * E.g. `safeSlice(hexToBytes('aa'), 1, 2)` will throw.
 * @param input
 * @param start
 * @param end
 */
function safeSlice(input, start, end) {
    if (end > input.length) {
        throw new Error('invalid RLP (safeSlice): end slice of Uint8Array out-of-bounds');
    }
    return input.slice(start, end);
}
/**
 * Parse integers. Check if there is no leading zeros
 * @param v The value to parse
 */
function decodeLength(v) {
    if (v[0] === 0) {
        throw new Error('invalid RLP: extra zeros');
    }
    return parseHexByte(bytesToHex$2(v));
}
function encodeLength(len, offset) {
    if (len < 56) {
        return Uint8Array.from([len + offset]);
    }
    const hexLength = numberToHex(len);
    const lLength = hexLength.length / 2;
    const firstByte = numberToHex(offset + 55 + lLength);
    return Uint8Array.from(hexToBytes$2(firstByte + hexLength));
}
function decode(input, stream = false) {
    if (typeof input === 'undefined' || input === null || input.length === 0) {
        return Uint8Array.from([]);
    }
    const inputBytes = toBytes(input);
    const decoded = _decode(inputBytes);
    if (stream) {
        return {
            data: decoded.data,
            remainder: decoded.remainder.slice(),
        };
    }
    if (decoded.remainder.length !== 0) {
        throw new Error('invalid RLP: remainder must be zero');
    }
    return decoded.data;
}
cjs$3.decode = decode;
/** Decode an input with RLP */
function _decode(input) {
    let length, llength, data, innerRemainder, d;
    const decoded = [];
    const firstByte = input[0];
    if (firstByte <= 0x7f) {
        // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.
        return {
            data: input.slice(0, 1),
            remainder: input.subarray(1),
        };
    }
    else if (firstByte <= 0xb7) {
        // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string
        // The range of the first byte is [0x80, 0xb7]
        length = firstByte - 0x7f;
        // set 0x80 null to 0
        if (firstByte === 0x80) {
            data = Uint8Array.from([]);
        }
        else {
            data = safeSlice(input, 1, length);
        }
        if (length === 2 && data[0] < 0x80) {
            throw new Error('invalid RLP encoding: invalid prefix, single byte < 0x80 are not prefixed');
        }
        return {
            data,
            remainder: input.subarray(length),
        };
    }
    else if (firstByte <= 0xbf) {
        // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),
        // followed by the length, followed by the string
        llength = firstByte - 0xb6;
        if (input.length - 1 < llength) {
            throw new Error('invalid RLP: not enough bytes for string length');
        }
        length = decodeLength(safeSlice(input, 1, llength));
        if (length <= 55) {
            throw new Error('invalid RLP: expected string length to be greater than 55');
        }
        data = safeSlice(input, llength, length + llength);
        return {
            data,
            remainder: input.subarray(length + llength),
        };
    }
    else if (firstByte <= 0xf7) {
        // a list between 0-55 bytes long
        length = firstByte - 0xbf;
        innerRemainder = safeSlice(input, 1, length);
        while (innerRemainder.length) {
            d = _decode(innerRemainder);
            decoded.push(d.data);
            innerRemainder = d.remainder;
        }
        return {
            data: decoded,
            remainder: input.subarray(length),
        };
    }
    else {
        // a list over 55 bytes long
        llength = firstByte - 0xf6;
        length = decodeLength(safeSlice(input, 1, llength));
        if (length < 56) {
            throw new Error('invalid RLP: encoded list too short');
        }
        const totalLength = llength + length;
        if (totalLength > input.length) {
            throw new Error('invalid RLP: total length is larger than the data');
        }
        innerRemainder = safeSlice(input, llength, totalLength);
        while (innerRemainder.length) {
            d = _decode(innerRemainder);
            decoded.push(d.data);
            innerRemainder = d.remainder;
        }
        return {
            data: decoded,
            remainder: input.subarray(totalLength),
        };
    }
}
const cachedHexes = Array.from({ length: 256 }, (_v, i) => i.toString(16).padStart(2, '0'));
function bytesToHex$2(uint8a) {
    // Pre-caching chars with `cachedHexes` speeds this up 6x
    let hex = '';
    for (let i = 0; i < uint8a.length; i++) {
        hex += cachedHexes[uint8a[i]];
    }
    return hex;
}
function parseHexByte(hexByte) {
    const byte = Number.parseInt(hexByte, 16);
    if (Number.isNaN(byte))
        throw new Error('Invalid byte sequence');
    return byte;
}
// Caching slows it down 2-3x
function hexToBytes$2(hex) {
    if (typeof hex !== 'string') {
        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);
    }
    if (hex.length % 2)
        throw new Error('hexToBytes: received invalid unpadded hex');
    const array = new Uint8Array(hex.length / 2);
    for (let i = 0; i < array.length; i++) {
        const j = i * 2;
        array[i] = parseHexByte(hex.slice(j, j + 2));
    }
    return array;
}
/** Concatenates two Uint8Arrays into one. */
function concatBytes$1(...arrays) {
    if (arrays.length === 1)
        return arrays[0];
    const length = arrays.reduce((a, arr) => a + arr.length, 0);
    const result = new Uint8Array(length);
    for (let i = 0, pad = 0; i < arrays.length; i++) {
        const arr = arrays[i];
        result.set(arr, pad);
        pad += arr.length;
    }
    return result;
}
function utf8ToBytes$1(utf) {
    return new TextEncoder().encode(utf);
}
/** Transform an integer into its hexadecimal value */
function numberToHex(integer) {
    if (integer < 0) {
        throw new Error('Invalid integer as argument, must be unsigned!');
    }
    const hex = integer.toString(16);
    return hex.length % 2 ? `0${hex}` : hex;
}
/** Pad a string to be even */
function padToEven$1(a) {
    return a.length % 2 ? `0${a}` : a;
}
/** Check if a string is prefixed by 0x */
function isHexPrefixed(str) {
    return str.length >= 2 && str[0] === '0' && str[1] === 'x';
}
/** Removes 0x from a given String */
function stripHexPrefix(str) {
    if (typeof str !== 'string') {
        return str;
    }
    return isHexPrefixed(str) ? str.slice(2) : str;
}
/** Transform anything into a Uint8Array */
function toBytes(v) {
    if (v instanceof Uint8Array) {
        return v;
    }
    if (typeof v === 'string') {
        if (isHexPrefixed(v)) {
            return hexToBytes$2(padToEven$1(stripHexPrefix(v)));
        }
        return utf8ToBytes$1(v);
    }
    if (typeof v === 'number' || typeof v === 'bigint') {
        if (!v) {
            return Uint8Array.from([]);
        }
        return hexToBytes$2(numberToHex(v));
    }
    if (v === null || v === undefined) {
        return Uint8Array.from([]);
    }
    throw new Error('toBytes: received unsupported type ' + typeof v);
}
cjs$3.utils = {
    bytesToHex: bytesToHex$2,
    concatBytes: concatBytes$1,
    hexToBytes: hexToBytes$2,
    utf8ToBytes: utf8ToBytes$1,
};
cjs$3.RLP = { encode: encode$2, decode };

var cjs$2 = {};

var constants$1 = {};

var secp256k1$1 = {};

var secp256k1 = {};

var sha256$1 = {};

var _sha2 = {};

var _assert = {};

Object.defineProperty(_assert, "__esModule", { value: true });
_assert.output = _assert.exists = _assert.hash = _assert.bytes = _assert.bool = _assert.number = void 0;
function number(n) {
    if (!Number.isSafeInteger(n) || n < 0)
        throw new Error(`Wrong positive integer: ${n}`);
}
_assert.number = number;
function bool(b) {
    if (typeof b !== 'boolean')
        throw new Error(`Expected boolean, not ${b}`);
}
_assert.bool = bool;
// copied from utils
function isBytes$1(a) {
    return (a instanceof Uint8Array ||
        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));
}
function bytes$1(b, ...lengths) {
    if (!isBytes$1(b))
        throw new Error('Expected Uint8Array');
    if (lengths.length > 0 && !lengths.includes(b.length))
        throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);
}
_assert.bytes = bytes$1;
function hash$1(hash) {
    if (typeof hash !== 'function' || typeof hash.create !== 'function')
        throw new Error('Hash should be wrapped by utils.wrapConstructor');
    number(hash.outputLen);
    number(hash.blockLen);
}
_assert.hash = hash$1;
function exists(instance, checkFinished = true) {
    if (instance.destroyed)
        throw new Error('Hash instance has been destroyed');
    if (checkFinished && instance.finished)
        throw new Error('Hash#digest() has already been called');
}
_assert.exists = exists;
function output(out, instance) {
    bytes$1(out);
    const min = instance.outputLen;
    if (out.length < min) {
        throw new Error(`digestInto() expects output buffer of length at least ${min}`);
    }
}
_assert.output = output;
const assert$1 = { number, bool, bytes: bytes$1, hash: hash$1, exists, output };
_assert.default = assert$1;

var utils$5 = {};

var crypto = {};

Object.defineProperty(crypto, "__esModule", { value: true });
crypto.crypto = void 0;
crypto.crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;

(function (exports) {
	/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.randomBytes = exports.wrapXOFConstructorWithOpts = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.isLE = exports.rotr = exports.createView = exports.u32 = exports.u8 = void 0;
	// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.
	// node.js versions earlier than v19 don't declare it in global scope.
	// For node.js, package.json#exports field mapping rewrites import
	// from `crypto` to `cryptoNode`, which imports native module.
	// Makes the utils un-importable in browsers without a bundler.
	// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.
	const crypto_1 = crypto;
	// Cast array to different type
	const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
	exports.u8 = u8;
	const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
	exports.u32 = u32;
	function isBytes(a) {
	    return (a instanceof Uint8Array ||
	        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));
	}
	// Cast array to view
	const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
	exports.createView = createView;
	// The rotate right (circular right shift) operation for uint32
	const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);
	exports.rotr = rotr;
	// big-endian hardware is rare. Just in case someone still decides to run hashes:
	// early-throw an error because we don't support BE yet.
	// Other libraries would silently corrupt the data instead of throwing an error,
	// when they don't support it.
	exports.isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;
	if (!exports.isLE)
	    throw new Error('Non little-endian hardware is not supported');
	// Array where index 0xf0 (240) is mapped to string 'f0'
	const hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));
	/**
	 * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'
	 */
	function bytesToHex(bytes) {
	    if (!isBytes(bytes))
	        throw new Error('Uint8Array expected');
	    // pre-caching improves the speed 6x
	    let hex = '';
	    for (let i = 0; i < bytes.length; i++) {
	        hex += hexes[bytes[i]];
	    }
	    return hex;
	}
	exports.bytesToHex = bytesToHex;
	// We use optimized technique to convert hex string to byte array
	const asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };
	function asciiToBase16(char) {
	    if (char >= asciis._0 && char <= asciis._9)
	        return char - asciis._0;
	    if (char >= asciis._A && char <= asciis._F)
	        return char - (asciis._A - 10);
	    if (char >= asciis._a && char <= asciis._f)
	        return char - (asciis._a - 10);
	    return;
	}
	/**
	 * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])
	 */
	function hexToBytes(hex) {
	    if (typeof hex !== 'string')
	        throw new Error('hex string expected, got ' + typeof hex);
	    const hl = hex.length;
	    const al = hl / 2;
	    if (hl % 2)
	        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);
	    const array = new Uint8Array(al);
	    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
	        const n1 = asciiToBase16(hex.charCodeAt(hi));
	        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));
	        if (n1 === undefined || n2 === undefined) {
	            const char = hex[hi] + hex[hi + 1];
	            throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
	        }
	        array[ai] = n1 * 16 + n2;
	    }
	    return array;
	}
	exports.hexToBytes = hexToBytes;
	// There is no setImmediate in browser and setTimeout is slow.
	// call of async fn will return Promise, which will be fullfiled only on
	// next scheduler queue processing step and this is exactly what we need.
	const nextTick = async () => { };
	exports.nextTick = nextTick;
	// Returns control to thread each 'tick' ms to avoid blocking
	async function asyncLoop(iters, tick, cb) {
	    let ts = Date.now();
	    for (let i = 0; i < iters; i++) {
	        cb(i);
	        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too
	        const diff = Date.now() - ts;
	        if (diff >= 0 && diff < tick)
	            continue;
	        await (0, exports.nextTick)();
	        ts += diff;
	    }
	}
	exports.asyncLoop = asyncLoop;
	/**
	 * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])
	 */
	function utf8ToBytes(str) {
	    if (typeof str !== 'string')
	        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
	    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809
	}
	exports.utf8ToBytes = utf8ToBytes;
	/**
	 * Normalizes (non-hex) string or Uint8Array to Uint8Array.
	 * Warning: when Uint8Array is passed, it would NOT get copied.
	 * Keep in mind for future mutable operations.
	 */
	function toBytes(data) {
	    if (typeof data === 'string')
	        data = utf8ToBytes(data);
	    if (!isBytes(data))
	        throw new Error(`expected Uint8Array, got ${typeof data}`);
	    return data;
	}
	exports.toBytes = toBytes;
	/**
	 * Copies several Uint8Arrays into one.
	 */
	function concatBytes(...arrays) {
	    let sum = 0;
	    for (let i = 0; i < arrays.length; i++) {
	        const a = arrays[i];
	        if (!isBytes(a))
	            throw new Error('Uint8Array expected');
	        sum += a.length;
	    }
	    const res = new Uint8Array(sum);
	    for (let i = 0, pad = 0; i < arrays.length; i++) {
	        const a = arrays[i];
	        res.set(a, pad);
	        pad += a.length;
	    }
	    return res;
	}
	exports.concatBytes = concatBytes;
	// For runtime check if class implements interface
	class Hash {
	    // Safe version that clones internal state
	    clone() {
	        return this._cloneInto();
	    }
	}
	exports.Hash = Hash;
	const toStr = {}.toString;
	function checkOpts(defaults, opts) {
	    if (opts !== undefined && toStr.call(opts) !== '[object Object]')
	        throw new Error('Options should be object or undefined');
	    const merged = Object.assign(defaults, opts);
	    return merged;
	}
	exports.checkOpts = checkOpts;
	function wrapConstructor(hashCons) {
	    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();
	    const tmp = hashCons();
	    hashC.outputLen = tmp.outputLen;
	    hashC.blockLen = tmp.blockLen;
	    hashC.create = () => hashCons();
	    return hashC;
	}
	exports.wrapConstructor = wrapConstructor;
	function wrapConstructorWithOpts(hashCons) {
	    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
	    const tmp = hashCons({});
	    hashC.outputLen = tmp.outputLen;
	    hashC.blockLen = tmp.blockLen;
	    hashC.create = (opts) => hashCons(opts);
	    return hashC;
	}
	exports.wrapConstructorWithOpts = wrapConstructorWithOpts;
	function wrapXOFConstructorWithOpts(hashCons) {
	    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
	    const tmp = hashCons({});
	    hashC.outputLen = tmp.outputLen;
	    hashC.blockLen = tmp.blockLen;
	    hashC.create = (opts) => hashCons(opts);
	    return hashC;
	}
	exports.wrapXOFConstructorWithOpts = wrapXOFConstructorWithOpts;
	/**
	 * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.
	 */
	function randomBytes(bytesLength = 32) {
	    if (crypto_1.crypto && typeof crypto_1.crypto.getRandomValues === 'function') {
	        return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength));
	    }
	    throw new Error('crypto.getRandomValues must be defined');
	}
	exports.randomBytes = randomBytes;
	
} (utils$5));

Object.defineProperty(_sha2, "__esModule", { value: true });
_sha2.SHA2 = void 0;
const _assert_js_1$1 = _assert;
const utils_js_1$8 = utils$5;
// Polyfill for Safari 14
function setBigUint64(view, byteOffset, value, isLE) {
    if (typeof view.setBigUint64 === 'function')
        return view.setBigUint64(byteOffset, value, isLE);
    const _32n = BigInt(32);
    const _u32_max = BigInt(0xffffffff);
    const wh = Number((value >> _32n) & _u32_max);
    const wl = Number(value & _u32_max);
    const h = isLE ? 4 : 0;
    const l = isLE ? 0 : 4;
    view.setUint32(byteOffset + h, wh, isLE);
    view.setUint32(byteOffset + l, wl, isLE);
}
// Base SHA2 class (RFC 6234)
class SHA2 extends utils_js_1$8.Hash {
    constructor(blockLen, outputLen, padOffset, isLE) {
        super();
        this.blockLen = blockLen;
        this.outputLen = outputLen;
        this.padOffset = padOffset;
        this.isLE = isLE;
        this.finished = false;
        this.length = 0;
        this.pos = 0;
        this.destroyed = false;
        this.buffer = new Uint8Array(blockLen);
        this.view = (0, utils_js_1$8.createView)(this.buffer);
    }
    update(data) {
        (0, _assert_js_1$1.exists)(this);
        const { view, buffer, blockLen } = this;
        data = (0, utils_js_1$8.toBytes)(data);
        const len = data.length;
        for (let pos = 0; pos < len;) {
            const take = Math.min(blockLen - this.pos, len - pos);
            // Fast path: we have at least one block in input, cast it to view and process
            if (take === blockLen) {
                const dataView = (0, utils_js_1$8.createView)(data);
                for (; blockLen <= len - pos; pos += blockLen)
                    this.process(dataView, pos);
                continue;
            }
            buffer.set(data.subarray(pos, pos + take), this.pos);
            this.pos += take;
            pos += take;
            if (this.pos === blockLen) {
                this.process(view, 0);
                this.pos = 0;
            }
        }
        this.length += data.length;
        this.roundClean();
        return this;
    }
    digestInto(out) {
        (0, _assert_js_1$1.exists)(this);
        (0, _assert_js_1$1.output)(out, this);
        this.finished = true;
        // Padding
        // We can avoid allocation of buffer for padding completely if it
        // was previously not allocated here. But it won't change performance.
        const { buffer, view, blockLen, isLE } = this;
        let { pos } = this;
        // append the bit '1' to the message
        buffer[pos++] = 0b10000000;
        this.buffer.subarray(pos).fill(0);
        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again
        if (this.padOffset > blockLen - pos) {
            this.process(view, 0);
            pos = 0;
        }
        // Pad until full block byte with zeros
        for (let i = pos; i < blockLen; i++)
            buffer[i] = 0;
        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that
        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.
        // So we just write lowest 64 bits of that value.
        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);
        this.process(view, 0);
        const oview = (0, utils_js_1$8.createView)(out);
        const len = this.outputLen;
        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT
        if (len % 4)
            throw new Error('_sha2: outputLen should be aligned to 32bit');
        const outLen = len / 4;
        const state = this.get();
        if (outLen > state.length)
            throw new Error('_sha2: outputLen bigger than state');
        for (let i = 0; i < outLen; i++)
            oview.setUint32(4 * i, state[i], isLE);
    }
    digest() {
        const { buffer, outputLen } = this;
        this.digestInto(buffer);
        const res = buffer.slice(0, outputLen);
        this.destroy();
        return res;
    }
    _cloneInto(to) {
        to || (to = new this.constructor());
        to.set(...this.get());
        const { blockLen, buffer, length, finished, destroyed, pos } = this;
        to.length = length;
        to.pos = pos;
        to.finished = finished;
        to.destroyed = destroyed;
        if (length % blockLen)
            to.buffer.set(buffer);
        return to;
    }
}
_sha2.SHA2 = SHA2;

Object.defineProperty(sha256$1, "__esModule", { value: true });
sha256$1.sha224 = sha256$1.sha256 = void 0;
const _sha2_js_1 = _sha2;
const utils_js_1$7 = utils$5;
// SHA2-256 need to try 2^128 hashes to execute birthday attack.
// BTC network is doing 2^67 hashes/sec as per early 2023.
// Choice: a ? b : c
const Chi = (a, b, c) => (a & b) ^ (~a & c);
// Majority function, true if any two inpust is true
const Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);
// Round constants:
// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)
// prettier-ignore
const SHA256_K = /* @__PURE__ */ new Uint32Array([
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
]);
// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):
// prettier-ignore
const IV = /* @__PURE__ */ new Uint32Array([
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
]);
// Temporary buffer, not used to store anything between runs
// Named this way because it matches specification.
const SHA256_W = /* @__PURE__ */ new Uint32Array(64);
class SHA256 extends _sha2_js_1.SHA2 {
    constructor() {
        super(64, 32, 8, false);
        // We cannot use array here since array allows indexing by variable
        // which means optimizer/compiler cannot use registers.
        this.A = IV[0] | 0;
        this.B = IV[1] | 0;
        this.C = IV[2] | 0;
        this.D = IV[3] | 0;
        this.E = IV[4] | 0;
        this.F = IV[5] | 0;
        this.G = IV[6] | 0;
        this.H = IV[7] | 0;
    }
    get() {
        const { A, B, C, D, E, F, G, H } = this;
        return [A, B, C, D, E, F, G, H];
    }
    // prettier-ignore
    set(A, B, C, D, E, F, G, H) {
        this.A = A | 0;
        this.B = B | 0;
        this.C = C | 0;
        this.D = D | 0;
        this.E = E | 0;
        this.F = F | 0;
        this.G = G | 0;
        this.H = H | 0;
    }
    process(view, offset) {
        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array
        for (let i = 0; i < 16; i++, offset += 4)
            SHA256_W[i] = view.getUint32(offset, false);
        for (let i = 16; i < 64; i++) {
            const W15 = SHA256_W[i - 15];
            const W2 = SHA256_W[i - 2];
            const s0 = (0, utils_js_1$7.rotr)(W15, 7) ^ (0, utils_js_1$7.rotr)(W15, 18) ^ (W15 >>> 3);
            const s1 = (0, utils_js_1$7.rotr)(W2, 17) ^ (0, utils_js_1$7.rotr)(W2, 19) ^ (W2 >>> 10);
            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;
        }
        // Compression function main loop, 64 rounds
        let { A, B, C, D, E, F, G, H } = this;
        for (let i = 0; i < 64; i++) {
            const sigma1 = (0, utils_js_1$7.rotr)(E, 6) ^ (0, utils_js_1$7.rotr)(E, 11) ^ (0, utils_js_1$7.rotr)(E, 25);
            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;
            const sigma0 = (0, utils_js_1$7.rotr)(A, 2) ^ (0, utils_js_1$7.rotr)(A, 13) ^ (0, utils_js_1$7.rotr)(A, 22);
            const T2 = (sigma0 + Maj(A, B, C)) | 0;
            H = G;
            G = F;
            F = E;
            E = (D + T1) | 0;
            D = C;
            C = B;
            B = A;
            A = (T1 + T2) | 0;
        }
        // Add the compressed chunk to the current hash value
        A = (A + this.A) | 0;
        B = (B + this.B) | 0;
        C = (C + this.C) | 0;
        D = (D + this.D) | 0;
        E = (E + this.E) | 0;
        F = (F + this.F) | 0;
        G = (G + this.G) | 0;
        H = (H + this.H) | 0;
        this.set(A, B, C, D, E, F, G, H);
    }
    roundClean() {
        SHA256_W.fill(0);
    }
    destroy() {
        this.set(0, 0, 0, 0, 0, 0, 0, 0);
        this.buffer.fill(0);
    }
}
// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf
class SHA224 extends SHA256 {
    constructor() {
        super();
        this.A = 0xc1059ed8 | 0;
        this.B = 0x367cd507 | 0;
        this.C = 0x3070dd17 | 0;
        this.D = 0xf70e5939 | 0;
        this.E = 0xffc00b31 | 0;
        this.F = 0x68581511 | 0;
        this.G = 0x64f98fa7 | 0;
        this.H = 0xbefa4fa4 | 0;
        this.outputLen = 28;
    }
}
/**
 * SHA2-256 hash function
 * @param message - data that would be hashed
 */
sha256$1.sha256 = (0, utils_js_1$7.wrapConstructor)(() => new SHA256());
sha256$1.sha224 = (0, utils_js_1$7.wrapConstructor)(() => new SHA224());

var modular = {};

var utils$4 = {};

Object.defineProperty(utils$4, "__esModule", { value: true });
utils$4.validateObject = utils$4.createHmacDrbg = utils$4.bitMask = utils$4.bitSet = utils$4.bitGet = utils$4.bitLen = utils$4.utf8ToBytes = utils$4.equalBytes = utils$4.concatBytes = utils$4.ensureBytes = utils$4.numberToVarBytesBE = utils$4.numberToBytesLE = utils$4.numberToBytesBE = utils$4.bytesToNumberLE = utils$4.bytesToNumberBE = utils$4.hexToBytes = utils$4.hexToNumber = utils$4.numberToHexUnpadded = utils$4.bytesToHex = utils$4.isBytes = void 0;
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
// 100 lines of code in the file are duplicated from noble-hashes (utils).
// This is OK: `abstract` directory does not use noble-hashes.
// User may opt-in into using different hashing library. This way, noble-hashes
// won't be included into their bundle.
const _0n$3 = BigInt(0);
const _1n$3 = BigInt(1);
const _2n$2 = BigInt(2);
function isBytes(a) {
    return (a instanceof Uint8Array ||
        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));
}
utils$4.isBytes = isBytes;
// Array where index 0xf0 (240) is mapped to string 'f0'
const hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));
/**
 * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'
 */
function bytesToHex$1(bytes) {
    if (!isBytes(bytes))
        throw new Error('Uint8Array expected');
    // pre-caching improves the speed 6x
    let hex = '';
    for (let i = 0; i < bytes.length; i++) {
        hex += hexes[bytes[i]];
    }
    return hex;
}
utils$4.bytesToHex = bytesToHex$1;
function numberToHexUnpadded(num) {
    const hex = num.toString(16);
    return hex.length & 1 ? `0${hex}` : hex;
}
utils$4.numberToHexUnpadded = numberToHexUnpadded;
function hexToNumber(hex) {
    if (typeof hex !== 'string')
        throw new Error('hex string expected, got ' + typeof hex);
    // Big Endian
    return BigInt(hex === '' ? '0' : `0x${hex}`);
}
utils$4.hexToNumber = hexToNumber;
// We use optimized technique to convert hex string to byte array
const asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };
function asciiToBase16(char) {
    if (char >= asciis._0 && char <= asciis._9)
        return char - asciis._0;
    if (char >= asciis._A && char <= asciis._F)
        return char - (asciis._A - 10);
    if (char >= asciis._a && char <= asciis._f)
        return char - (asciis._a - 10);
    return;
}
/**
 * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])
 */
function hexToBytes$1(hex) {
    if (typeof hex !== 'string')
        throw new Error('hex string expected, got ' + typeof hex);
    const hl = hex.length;
    const al = hl / 2;
    if (hl % 2)
        throw new Error('padded hex string expected, got unpadded hex of length ' + hl);
    const array = new Uint8Array(al);
    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
        const n1 = asciiToBase16(hex.charCodeAt(hi));
        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));
        if (n1 === undefined || n2 === undefined) {
            const char = hex[hi] + hex[hi + 1];
            throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
        }
        array[ai] = n1 * 16 + n2;
    }
    return array;
}
utils$4.hexToBytes = hexToBytes$1;
// BE: Big Endian, LE: Little Endian
function bytesToNumberBE(bytes) {
    return hexToNumber(bytesToHex$1(bytes));
}
utils$4.bytesToNumberBE = bytesToNumberBE;
function bytesToNumberLE(bytes) {
    if (!isBytes(bytes))
        throw new Error('Uint8Array expected');
    return hexToNumber(bytesToHex$1(Uint8Array.from(bytes).reverse()));
}
utils$4.bytesToNumberLE = bytesToNumberLE;
function numberToBytesBE(n, len) {
    return hexToBytes$1(n.toString(16).padStart(len * 2, '0'));
}
utils$4.numberToBytesBE = numberToBytesBE;
function numberToBytesLE(n, len) {
    return numberToBytesBE(n, len).reverse();
}
utils$4.numberToBytesLE = numberToBytesLE;
// Unpadded, rarely used
function numberToVarBytesBE(n) {
    return hexToBytes$1(numberToHexUnpadded(n));
}
utils$4.numberToVarBytesBE = numberToVarBytesBE;
/**
 * Takes hex string or Uint8Array, converts to Uint8Array.
 * Validates output length.
 * Will throw error for other types.
 * @param title descriptive title for an error e.g. 'private key'
 * @param hex hex string or Uint8Array
 * @param expectedLength optional, will compare to result array's length
 * @returns
 */
function ensureBytes(title, hex, expectedLength) {
    let res;
    if (typeof hex === 'string') {
        try {
            res = hexToBytes$1(hex);
        }
        catch (e) {
            throw new Error(`${title} must be valid hex string, got "${hex}". Cause: ${e}`);
        }
    }
    else if (isBytes(hex)) {
        // Uint8Array.from() instead of hash.slice() because node.js Buffer
        // is instance of Uint8Array, and its slice() creates **mutable** copy
        res = Uint8Array.from(hex);
    }
    else {
        throw new Error(`${title} must be hex string or Uint8Array`);
    }
    const len = res.length;
    if (typeof expectedLength === 'number' && len !== expectedLength)
        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);
    return res;
}
utils$4.ensureBytes = ensureBytes;
/**
 * Copies several Uint8Arrays into one.
 */
function concatBytes(...arrays) {
    let sum = 0;
    for (let i = 0; i < arrays.length; i++) {
        const a = arrays[i];
        if (!isBytes(a))
            throw new Error('Uint8Array expected');
        sum += a.length;
    }
    let res = new Uint8Array(sum);
    let pad = 0;
    for (let i = 0; i < arrays.length; i++) {
        const a = arrays[i];
        res.set(a, pad);
        pad += a.length;
    }
    return res;
}
utils$4.concatBytes = concatBytes;
// Compares 2 u8a-s in kinda constant time
function equalBytes(a, b) {
    if (a.length !== b.length)
        return false;
    let diff = 0;
    for (let i = 0; i < a.length; i++)
        diff |= a[i] ^ b[i];
    return diff === 0;
}
utils$4.equalBytes = equalBytes;
/**
 * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])
 */
function utf8ToBytes(str) {
    if (typeof str !== 'string')
        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809
}
utils$4.utf8ToBytes = utf8ToBytes;
// Bit operations
/**
 * Calculates amount of bits in a bigint.
 * Same as `n.toString(2).length`
 */
function bitLen(n) {
    let len;
    for (len = 0; n > _0n$3; n >>= _1n$3, len += 1)
        ;
    return len;
}
utils$4.bitLen = bitLen;
/**
 * Gets single bit at position.
 * NOTE: first bit position is 0 (same as arrays)
 * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`
 */
function bitGet(n, pos) {
    return (n >> BigInt(pos)) & _1n$3;
}
utils$4.bitGet = bitGet;
/**
 * Sets single bit at position.
 */
const bitSet = (n, pos, value) => {
    return n | ((value ? _1n$3 : _0n$3) << BigInt(pos));
};
utils$4.bitSet = bitSet;
/**
 * Calculate mask for N bits. Not using ** operator with bigints because of old engines.
 * Same as BigInt(`0b${Array(i).fill('1').join('')}`)
 */
const bitMask = (n) => (_2n$2 << BigInt(n - 1)) - _1n$3;
utils$4.bitMask = bitMask;
// DRBG
const u8n = (data) => new Uint8Array(data); // creates Uint8Array
const u8fr = (arr) => Uint8Array.from(arr); // another shortcut
/**
 * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.
 * @returns function that will call DRBG until 2nd arg returns something meaningful
 * @example
 *   const drbg = createHmacDRBG<Key>(32, 32, hmac);
 *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined
 */
function createHmacDrbg(hashLen, qByteLen, hmacFn) {
    if (typeof hashLen !== 'number' || hashLen < 2)
        throw new Error('hashLen must be a number');
    if (typeof qByteLen !== 'number' || qByteLen < 2)
        throw new Error('qByteLen must be a number');
    if (typeof hmacFn !== 'function')
        throw new Error('hmacFn must be a function');
    // Step B, Step C: set hashLen to 8*ceil(hlen/8)
    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.
    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same
    let i = 0; // Iterations counter, will throw when over 1000
    const reset = () => {
        v.fill(1);
        k.fill(0);
        i = 0;
    };
    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)
    const reseed = (seed = u8n()) => {
        // HMAC-DRBG reseed() function. Steps D-G
        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)
        v = h(); // v = hmac(k || v)
        if (seed.length === 0)
            return;
        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)
        v = h(); // v = hmac(k || v)
    };
    const gen = () => {
        // HMAC-DRBG generate() function
        if (i++ >= 1000)
            throw new Error('drbg: tried 1000 values');
        let len = 0;
        const out = [];
        while (len < qByteLen) {
            v = h();
            const sl = v.slice();
            out.push(sl);
            len += v.length;
        }
        return concatBytes(...out);
    };
    const genUntil = (seed, pred) => {
        reset();
        reseed(seed); // Steps D-G
        let res = undefined; // Step H: grind until k is in [1..n-1]
        while (!(res = pred(gen())))
            reseed();
        reset();
        return res;
    };
    return genUntil;
}
utils$4.createHmacDrbg = createHmacDrbg;
// Validating curves and fields
const validatorFns = {
    bigint: (val) => typeof val === 'bigint',
    function: (val) => typeof val === 'function',
    boolean: (val) => typeof val === 'boolean',
    string: (val) => typeof val === 'string',
    stringOrUint8Array: (val) => typeof val === 'string' || isBytes(val),
    isSafeInteger: (val) => Number.isSafeInteger(val),
    array: (val) => Array.isArray(val),
    field: (val, object) => object.Fp.isValid(val),
    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),
};
// type Record<K extends string | number | symbol, T> = { [P in K]: T; }
function validateObject(object, validators, optValidators = {}) {
    const checkField = (fieldName, type, isOptional) => {
        const checkVal = validatorFns[type];
        if (typeof checkVal !== 'function')
            throw new Error(`Invalid validator "${type}", expected function`);
        const val = object[fieldName];
        if (isOptional && val === undefined)
            return;
        if (!checkVal(val, object)) {
            throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);
        }
    };
    for (const [fieldName, type] of Object.entries(validators))
        checkField(fieldName, type, false);
    for (const [fieldName, type] of Object.entries(optValidators))
        checkField(fieldName, type, true);
    return object;
}
utils$4.validateObject = validateObject;

Object.defineProperty(modular, "__esModule", { value: true });
modular.mapHashToField = modular.getMinHashLength = modular.getFieldBytesLength = modular.hashToPrivateScalar = modular.FpSqrtEven = modular.FpSqrtOdd = modular.Field = modular.nLength = modular.FpIsSquare = modular.FpDiv = modular.FpInvertBatch = modular.FpPow = modular.validateField = modular.isNegativeLE = modular.FpSqrt = modular.tonelliShanks = modular.invert = modular.pow2 = modular.pow = modular.mod = void 0;
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
// Utilities for modular arithmetics and finite fields
const utils_js_1$6 = utils$4;
// prettier-ignore
const _0n$2 = BigInt(0), _1n$2 = BigInt(1), _2n$1 = BigInt(2), _3n = BigInt(3);
// prettier-ignore
const _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);
// prettier-ignore
BigInt(9); BigInt(16);
// Calculates a modulo b
function mod(a, b) {
    const result = a % b;
    return result >= _0n$2 ? result : b + result;
}
modular.mod = mod;
/**
 * Efficiently raise num to power and do modular division.
 * Unsafe in some contexts: uses ladder, so can expose bigint bits.
 * @example
 * pow(2n, 6n, 11n) // 64n % 11n == 9n
 */
// TODO: use field version && remove
function pow(num, power, modulo) {
    if (modulo <= _0n$2 || power < _0n$2)
        throw new Error('Expected power/modulo > 0');
    if (modulo === _1n$2)
        return _0n$2;
    let res = _1n$2;
    while (power > _0n$2) {
        if (power & _1n$2)
            res = (res * num) % modulo;
        num = (num * num) % modulo;
        power >>= _1n$2;
    }
    return res;
}
modular.pow = pow;
// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)
function pow2(x, power, modulo) {
    let res = x;
    while (power-- > _0n$2) {
        res *= res;
        res %= modulo;
    }
    return res;
}
modular.pow2 = pow2;
// Inverses number over modulo
function invert(number, modulo) {
    if (number === _0n$2 || modulo <= _0n$2) {
        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);
    }
    // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/
    // Fermat's little theorem "CT-like" version inv(n) = n^(m-2) mod m is 30x slower.
    let a = mod(number, modulo);
    let b = modulo;
    // prettier-ignore
    let x = _0n$2, u = _1n$2;
    while (a !== _0n$2) {
        // JIT applies optimization if those two lines follow each other
        const q = b / a;
        const r = b % a;
        const m = x - u * q;
        // prettier-ignore
        b = a, a = r, x = u, u = m;
    }
    const gcd = b;
    if (gcd !== _1n$2)
        throw new Error('invert: does not exist');
    return mod(x, modulo);
}
modular.invert = invert;
/**
 * Tonelli-Shanks square root search algorithm.
 * 1. https://eprint.iacr.org/2012/685.pdf (page 12)
 * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks
 * Will start an infinite loop if field order P is not prime.
 * @param P field order
 * @returns function that takes field Fp (created from P) and number n
 */
function tonelliShanks(P) {
    // Legendre constant: used to calculate Legendre symbol (a | p),
    // which denotes the value of a^((p-1)/2) (mod p).
    // (a | p) ≡ 1    if a is a square (mod p)
    // (a | p) ≡ -1   if a is not a square (mod p)
    // (a | p) ≡ 0    if a ≡ 0 (mod p)
    const legendreC = (P - _1n$2) / _2n$1;
    let Q, S, Z;
    // Step 1: By factoring out powers of 2 from p - 1,
    // find q and s such that p - 1 = q*(2^s) with q odd
    for (Q = P - _1n$2, S = 0; Q % _2n$1 === _0n$2; Q /= _2n$1, S++)
        ;
    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq
    for (Z = _2n$1; Z < P && pow(Z, legendreC, P) !== P - _1n$2; Z++)
        ;
    // Fast-path
    if (S === 1) {
        const p1div4 = (P + _1n$2) / _4n;
        return function tonelliFast(Fp, n) {
            const root = Fp.pow(n, p1div4);
            if (!Fp.eql(Fp.sqr(root), n))
                throw new Error('Cannot find square root');
            return root;
        };
    }
    // Slow-path
    const Q1div2 = (Q + _1n$2) / _2n$1;
    return function tonelliSlow(Fp, n) {
        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1
        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))
            throw new Error('Cannot find square root');
        let r = S;
        // TODO: will fail at Fp2/etc
        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b
        let x = Fp.pow(n, Q1div2); // first guess at the square root
        let b = Fp.pow(n, Q); // first guess at the fudge factor
        while (!Fp.eql(b, Fp.ONE)) {
            if (Fp.eql(b, Fp.ZERO))
                return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)
            // Find m such b^(2^m)==1
            let m = 1;
            for (let t2 = Fp.sqr(b); m < r; m++) {
                if (Fp.eql(t2, Fp.ONE))
                    break;
                t2 = Fp.sqr(t2); // t2 *= t2
            }
            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow
            const ge = Fp.pow(g, _1n$2 << BigInt(r - m - 1)); // ge = 2^(r-m-1)
            g = Fp.sqr(ge); // g = ge * ge
            x = Fp.mul(x, ge); // x *= ge
            b = Fp.mul(b, g); // b *= g
            r = m;
        }
        return x;
    };
}
modular.tonelliShanks = tonelliShanks;
function FpSqrt(P) {
    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.
    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).
    // P ≡ 3 (mod 4)
    // √n = n^((P+1)/4)
    if (P % _4n === _3n) {
        // Not all roots possible!
        // const ORDER =
        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;
        // const NUM = 72057594037927816n;
        const p1div4 = (P + _1n$2) / _4n;
        return function sqrt3mod4(Fp, n) {
            const root = Fp.pow(n, p1div4);
            // Throw if root**2 != n
            if (!Fp.eql(Fp.sqr(root), n))
                throw new Error('Cannot find square root');
            return root;
        };
    }
    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)
    if (P % _8n === _5n) {
        const c1 = (P - _5n) / _8n;
        return function sqrt5mod8(Fp, n) {
            const n2 = Fp.mul(n, _2n$1);
            const v = Fp.pow(n2, c1);
            const nv = Fp.mul(n, v);
            const i = Fp.mul(Fp.mul(nv, _2n$1), v);
            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));
            if (!Fp.eql(Fp.sqr(root), n))
                throw new Error('Cannot find square root');
            return root;
        };
    }
    // Other cases: Tonelli-Shanks algorithm
    return tonelliShanks(P);
}
modular.FpSqrt = FpSqrt;
// Little-endian check for first LE bit (last BE bit);
const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n$2) === _1n$2;
modular.isNegativeLE = isNegativeLE;
// prettier-ignore
const FIELD_FIELDS = [
    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',
    'eql', 'add', 'sub', 'mul', 'pow', 'div',
    'addN', 'subN', 'mulN', 'sqrN'
];
function validateField(field) {
    const initial = {
        ORDER: 'bigint',
        MASK: 'bigint',
        BYTES: 'isSafeInteger',
        BITS: 'isSafeInteger',
    };
    const opts = FIELD_FIELDS.reduce((map, val) => {
        map[val] = 'function';
        return map;
    }, initial);
    return (0, utils_js_1$6.validateObject)(field, opts);
}
modular.validateField = validateField;
// Generic field functions
/**
 * Same as `pow` but for Fp: non-constant-time.
 * Unsafe in some contexts: uses ladder, so can expose bigint bits.
 */
function FpPow(f, num, power) {
    // Should have same speed as pow for bigints
    // TODO: benchmark!
    if (power < _0n$2)
        throw new Error('Expected power > 0');
    if (power === _0n$2)
        return f.ONE;
    if (power === _1n$2)
        return num;
    let p = f.ONE;
    let d = num;
    while (power > _0n$2) {
        if (power & _1n$2)
            p = f.mul(p, d);
        d = f.sqr(d);
        power >>= _1n$2;
    }
    return p;
}
modular.FpPow = FpPow;
/**
 * Efficiently invert an array of Field elements.
 * `inv(0)` will return `undefined` here: make sure to throw an error.
 */
function FpInvertBatch(f, nums) {
    const tmp = new Array(nums.length);
    // Walk from first to last, multiply them by each other MOD p
    const lastMultiplied = nums.reduce((acc, num, i) => {
        if (f.is0(num))
            return acc;
        tmp[i] = acc;
        return f.mul(acc, num);
    }, f.ONE);
    // Invert last element
    const inverted = f.inv(lastMultiplied);
    // Walk from last to first, multiply them by inverted each other MOD p
    nums.reduceRight((acc, num, i) => {
        if (f.is0(num))
            return acc;
        tmp[i] = f.mul(acc, tmp[i]);
        return f.mul(acc, num);
    }, inverted);
    return tmp;
}
modular.FpInvertBatch = FpInvertBatch;
function FpDiv(f, lhs, rhs) {
    return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));
}
modular.FpDiv = FpDiv;
// This function returns True whenever the value x is a square in the field F.
function FpIsSquare(f) {
    const legendreConst = (f.ORDER - _1n$2) / _2n$1; // Integer arithmetic
    return (x) => {
        const p = f.pow(x, legendreConst);
        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);
    };
}
modular.FpIsSquare = FpIsSquare;
// CURVE.n lengths
function nLength(n, nBitLength) {
    // Bit size, byte size of CURVE.n
    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;
    const nByteLength = Math.ceil(_nBitLength / 8);
    return { nBitLength: _nBitLength, nByteLength };
}
modular.nLength = nLength;
/**
 * Initializes a finite field over prime. **Non-primes are not supported.**
 * Do not init in loop: slow. Very fragile: always run a benchmark on a change.
 * Major performance optimizations:
 * * a) denormalized operations like mulN instead of mul
 * * b) same object shape: never add or remove keys
 * * c) Object.freeze
 * @param ORDER prime positive bigint
 * @param bitLen how many bits the field consumes
 * @param isLE (def: false) if encoding / decoding should be in little-endian
 * @param redef optional faster redefinitions of sqrt and other methods
 */
function Field(ORDER, bitLen, isLE = false, redef = {}) {
    if (ORDER <= _0n$2)
        throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);
    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);
    if (BYTES > 2048)
        throw new Error('Field lengths over 2048 bytes are not supported');
    const sqrtP = FpSqrt(ORDER);
    const f = Object.freeze({
        ORDER,
        BITS,
        BYTES,
        MASK: (0, utils_js_1$6.bitMask)(BITS),
        ZERO: _0n$2,
        ONE: _1n$2,
        create: (num) => mod(num, ORDER),
        isValid: (num) => {
            if (typeof num !== 'bigint')
                throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);
            return _0n$2 <= num && num < ORDER; // 0 is valid element, but it's not invertible
        },
        is0: (num) => num === _0n$2,
        isOdd: (num) => (num & _1n$2) === _1n$2,
        neg: (num) => mod(-num, ORDER),
        eql: (lhs, rhs) => lhs === rhs,
        sqr: (num) => mod(num * num, ORDER),
        add: (lhs, rhs) => mod(lhs + rhs, ORDER),
        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),
        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),
        pow: (num, power) => FpPow(f, num, power),
        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),
        // Same as above, but doesn't normalize
        sqrN: (num) => num * num,
        addN: (lhs, rhs) => lhs + rhs,
        subN: (lhs, rhs) => lhs - rhs,
        mulN: (lhs, rhs) => lhs * rhs,
        inv: (num) => invert(num, ORDER),
        sqrt: redef.sqrt || ((n) => sqrtP(f, n)),
        invertBatch: (lst) => FpInvertBatch(f, lst),
        // TODO: do we really need constant cmov?
        // We don't have const-time bigints anyway, so probably will be not very useful
        cmov: (a, b, c) => (c ? b : a),
        toBytes: (num) => (isLE ? (0, utils_js_1$6.numberToBytesLE)(num, BYTES) : (0, utils_js_1$6.numberToBytesBE)(num, BYTES)),
        fromBytes: (bytes) => {
            if (bytes.length !== BYTES)
                throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);
            return isLE ? (0, utils_js_1$6.bytesToNumberLE)(bytes) : (0, utils_js_1$6.bytesToNumberBE)(bytes);
        },
    });
    return Object.freeze(f);
}
modular.Field = Field;
function FpSqrtOdd(Fp, elm) {
    if (!Fp.isOdd)
        throw new Error(`Field doesn't have isOdd`);
    const root = Fp.sqrt(elm);
    return Fp.isOdd(root) ? root : Fp.neg(root);
}
modular.FpSqrtOdd = FpSqrtOdd;
function FpSqrtEven(Fp, elm) {
    if (!Fp.isOdd)
        throw new Error(`Field doesn't have isOdd`);
    const root = Fp.sqrt(elm);
    return Fp.isOdd(root) ? Fp.neg(root) : root;
}
modular.FpSqrtEven = FpSqrtEven;
/**
 * "Constant-time" private key generation utility.
 * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).
 * Which makes it slightly more biased, less secure.
 * @deprecated use mapKeyToField instead
 */
function hashToPrivateScalar(hash, groupOrder, isLE = false) {
    hash = (0, utils_js_1$6.ensureBytes)('privateHash', hash);
    const hashLen = hash.length;
    const minLen = nLength(groupOrder).nByteLength + 8;
    if (minLen < 24 || hashLen < minLen || hashLen > 1024)
        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);
    const num = isLE ? (0, utils_js_1$6.bytesToNumberLE)(hash) : (0, utils_js_1$6.bytesToNumberBE)(hash);
    return mod(num, groupOrder - _1n$2) + _1n$2;
}
modular.hashToPrivateScalar = hashToPrivateScalar;
/**
 * Returns total number of bytes consumed by the field element.
 * For example, 32 bytes for usual 256-bit weierstrass curve.
 * @param fieldOrder number of field elements, usually CURVE.n
 * @returns byte length of field
 */
function getFieldBytesLength(fieldOrder) {
    if (typeof fieldOrder !== 'bigint')
        throw new Error('field order must be bigint');
    const bitLength = fieldOrder.toString(2).length;
    return Math.ceil(bitLength / 8);
}
modular.getFieldBytesLength = getFieldBytesLength;
/**
 * Returns minimal amount of bytes that can be safely reduced
 * by field order.
 * Should be 2^-128 for 128-bit curve such as P256.
 * @param fieldOrder number of field elements, usually CURVE.n
 * @returns byte length of target hash
 */
function getMinHashLength(fieldOrder) {
    const length = getFieldBytesLength(fieldOrder);
    return length + Math.ceil(length / 2);
}
modular.getMinHashLength = getMinHashLength;
/**
 * "Constant-time" private key generation utility.
 * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF
 * and convert them into private scalar, with the modulo bias being negligible.
 * Needs at least 48 bytes of input for 32-byte private key.
 * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/
 * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final
 * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5
 * @param hash hash output from SHA3 or a similar function
 * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)
 * @param isLE interpret hash bytes as LE num
 * @returns valid private scalar
 */
function mapHashToField(key, fieldOrder, isLE = false) {
    const len = key.length;
    const fieldLen = getFieldBytesLength(fieldOrder);
    const minLen = getMinHashLength(fieldOrder);
    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.
    if (len < 16 || len < minLen || len > 1024)
        throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);
    const num = isLE ? (0, utils_js_1$6.bytesToNumberBE)(key) : (0, utils_js_1$6.bytesToNumberLE)(key);
    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0
    const reduced = mod(num, fieldOrder - _1n$2) + _1n$2;
    return isLE ? (0, utils_js_1$6.numberToBytesLE)(reduced, fieldLen) : (0, utils_js_1$6.numberToBytesBE)(reduced, fieldLen);
}
modular.mapHashToField = mapHashToField;

var weierstrass = {};

var curve = {};

Object.defineProperty(curve, "__esModule", { value: true });
curve.validateBasic = curve.wNAF = void 0;
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
// Abelian group utilities
const modular_js_1$1 = modular;
const utils_js_1$5 = utils$4;
const _0n$1 = BigInt(0);
const _1n$1 = BigInt(1);
// Elliptic curve multiplication of Point by scalar. Fragile.
// Scalars should always be less than curve order: this should be checked inside of a curve itself.
// Creates precomputation tables for fast multiplication:
// - private scalar is split by fixed size windows of W bits
// - every window point is collected from window's table & added to accumulator
// - since windows are different, same point inside tables won't be accessed more than once per calc
// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)
// - +1 window is neccessary for wNAF
// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication
// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow
// windows to be in different memory locations
function wNAF(c, bits) {
    const constTimeNegate = (condition, item) => {
        const neg = item.negate();
        return condition ? neg : item;
    };
    const opts = (W) => {
        const windows = Math.ceil(bits / W) + 1; // +1, because
        const windowSize = 2 ** (W - 1); // -1 because we skip zero
        return { windows, windowSize };
    };
    return {
        constTimeNegate,
        // non-const time multiplication ladder
        unsafeLadder(elm, n) {
            let p = c.ZERO;
            let d = elm;
            while (n > _0n$1) {
                if (n & _1n$1)
                    p = p.add(d);
                d = d.double();
                n >>= _1n$1;
            }
            return p;
        },
        /**
         * Creates a wNAF precomputation window. Used for caching.
         * Default window size is set by `utils.precompute()` and is equal to 8.
         * Number of precomputed points depends on the curve size:
         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
         * - 𝑊 is the window size
         * - 𝑛 is the bitlength of the curve order.
         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
         * @returns precomputed point tables flattened to a single array
         */
        precomputeWindow(elm, W) {
            const { windows, windowSize } = opts(W);
            const points = [];
            let p = elm;
            let base = p;
            for (let window = 0; window < windows; window++) {
                base = p;
                points.push(base);
                // =1, because we skip zero
                for (let i = 1; i < windowSize; i++) {
                    base = base.add(p);
                    points.push(base);
                }
                p = base.double();
            }
            return points;
        },
        /**
         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
         * @param W window size
         * @param precomputes precomputed tables
         * @param n scalar (we don't check here, but should be less than curve order)
         * @returns real and fake (for const-time) points
         */
        wNAF(W, precomputes, n) {
            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise
            // But need to carefully remove other checks before wNAF. ORDER == bits here
            const { windows, windowSize } = opts(W);
            let p = c.ZERO;
            let f = c.BASE;
            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.
            const maxNumber = 2 ** W;
            const shiftBy = BigInt(W);
            for (let window = 0; window < windows; window++) {
                const offset = window * windowSize;
                // Extract W bits.
                let wbits = Number(n & mask);
                // Shift number by W bits.
                n >>= shiftBy;
                // If the bits are bigger than max size, we'll split those.
                // +224 => 256 - 32
                if (wbits > windowSize) {
                    wbits -= maxNumber;
                    n += _1n$1;
                }
                // This code was first written with assumption that 'f' and 'p' will never be infinity point:
                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,
                // there is negate now: it is possible that negated element from low value
                // would be the same as high element, which will create carry into next window.
                // It's not obvious how this can fail, but still worth investigating later.
                // Check if we're onto Zero point.
                // Add random point inside current window to f.
                const offset1 = offset;
                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero
                const cond1 = window % 2 !== 0;
                const cond2 = wbits < 0;
                if (wbits === 0) {
                    // The most important part for const-time getPublicKey
                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));
                }
                else {
                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));
                }
            }
            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()
            // Even if the variable is still unused, there are some checks which will
            // throw an exception, so compiler needs to prove they won't happen, which is hard.
            // At this point there is a way to F be infinity-point even if p is not,
            // which makes it less const-time: around 1 bigint multiply.
            return { p, f };
        },
        wNAFCached(P, precomputesMap, n, transform) {
            // @ts-ignore
            const W = P._WINDOW_SIZE || 1;
            // Calculate precomputes on a first run, reuse them after
            let comp = precomputesMap.get(P);
            if (!comp) {
                comp = this.precomputeWindow(P, W);
                if (W !== 1) {
                    precomputesMap.set(P, transform(comp));
                }
            }
            return this.wNAF(W, comp, n);
        },
    };
}
curve.wNAF = wNAF;
function validateBasic(curve) {
    (0, modular_js_1$1.validateField)(curve.Fp);
    (0, utils_js_1$5.validateObject)(curve, {
        n: 'bigint',
        h: 'bigint',
        Gx: 'field',
        Gy: 'field',
    }, {
        nBitLength: 'isSafeInteger',
        nByteLength: 'isSafeInteger',
    });
    // Set defaults
    return Object.freeze({
        ...(0, modular_js_1$1.nLength)(curve.n, curve.nBitLength),
        ...curve,
        ...{ p: curve.Fp.ORDER },
    });
}
curve.validateBasic = validateBasic;

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.mapToCurveSimpleSWU = exports.SWUFpSqrtRatio = exports.weierstrass = exports.weierstrassPoints = exports.DER = void 0;
	/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
	// Short Weierstrass curve. The formula is: y² = x³ + ax + b
	const mod = modular;
	const ut = utils$4;
	const utils_js_1 = utils$4;
	const curve_js_1 = curve;
	function validatePointOpts(curve) {
	    const opts = (0, curve_js_1.validateBasic)(curve);
	    ut.validateObject(opts, {
	        a: 'field',
	        b: 'field',
	    }, {
	        allowedPrivateKeyLengths: 'array',
	        wrapPrivateKey: 'boolean',
	        isTorsionFree: 'function',
	        clearCofactor: 'function',
	        allowInfinityPoint: 'boolean',
	        fromBytes: 'function',
	        toBytes: 'function',
	    });
	    const { endo, Fp, a } = opts;
	    if (endo) {
	        if (!Fp.eql(a, Fp.ZERO)) {
	            throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');
	        }
	        if (typeof endo !== 'object' ||
	            typeof endo.beta !== 'bigint' ||
	            typeof endo.splitScalar !== 'function') {
	            throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');
	        }
	    }
	    return Object.freeze({ ...opts });
	}
	// ASN.1 DER encoding utilities
	const { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;
	exports.DER = {
	    // asn.1 DER encoding utils
	    Err: class DERErr extends Error {
	        constructor(m = '') {
	            super(m);
	        }
	    },
	    _parseInt(data) {
	        const { Err: E } = exports.DER;
	        if (data.length < 2 || data[0] !== 0x02)
	            throw new E('Invalid signature integer tag');
	        const len = data[1];
	        const res = data.subarray(2, len + 2);
	        if (!len || res.length !== len)
	            throw new E('Invalid signature integer: wrong length');
	        // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,
	        // since we always use positive integers here. It must always be empty:
	        // - add zero byte if exists
	        // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)
	        if (res[0] & 0b10000000)
	            throw new E('Invalid signature integer: negative');
	        if (res[0] === 0x00 && !(res[1] & 0b10000000))
	            throw new E('Invalid signature integer: unnecessary leading zero');
	        return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left
	    },
	    toSig(hex) {
	        // parse DER signature
	        const { Err: E } = exports.DER;
	        const data = typeof hex === 'string' ? h2b(hex) : hex;
	        if (!ut.isBytes(data))
	            throw new Error('ui8a expected');
	        let l = data.length;
	        if (l < 2 || data[0] != 0x30)
	            throw new E('Invalid signature tag');
	        if (data[1] !== l - 2)
	            throw new E('Invalid signature: incorrect length');
	        const { d: r, l: sBytes } = exports.DER._parseInt(data.subarray(2));
	        const { d: s, l: rBytesLeft } = exports.DER._parseInt(sBytes);
	        if (rBytesLeft.length)
	            throw new E('Invalid signature: left bytes after parsing');
	        return { r, s };
	    },
	    hexFromSig(sig) {
	        // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'
	        const slice = (s) => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);
	        const h = (num) => {
	            const hex = num.toString(16);
	            return hex.length & 1 ? `0${hex}` : hex;
	        };
	        const s = slice(h(sig.s));
	        const r = slice(h(sig.r));
	        const shl = s.length / 2;
	        const rhl = r.length / 2;
	        const sl = h(shl);
	        const rl = h(rhl);
	        return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;
	    },
	};
	// Be friendly to bad ECMAScript parsers by not using bigint literals
	// prettier-ignore
	const _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);
	function weierstrassPoints(opts) {
	    const CURVE = validatePointOpts(opts);
	    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ
	    const toBytes = CURVE.toBytes ||
	        ((_c, point, _isCompressed) => {
	            const a = point.toAffine();
	            return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));
	        });
	    const fromBytes = CURVE.fromBytes ||
	        ((bytes) => {
	            // const head = bytes[0];
	            const tail = bytes.subarray(1);
	            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');
	            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
	            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
	            return { x, y };
	        });
	    /**
	     * y² = x³ + ax + b: Short weierstrass curve formula
	     * @returns y²
	     */
	    function weierstrassEquation(x) {
	        const { a, b } = CURVE;
	        const x2 = Fp.sqr(x); // x * x
	        const x3 = Fp.mul(x2, x); // x2 * x
	        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b
	    }
	    // Validate whether the passed curve params are valid.
	    // We check if curve equation works for generator point.
	    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.
	    // ProjectivePoint class has not been initialized yet.
	    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))
	        throw new Error('bad generator point: equation left != right');
	    // Valid group elements reside in range 1..n-1
	    function isWithinCurveOrder(num) {
	        return typeof num === 'bigint' && _0n < num && num < CURVE.n;
	    }
	    function assertGE(num) {
	        if (!isWithinCurveOrder(num))
	            throw new Error('Expected valid bigint: 0 < bigint < curve.n');
	    }
	    // Validates if priv key is valid and converts it to bigint.
	    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.
	    function normPrivateKeyToScalar(key) {
	        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;
	        if (lengths && typeof key !== 'bigint') {
	            if (ut.isBytes(key))
	                key = ut.bytesToHex(key);
	            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes
	            if (typeof key !== 'string' || !lengths.includes(key.length))
	                throw new Error('Invalid key');
	            key = key.padStart(nByteLength * 2, '0');
	        }
	        let num;
	        try {
	            num =
	                typeof key === 'bigint'
	                    ? key
	                    : ut.bytesToNumberBE((0, utils_js_1.ensureBytes)('private key', key, nByteLength));
	        }
	        catch (error) {
	            throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);
	        }
	        if (wrapPrivateKey)
	            num = mod.mod(num, n); // disabled by default, enabled for BLS
	        assertGE(num); // num in range [1..N-1]
	        return num;
	    }
	    const pointPrecomputes = new Map();
	    function assertPrjPoint(other) {
	        if (!(other instanceof Point))
	            throw new Error('ProjectivePoint expected');
	    }
	    /**
	     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)
	     * Default Point works in 2d / affine coordinates: (x, y)
	     * We're doing calculations in projective, because its operations don't require costly inversion.
	     */
	    class Point {
	        constructor(px, py, pz) {
	            this.px = px;
	            this.py = py;
	            this.pz = pz;
	            if (px == null || !Fp.isValid(px))
	                throw new Error('x required');
	            if (py == null || !Fp.isValid(py))
	                throw new Error('y required');
	            if (pz == null || !Fp.isValid(pz))
	                throw new Error('z required');
	        }
	        // Does not validate if the point is on-curve.
	        // Use fromHex instead, or call assertValidity() later.
	        static fromAffine(p) {
	            const { x, y } = p || {};
	            if (!p || !Fp.isValid(x) || !Fp.isValid(y))
	                throw new Error('invalid affine point');
	            if (p instanceof Point)
	                throw new Error('projective point not allowed');
	            const is0 = (i) => Fp.eql(i, Fp.ZERO);
	            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)
	            if (is0(x) && is0(y))
	                return Point.ZERO;
	            return new Point(x, y, Fp.ONE);
	        }
	        get x() {
	            return this.toAffine().x;
	        }
	        get y() {
	            return this.toAffine().y;
	        }
	        /**
	         * Takes a bunch of Projective Points but executes only one
	         * inversion on all of them. Inversion is very slow operation,
	         * so this improves performance massively.
	         * Optimization: converts a list of projective points to a list of identical points with Z=1.
	         */
	        static normalizeZ(points) {
	            const toInv = Fp.invertBatch(points.map((p) => p.pz));
	            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);
	        }
	        /**
	         * Converts hash string or Uint8Array to Point.
	         * @param hex short/long ECDSA hex
	         */
	        static fromHex(hex) {
	            const P = Point.fromAffine(fromBytes((0, utils_js_1.ensureBytes)('pointHex', hex)));
	            P.assertValidity();
	            return P;
	        }
	        // Multiplies generator point by privateKey.
	        static fromPrivateKey(privateKey) {
	            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));
	        }
	        // "Private method", don't use it directly
	        _setWindowSize(windowSize) {
	            this._WINDOW_SIZE = windowSize;
	            pointPrecomputes.delete(this);
	        }
	        // A point on curve is valid if it conforms to equation.
	        assertValidity() {
	            if (this.is0()) {
	                // (0, 1, 0) aka ZERO is invalid in most contexts.
	                // In BLS, ZERO can be serialized, so we allow it.
	                // (0, 0, 0) is wrong representation of ZERO and is always invalid.
	                if (CURVE.allowInfinityPoint && !Fp.is0(this.py))
	                    return;
	                throw new Error('bad point: ZERO');
	            }
	            // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`
	            const { x, y } = this.toAffine();
	            // Check if x, y are valid field elements
	            if (!Fp.isValid(x) || !Fp.isValid(y))
	                throw new Error('bad point: x or y not FE');
	            const left = Fp.sqr(y); // y²
	            const right = weierstrassEquation(x); // x³ + ax + b
	            if (!Fp.eql(left, right))
	                throw new Error('bad point: equation left != right');
	            if (!this.isTorsionFree())
	                throw new Error('bad point: not in prime-order subgroup');
	        }
	        hasEvenY() {
	            const { y } = this.toAffine();
	            if (Fp.isOdd)
	                return !Fp.isOdd(y);
	            throw new Error("Field doesn't support isOdd");
	        }
	        /**
	         * Compare one point to another.
	         */
	        equals(other) {
	            assertPrjPoint(other);
	            const { px: X1, py: Y1, pz: Z1 } = this;
	            const { px: X2, py: Y2, pz: Z2 } = other;
	            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));
	            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));
	            return U1 && U2;
	        }
	        /**
	         * Flips point to one corresponding to (x, -y) in Affine coordinates.
	         */
	        negate() {
	            return new Point(this.px, Fp.neg(this.py), this.pz);
	        }
	        // Renes-Costello-Batina exception-free doubling formula.
	        // There is 30% faster Jacobian formula, but it is not complete.
	        // https://eprint.iacr.org/2015/1060, algorithm 3
	        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
	        double() {
	            const { a, b } = CURVE;
	            const b3 = Fp.mul(b, _3n);
	            const { px: X1, py: Y1, pz: Z1 } = this;
	            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore
	            let t0 = Fp.mul(X1, X1); // step 1
	            let t1 = Fp.mul(Y1, Y1);
	            let t2 = Fp.mul(Z1, Z1);
	            let t3 = Fp.mul(X1, Y1);
	            t3 = Fp.add(t3, t3); // step 5
	            Z3 = Fp.mul(X1, Z1);
	            Z3 = Fp.add(Z3, Z3);
	            X3 = Fp.mul(a, Z3);
	            Y3 = Fp.mul(b3, t2);
	            Y3 = Fp.add(X3, Y3); // step 10
	            X3 = Fp.sub(t1, Y3);
	            Y3 = Fp.add(t1, Y3);
	            Y3 = Fp.mul(X3, Y3);
	            X3 = Fp.mul(t3, X3);
	            Z3 = Fp.mul(b3, Z3); // step 15
	            t2 = Fp.mul(a, t2);
	            t3 = Fp.sub(t0, t2);
	            t3 = Fp.mul(a, t3);
	            t3 = Fp.add(t3, Z3);
	            Z3 = Fp.add(t0, t0); // step 20
	            t0 = Fp.add(Z3, t0);
	            t0 = Fp.add(t0, t2);
	            t0 = Fp.mul(t0, t3);
	            Y3 = Fp.add(Y3, t0);
	            t2 = Fp.mul(Y1, Z1); // step 25
	            t2 = Fp.add(t2, t2);
	            t0 = Fp.mul(t2, t3);
	            X3 = Fp.sub(X3, t0);
	            Z3 = Fp.mul(t2, t1);
	            Z3 = Fp.add(Z3, Z3); // step 30
	            Z3 = Fp.add(Z3, Z3);
	            return new Point(X3, Y3, Z3);
	        }
	        // Renes-Costello-Batina exception-free addition formula.
	        // There is 30% faster Jacobian formula, but it is not complete.
	        // https://eprint.iacr.org/2015/1060, algorithm 1
	        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
	        add(other) {
	            assertPrjPoint(other);
	            const { px: X1, py: Y1, pz: Z1 } = this;
	            const { px: X2, py: Y2, pz: Z2 } = other;
	            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore
	            const a = CURVE.a;
	            const b3 = Fp.mul(CURVE.b, _3n);
	            let t0 = Fp.mul(X1, X2); // step 1
	            let t1 = Fp.mul(Y1, Y2);
	            let t2 = Fp.mul(Z1, Z2);
	            let t3 = Fp.add(X1, Y1);
	            let t4 = Fp.add(X2, Y2); // step 5
	            t3 = Fp.mul(t3, t4);
	            t4 = Fp.add(t0, t1);
	            t3 = Fp.sub(t3, t4);
	            t4 = Fp.add(X1, Z1);
	            let t5 = Fp.add(X2, Z2); // step 10
	            t4 = Fp.mul(t4, t5);
	            t5 = Fp.add(t0, t2);
	            t4 = Fp.sub(t4, t5);
	            t5 = Fp.add(Y1, Z1);
	            X3 = Fp.add(Y2, Z2); // step 15
	            t5 = Fp.mul(t5, X3);
	            X3 = Fp.add(t1, t2);
	            t5 = Fp.sub(t5, X3);
	            Z3 = Fp.mul(a, t4);
	            X3 = Fp.mul(b3, t2); // step 20
	            Z3 = Fp.add(X3, Z3);
	            X3 = Fp.sub(t1, Z3);
	            Z3 = Fp.add(t1, Z3);
	            Y3 = Fp.mul(X3, Z3);
	            t1 = Fp.add(t0, t0); // step 25
	            t1 = Fp.add(t1, t0);
	            t2 = Fp.mul(a, t2);
	            t4 = Fp.mul(b3, t4);
	            t1 = Fp.add(t1, t2);
	            t2 = Fp.sub(t0, t2); // step 30
	            t2 = Fp.mul(a, t2);
	            t4 = Fp.add(t4, t2);
	            t0 = Fp.mul(t1, t4);
	            Y3 = Fp.add(Y3, t0);
	            t0 = Fp.mul(t5, t4); // step 35
	            X3 = Fp.mul(t3, X3);
	            X3 = Fp.sub(X3, t0);
	            t0 = Fp.mul(t3, t1);
	            Z3 = Fp.mul(t5, Z3);
	            Z3 = Fp.add(Z3, t0); // step 40
	            return new Point(X3, Y3, Z3);
	        }
	        subtract(other) {
	            return this.add(other.negate());
	        }
	        is0() {
	            return this.equals(Point.ZERO);
	        }
	        wNAF(n) {
	            return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {
	                const toInv = Fp.invertBatch(comp.map((p) => p.pz));
	                return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);
	            });
	        }
	        /**
	         * Non-constant-time multiplication. Uses double-and-add algorithm.
	         * It's faster, but should only be used when you don't care about
	         * an exposed private key e.g. sig verification, which works over *public* keys.
	         */
	        multiplyUnsafe(n) {
	            const I = Point.ZERO;
	            if (n === _0n)
	                return I;
	            assertGE(n); // Will throw on 0
	            if (n === _1n)
	                return this;
	            const { endo } = CURVE;
	            if (!endo)
	                return wnaf.unsafeLadder(this, n);
	            // Apply endomorphism
	            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
	            let k1p = I;
	            let k2p = I;
	            let d = this;
	            while (k1 > _0n || k2 > _0n) {
	                if (k1 & _1n)
	                    k1p = k1p.add(d);
	                if (k2 & _1n)
	                    k2p = k2p.add(d);
	                d = d.double();
	                k1 >>= _1n;
	                k2 >>= _1n;
	            }
	            if (k1neg)
	                k1p = k1p.negate();
	            if (k2neg)
	                k2p = k2p.negate();
	            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
	            return k1p.add(k2p);
	        }
	        /**
	         * Constant time multiplication.
	         * Uses wNAF method. Windowed method may be 10% faster,
	         * but takes 2x longer to generate and consumes 2x memory.
	         * Uses precomputes when available.
	         * Uses endomorphism for Koblitz curves.
	         * @param scalar by which the point would be multiplied
	         * @returns New point
	         */
	        multiply(scalar) {
	            assertGE(scalar);
	            let n = scalar;
	            let point, fake; // Fake point is used to const-time mult
	            const { endo } = CURVE;
	            if (endo) {
	                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
	                let { p: k1p, f: f1p } = this.wNAF(k1);
	                let { p: k2p, f: f2p } = this.wNAF(k2);
	                k1p = wnaf.constTimeNegate(k1neg, k1p);
	                k2p = wnaf.constTimeNegate(k2neg, k2p);
	                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
	                point = k1p.add(k2p);
	                fake = f1p.add(f2p);
	            }
	            else {
	                const { p, f } = this.wNAF(n);
	                point = p;
	                fake = f;
	            }
	            // Normalize `z` for both points, but return only real one
	            return Point.normalizeZ([point, fake])[0];
	        }
	        /**
	         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
	         * Not using Strauss-Shamir trick: precomputation tables are faster.
	         * The trick could be useful if both P and Q are not G (not in our case).
	         * @returns non-zero affine point
	         */
	        multiplyAndAddUnsafe(Q, a, b) {
	            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes
	            const mul = (P, a // Select faster multiply() method
	            ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));
	            const sum = mul(this, a).add(mul(Q, b));
	            return sum.is0() ? undefined : sum;
	        }
	        // Converts Projective point to affine (x, y) coordinates.
	        // Can accept precomputed Z^-1 - for example, from invertBatch.
	        // (x, y, z) ∋ (x=x/z, y=y/z)
	        toAffine(iz) {
	            const { px: x, py: y, pz: z } = this;
	            const is0 = this.is0();
	            // If invZ was 0, we return zero point. However we still want to execute
	            // all operations, so we replace invZ with a random number, 1.
	            if (iz == null)
	                iz = is0 ? Fp.ONE : Fp.inv(z);
	            const ax = Fp.mul(x, iz);
	            const ay = Fp.mul(y, iz);
	            const zz = Fp.mul(z, iz);
	            if (is0)
	                return { x: Fp.ZERO, y: Fp.ZERO };
	            if (!Fp.eql(zz, Fp.ONE))
	                throw new Error('invZ was invalid');
	            return { x: ax, y: ay };
	        }
	        isTorsionFree() {
	            const { h: cofactor, isTorsionFree } = CURVE;
	            if (cofactor === _1n)
	                return true; // No subgroups, always torsion-free
	            if (isTorsionFree)
	                return isTorsionFree(Point, this);
	            throw new Error('isTorsionFree() has not been declared for the elliptic curve');
	        }
	        clearCofactor() {
	            const { h: cofactor, clearCofactor } = CURVE;
	            if (cofactor === _1n)
	                return this; // Fast-path
	            if (clearCofactor)
	                return clearCofactor(Point, this);
	            return this.multiplyUnsafe(CURVE.h);
	        }
	        toRawBytes(isCompressed = true) {
	            this.assertValidity();
	            return toBytes(Point, this, isCompressed);
	        }
	        toHex(isCompressed = true) {
	            return ut.bytesToHex(this.toRawBytes(isCompressed));
	        }
	    }
	    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);
	    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);
	    const _bits = CURVE.nBitLength;
	    const wnaf = (0, curve_js_1.wNAF)(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
	    // Validate if generator point is on curve
	    return {
	        CURVE,
	        ProjectivePoint: Point,
	        normPrivateKeyToScalar,
	        weierstrassEquation,
	        isWithinCurveOrder,
	    };
	}
	exports.weierstrassPoints = weierstrassPoints;
	function validateOpts(curve) {
	    const opts = (0, curve_js_1.validateBasic)(curve);
	    ut.validateObject(opts, {
	        hash: 'hash',
	        hmac: 'function',
	        randomBytes: 'function',
	    }, {
	        bits2int: 'function',
	        bits2int_modN: 'function',
	        lowS: 'boolean',
	    });
	    return Object.freeze({ lowS: true, ...opts });
	}
	function weierstrass(curveDef) {
	    const CURVE = validateOpts(curveDef);
	    const { Fp, n: CURVE_ORDER } = CURVE;
	    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32
	    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32
	    function isValidFieldElement(num) {
	        return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE
	    }
	    function modN(a) {
	        return mod.mod(a, CURVE_ORDER);
	    }
	    function invN(a) {
	        return mod.invert(a, CURVE_ORDER);
	    }
	    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({
	        ...CURVE,
	        toBytes(_c, point, isCompressed) {
	            const a = point.toAffine();
	            const x = Fp.toBytes(a.x);
	            const cat = ut.concatBytes;
	            if (isCompressed) {
	                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);
	            }
	            else {
	                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));
	            }
	        },
	        fromBytes(bytes) {
	            const len = bytes.length;
	            const head = bytes[0];
	            const tail = bytes.subarray(1);
	            // this.assertValidity() is done inside of fromHex
	            if (len === compressedLen && (head === 0x02 || head === 0x03)) {
	                const x = ut.bytesToNumberBE(tail);
	                if (!isValidFieldElement(x))
	                    throw new Error('Point is not on curve');
	                const y2 = weierstrassEquation(x); // y² = x³ + ax + b
	                let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4
	                const isYOdd = (y & _1n) === _1n;
	                // ECDSA
	                const isHeadOdd = (head & 1) === 1;
	                if (isHeadOdd !== isYOdd)
	                    y = Fp.neg(y);
	                return { x, y };
	            }
	            else if (len === uncompressedLen && head === 0x04) {
	                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
	                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
	                return { x, y };
	            }
	            else {
	                throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);
	            }
	        },
	    });
	    const numToNByteStr = (num) => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));
	    function isBiggerThanHalfOrder(number) {
	        const HALF = CURVE_ORDER >> _1n;
	        return number > HALF;
	    }
	    function normalizeS(s) {
	        return isBiggerThanHalfOrder(s) ? modN(-s) : s;
	    }
	    // slice bytes num
	    const slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));
	    /**
	     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.
	     */
	    class Signature {
	        constructor(r, s, recovery) {
	            this.r = r;
	            this.s = s;
	            this.recovery = recovery;
	            this.assertValidity();
	        }
	        // pair (bytes of r, bytes of s)
	        static fromCompact(hex) {
	            const l = CURVE.nByteLength;
	            hex = (0, utils_js_1.ensureBytes)('compactSignature', hex, l * 2);
	            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));
	        }
	        // DER encoded ECDSA signature
	        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
	        static fromDER(hex) {
	            const { r, s } = exports.DER.toSig((0, utils_js_1.ensureBytes)('DER', hex));
	            return new Signature(r, s);
	        }
	        assertValidity() {
	            // can use assertGE here
	            if (!isWithinCurveOrder(this.r))
	                throw new Error('r must be 0 < r < CURVE.n');
	            if (!isWithinCurveOrder(this.s))
	                throw new Error('s must be 0 < s < CURVE.n');
	        }
	        addRecoveryBit(recovery) {
	            return new Signature(this.r, this.s, recovery);
	        }
	        recoverPublicKey(msgHash) {
	            const { r, s, recovery: rec } = this;
	            const h = bits2int_modN((0, utils_js_1.ensureBytes)('msgHash', msgHash)); // Truncate hash
	            if (rec == null || ![0, 1, 2, 3].includes(rec))
	                throw new Error('recovery id invalid');
	            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;
	            if (radj >= Fp.ORDER)
	                throw new Error('recovery id 2 or 3 invalid');
	            const prefix = (rec & 1) === 0 ? '02' : '03';
	            const R = Point.fromHex(prefix + numToNByteStr(radj));
	            const ir = invN(radj); // r^-1
	            const u1 = modN(-h * ir); // -hr^-1
	            const u2 = modN(s * ir); // sr^-1
	            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)
	            if (!Q)
	                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked
	            Q.assertValidity();
	            return Q;
	        }
	        // Signatures should be low-s, to prevent malleability.
	        hasHighS() {
	            return isBiggerThanHalfOrder(this.s);
	        }
	        normalizeS() {
	            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;
	        }
	        // DER-encoded
	        toDERRawBytes() {
	            return ut.hexToBytes(this.toDERHex());
	        }
	        toDERHex() {
	            return exports.DER.hexFromSig({ r: this.r, s: this.s });
	        }
	        // padded bytes of r, then padded bytes of s
	        toCompactRawBytes() {
	            return ut.hexToBytes(this.toCompactHex());
	        }
	        toCompactHex() {
	            return numToNByteStr(this.r) + numToNByteStr(this.s);
	        }
	    }
	    const utils = {
	        isValidPrivateKey(privateKey) {
	            try {
	                normPrivateKeyToScalar(privateKey);
	                return true;
	            }
	            catch (error) {
	                return false;
	            }
	        },
	        normPrivateKeyToScalar: normPrivateKeyToScalar,
	        /**
	         * Produces cryptographically secure private key from random of size
	         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
	         */
	        randomPrivateKey: () => {
	            const length = mod.getMinHashLength(CURVE.n);
	            return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);
	        },
	        /**
	         * Creates precompute table for an arbitrary EC point. Makes point "cached".
	         * Allows to massively speed-up `point.multiply(scalar)`.
	         * @returns cached point
	         * @example
	         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
	         * fast.multiply(privKey); // much faster ECDH now
	         */
	        precompute(windowSize = 8, point = Point.BASE) {
	            point._setWindowSize(windowSize);
	            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here
	            return point;
	        },
	    };
	    /**
	     * Computes public key for a private key. Checks for validity of the private key.
	     * @param privateKey private key
	     * @param isCompressed whether to return compact (default), or full key
	     * @returns Public key, full when isCompressed=false; short when isCompressed=true
	     */
	    function getPublicKey(privateKey, isCompressed = true) {
	        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);
	    }
	    /**
	     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.
	     */
	    function isProbPub(item) {
	        const arr = ut.isBytes(item);
	        const str = typeof item === 'string';
	        const len = (arr || str) && item.length;
	        if (arr)
	            return len === compressedLen || len === uncompressedLen;
	        if (str)
	            return len === 2 * compressedLen || len === 2 * uncompressedLen;
	        if (item instanceof Point)
	            return true;
	        return false;
	    }
	    /**
	     * ECDH (Elliptic Curve Diffie Hellman).
	     * Computes shared public key from private key and public key.
	     * Checks: 1) private key validity 2) shared key is on-curve.
	     * Does NOT hash the result.
	     * @param privateA private key
	     * @param publicB different public key
	     * @param isCompressed whether to return compact (default), or full key
	     * @returns shared public key
	     */
	    function getSharedSecret(privateA, publicB, isCompressed = true) {
	        if (isProbPub(privateA))
	            throw new Error('first arg must be private key');
	        if (!isProbPub(publicB))
	            throw new Error('second arg must be public key');
	        const b = Point.fromHex(publicB); // check for being on-curve
	        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
	    }
	    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.
	    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.
	    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.
	    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors
	    const bits2int = CURVE.bits2int ||
	        function (bytes) {
	            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)
	            // for some cases, since bytes.length * 8 is not actual bitLength.
	            const num = ut.bytesToNumberBE(bytes); // check for == u8 done here
	            const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits
	            return delta > 0 ? num >> BigInt(delta) : num;
	        };
	    const bits2int_modN = CURVE.bits2int_modN ||
	        function (bytes) {
	            return modN(bits2int(bytes)); // can't use bytesToNumberBE here
	        };
	    // NOTE: pads output with zero as per spec
	    const ORDER_MASK = ut.bitMask(CURVE.nBitLength);
	    /**
	     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.
	     */
	    function int2octets(num) {
	        if (typeof num !== 'bigint')
	            throw new Error('bigint expected');
	        if (!(_0n <= num && num < ORDER_MASK))
	            throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);
	        // works with order, can have different size than numToField!
	        return ut.numberToBytesBE(num, CURVE.nByteLength);
	    }
	    // Steps A, D of RFC6979 3.2
	    // Creates RFC6979 seed; converts msg/privKey to numbers.
	    // Used only in sign, not in verify.
	    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.
	    // Also it can be bigger for P224 + SHA256
	    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
	        if (['recovered', 'canonical'].some((k) => k in opts))
	            throw new Error('sign() legacy options not supported');
	        const { hash, randomBytes } = CURVE;
	        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default
	        if (lowS == null)
	            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash
	        msgHash = (0, utils_js_1.ensureBytes)('msgHash', msgHash);
	        if (prehash)
	            msgHash = (0, utils_js_1.ensureBytes)('prehashed msgHash', hash(msgHash));
	        // We can't later call bits2octets, since nested bits2int is broken for curves
	        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.
	        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))
	        const h1int = bits2int_modN(msgHash);
	        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint
	        const seedArgs = [int2octets(d), int2octets(h1int)];
	        // extraEntropy. RFC6979 3.6: additional k' (optional).
	        if (ent != null) {
	            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')
	            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is
	            seedArgs.push((0, utils_js_1.ensureBytes)('extraEntropy', e)); // check for being bytes
	        }
	        const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2
	        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!
	        // Converts signature params into point w r/s, checks result for validity.
	        function k2sig(kBytes) {
	            // RFC 6979 Section 3.2, step 3: k = bits2int(T)
	            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element
	            if (!isWithinCurveOrder(k))
	                return; // Important: all mod() calls here must be done over N
	            const ik = invN(k); // k^-1 mod n
	            const q = Point.BASE.multiply(k).toAffine(); // q = Gk
	            const r = modN(q.x); // r = q.x mod n
	            if (r === _0n)
	                return;
	            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to
	            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:
	            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT
	            const s = modN(ik * modN(m + r * d)); // Not using blinding here
	            if (s === _0n)
	                return;
	            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)
	            let normS = s;
	            if (lowS && isBiggerThanHalfOrder(s)) {
	                normS = normalizeS(s); // if lowS was passed, ensure s is always
	                recovery ^= 1; // // in the bottom half of N
	            }
	            return new Signature(r, normS, recovery); // use normS, not s
	        }
	        return { seed, k2sig };
	    }
	    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };
	    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };
	    /**
	     * Signs message hash with a private key.
	     * ```
	     * sign(m, d, k) where
	     *   (x, y) = G × k
	     *   r = x mod n
	     *   s = (m + dr)/k mod n
	     * ```
	     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.
	     * @param privKey private key
	     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.
	     * @returns signature with recovery param
	     */
	    function sign(msgHash, privKey, opts = defaultSigOpts) {
	        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.
	        const C = CURVE;
	        const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);
	        return drbg(seed, k2sig); // Steps B, C, D, E, F, G
	    }
	    // Enable precomputes. Slows down first publicKey computation by 20ms.
	    Point.BASE._setWindowSize(8);
	    // utils.precompute(8, ProjectivePoint.BASE)
	    /**
	     * Verifies a signature against message hash and public key.
	     * Rejects lowS signatures by default: to override,
	     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:
	     *
	     * ```
	     * verify(r, s, h, P) where
	     *   U1 = hs^-1 mod n
	     *   U2 = rs^-1 mod n
	     *   R = U1⋅G - U2⋅P
	     *   mod(R.x, n) == r
	     * ```
	     */
	    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {
	        const sg = signature;
	        msgHash = (0, utils_js_1.ensureBytes)('msgHash', msgHash);
	        publicKey = (0, utils_js_1.ensureBytes)('publicKey', publicKey);
	        if ('strict' in opts)
	            throw new Error('options.strict was renamed to lowS');
	        const { lowS, prehash } = opts;
	        let _sig = undefined;
	        let P;
	        try {
	            if (typeof sg === 'string' || ut.isBytes(sg)) {
	                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).
	                // Since DER can also be 2*nByteLength bytes, we check for it first.
	                try {
	                    _sig = Signature.fromDER(sg);
	                }
	                catch (derError) {
	                    if (!(derError instanceof exports.DER.Err))
	                        throw derError;
	                    _sig = Signature.fromCompact(sg);
	                }
	            }
	            else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {
	                const { r, s } = sg;
	                _sig = new Signature(r, s);
	            }
	            else {
	                throw new Error('PARSE');
	            }
	            P = Point.fromHex(publicKey);
	        }
	        catch (error) {
	            if (error.message === 'PARSE')
	                throw new Error(`signature must be Signature instance, Uint8Array or hex string`);
	            return false;
	        }
	        if (lowS && _sig.hasHighS())
	            return false;
	        if (prehash)
	            msgHash = CURVE.hash(msgHash);
	        const { r, s } = _sig;
	        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element
	        const is = invN(s); // s^-1
	        const u1 = modN(h * is); // u1 = hs^-1 mod n
	        const u2 = modN(r * is); // u2 = rs^-1 mod n
	        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P
	        if (!R)
	            return false;
	        const v = modN(R.x);
	        return v === r;
	    }
	    return {
	        CURVE,
	        getPublicKey,
	        getSharedSecret,
	        sign,
	        verify,
	        ProjectivePoint: Point,
	        Signature,
	        utils,
	    };
	}
	exports.weierstrass = weierstrass;
	/**
	 * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.
	 * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.
	 * b = True and y = sqrt(u / v) if (u / v) is square in F, and
	 * b = False and y = sqrt(Z * (u / v)) otherwise.
	 * @param Fp
	 * @param Z
	 * @returns
	 */
	function SWUFpSqrtRatio(Fp, Z) {
	    // Generic implementation
	    const q = Fp.ORDER;
	    let l = _0n;
	    for (let o = q - _1n; o % _2n === _0n; o /= _2n)
	        l += _1n;
	    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.
	    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.
	    // 2n ** c1 == 2n << (c1-1)
	    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);
	    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;
	    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic
	    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic
	    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic
	    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic
	    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2
	    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)
	    let sqrtRatio = (u, v) => {
	        let tv1 = c6; // 1. tv1 = c6
	        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4
	        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2
	        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v
	        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3
	        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3
	        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2
	        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v
	        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u
	        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2
	        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5
	        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1
	        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7
	        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1
	        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)
	        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)
	        // 17. for i in (c1, c1 - 1, ..., 2):
	        for (let i = c1; i > _1n; i--) {
	            let tv5 = i - _2n; // 18.    tv5 = i - 2
	            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5
	            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5
	            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1
	            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1
	            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1
	            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1
	            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)
	            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)
	        }
	        return { isValid: isQR, value: tv3 };
	    };
	    if (Fp.ORDER % _4n === _3n) {
	        // sqrt_ratio_3mod4(u, v)
	        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic
	        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)
	        sqrtRatio = (u, v) => {
	            let tv1 = Fp.sqr(v); // 1. tv1 = v^2
	            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v
	            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2
	            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1
	            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2
	            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2
	            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v
	            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u
	            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)
	            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2
	        };
	    }
	    // No curves uses that
	    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8
	    return sqrtRatio;
	}
	exports.SWUFpSqrtRatio = SWUFpSqrtRatio;
	/**
	 * Simplified Shallue-van de Woestijne-Ulas Method
	 * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2
	 */
	function mapToCurveSimpleSWU(Fp, opts) {
	    mod.validateField(Fp);
	    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))
	        throw new Error('mapToCurveSimpleSWU: invalid opts');
	    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);
	    if (!Fp.isOdd)
	        throw new Error('Fp.isOdd is not implemented!');
	    // Input: u, an element of F.
	    // Output: (x, y), a point on E.
	    return (u) => {
	        // prettier-ignore
	        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;
	        tv1 = Fp.sqr(u); // 1.  tv1 = u^2
	        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1
	        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2
	        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1
	        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1
	        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3
	        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)
	        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4
	        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2
	        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2
	        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6
	        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5
	        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3
	        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4
	        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6
	        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5
	        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3
	        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)
	        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1
	        y = Fp.mul(y, value); // 20.   y = y * y1
	        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)
	        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)
	        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)
	        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)
	        x = Fp.div(x, tv4); // 25.   x = x / tv4
	        return { x, y };
	    };
	}
	exports.mapToCurveSimpleSWU = mapToCurveSimpleSWU;
	
} (weierstrass));

var hashToCurve = {};

Object.defineProperty(hashToCurve, "__esModule", { value: true });
hashToCurve.createHasher = hashToCurve.isogenyMap = hashToCurve.hash_to_field = hashToCurve.expand_message_xof = hashToCurve.expand_message_xmd = void 0;
const modular_js_1 = modular;
const utils_js_1$4 = utils$4;
function validateDST(dst) {
    if ((0, utils_js_1$4.isBytes)(dst))
        return dst;
    if (typeof dst === 'string')
        return (0, utils_js_1$4.utf8ToBytes)(dst);
    throw new Error('DST must be Uint8Array or string');
}
// Octet Stream to Integer. "spec" implementation of os2ip is 2.5x slower vs bytesToNumberBE.
const os2ip = utils_js_1$4.bytesToNumberBE;
// Integer to Octet Stream (numberToBytesBE)
function i2osp(value, length) {
    if (value < 0 || value >= 1 << (8 * length)) {
        throw new Error(`bad I2OSP call: value=${value} length=${length}`);
    }
    const res = Array.from({ length }).fill(0);
    for (let i = length - 1; i >= 0; i--) {
        res[i] = value & 0xff;
        value >>>= 8;
    }
    return new Uint8Array(res);
}
function strxor(a, b) {
    const arr = new Uint8Array(a.length);
    for (let i = 0; i < a.length; i++) {
        arr[i] = a[i] ^ b[i];
    }
    return arr;
}
function abytes(item) {
    if (!(0, utils_js_1$4.isBytes)(item))
        throw new Error('Uint8Array expected');
}
function isNum(item) {
    if (!Number.isSafeInteger(item))
        throw new Error('number expected');
}
// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits
// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1
function expand_message_xmd(msg, DST, lenInBytes, H) {
    abytes(msg);
    abytes(DST);
    isNum(lenInBytes);
    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3
    if (DST.length > 255)
        DST = H((0, utils_js_1$4.concatBytes)((0, utils_js_1$4.utf8ToBytes)('H2C-OVERSIZE-DST-'), DST));
    const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;
    const ell = Math.ceil(lenInBytes / b_in_bytes);
    if (ell > 255)
        throw new Error('Invalid xmd length');
    const DST_prime = (0, utils_js_1$4.concatBytes)(DST, i2osp(DST.length, 1));
    const Z_pad = i2osp(0, r_in_bytes);
    const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str
    const b = new Array(ell);
    const b_0 = H((0, utils_js_1$4.concatBytes)(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));
    b[0] = H((0, utils_js_1$4.concatBytes)(b_0, i2osp(1, 1), DST_prime));
    for (let i = 1; i <= ell; i++) {
        const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];
        b[i] = H((0, utils_js_1$4.concatBytes)(...args));
    }
    const pseudo_random_bytes = (0, utils_js_1$4.concatBytes)(...b);
    return pseudo_random_bytes.slice(0, lenInBytes);
}
hashToCurve.expand_message_xmd = expand_message_xmd;
// Produces a uniformly random byte string using an extendable-output function (XOF) H.
// 1. The collision resistance of H MUST be at least k bits.
// 2. H MUST be an XOF that has been proved indifferentiable from
//    a random oracle under a reasonable cryptographic assumption.
// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2
function expand_message_xof(msg, DST, lenInBytes, k, H) {
    abytes(msg);
    abytes(DST);
    isNum(lenInBytes);
    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3
    // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));
    if (DST.length > 255) {
        const dkLen = Math.ceil((2 * k) / 8);
        DST = H.create({ dkLen }).update((0, utils_js_1$4.utf8ToBytes)('H2C-OVERSIZE-DST-')).update(DST).digest();
    }
    if (lenInBytes > 65535 || DST.length > 255)
        throw new Error('expand_message_xof: invalid lenInBytes');
    return (H.create({ dkLen: lenInBytes })
        .update(msg)
        .update(i2osp(lenInBytes, 2))
        // 2. DST_prime = DST || I2OSP(len(DST), 1)
        .update(DST)
        .update(i2osp(DST.length, 1))
        .digest());
}
hashToCurve.expand_message_xof = expand_message_xof;
/**
 * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F
 * https://www.rfc-editor.org/rfc/rfc9380#section-5.2
 * @param msg a byte string containing the message to hash
 * @param count the number of elements of F to output
 * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above
 * @returns [u_0, ..., u_(count - 1)], a list of field elements.
 */
function hash_to_field(msg, count, options) {
    (0, utils_js_1$4.validateObject)(options, {
        DST: 'stringOrUint8Array',
        p: 'bigint',
        m: 'isSafeInteger',
        k: 'isSafeInteger',
        hash: 'hash',
    });
    const { p, k, m, hash, expand, DST: _DST } = options;
    abytes(msg);
    isNum(count);
    const DST = validateDST(_DST);
    const log2p = p.toString(2).length;
    const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above
    const len_in_bytes = count * m * L;
    let prb; // pseudo_random_bytes
    if (expand === 'xmd') {
        prb = expand_message_xmd(msg, DST, len_in_bytes, hash);
    }
    else if (expand === 'xof') {
        prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);
    }
    else if (expand === '_internal_pass') {
        // for internal tests only
        prb = msg;
    }
    else {
        throw new Error('expand must be "xmd" or "xof"');
    }
    const u = new Array(count);
    for (let i = 0; i < count; i++) {
        const e = new Array(m);
        for (let j = 0; j < m; j++) {
            const elm_offset = L * (j + i * m);
            const tv = prb.subarray(elm_offset, elm_offset + L);
            e[j] = (0, modular_js_1.mod)(os2ip(tv), p);
        }
        u[i] = e;
    }
    return u;
}
hashToCurve.hash_to_field = hash_to_field;
function isogenyMap(field, map) {
    // Make same order as in spec
    const COEFF = map.map((i) => Array.from(i).reverse());
    return (x, y) => {
        const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));
        x = field.div(xNum, xDen); // xNum / xDen
        y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)
        return { x, y };
    };
}
hashToCurve.isogenyMap = isogenyMap;
function createHasher(Point, mapToCurve, def) {
    if (typeof mapToCurve !== 'function')
        throw new Error('mapToCurve() must be defined');
    return {
        // Encodes byte string to elliptic curve.
        // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
        hashToCurve(msg, options) {
            const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options });
            const u0 = Point.fromAffine(mapToCurve(u[0]));
            const u1 = Point.fromAffine(mapToCurve(u[1]));
            const P = u0.add(u1).clearCofactor();
            P.assertValidity();
            return P;
        },
        // Encodes byte string to elliptic curve.
        // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
        encodeToCurve(msg, options) {
            const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options });
            const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();
            P.assertValidity();
            return P;
        },
    };
}
hashToCurve.createHasher = createHasher;

var _shortw_utils = {};

var hmac = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.hmac = exports.HMAC = void 0;
	const _assert_js_1 = _assert;
	const utils_js_1 = utils$5;
	// HMAC (RFC 2104)
	class HMAC extends utils_js_1.Hash {
	    constructor(hash, _key) {
	        super();
	        this.finished = false;
	        this.destroyed = false;
	        (0, _assert_js_1.hash)(hash);
	        const key = (0, utils_js_1.toBytes)(_key);
	        this.iHash = hash.create();
	        if (typeof this.iHash.update !== 'function')
	            throw new Error('Expected instance of class which extends utils.Hash');
	        this.blockLen = this.iHash.blockLen;
	        this.outputLen = this.iHash.outputLen;
	        const blockLen = this.blockLen;
	        const pad = new Uint8Array(blockLen);
	        // blockLen can be bigger than outputLen
	        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);
	        for (let i = 0; i < pad.length; i++)
	            pad[i] ^= 0x36;
	        this.iHash.update(pad);
	        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone
	        this.oHash = hash.create();
	        // Undo internal XOR && apply outer XOR
	        for (let i = 0; i < pad.length; i++)
	            pad[i] ^= 0x36 ^ 0x5c;
	        this.oHash.update(pad);
	        pad.fill(0);
	    }
	    update(buf) {
	        (0, _assert_js_1.exists)(this);
	        this.iHash.update(buf);
	        return this;
	    }
	    digestInto(out) {
	        (0, _assert_js_1.exists)(this);
	        (0, _assert_js_1.bytes)(out, this.outputLen);
	        this.finished = true;
	        this.iHash.digestInto(out);
	        this.oHash.update(out);
	        this.oHash.digestInto(out);
	        this.destroy();
	    }
	    digest() {
	        const out = new Uint8Array(this.oHash.outputLen);
	        this.digestInto(out);
	        return out;
	    }
	    _cloneInto(to) {
	        // Create new instance without calling constructor since key already in state and we don't know it.
	        to || (to = Object.create(Object.getPrototypeOf(this), {}));
	        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
	        to = to;
	        to.finished = finished;
	        to.destroyed = destroyed;
	        to.blockLen = blockLen;
	        to.outputLen = outputLen;
	        to.oHash = oHash._cloneInto(to.oHash);
	        to.iHash = iHash._cloneInto(to.iHash);
	        return to;
	    }
	    destroy() {
	        this.destroyed = true;
	        this.oHash.destroy();
	        this.iHash.destroy();
	    }
	}
	exports.HMAC = HMAC;
	/**
	 * HMAC: RFC2104 message authentication code.
	 * @param hash - function that would be used e.g. sha256
	 * @param key - message key
	 * @param message - message data
	 */
	const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();
	exports.hmac = hmac;
	exports.hmac.create = (hash, key) => new HMAC(hash, key);
	
} (hmac));

Object.defineProperty(_shortw_utils, "__esModule", { value: true });
_shortw_utils.createCurve = _shortw_utils.getHash = void 0;
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const hmac_1 = hmac;
const utils_1 = utils$5;
const weierstrass_js_1 = weierstrass;
// connects noble-curves to noble-hashes
function getHash(hash) {
    return {
        hash,
        hmac: (key, ...msgs) => (0, hmac_1.hmac)(hash, key, (0, utils_1.concatBytes)(...msgs)),
        randomBytes: utils_1.randomBytes,
    };
}
_shortw_utils.getHash = getHash;
function createCurve(curveDef, defHash) {
    const create = (hash) => (0, weierstrass_js_1.weierstrass)({ ...curveDef, ...getHash(hash) });
    return Object.freeze({ ...create(defHash), create });
}
_shortw_utils.createCurve = createCurve;

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.encodeToCurve = exports.hashToCurve = exports.schnorr = exports.secp256k1 = void 0;
	/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
	const sha256_1 = sha256$1;
	const utils_1 = utils$5;
	const modular_js_1 = modular;
	const weierstrass_js_1 = weierstrass;
	const utils_js_1 = utils$4;
	const hash_to_curve_js_1 = hashToCurve;
	const _shortw_utils_js_1 = _shortw_utils;
	const secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');
	const secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');
	const _1n = BigInt(1);
	const _2n = BigInt(2);
	const divNearest = (a, b) => (a + b / _2n) / b;
	/**
	 * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.
	 * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]
	 */
	function sqrtMod(y) {
	    const P = secp256k1P;
	    // prettier-ignore
	    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);
	    // prettier-ignore
	    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
	    const b2 = (y * y * y) % P; // x^3, 11
	    const b3 = (b2 * b2 * y) % P; // x^7
	    const b6 = ((0, modular_js_1.pow2)(b3, _3n, P) * b3) % P;
	    const b9 = ((0, modular_js_1.pow2)(b6, _3n, P) * b3) % P;
	    const b11 = ((0, modular_js_1.pow2)(b9, _2n, P) * b2) % P;
	    const b22 = ((0, modular_js_1.pow2)(b11, _11n, P) * b11) % P;
	    const b44 = ((0, modular_js_1.pow2)(b22, _22n, P) * b22) % P;
	    const b88 = ((0, modular_js_1.pow2)(b44, _44n, P) * b44) % P;
	    const b176 = ((0, modular_js_1.pow2)(b88, _88n, P) * b88) % P;
	    const b220 = ((0, modular_js_1.pow2)(b176, _44n, P) * b44) % P;
	    const b223 = ((0, modular_js_1.pow2)(b220, _3n, P) * b3) % P;
	    const t1 = ((0, modular_js_1.pow2)(b223, _23n, P) * b22) % P;
	    const t2 = ((0, modular_js_1.pow2)(t1, _6n, P) * b2) % P;
	    const root = (0, modular_js_1.pow2)(t2, _2n, P);
	    if (!Fp.eql(Fp.sqr(root), y))
	        throw new Error('Cannot find square root');
	    return root;
	}
	const Fp = (0, modular_js_1.Field)(secp256k1P, undefined, undefined, { sqrt: sqrtMod });
	exports.secp256k1 = (0, _shortw_utils_js_1.createCurve)({
	    a: BigInt(0), // equation params: a, b
	    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975
	    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n
	    n: secp256k1N, // Curve order, total count of valid points in the field
	    // Base point (x, y) aka generator point
	    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),
	    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),
	    h: BigInt(1), // Cofactor
	    lowS: true, // Allow only low-S signatures by default in sign() and verify()
	    /**
	     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
	     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
	     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
	     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
	     */
	    endo: {
	        beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),
	        splitScalar: (k) => {
	            const n = secp256k1N;
	            const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');
	            const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');
	            const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');
	            const b2 = a1;
	            const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)
	            const c1 = divNearest(b2 * k, n);
	            const c2 = divNearest(-b1 * k, n);
	            let k1 = (0, modular_js_1.mod)(k - c1 * a1 - c2 * a2, n);
	            let k2 = (0, modular_js_1.mod)(-c1 * b1 - c2 * b2, n);
	            const k1neg = k1 > POW_2_128;
	            const k2neg = k2 > POW_2_128;
	            if (k1neg)
	                k1 = n - k1;
	            if (k2neg)
	                k2 = n - k2;
	            if (k1 > POW_2_128 || k2 > POW_2_128) {
	                throw new Error('splitScalar: Endomorphism failed, k=' + k);
	            }
	            return { k1neg, k1, k2neg, k2 };
	        },
	    },
	}, sha256_1.sha256);
	// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.
	// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki
	const _0n = BigInt(0);
	const fe = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1P;
	const ge = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1N;
	/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */
	const TAGGED_HASH_PREFIXES = {};
	function taggedHash(tag, ...messages) {
	    let tagP = TAGGED_HASH_PREFIXES[tag];
	    if (tagP === undefined) {
	        const tagH = (0, sha256_1.sha256)(Uint8Array.from(tag, (c) => c.charCodeAt(0)));
	        tagP = (0, utils_js_1.concatBytes)(tagH, tagH);
	        TAGGED_HASH_PREFIXES[tag] = tagP;
	    }
	    return (0, sha256_1.sha256)((0, utils_js_1.concatBytes)(tagP, ...messages));
	}
	// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03
	const pointToBytes = (point) => point.toRawBytes(true).slice(1);
	const numTo32b = (n) => (0, utils_js_1.numberToBytesBE)(n, 32);
	const modP = (x) => (0, modular_js_1.mod)(x, secp256k1P);
	const modN = (x) => (0, modular_js_1.mod)(x, secp256k1N);
	const Point = exports.secp256k1.ProjectivePoint;
	const GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);
	// Calculate point, scalar and bytes
	function schnorrGetExtPubKey(priv) {
	    let d_ = exports.secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey
	    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside
	    const scalar = p.hasEvenY() ? d_ : modN(-d_);
	    return { scalar: scalar, bytes: pointToBytes(p) };
	}
	/**
	 * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.
	 * @returns valid point checked for being on-curve
	 */
	function lift_x(x) {
	    if (!fe(x))
	        throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.
	    const xx = modP(x * x);
	    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.
	    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.
	    if (y % _2n !== _0n)
	        y = modP(-y); // Return the unique point P such that x(P) = x and
	    const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.
	    p.assertValidity();
	    return p;
	}
	/**
	 * Create tagged hash, convert it to bigint, reduce modulo-n.
	 */
	function challenge(...args) {
	    return modN((0, utils_js_1.bytesToNumberBE)(taggedHash('BIP0340/challenge', ...args)));
	}
	/**
	 * Schnorr public key is just `x` coordinate of Point as per BIP340.
	 */
	function schnorrGetPublicKey(privateKey) {
	    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)
	}
	/**
	 * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.
	 * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.
	 */
	function schnorrSign(message, privateKey, auxRand = (0, utils_1.randomBytes)(32)) {
	    const m = (0, utils_js_1.ensureBytes)('message', message);
	    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder
	    const a = (0, utils_js_1.ensureBytes)('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array
	    const t = numTo32b(d ^ (0, utils_js_1.bytesToNumberBE)(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)
	    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)
	    const k_ = modN((0, utils_js_1.bytesToNumberBE)(rand)); // Let k' = int(rand) mod n
	    if (k_ === _0n)
	        throw new Error('sign failed: k is zero'); // Fail if k' = 0.
	    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.
	    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.
	    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).
	    sig.set(rx, 0);
	    sig.set(numTo32b(modN(k + e * d)), 32);
	    // If Verify(bytes(P), m, sig) (see below) returns failure, abort
	    if (!schnorrVerify(sig, m, px))
	        throw new Error('sign: Invalid signature produced');
	    return sig;
	}
	/**
	 * Verifies Schnorr signature.
	 * Will swallow errors & return false except for initial type validation of arguments.
	 */
	function schnorrVerify(signature, message, publicKey) {
	    const sig = (0, utils_js_1.ensureBytes)('signature', signature, 64);
	    const m = (0, utils_js_1.ensureBytes)('message', message);
	    const pub = (0, utils_js_1.ensureBytes)('publicKey', publicKey, 32);
	    try {
	        const P = lift_x((0, utils_js_1.bytesToNumberBE)(pub)); // P = lift_x(int(pk)); fail if that fails
	        const r = (0, utils_js_1.bytesToNumberBE)(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.
	        if (!fe(r))
	            return false;
	        const s = (0, utils_js_1.bytesToNumberBE)(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.
	        if (!ge(s))
	            return false;
	        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n
	        const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P
	        if (!R || !R.hasEvenY() || R.toAffine().x !== r)
	            return false; // -eP == (n-e)P
	        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.
	    }
	    catch (error) {
	        return false;
	    }
	}
	exports.schnorr = (() => ({
	    getPublicKey: schnorrGetPublicKey,
	    sign: schnorrSign,
	    verify: schnorrVerify,
	    utils: {
	        randomPrivateKey: exports.secp256k1.utils.randomPrivateKey,
	        lift_x,
	        pointToBytes,
	        numberToBytesBE: utils_js_1.numberToBytesBE,
	        bytesToNumberBE: utils_js_1.bytesToNumberBE,
	        taggedHash,
	        mod: modular_js_1.mod,
	    },
	}))();
	const isoMap = /* @__PURE__ */ (() => (0, hash_to_curve_js_1.isogenyMap)(Fp, [
	    // xNum
	    [
	        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',
	        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',
	        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',
	        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',
	    ],
	    // xDen
	    [
	        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',
	        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',
	        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1
	    ],
	    // yNum
	    [
	        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',
	        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',
	        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',
	        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',
	    ],
	    // yDen
	    [
	        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',
	        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',
	        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',
	        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1
	    ],
	].map((i) => i.map((j) => BigInt(j)))))();
	const mapSWU = /* @__PURE__ */ (() => (0, weierstrass_js_1.mapToCurveSimpleSWU)(Fp, {
	    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),
	    B: BigInt('1771'),
	    Z: Fp.create(BigInt('-11')),
	}))();
	const htf = /* @__PURE__ */ (() => (0, hash_to_curve_js_1.createHasher)(exports.secp256k1.ProjectivePoint, (scalars) => {
	    const { x, y } = mapSWU(Fp.create(scalars[0]));
	    return isoMap(x, y);
	}, {
	    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',
	    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',
	    p: Fp.ORDER,
	    m: 1,
	    k: 128,
	    expand: 'xmd',
	    hash: sha256_1.sha256,
	}))();
	exports.hashToCurve = (() => htf.hashToCurve)();
	exports.encodeToCurve = (() => htf.encodeToCurve)();
	
} (secp256k1));

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.secp256k1 = void 0;
	var secp256k1_1 = secp256k1;
	Object.defineProperty(exports, "secp256k1", { enumerable: true, get: function () { return secp256k1_1.secp256k1; } }); 
} (secp256k1$1));

var bytes = {};

var random = {};

var hasRequiredRandom;

function requireRandom () {
	if (hasRequiredRandom) return random;
	hasRequiredRandom = 1;
	Object.defineProperty(random, "__esModule", { value: true });
	random.getRandomBytes = random.getRandomBytesSync = void 0;
	const utils_1 = utils$5;
	function getRandomBytesSync(bytes) {
	    return (0, utils_1.randomBytes)(bytes);
	}
	random.getRandomBytesSync = getRandomBytesSync;
	async function getRandomBytes(bytes) {
	    return (0, utils_1.randomBytes)(bytes);
	}
	random.getRandomBytes = getRandomBytes;
	return random;
}

function commonjsRequire(path) {
	throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}

var utils$3 = {exports: {}};

utils$3.exports;

(function (module, exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.crypto = exports.wrapHash = exports.equalsBytes = exports.hexToBytes = exports.bytesToUtf8 = exports.utf8ToBytes = exports.createView = exports.concatBytes = exports.toHex = exports.bytesToHex = exports.assertBytes = exports.assertBool = void 0;
	const _assert_1 = __importDefault(_assert);
	const utils_1 = utils$5;
	const assertBool = _assert_1.default.bool;
	exports.assertBool = assertBool;
	const assertBytes = _assert_1.default.bytes;
	exports.assertBytes = assertBytes;
	var utils_2 = utils$5;
	Object.defineProperty(exports, "bytesToHex", { enumerable: true, get: function () { return utils_2.bytesToHex; } });
	Object.defineProperty(exports, "toHex", { enumerable: true, get: function () { return utils_2.bytesToHex; } });
	Object.defineProperty(exports, "concatBytes", { enumerable: true, get: function () { return utils_2.concatBytes; } });
	Object.defineProperty(exports, "createView", { enumerable: true, get: function () { return utils_2.createView; } });
	Object.defineProperty(exports, "utf8ToBytes", { enumerable: true, get: function () { return utils_2.utf8ToBytes; } });
	// buf.toString('utf8') -> bytesToUtf8(buf)
	function bytesToUtf8(data) {
	    if (!(data instanceof Uint8Array)) {
	        throw new TypeError(`bytesToUtf8 expected Uint8Array, got ${typeof data}`);
	    }
	    return new TextDecoder().decode(data);
	}
	exports.bytesToUtf8 = bytesToUtf8;
	function hexToBytes(data) {
	    const sliced = data.startsWith("0x") ? data.substring(2) : data;
	    return (0, utils_1.hexToBytes)(sliced);
	}
	exports.hexToBytes = hexToBytes;
	// buf.equals(buf2) -> equalsBytes(buf, buf2)
	function equalsBytes(a, b) {
	    if (a.length !== b.length) {
	        return false;
	    }
	    for (let i = 0; i < a.length; i++) {
	        if (a[i] !== b[i]) {
	            return false;
	        }
	    }
	    return true;
	}
	exports.equalsBytes = equalsBytes;
	// Internal utils
	function wrapHash(hash) {
	    return (msg) => {
	        _assert_1.default.bytes(msg);
	        return hash(msg);
	    };
	}
	exports.wrapHash = wrapHash;
	// TODO(v3): switch away from node crypto, remove this unnecessary variable.
	exports.crypto = (() => {
	    const webCrypto = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : undefined;
	    const nodeRequire = typeof commonjsRequire === "function" &&
	        commonjsRequire.bind(module);
	    return {
	        node: nodeRequire && !webCrypto ? nodeRequire("crypto") : undefined,
	        web: webCrypto
	    };
	})(); 
} (utils$3, utils$3.exports));

var utilsExports = utils$3.exports;

var helpers = {};

var internal = {};

var hasRequiredInternal;

function requireInternal () {
	if (hasRequiredInternal) return internal;
	hasRequiredInternal = 1;
	/*
	The MIT License

	Copyright (c) 2016 Nick Dodson. nickdodson.com

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE
	 */
	Object.defineProperty(internal, "__esModule", { value: true });
	internal.isHexString = internal.getKeys = internal.fromAscii = internal.fromUtf8 = internal.toAscii = internal.arrayContainsArray = internal.getBinarySize = internal.padToEven = internal.stripHexPrefix = internal.isHexPrefixed = void 0;
	const bytes_js_1 = requireBytes();
	/**
	 * Returns a `Boolean` on whether or not the a `String` starts with '0x'
	 * @param str the string input value
	 * @return a boolean if it is or is not hex prefixed
	 * @throws if the str input is not a string
	 */
	function isHexPrefixed(str) {
	    if (typeof str !== 'string') {
	        throw new Error(`[isHexPrefixed] input must be type 'string', received type ${typeof str}`);
	    }
	    return str[0] === '0' && str[1] === 'x';
	}
	internal.isHexPrefixed = isHexPrefixed;
	/**
	 * Removes '0x' from a given `String` if present
	 * @param str the string value
	 * @returns the string without 0x prefix
	 */
	const stripHexPrefix = (str) => {
	    if (typeof str !== 'string')
	        throw new Error(`[stripHexPrefix] input must be type 'string', received ${typeof str}`);
	    return isHexPrefixed(str) ? str.slice(2) : str;
	};
	internal.stripHexPrefix = stripHexPrefix;
	/**
	 * Pads a `String` to have an even length
	 * @param value
	 * @return output
	 */
	function padToEven(value) {
	    let a = value;
	    if (typeof a !== 'string') {
	        throw new Error(`[padToEven] value must be type 'string', received ${typeof a}`);
	    }
	    if (a.length % 2)
	        a = `0${a}`;
	    return a;
	}
	internal.padToEven = padToEven;
	/**
	 * Get the binary size of a string
	 * @param str
	 * @returns the number of bytes contained within the string
	 */
	function getBinarySize(str) {
	    if (typeof str !== 'string') {
	        throw new Error(`[getBinarySize] method requires input type 'string', received ${typeof str}`);
	    }
	    return (0, bytes_js_1.utf8ToBytes)(str).byteLength;
	}
	internal.getBinarySize = getBinarySize;
	/**
	 * Returns TRUE if the first specified array contains all elements
	 * from the second one. FALSE otherwise.
	 *
	 * @param superset
	 * @param subset
	 *
	 */
	function arrayContainsArray(superset, subset, some) {
	    if (Array.isArray(superset) !== true) {
	        throw new Error(`[arrayContainsArray] method requires input 'superset' to be an array, got type '${typeof superset}'`);
	    }
	    if (Array.isArray(subset) !== true) {
	        throw new Error(`[arrayContainsArray] method requires input 'subset' to be an array, got type '${typeof subset}'`);
	    }
	    return subset[some === true ? 'some' : 'every']((value) => superset.indexOf(value) >= 0);
	}
	internal.arrayContainsArray = arrayContainsArray;
	/**
	 * Should be called to get ascii from its hex representation
	 *
	 * @param string in hex
	 * @returns ascii string representation of hex value
	 */
	function toAscii(hex) {
	    let str = '';
	    let i = 0;
	    const l = hex.length;
	    if (hex.substring(0, 2) === '0x')
	        i = 2;
	    for (; i < l; i += 2) {
	        const code = parseInt(hex.substr(i, 2), 16);
	        str += String.fromCharCode(code);
	    }
	    return str;
	}
	internal.toAscii = toAscii;
	/**
	 * Should be called to get hex representation (prefixed by 0x) of utf8 string.
	 * Strips leading and trailing 0's.
	 *
	 * @param string
	 * @param optional padding
	 * @returns hex representation of input string
	 */
	function fromUtf8(stringValue) {
	    const str = (0, bytes_js_1.utf8ToBytes)(stringValue);
	    return `0x${padToEven((0, bytes_js_1.bytesToUnprefixedHex)(str)).replace(/^0+|0+$/g, '')}`;
	}
	internal.fromUtf8 = fromUtf8;
	/**
	 * Should be called to get hex representation (prefixed by 0x) of ascii string
	 *
	 * @param  string
	 * @param  optional padding
	 * @returns  hex representation of input string
	 */
	function fromAscii(stringValue) {
	    let hex = '';
	    for (let i = 0; i < stringValue.length; i++) {
	        const code = stringValue.charCodeAt(i);
	        const n = code.toString(16);
	        hex += n.length < 2 ? `0${n}` : n;
	    }
	    return `0x${hex}`;
	}
	internal.fromAscii = fromAscii;
	/**
	 * Returns the keys from an array of objects.
	 * @example
	 * ```js
	 * getKeys([{a: '1', b: '2'}, {a: '3', b: '4'}], 'a') => ['1', '3']
	 *````
	 * @param  params
	 * @param  key
	 * @param  allowEmpty
	 * @returns output just a simple array of output keys
	 */
	function getKeys(params, key, allowEmpty) {
	    if (!Array.isArray(params)) {
	        throw new Error(`[getKeys] method expects input 'params' to be an array, got ${typeof params}`);
	    }
	    if (typeof key !== 'string') {
	        throw new Error(`[getKeys] method expects input 'key' to be type 'string', got ${typeof params}`);
	    }
	    const result = [];
	    for (let i = 0; i < params.length; i++) {
	        let value = params[i][key];
	        if (allowEmpty === true && !value) {
	            value = '';
	        }
	        else if (typeof value !== 'string') {
	            throw new Error(`invalid abi - expected type 'string', received ${typeof value}`);
	        }
	        result.push(value);
	    }
	    return result;
	}
	internal.getKeys = getKeys;
	/**
	 * Is the string a hex string.
	 *
	 * @param  value
	 * @param  length
	 * @returns  output the string is a hex string
	 */
	function isHexString(value, length) {
	    if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/))
	        return false;
	    if (typeof length !== 'undefined' && length > 0 && value.length !== 2 + 2 * length)
	        return false;
	    return true;
	}
	internal.isHexString = isHexString;
	
	return internal;
}

var hasRequiredHelpers;

function requireHelpers () {
	if (hasRequiredHelpers) return helpers;
	hasRequiredHelpers = 1;
	Object.defineProperty(helpers, "__esModule", { value: true });
	helpers.assertIsString = helpers.assertIsArray = helpers.assertIsBytes = helpers.assertIsHexString = void 0;
	const internal_js_1 = requireInternal();
	/**
	 * Throws if a string is not hex prefixed
	 * @param {string} input string to check hex prefix of
	 */
	const assertIsHexString = function (input) {
	    if (!(0, internal_js_1.isHexString)(input)) {
	        const msg = `This method only supports 0x-prefixed hex strings but input was: ${input}`;
	        throw new Error(msg);
	    }
	};
	helpers.assertIsHexString = assertIsHexString;
	/**
	 * Throws if input is not a buffer
	 * @param {Buffer} input value to check
	 */
	const assertIsBytes = function (input) {
	    if (!(input instanceof Uint8Array)) {
	        const msg = `This method only supports Uint8Array but input was: ${input}`;
	        throw new Error(msg);
	    }
	};
	helpers.assertIsBytes = assertIsBytes;
	/**
	 * Throws if input is not an array
	 * @param {number[]} input value to check
	 */
	const assertIsArray = function (input) {
	    if (!Array.isArray(input)) {
	        const msg = `This method only supports number arrays but input was: ${input}`;
	        throw new Error(msg);
	    }
	};
	helpers.assertIsArray = assertIsArray;
	/**
	 * Throws if input is not a string
	 * @param {string} input value to check
	 */
	const assertIsString = function (input) {
	    if (typeof input !== 'string') {
	        const msg = `This method only supports strings but input was: ${input}`;
	        throw new Error(msg);
	    }
	};
	helpers.assertIsString = assertIsString;
	
	return helpers;
}

var hasRequiredBytes;

function requireBytes () {
	if (hasRequiredBytes) return bytes;
	hasRequiredBytes = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.utf8ToBytes = exports.equalsBytes = exports.bytesToUtf8 = exports.bigInt64ToBytes = exports.int32ToBytes = exports.bytesToBigInt64 = exports.bytesToInt32 = exports.concatBytes = exports.randomBytes = exports.compareBytes = exports.intToUnpaddedBytes = exports.bigIntToUnpaddedBytes = exports.bigIntToHex = exports.validateNoLeadingZeroes = exports.short = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.toBytes = exports.unpadHex = exports.unpadArray = exports.unpadBytes = exports.setLengthRight = exports.setLengthLeft = exports.zeros = exports.bigIntToBytes = exports.intToBytes = exports.intToHex = exports.hexToBytes = exports.bytesToInt = exports.bytesToBigInt = exports.bytesToHex = exports.unprefixedHexToBytes = exports.bytesToUnprefixedHex = void 0;
		const random_js_1 = requireRandom();
		// eslint-disable-next-line no-restricted-imports
		const utils_js_1 = utilsExports;
		const helpers_js_1 = requireHelpers();
		const internal_js_1 = requireInternal();
		const BIGINT_0 = BigInt(0);
		/**
		 * @deprecated
		 */
		exports.bytesToUnprefixedHex = utils_js_1.bytesToHex;
		// hexToBytes cache
		const hexToBytesMapFirstKey = {};
		const hexToBytesMapSecondKey = {};
		for (let i = 0; i < 16; i++) {
		    const vSecondKey = i;
		    const vFirstKey = i * 16;
		    const key = i.toString(16).toLowerCase();
		    hexToBytesMapSecondKey[key] = vSecondKey;
		    hexToBytesMapSecondKey[key.toUpperCase()] = vSecondKey;
		    hexToBytesMapFirstKey[key] = vFirstKey;
		    hexToBytesMapFirstKey[key.toUpperCase()] = vFirstKey;
		}
		/**
		 * NOTE: only use this function if the string is even, and only consists of hex characters
		 * If this is not the case, this function could return weird results
		 * @deprecated
		 */
		function _unprefixedHexToBytes(hex) {
		    const byteLen = hex.length;
		    const bytes = new Uint8Array(byteLen / 2);
		    for (let i = 0; i < byteLen; i += 2) {
		        bytes[i / 2] = hexToBytesMapFirstKey[hex[i]] + hexToBytesMapSecondKey[hex[i + 1]];
		    }
		    return bytes;
		}
		/**
		 * @deprecated
		 */
		const unprefixedHexToBytes = (inp) => {
		    if (inp.slice(0, 2) === '0x') {
		        throw new Error('hex string is prefixed with 0x, should be unprefixed');
		    }
		    else {
		        return _unprefixedHexToBytes((0, internal_js_1.padToEven)(inp));
		    }
		};
		exports.unprefixedHexToBytes = unprefixedHexToBytes;
		/****************  Borrowed from @chainsafe/ssz */
		// Caching this info costs about ~1000 bytes and speeds up toHexString() by x6
		const hexByByte = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));
		const bytesToHex = (bytes) => {
		    let hex = '0x';
		    if (bytes === undefined || bytes.length === 0)
		        return hex;
		    for (const byte of bytes) {
		        hex += hexByByte[byte];
		    }
		    return hex;
		};
		exports.bytesToHex = bytesToHex;
		// BigInt cache for the numbers 0 - 256*256-1 (two-byte bytes)
		const BIGINT_CACHE = [];
		for (let i = 0; i <= 256 * 256 - 1; i++) {
		    BIGINT_CACHE[i] = BigInt(i);
		}
		/**
		 * Converts a {@link Uint8Array} to a {@link bigint}
		 * @param {Uint8Array} bytes the bytes to convert
		 * @returns {bigint}
		 */
		const bytesToBigInt = (bytes, littleEndian = false) => {
		    if (littleEndian) {
		        bytes.reverse();
		    }
		    const hex = (0, exports.bytesToHex)(bytes);
		    if (hex === '0x') {
		        return BIGINT_0;
		    }
		    if (hex.length === 4) {
		        // If the byte length is 1 (this is faster than checking `bytes.length === 1`)
		        return BIGINT_CACHE[bytes[0]];
		    }
		    if (hex.length === 6) {
		        return BIGINT_CACHE[bytes[0] * 256 + bytes[1]];
		    }
		    return BigInt(hex);
		};
		exports.bytesToBigInt = bytesToBigInt;
		/**
		 * Converts a {@link Uint8Array} to a {@link number}.
		 * @param {Uint8Array} bytes the bytes to convert
		 * @return  {number}
		 * @throws If the input number exceeds 53 bits.
		 */
		const bytesToInt = (bytes) => {
		    const res = Number((0, exports.bytesToBigInt)(bytes));
		    if (!Number.isSafeInteger(res))
		        throw new Error('Number exceeds 53 bits');
		    return res;
		};
		exports.bytesToInt = bytesToInt;
		const hexToBytes = (hex) => {
		    if (typeof hex !== 'string') {
		        throw new Error(`hex argument type ${typeof hex} must be of type string`);
		    }
		    if (!/^0x[0-9a-fA-F]*$/.test(hex)) {
		        throw new Error(`Input must be a 0x-prefixed hexadecimal string, got ${hex}`);
		    }
		    hex = hex.slice(2);
		    if (hex.length % 2 !== 0) {
		        hex = (0, internal_js_1.padToEven)(hex);
		    }
		    return _unprefixedHexToBytes(hex);
		};
		exports.hexToBytes = hexToBytes;
		/******************************************/
		/**
		 * Converts a {@link number} into a {@link PrefixedHexString}
		 * @param {number} i
		 * @return {PrefixedHexString}
		 */
		const intToHex = (i) => {
		    if (!Number.isSafeInteger(i) || i < 0) {
		        throw new Error(`Received an invalid integer type: ${i}`);
		    }
		    return `0x${i.toString(16)}`;
		};
		exports.intToHex = intToHex;
		/**
		 * Converts an {@link number} to a {@link Uint8Array}
		 * @param {Number} i
		 * @return {Uint8Array}
		 */
		const intToBytes = (i) => {
		    const hex = (0, exports.intToHex)(i);
		    return (0, exports.hexToBytes)(hex);
		};
		exports.intToBytes = intToBytes;
		/**
		 * Converts a {@link bigint} to a {@link Uint8Array}
		 *  * @param {bigint} num the bigint to convert
		 * @returns {Uint8Array}
		 */
		const bigIntToBytes = (num, littleEndian = false) => {
		    // eslint-disable-next-line @typescript-eslint/no-use-before-define
		    const bytes = (0, exports.toBytes)('0x' + (0, internal_js_1.padToEven)(num.toString(16)));
		    return littleEndian ? bytes.reverse() : bytes;
		};
		exports.bigIntToBytes = bigIntToBytes;
		/**
		 * Returns a Uint8Array filled with 0s.
		 * @param {number} bytes the number of bytes of the Uint8Array
		 * @return {Uint8Array}
		 */
		const zeros = (bytes) => {
		    return new Uint8Array(bytes);
		};
		exports.zeros = zeros;
		/**
		 * Pads a `Uint8Array` with zeros till it has `length` bytes.
		 * Truncates the beginning or end of input if its length exceeds `length`.
		 * @param {Uint8Array} msg the value to pad
		 * @param {number} length the number of bytes the output should be
		 * @param {boolean} right whether to start padding form the left or right
		 * @return {Uint8Array}
		 */
		const setLength = (msg, length, right) => {
		    if (right) {
		        if (msg.length < length) {
		            return new Uint8Array([...msg, ...(0, exports.zeros)(length - msg.length)]);
		        }
		        return msg.subarray(0, length);
		    }
		    else {
		        if (msg.length < length) {
		            return new Uint8Array([...(0, exports.zeros)(length - msg.length), ...msg]);
		        }
		        return msg.subarray(-length);
		    }
		};
		/**
		 * Left Pads a `Uint8Array` with leading zeros till it has `length` bytes.
		 * Or it truncates the beginning if it exceeds.
		 * @param {Uint8Array} msg the value to pad
		 * @param {number} length the number of bytes the output should be
		 * @return {Uint8Array}
		 */
		const setLengthLeft = (msg, length) => {
		    (0, helpers_js_1.assertIsBytes)(msg);
		    return setLength(msg, length, false);
		};
		exports.setLengthLeft = setLengthLeft;
		/**
		 * Right Pads a `Uint8Array` with trailing zeros till it has `length` bytes.
		 * it truncates the end if it exceeds.
		 * @param {Uint8Array} msg the value to pad
		 * @param {number} length the number of bytes the output should be
		 * @return {Uint8Array}
		 */
		const setLengthRight = (msg, length) => {
		    (0, helpers_js_1.assertIsBytes)(msg);
		    return setLength(msg, length, true);
		};
		exports.setLengthRight = setLengthRight;
		/**
		 * Trims leading zeros from a `Uint8Array`, `number[]` or PrefixedHexString`.
		 * @param {Uint8Array|number[]|PrefixedHexString} a
		 * @return {Uint8Array|number[]|PrefixedHexString}
		 */
		const stripZeros = (a) => {
		    let first = a[0];
		    while (a.length > 0 && first.toString() === '0') {
		        a = a.slice(1);
		        first = a[0];
		    }
		    return a;
		};
		/**
		 * Trims leading zeros from a `Uint8Array`.
		 * @param {Uint8Array} a
		 * @return {Uint8Array}
		 */
		const unpadBytes = (a) => {
		    (0, helpers_js_1.assertIsBytes)(a);
		    return stripZeros(a);
		};
		exports.unpadBytes = unpadBytes;
		/**
		 * Trims leading zeros from an `Array` (of numbers).
		 * @param  {number[]} a
		 * @return {number[]}
		 */
		const unpadArray = (a) => {
		    (0, helpers_js_1.assertIsArray)(a);
		    return stripZeros(a);
		};
		exports.unpadArray = unpadArray;
		/**
		 * Trims leading zeros from a `PrefixedHexString`.
		 * @param {PrefixedHexString} a
		 * @return {PrefixedHexString}
		 */
		const unpadHex = (a) => {
		    (0, helpers_js_1.assertIsHexString)(a);
		    a = (0, internal_js_1.stripHexPrefix)(a);
		    return '0x' + stripZeros(a);
		};
		exports.unpadHex = unpadHex;
		/**
		 * Attempts to turn a value into a `Uint8Array`.
		 * Inputs supported: `Buffer`, `Uint8Array`, `String` (hex-prefixed), `Number`, null/undefined, `BigInt` and other objects
		 * with a `toArray()` or `toBytes()` method.
		 * @param {ToBytesInputTypes} v the value
		 * @return {Uint8Array}
		 */
		const toBytes = (v) => {
		    if (v === null || v === undefined) {
		        return new Uint8Array();
		    }
		    if (Array.isArray(v) || v instanceof Uint8Array) {
		        return Uint8Array.from(v);
		    }
		    if (typeof v === 'string') {
		        if (!(0, internal_js_1.isHexString)(v)) {
		            throw new Error(`Cannot convert string to Uint8Array. toBytes only supports 0x-prefixed hex strings and this string was given: ${v}`);
		        }
		        return (0, exports.hexToBytes)(v);
		    }
		    if (typeof v === 'number') {
		        return (0, exports.intToBytes)(v);
		    }
		    if (typeof v === 'bigint') {
		        if (v < BIGINT_0) {
		            throw new Error(`Cannot convert negative bigint to Uint8Array. Given: ${v}`);
		        }
		        let n = v.toString(16);
		        if (n.length % 2)
		            n = '0' + n;
		        return (0, exports.unprefixedHexToBytes)(n);
		    }
		    if (v.toBytes !== undefined) {
		        // converts a `TransformableToBytes` object to a Uint8Array
		        return v.toBytes();
		    }
		    throw new Error('invalid type');
		};
		exports.toBytes = toBytes;
		/**
		 * Interprets a `Uint8Array` as a signed integer and returns a `BigInt`. Assumes 256-bit numbers.
		 * @param {Uint8Array} num Signed integer value
		 * @returns {bigint}
		 */
		const fromSigned = (num) => {
		    return BigInt.asIntN(256, (0, exports.bytesToBigInt)(num));
		};
		exports.fromSigned = fromSigned;
		/**
		 * Converts a `BigInt` to an unsigned integer and returns it as a `Uint8Array`. Assumes 256-bit numbers.
		 * @param {bigint} num
		 * @returns {Uint8Array}
		 */
		const toUnsigned = (num) => {
		    return (0, exports.bigIntToBytes)(BigInt.asUintN(256, num));
		};
		exports.toUnsigned = toUnsigned;
		/**
		 * Adds "0x" to a given `string` if it does not already start with "0x".
		 * @param {string} str
		 * @return {PrefixedHexString}
		 */
		const addHexPrefix = (str) => {
		    if (typeof str !== 'string') {
		        return str;
		    }
		    return (0, internal_js_1.isHexPrefixed)(str) ? str : '0x' + str;
		};
		exports.addHexPrefix = addHexPrefix;
		/**
		 * Shortens a string  or Uint8Array's hex string representation to maxLength (default 50).
		 *
		 * Examples:
		 *
		 * Input:  '657468657265756d000000000000000000000000000000000000000000000000'
		 * Output: '657468657265756d0000000000000000000000000000000000…'
		 * @param {Uint8Array | string} bytes
		 * @param {number} maxLength
		 * @return {string}
		 */
		const short = (bytes, maxLength = 50) => {
		    const byteStr = bytes instanceof Uint8Array ? (0, exports.bytesToHex)(bytes) : bytes;
		    const len = byteStr.slice(0, 2) === '0x' ? maxLength + 2 : maxLength;
		    if (byteStr.length <= len) {
		        return byteStr;
		    }
		    return byteStr.slice(0, len) + '…';
		};
		exports.short = short;
		/**
		 * Checks provided Uint8Array for leading zeroes and throws if found.
		 *
		 * Examples:
		 *
		 * Valid values: 0x1, 0x, 0x01, 0x1234
		 * Invalid values: 0x0, 0x00, 0x001, 0x0001
		 *
		 * Note: This method is useful for validating that RLP encoded integers comply with the rule that all
		 * integer values encoded to RLP must be in the most compact form and contain no leading zero bytes
		 * @param values An object containing string keys and Uint8Array values
		 * @throws if any provided value is found to have leading zero bytes
		 */
		const validateNoLeadingZeroes = (values) => {
		    for (const [k, v] of Object.entries(values)) {
		        if (v !== undefined && v.length > 0 && v[0] === 0) {
		            throw new Error(`${k} cannot have leading zeroes, received: ${(0, exports.bytesToHex)(v)}`);
		        }
		    }
		};
		exports.validateNoLeadingZeroes = validateNoLeadingZeroes;
		/**
		 * Converts a {@link bigint} to a `0x` prefixed hex string
		 * @param {bigint} num the bigint to convert
		 * @returns {PrefixedHexString}
		 */
		const bigIntToHex = (num) => {
		    return '0x' + num.toString(16);
		};
		exports.bigIntToHex = bigIntToHex;
		/**
		 * Convert value from bigint to an unpadded Uint8Array
		 * (useful for RLP transport)
		 * @param {bigint} value the bigint to convert
		 * @returns {Uint8Array}
		 */
		const bigIntToUnpaddedBytes = (value) => {
		    return (0, exports.unpadBytes)((0, exports.bigIntToBytes)(value));
		};
		exports.bigIntToUnpaddedBytes = bigIntToUnpaddedBytes;
		/**
		 * Convert value from number to an unpadded Uint8Array
		 * (useful for RLP transport)
		 * @param {number} value the bigint to convert
		 * @returns {Uint8Array}
		 */
		const intToUnpaddedBytes = (value) => {
		    return (0, exports.unpadBytes)((0, exports.intToBytes)(value));
		};
		exports.intToUnpaddedBytes = intToUnpaddedBytes;
		/**
		 * Compares two Uint8Arrays and returns a number indicating their order in a sorted array.
		 *
		 * @param {Uint8Array} value1 - The first Uint8Array to compare.
		 * @param {Uint8Array} value2 - The second Uint8Array to compare.
		 * @returns {number} A positive number if value1 is larger than value2,
		 *                   A negative number if value1 is smaller than value2,
		 *                   or 0 if value1 and value2 are equal.
		 */
		const compareBytes = (value1, value2) => {
		    const bigIntValue1 = (0, exports.bytesToBigInt)(value1);
		    const bigIntValue2 = (0, exports.bytesToBigInt)(value2);
		    return bigIntValue1 > bigIntValue2 ? 1 : bigIntValue1 < bigIntValue2 ? -1 : 0;
		};
		exports.compareBytes = compareBytes;
		/**
		 * Generates a Uint8Array of random bytes of specified length.
		 *
		 * @param {number} length - The length of the Uint8Array.
		 * @returns {Uint8Array} A Uint8Array of random bytes of specified length.
		 */
		const randomBytes = (length) => {
		    return (0, random_js_1.getRandomBytesSync)(length);
		};
		exports.randomBytes = randomBytes;
		/**
		 * This mirrors the functionality of the `ethereum-cryptography` export except
		 * it skips the check to validate that every element of `arrays` is indead a `uint8Array`
		 * Can give small performance gains on large arrays
		 * @param {Uint8Array[]} arrays an array of Uint8Arrays
		 * @returns {Uint8Array} one Uint8Array with all the elements of the original set
		 * works like `Buffer.concat`
		 */
		const concatBytes = (...arrays) => {
		    if (arrays.length === 1)
		        return arrays[0];
		    const length = arrays.reduce((a, arr) => a + arr.length, 0);
		    const result = new Uint8Array(length);
		    for (let i = 0, pad = 0; i < arrays.length; i++) {
		        const arr = arrays[i];
		        result.set(arr, pad);
		        pad += arr.length;
		    }
		    return result;
		};
		exports.concatBytes = concatBytes;
		/**
		 * @notice Convert a Uint8Array to a 32-bit integer
		 * @param {Uint8Array} bytes The input Uint8Array from which to read the 32-bit integer.
		 * @param {boolean} littleEndian True for little-endian, undefined or false for big-endian.
		 * @return {number} The 32-bit integer read from the input Uint8Array.
		 */
		function bytesToInt32(bytes, littleEndian = false) {
		    if (bytes.length < 4) {
		        bytes = setLength(bytes, 4, littleEndian);
		    }
		    const dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);
		    return dataView.getUint32(0, littleEndian);
		}
		exports.bytesToInt32 = bytesToInt32;
		/**
		 * @notice Convert a Uint8Array to a 64-bit bigint
		 * @param {Uint8Array} bytes The input Uint8Array from which to read the 64-bit bigint.
		 * @param {boolean} littleEndian True for little-endian, undefined or false for big-endian.
		 * @return {bigint} The 64-bit bigint read from the input Uint8Array.
		 */
		function bytesToBigInt64(bytes, littleEndian = false) {
		    if (bytes.length < 8) {
		        bytes = setLength(bytes, 8, littleEndian);
		    }
		    const dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);
		    return dataView.getBigUint64(0, littleEndian);
		}
		exports.bytesToBigInt64 = bytesToBigInt64;
		/**
		 * @notice Convert a 32-bit integer to a Uint8Array.
		 * @param {number} value The 32-bit integer to convert.
		 * @param {boolean} littleEndian True for little-endian, undefined or false for big-endian.
		 * @return {Uint8Array} A Uint8Array of length 4 containing the integer.
		 */
		function int32ToBytes(value, littleEndian = false) {
		    const buffer = new ArrayBuffer(4);
		    const dataView = new DataView(buffer);
		    dataView.setUint32(0, value, littleEndian);
		    return new Uint8Array(buffer);
		}
		exports.int32ToBytes = int32ToBytes;
		/**
		 * @notice Convert a 64-bit bigint to a Uint8Array.
		 * @param {bigint} value The 64-bit bigint to convert.
		 * @param {boolean} littleEndian True for little-endian, undefined or false for big-endian.
		 * @return {Uint8Array} A Uint8Array of length 8 containing the bigint.
		 */
		function bigInt64ToBytes(value, littleEndian = false) {
		    const buffer = new ArrayBuffer(8);
		    const dataView = new DataView(buffer);
		    dataView.setBigUint64(0, value, littleEndian);
		    return new Uint8Array(buffer);
		}
		exports.bigInt64ToBytes = bigInt64ToBytes;
		// eslint-disable-next-line no-restricted-imports
		var utils_js_2 = utilsExports;
		Object.defineProperty(exports, "bytesToUtf8", { enumerable: true, get: function () { return utils_js_2.bytesToUtf8; } });
		Object.defineProperty(exports, "equalsBytes", { enumerable: true, get: function () { return utils_js_2.equalsBytes; } });
		Object.defineProperty(exports, "utf8ToBytes", { enumerable: true, get: function () { return utils_js_2.utf8ToBytes; } });
		
	} (bytes));
	return bytes;
}

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.BIGINT_2EXP256 = exports.BIGINT_2EXP224 = exports.BIGINT_2EXP160 = exports.BIGINT_2EXP96 = exports.BIGINT_224 = exports.BIGINT_160 = exports.BIGINT_100 = exports.BIGINT_96 = exports.BIGINT_256 = exports.BIGINT_255 = exports.BIGINT_128 = exports.BIGINT_64 = exports.BIGINT_32 = exports.BIGINT_31 = exports.BIGINT_28 = exports.BIGINT_27 = exports.BIGINT_8 = exports.BIGINT_7 = exports.BIGINT_3 = exports.BIGINT_2 = exports.BIGINT_1 = exports.BIGINT_0 = exports.BIGINT_NEG1 = exports.RIPEMD160_ADDRESS_STRING = exports.MAX_WITHDRAWALS_PER_PAYLOAD = exports.RLP_EMPTY_STRING = exports.KECCAK256_RLP = exports.KECCAK256_RLP_S = exports.KECCAK256_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY_S = exports.KECCAK256_NULL = exports.KECCAK256_NULL_S = exports.TWO_POW256 = exports.SECP256K1_ORDER_DIV_2 = exports.SECP256K1_ORDER = exports.MAX_INTEGER_BIGINT = exports.MAX_INTEGER = exports.MAX_UINT64 = void 0;
	const secp256k1_js_1 = secp256k1$1;
	const bytes_js_1 = requireBytes();
	/**
	 * 2^64-1
	 */
	exports.MAX_UINT64 = BigInt('0xffffffffffffffff');
	/**
	 * The max integer that the evm can handle (2^256-1)
	 */
	exports.MAX_INTEGER = BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');
	/**
	 * The max integer that the evm can handle (2^256-1) as a bigint
	 * 2^256-1 equals to 340282366920938463463374607431768211455
	 * We use literal value instead of calculated value for compatibility issue.
	 */
	exports.MAX_INTEGER_BIGINT = BigInt('115792089237316195423570985008687907853269984665640564039457584007913129639935');
	exports.SECP256K1_ORDER = secp256k1_js_1.secp256k1.CURVE.n;
	exports.SECP256K1_ORDER_DIV_2 = secp256k1_js_1.secp256k1.CURVE.n / BigInt(2);
	/**
	 * 2^256
	 */
	exports.TWO_POW256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');
	/**
	 * Keccak-256 hash of null
	 */
	exports.KECCAK256_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';
	/**
	 * Keccak-256 hash of null
	 */
	exports.KECCAK256_NULL = (0, bytes_js_1.hexToBytes)(exports.KECCAK256_NULL_S);
	/**
	 * Keccak-256 of an RLP of an empty array
	 */
	exports.KECCAK256_RLP_ARRAY_S = '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';
	/**
	 * Keccak-256 of an RLP of an empty array
	 */
	exports.KECCAK256_RLP_ARRAY = (0, bytes_js_1.hexToBytes)(exports.KECCAK256_RLP_ARRAY_S);
	/**
	 * Keccak-256 hash of the RLP of null
	 */
	exports.KECCAK256_RLP_S = '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';
	/**
	 * Keccak-256 hash of the RLP of null
	 */
	exports.KECCAK256_RLP = (0, bytes_js_1.hexToBytes)(exports.KECCAK256_RLP_S);
	/**
	 *  RLP encoded empty string
	 */
	exports.RLP_EMPTY_STRING = Uint8Array.from([0x80]);
	exports.MAX_WITHDRAWALS_PER_PAYLOAD = 16;
	exports.RIPEMD160_ADDRESS_STRING = '0000000000000000000000000000000000000003';
	/**
	 * BigInt constants
	 */
	exports.BIGINT_NEG1 = BigInt(-1);
	exports.BIGINT_0 = BigInt(0);
	exports.BIGINT_1 = BigInt(1);
	exports.BIGINT_2 = BigInt(2);
	exports.BIGINT_3 = BigInt(3);
	exports.BIGINT_7 = BigInt(7);
	exports.BIGINT_8 = BigInt(8);
	exports.BIGINT_27 = BigInt(27);
	exports.BIGINT_28 = BigInt(28);
	exports.BIGINT_31 = BigInt(31);
	exports.BIGINT_32 = BigInt(32);
	exports.BIGINT_64 = BigInt(64);
	exports.BIGINT_128 = BigInt(128);
	exports.BIGINT_255 = BigInt(255);
	exports.BIGINT_256 = BigInt(256);
	exports.BIGINT_96 = BigInt(96);
	exports.BIGINT_100 = BigInt(100);
	exports.BIGINT_160 = BigInt(160);
	exports.BIGINT_224 = BigInt(224);
	exports.BIGINT_2EXP96 = BigInt(79228162514264337593543950336);
	exports.BIGINT_2EXP160 = BigInt(1461501637330902918203684832716283019655932542976);
	exports.BIGINT_2EXP224 = BigInt(26959946667150639794667015087019630673637144422540572481103610249216);
	exports.BIGINT_2EXP256 = exports.BIGINT_2 ** exports.BIGINT_256;
	
} (constants$1));

var units = {};

Object.defineProperty(units, "__esModule", { value: true });
units.formatBigDecimal = units.GWEI_TO_WEI = void 0;
const constants_js_1$4 = constants$1;
/** Easy conversion from Gwei to wei */
units.GWEI_TO_WEI = BigInt(1000000000);
function formatBigDecimal(numerator, denominator, maxDecimalFactor) {
    if (denominator === constants_js_1$4.BIGINT_0) {
        denominator = constants_js_1$4.BIGINT_1;
    }
    const full = numerator / denominator;
    const fraction = ((numerator - full * denominator) * maxDecimalFactor) / denominator;
    // zeros to be added post decimal are number of zeros in maxDecimalFactor - number of digits in fraction
    const zerosPostDecimal = String(maxDecimalFactor).length - 1 - String(fraction).length;
    return `${full}.${'0'.repeat(zerosPostDecimal)}${fraction}`;
}
units.formatBigDecimal = formatBigDecimal;

var account = {};

var keccak = {};

var sha3 = {};

var _u64 = {};

Object.defineProperty(_u64, "__esModule", { value: true });
_u64.add5L = _u64.add5H = _u64.add4H = _u64.add4L = _u64.add3H = _u64.add3L = _u64.add = _u64.rotlBL = _u64.rotlBH = _u64.rotlSL = _u64.rotlSH = _u64.rotr32L = _u64.rotr32H = _u64.rotrBL = _u64.rotrBH = _u64.rotrSL = _u64.rotrSH = _u64.shrSL = _u64.shrSH = _u64.toBig = _u64.split = _u64.fromBig = void 0;
const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);
const _32n = /* @__PURE__ */ BigInt(32);
// We are not using BigUint64Array, because they are extremely slow as per 2022
function fromBig(n, le = false) {
    if (le)
        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };
    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
}
_u64.fromBig = fromBig;
function split(lst, le = false) {
    let Ah = new Uint32Array(lst.length);
    let Al = new Uint32Array(lst.length);
    for (let i = 0; i < lst.length; i++) {
        const { h, l } = fromBig(lst[i], le);
        [Ah[i], Al[i]] = [h, l];
    }
    return [Ah, Al];
}
_u64.split = split;
const toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);
_u64.toBig = toBig;
// for Shift in [0, 32)
const shrSH = (h, _l, s) => h >>> s;
_u64.shrSH = shrSH;
const shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);
_u64.shrSL = shrSL;
// Right rotate for Shift in [1, 32)
const rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));
_u64.rotrSH = rotrSH;
const rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);
_u64.rotrSL = rotrSL;
// Right rotate for Shift in (32, 64), NOTE: 32 is special case.
const rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));
_u64.rotrBH = rotrBH;
const rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));
_u64.rotrBL = rotrBL;
// Right rotate for shift===32 (just swaps l&h)
const rotr32H = (_h, l) => l;
_u64.rotr32H = rotr32H;
const rotr32L = (h, _l) => h;
_u64.rotr32L = rotr32L;
// Left rotate for Shift in [1, 32)
const rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));
_u64.rotlSH = rotlSH;
const rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));
_u64.rotlSL = rotlSL;
// Left rotate for Shift in (32, 64), NOTE: 32 is special case.
const rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));
_u64.rotlBH = rotlBH;
const rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));
_u64.rotlBL = rotlBL;
// JS uses 32-bit signed integers for bitwise operations which means we cannot
// simple take carry out of low bit sum by shift, we need to use division.
function add(Ah, Al, Bh, Bl) {
    const l = (Al >>> 0) + (Bl >>> 0);
    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };
}
_u64.add = add;
// Addition with more than 2 elements
const add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
_u64.add3L = add3L;
const add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;
_u64.add3H = add3H;
const add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
_u64.add4L = add4L;
const add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;
_u64.add4H = add4H;
const add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
_u64.add5L = add5L;
const add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;
_u64.add5H = add5H;
// prettier-ignore
const u64 = {
    fromBig, split, toBig,
    shrSH, shrSL,
    rotrSH, rotrSL, rotrBH, rotrBL,
    rotr32H, rotr32L,
    rotlSH, rotlSL, rotlBH, rotlBL,
    add, add3L, add3H, add4L, add4H, add5H, add5L,
};
_u64.default = u64;

Object.defineProperty(sha3, "__esModule", { value: true });
sha3.shake256 = sha3.shake128 = sha3.keccak_512 = sha3.keccak_384 = sha3.keccak_256 = sha3.keccak_224 = sha3.sha3_512 = sha3.sha3_384 = sha3.sha3_256 = sha3.sha3_224 = sha3.Keccak = sha3.keccakP = void 0;
const _assert_js_1 = _assert;
const _u64_js_1 = _u64;
const utils_js_1$3 = utils$5;
// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.
// It's called a sponge function.
// Various per round constants calculations
const [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];
const _0n = /* @__PURE__ */ BigInt(0);
const _1n = /* @__PURE__ */ BigInt(1);
const _2n = /* @__PURE__ */ BigInt(2);
const _7n = /* @__PURE__ */ BigInt(7);
const _256n = /* @__PURE__ */ BigInt(256);
const _0x71n = /* @__PURE__ */ BigInt(0x71);
for (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {
    // Pi
    [x, y] = [y, (2 * x + 3 * y) % 5];
    SHA3_PI.push(2 * (5 * y + x));
    // Rotational
    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);
    // Iota
    let t = _0n;
    for (let j = 0; j < 7; j++) {
        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;
        if (R & _2n)
            t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);
    }
    _SHA3_IOTA.push(t);
}
const [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ (0, _u64_js_1.split)(_SHA3_IOTA, true);
// Left rotation (without 0, 32, 64)
const rotlH = (h, l, s) => (s > 32 ? (0, _u64_js_1.rotlBH)(h, l, s) : (0, _u64_js_1.rotlSH)(h, l, s));
const rotlL = (h, l, s) => (s > 32 ? (0, _u64_js_1.rotlBL)(h, l, s) : (0, _u64_js_1.rotlSL)(h, l, s));
// Same as keccakf1600, but allows to skip some rounds
function keccakP(s, rounds = 24) {
    const B = new Uint32Array(5 * 2);
    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)
    for (let round = 24 - rounds; round < 24; round++) {
        // Theta θ
        for (let x = 0; x < 10; x++)
            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
        for (let x = 0; x < 10; x += 2) {
            const idx1 = (x + 8) % 10;
            const idx0 = (x + 2) % 10;
            const B0 = B[idx0];
            const B1 = B[idx0 + 1];
            const Th = rotlH(B0, B1, 1) ^ B[idx1];
            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
            for (let y = 0; y < 50; y += 10) {
                s[x + y] ^= Th;
                s[x + y + 1] ^= Tl;
            }
        }
        // Rho (ρ) and Pi (π)
        let curH = s[2];
        let curL = s[3];
        for (let t = 0; t < 24; t++) {
            const shift = SHA3_ROTL[t];
            const Th = rotlH(curH, curL, shift);
            const Tl = rotlL(curH, curL, shift);
            const PI = SHA3_PI[t];
            curH = s[PI];
            curL = s[PI + 1];
            s[PI] = Th;
            s[PI + 1] = Tl;
        }
        // Chi (χ)
        for (let y = 0; y < 50; y += 10) {
            for (let x = 0; x < 10; x++)
                B[x] = s[y + x];
            for (let x = 0; x < 10; x++)
                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
        }
        // Iota (ι)
        s[0] ^= SHA3_IOTA_H[round];
        s[1] ^= SHA3_IOTA_L[round];
    }
    B.fill(0);
}
sha3.keccakP = keccakP;
class Keccak extends utils_js_1$3.Hash {
    // NOTE: we accept arguments in bytes instead of bits here.
    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
        super();
        this.blockLen = blockLen;
        this.suffix = suffix;
        this.outputLen = outputLen;
        this.enableXOF = enableXOF;
        this.rounds = rounds;
        this.pos = 0;
        this.posOut = 0;
        this.finished = false;
        this.destroyed = false;
        // Can be passed from user as dkLen
        (0, _assert_js_1.number)(outputLen);
        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes
        if (0 >= this.blockLen || this.blockLen >= 200)
            throw new Error('Sha3 supports only keccak-f1600 function');
        this.state = new Uint8Array(200);
        this.state32 = (0, utils_js_1$3.u32)(this.state);
    }
    keccak() {
        keccakP(this.state32, this.rounds);
        this.posOut = 0;
        this.pos = 0;
    }
    update(data) {
        (0, _assert_js_1.exists)(this);
        const { blockLen, state } = this;
        data = (0, utils_js_1$3.toBytes)(data);
        const len = data.length;
        for (let pos = 0; pos < len;) {
            const take = Math.min(blockLen - this.pos, len - pos);
            for (let i = 0; i < take; i++)
                state[this.pos++] ^= data[pos++];
            if (this.pos === blockLen)
                this.keccak();
        }
        return this;
    }
    finish() {
        if (this.finished)
            return;
        this.finished = true;
        const { state, suffix, pos, blockLen } = this;
        // Do the padding
        state[pos] ^= suffix;
        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)
            this.keccak();
        state[blockLen - 1] ^= 0x80;
        this.keccak();
    }
    writeInto(out) {
        (0, _assert_js_1.exists)(this, false);
        (0, _assert_js_1.bytes)(out);
        this.finish();
        const bufferOut = this.state;
        const { blockLen } = this;
        for (let pos = 0, len = out.length; pos < len;) {
            if (this.posOut >= blockLen)
                this.keccak();
            const take = Math.min(blockLen - this.posOut, len - pos);
            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
            this.posOut += take;
            pos += take;
        }
        return out;
    }
    xofInto(out) {
        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF
        if (!this.enableXOF)
            throw new Error('XOF is not possible for this instance');
        return this.writeInto(out);
    }
    xof(bytes) {
        (0, _assert_js_1.number)(bytes);
        return this.xofInto(new Uint8Array(bytes));
    }
    digestInto(out) {
        (0, _assert_js_1.output)(out, this);
        if (this.finished)
            throw new Error('digest() was already called');
        this.writeInto(out);
        this.destroy();
        return out;
    }
    digest() {
        return this.digestInto(new Uint8Array(this.outputLen));
    }
    destroy() {
        this.destroyed = true;
        this.state.fill(0);
    }
    _cloneInto(to) {
        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
        to.state32.set(this.state32);
        to.pos = this.pos;
        to.posOut = this.posOut;
        to.finished = this.finished;
        to.rounds = rounds;
        // Suffix can change in cSHAKE
        to.suffix = suffix;
        to.outputLen = outputLen;
        to.enableXOF = enableXOF;
        to.destroyed = this.destroyed;
        return to;
    }
}
sha3.Keccak = Keccak;
const gen = (suffix, blockLen, outputLen) => (0, utils_js_1$3.wrapConstructor)(() => new Keccak(blockLen, suffix, outputLen));
sha3.sha3_224 = gen(0x06, 144, 224 / 8);
/**
 * SHA3-256 hash function
 * @param message - that would be hashed
 */
sha3.sha3_256 = gen(0x06, 136, 256 / 8);
sha3.sha3_384 = gen(0x06, 104, 384 / 8);
sha3.sha3_512 = gen(0x06, 72, 512 / 8);
sha3.keccak_224 = gen(0x01, 144, 224 / 8);
/**
 * keccak-256 hash function. Different from SHA3-256.
 * @param message - that would be hashed
 */
sha3.keccak_256 = gen(0x01, 136, 256 / 8);
sha3.keccak_384 = gen(0x01, 104, 384 / 8);
sha3.keccak_512 = gen(0x01, 72, 512 / 8);
const genShake = (suffix, blockLen, outputLen) => (0, utils_js_1$3.wrapXOFConstructorWithOpts)((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));
sha3.shake128 = genShake(0x1f, 168, 128 / 8);
sha3.shake256 = genShake(0x1f, 136, 256 / 8);

Object.defineProperty(keccak, "__esModule", { value: true });
keccak.keccak512 = keccak.keccak384 = keccak.keccak256 = keccak.keccak224 = void 0;
const sha3_1 = sha3;
const utils_js_1$2 = utilsExports;
keccak.keccak224 = (0, utils_js_1$2.wrapHash)(sha3_1.keccak_224);
keccak.keccak256 = (() => {
    const k = (0, utils_js_1$2.wrapHash)(sha3_1.keccak_256);
    k.create = sha3_1.keccak_256.create;
    return k;
})();
keccak.keccak384 = (0, utils_js_1$2.wrapHash)(sha3_1.keccak_384);
keccak.keccak512 = (0, utils_js_1$2.wrapHash)(sha3_1.keccak_512);

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.accountBodyToRLP = exports.accountBodyToSlim = exports.accountBodyFromSlim = exports.isZeroAddress = exports.zeroAddress = exports.importPublic = exports.privateToAddress = exports.privateToPublic = exports.publicToAddress = exports.pubToAddress = exports.isValidPublic = exports.isValidPrivate = exports.generateAddress2 = exports.generateAddress = exports.isValidChecksumAddress = exports.toChecksumAddress = exports.isValidAddress = exports.Account = void 0;
	const rlp_1 = cjs$3;
	const keccak_js_1 = keccak;
	const secp256k1_js_1 = secp256k1$1;
	const bytes_js_1 = requireBytes();
	const constants_js_1 = constants$1;
	const helpers_js_1 = requireHelpers();
	const internal_js_1 = requireInternal();
	class Account {
	    /**
	     * This constructor assigns and validates the values.
	     * Use the static factory methods to assist in creating an Account from varying data types.
	     */
	    constructor(nonce = constants_js_1.BIGINT_0, balance = constants_js_1.BIGINT_0, storageRoot = constants_js_1.KECCAK256_RLP, codeHash = constants_js_1.KECCAK256_NULL) {
	        this.nonce = nonce;
	        this.balance = balance;
	        this.storageRoot = storageRoot;
	        this.codeHash = codeHash;
	        this._validate();
	    }
	    static fromAccountData(accountData) {
	        const { nonce, balance, storageRoot, codeHash } = accountData;
	        return new Account(nonce !== undefined ? (0, bytes_js_1.bytesToBigInt)((0, bytes_js_1.toBytes)(nonce)) : undefined, balance !== undefined ? (0, bytes_js_1.bytesToBigInt)((0, bytes_js_1.toBytes)(balance)) : undefined, storageRoot !== undefined ? (0, bytes_js_1.toBytes)(storageRoot) : undefined, codeHash !== undefined ? (0, bytes_js_1.toBytes)(codeHash) : undefined);
	    }
	    static fromRlpSerializedAccount(serialized) {
	        const values = rlp_1.RLP.decode(serialized);
	        if (!Array.isArray(values)) {
	            throw new Error('Invalid serialized account input. Must be array');
	        }
	        return this.fromValuesArray(values);
	    }
	    static fromValuesArray(values) {
	        const [nonce, balance, storageRoot, codeHash] = values;
	        return new Account((0, bytes_js_1.bytesToBigInt)(nonce), (0, bytes_js_1.bytesToBigInt)(balance), storageRoot, codeHash);
	    }
	    _validate() {
	        if (this.nonce < constants_js_1.BIGINT_0) {
	            throw new Error('nonce must be greater than zero');
	        }
	        if (this.balance < constants_js_1.BIGINT_0) {
	            throw new Error('balance must be greater than zero');
	        }
	        if (this.storageRoot.length !== 32) {
	            throw new Error('storageRoot must have a length of 32');
	        }
	        if (this.codeHash.length !== 32) {
	            throw new Error('codeHash must have a length of 32');
	        }
	    }
	    /**
	     * Returns an array of Uint8Arrays of the raw bytes for the account, in order.
	     */
	    raw() {
	        return [
	            (0, bytes_js_1.bigIntToUnpaddedBytes)(this.nonce),
	            (0, bytes_js_1.bigIntToUnpaddedBytes)(this.balance),
	            this.storageRoot,
	            this.codeHash,
	        ];
	    }
	    /**
	     * Returns the RLP serialization of the account as a `Uint8Array`.
	     */
	    serialize() {
	        return rlp_1.RLP.encode(this.raw());
	    }
	    /**
	     * Returns a `Boolean` determining if the account is a contract.
	     */
	    isContract() {
	        return !(0, bytes_js_1.equalsBytes)(this.codeHash, constants_js_1.KECCAK256_NULL);
	    }
	    /**
	     * Returns a `Boolean` determining if the account is empty complying to the definition of
	     * account emptiness in [EIP-161](https://eips.ethereum.org/EIPS/eip-161):
	     * "An account is considered empty when it has no code and zero nonce and zero balance."
	     */
	    isEmpty() {
	        return (this.balance === constants_js_1.BIGINT_0 &&
	            this.nonce === constants_js_1.BIGINT_0 &&
	            (0, bytes_js_1.equalsBytes)(this.codeHash, constants_js_1.KECCAK256_NULL));
	    }
	}
	exports.Account = Account;
	/**
	 * Checks if the address is a valid. Accepts checksummed addresses too.
	 */
	const isValidAddress = function (hexAddress) {
	    try {
	        (0, helpers_js_1.assertIsString)(hexAddress);
	    }
	    catch (e) {
	        return false;
	    }
	    return /^0x[0-9a-fA-F]{40}$/.test(hexAddress);
	};
	exports.isValidAddress = isValidAddress;
	/**
	 * Returns a checksummed address.
	 *
	 * If an eip1191ChainId is provided, the chainId will be included in the checksum calculation. This
	 * has the effect of checksummed addresses for one chain having invalid checksums for others.
	 * For more details see [EIP-1191](https://eips.ethereum.org/EIPS/eip-1191).
	 *
	 * WARNING: Checksums with and without the chainId will differ and the EIP-1191 checksum is not
	 * backwards compatible to the original widely adopted checksum format standard introduced in
	 * [EIP-55](https://eips.ethereum.org/EIPS/eip-55), so this will break in existing applications.
	 * Usage of this EIP is therefore discouraged unless you have a very targeted use case.
	 */
	const toChecksumAddress = function (hexAddress, eip1191ChainId) {
	    (0, helpers_js_1.assertIsHexString)(hexAddress);
	    const address = (0, internal_js_1.stripHexPrefix)(hexAddress).toLowerCase();
	    let prefix = '';
	    if (eip1191ChainId !== undefined) {
	        const chainId = (0, bytes_js_1.bytesToBigInt)((0, bytes_js_1.toBytes)(eip1191ChainId));
	        prefix = chainId.toString() + '0x';
	    }
	    const bytes = (0, bytes_js_1.utf8ToBytes)(prefix + address);
	    const hash = (0, bytes_js_1.bytesToHex)((0, keccak_js_1.keccak256)(bytes)).slice(2);
	    let ret = '0x';
	    for (let i = 0; i < address.length; i++) {
	        if (parseInt(hash[i], 16) >= 8) {
	            ret += address[i].toUpperCase();
	        }
	        else {
	            ret += address[i];
	        }
	    }
	    return ret;
	};
	exports.toChecksumAddress = toChecksumAddress;
	/**
	 * Checks if the address is a valid checksummed address.
	 *
	 * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.
	 */
	const isValidChecksumAddress = function (hexAddress, eip1191ChainId) {
	    return (0, exports.isValidAddress)(hexAddress) && (0, exports.toChecksumAddress)(hexAddress, eip1191ChainId) === hexAddress;
	};
	exports.isValidChecksumAddress = isValidChecksumAddress;
	/**
	 * Generates an address of a newly created contract.
	 * @param from The address which is creating this new address
	 * @param nonce The nonce of the from account
	 */
	const generateAddress = function (from, nonce) {
	    (0, helpers_js_1.assertIsBytes)(from);
	    (0, helpers_js_1.assertIsBytes)(nonce);
	    if ((0, bytes_js_1.bytesToBigInt)(nonce) === constants_js_1.BIGINT_0) {
	        // in RLP we want to encode null in the case of zero nonce
	        // read the RLP documentation for an answer if you dare
	        return (0, keccak_js_1.keccak256)(rlp_1.RLP.encode([from, Uint8Array.from([])])).subarray(-20);
	    }
	    // Only take the lower 160bits of the hash
	    return (0, keccak_js_1.keccak256)(rlp_1.RLP.encode([from, nonce])).subarray(-20);
	};
	exports.generateAddress = generateAddress;
	/**
	 * Generates an address for a contract created using CREATE2.
	 * @param from The address which is creating this new address
	 * @param salt A salt
	 * @param initCode The init code of the contract being created
	 */
	const generateAddress2 = function (from, salt, initCode) {
	    (0, helpers_js_1.assertIsBytes)(from);
	    (0, helpers_js_1.assertIsBytes)(salt);
	    (0, helpers_js_1.assertIsBytes)(initCode);
	    if (from.length !== 20) {
	        throw new Error('Expected from to be of length 20');
	    }
	    if (salt.length !== 32) {
	        throw new Error('Expected salt to be of length 32');
	    }
	    const address = (0, keccak_js_1.keccak256)((0, bytes_js_1.concatBytes)((0, bytes_js_1.hexToBytes)('0xff'), from, salt, (0, keccak_js_1.keccak256)(initCode)));
	    return address.subarray(-20);
	};
	exports.generateAddress2 = generateAddress2;
	/**
	 * Checks if the private key satisfies the rules of the curve secp256k1.
	 */
	const isValidPrivate = function (privateKey) {
	    return secp256k1_js_1.secp256k1.utils.isValidPrivateKey(privateKey);
	};
	exports.isValidPrivate = isValidPrivate;
	/**
	 * Checks if the public key satisfies the rules of the curve secp256k1
	 * and the requirements of Ethereum.
	 * @param publicKey The two points of an uncompressed key, unless sanitize is enabled
	 * @param sanitize Accept public keys in other formats
	 */
	const isValidPublic = function (publicKey, sanitize = false) {
	    (0, helpers_js_1.assertIsBytes)(publicKey);
	    if (publicKey.length === 64) {
	        // Convert to SEC1 for secp256k1
	        // Automatically checks whether point is on curve
	        try {
	            secp256k1_js_1.secp256k1.ProjectivePoint.fromHex((0, bytes_js_1.concatBytes)(Uint8Array.from([4]), publicKey));
	            return true;
	        }
	        catch (e) {
	            return false;
	        }
	    }
	    if (!sanitize) {
	        return false;
	    }
	    try {
	        secp256k1_js_1.secp256k1.ProjectivePoint.fromHex(publicKey);
	        return true;
	    }
	    catch (e) {
	        return false;
	    }
	};
	exports.isValidPublic = isValidPublic;
	/**
	 * Returns the ethereum address of a given public key.
	 * Accepts "Ethereum public keys" and SEC1 encoded keys.
	 * @param pubKey The two points of an uncompressed key, unless sanitize is enabled
	 * @param sanitize Accept public keys in other formats
	 */
	const pubToAddress = function (pubKey, sanitize = false) {
	    (0, helpers_js_1.assertIsBytes)(pubKey);
	    if (sanitize && pubKey.length !== 64) {
	        pubKey = secp256k1_js_1.secp256k1.ProjectivePoint.fromHex(pubKey).toRawBytes(false).slice(1);
	    }
	    if (pubKey.length !== 64) {
	        throw new Error('Expected pubKey to be of length 64');
	    }
	    // Only take the lower 160bits of the hash
	    return (0, keccak_js_1.keccak256)(pubKey).subarray(-20);
	};
	exports.pubToAddress = pubToAddress;
	exports.publicToAddress = exports.pubToAddress;
	/**
	 * Returns the ethereum public key of a given private key.
	 * @param privateKey A private key must be 256 bits wide
	 */
	const privateToPublic = function (privateKey) {
	    (0, helpers_js_1.assertIsBytes)(privateKey);
	    // skip the type flag and use the X, Y points
	    return secp256k1_js_1.secp256k1.ProjectivePoint.fromPrivateKey(privateKey).toRawBytes(false).slice(1);
	};
	exports.privateToPublic = privateToPublic;
	/**
	 * Returns the ethereum address of a given private key.
	 * @param privateKey A private key must be 256 bits wide
	 */
	const privateToAddress = function (privateKey) {
	    return (0, exports.publicToAddress)((0, exports.privateToPublic)(privateKey));
	};
	exports.privateToAddress = privateToAddress;
	/**
	 * Converts a public key to the Ethereum format.
	 */
	const importPublic = function (publicKey) {
	    (0, helpers_js_1.assertIsBytes)(publicKey);
	    if (publicKey.length !== 64) {
	        publicKey = secp256k1_js_1.secp256k1.ProjectivePoint.fromHex(publicKey).toRawBytes(false).slice(1);
	    }
	    return publicKey;
	};
	exports.importPublic = importPublic;
	/**
	 * Returns the zero address.
	 */
	const zeroAddress = function () {
	    const addressLength = 20;
	    const addr = (0, bytes_js_1.zeros)(addressLength);
	    return (0, bytes_js_1.bytesToHex)(addr);
	};
	exports.zeroAddress = zeroAddress;
	/**
	 * Checks if a given address is the zero address.
	 */
	const isZeroAddress = function (hexAddress) {
	    try {
	        (0, helpers_js_1.assertIsString)(hexAddress);
	    }
	    catch (e) {
	        return false;
	    }
	    const zeroAddr = (0, exports.zeroAddress)();
	    return zeroAddr === hexAddress;
	};
	exports.isZeroAddress = isZeroAddress;
	function accountBodyFromSlim(body) {
	    const [nonce, balance, storageRoot, codeHash] = body;
	    return [
	        nonce,
	        balance,
	        storageRoot.length === 0 ? constants_js_1.KECCAK256_RLP : storageRoot,
	        codeHash.length === 0 ? constants_js_1.KECCAK256_NULL : codeHash,
	    ];
	}
	exports.accountBodyFromSlim = accountBodyFromSlim;
	const emptyUint8Arr = new Uint8Array(0);
	function accountBodyToSlim(body) {
	    const [nonce, balance, storageRoot, codeHash] = body;
	    return [
	        nonce,
	        balance,
	        (0, bytes_js_1.equalsBytes)(storageRoot, constants_js_1.KECCAK256_RLP) ? emptyUint8Arr : storageRoot,
	        (0, bytes_js_1.equalsBytes)(codeHash, constants_js_1.KECCAK256_NULL) ? emptyUint8Arr : codeHash,
	    ];
	}
	exports.accountBodyToSlim = accountBodyToSlim;
	/**
	 * Converts a slim account (per snap protocol spec) to the RLP encoded version of the account
	 * @param body Array of 4 Uint8Array-like items to represent the account
	 * @returns RLP encoded version of the account
	 */
	function accountBodyToRLP(body, couldBeSlim = true) {
	    const accountBody = couldBeSlim ? accountBodyFromSlim(body) : body;
	    return rlp_1.RLP.encode(accountBody);
	}
	exports.accountBodyToRLP = accountBodyToRLP;
	
} (account));

var address = {};

Object.defineProperty(address, "__esModule", { value: true });
address.Address = void 0;
const account_js_1 = account;
const bytes_js_1$4 = requireBytes();
const constants_js_1$3 = constants$1;
/**
 * Handling and generating Ethereum addresses
 */
class Address {
    constructor(bytes) {
        if (bytes.length !== 20) {
            throw new Error('Invalid address length');
        }
        this.bytes = bytes;
    }
    /**
     * Returns the zero address.
     */
    static zero() {
        return new Address((0, bytes_js_1$4.zeros)(20));
    }
    /**
     * Returns an Address object from a hex-encoded string.
     * @param str - Hex-encoded address
     */
    static fromString(str) {
        if (!(0, account_js_1.isValidAddress)(str)) {
            throw new Error('Invalid address');
        }
        return new Address((0, bytes_js_1$4.toBytes)(str));
    }
    /**
     * Returns an address for a given public key.
     * @param pubKey The two points of an uncompressed key
     */
    static fromPublicKey(pubKey) {
        if (!(pubKey instanceof Uint8Array)) {
            throw new Error('Public key should be Uint8Array');
        }
        const bytes = (0, account_js_1.pubToAddress)(pubKey);
        return new Address(bytes);
    }
    /**
     * Returns an address for a given private key.
     * @param privateKey A private key must be 256 bits wide
     */
    static fromPrivateKey(privateKey) {
        if (!(privateKey instanceof Uint8Array)) {
            throw new Error('Private key should be Uint8Array');
        }
        const bytes = (0, account_js_1.privateToAddress)(privateKey);
        return new Address(bytes);
    }
    /**
     * Generates an address for a newly created contract.
     * @param from The address which is creating this new address
     * @param nonce The nonce of the from account
     */
    static generate(from, nonce) {
        if (typeof nonce !== 'bigint') {
            throw new Error('Expected nonce to be a bigint');
        }
        return new Address((0, account_js_1.generateAddress)(from.bytes, (0, bytes_js_1$4.bigIntToBytes)(nonce)));
    }
    /**
     * Generates an address for a contract created using CREATE2.
     * @param from The address which is creating this new address
     * @param salt A salt
     * @param initCode The init code of the contract being created
     */
    static generate2(from, salt, initCode) {
        if (!(salt instanceof Uint8Array)) {
            throw new Error('Expected salt to be a Uint8Array');
        }
        if (!(initCode instanceof Uint8Array)) {
            throw new Error('Expected initCode to be a Uint8Array');
        }
        return new Address((0, account_js_1.generateAddress2)(from.bytes, salt, initCode));
    }
    /**
     * Is address equal to another.
     */
    equals(address) {
        return (0, bytes_js_1$4.equalsBytes)(this.bytes, address.bytes);
    }
    /**
     * Is address zero.
     */
    isZero() {
        return this.equals(Address.zero());
    }
    /**
     * True if address is in the address range defined
     * by EIP-1352
     */
    isPrecompileOrSystemAddress() {
        const address = (0, bytes_js_1$4.bytesToBigInt)(this.bytes);
        const rangeMin = constants_js_1$3.BIGINT_0;
        const rangeMax = BigInt('0xffff');
        return address >= rangeMin && address <= rangeMax;
    }
    /**
     * Returns hex encoding of address.
     */
    toString() {
        return (0, bytes_js_1$4.bytesToHex)(this.bytes);
    }
    /**
     * Returns a new Uint8Array representation of address.
     */
    toBytes() {
        return new Uint8Array(this.bytes);
    }
}
address.Address = Address;

var db = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.ValueEncoding = exports.KeyEncoding = void 0;
	(function (KeyEncoding) {
	    KeyEncoding["String"] = "string";
	    KeyEncoding["Bytes"] = "view";
	    KeyEncoding["Number"] = "number";
	})(exports.KeyEncoding || (exports.KeyEncoding = {}));
	(function (ValueEncoding) {
	    ValueEncoding["String"] = "string";
	    ValueEncoding["Bytes"] = "view";
	    ValueEncoding["JSON"] = "json";
	})(exports.ValueEncoding || (exports.ValueEncoding = {}));
	
} (db));

var withdrawal = {};

var types$2 = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.toType = exports.TypeOutput = void 0;
	const bytes_js_1 = requireBytes();
	const internal_js_1 = requireInternal();
	/**
	 * Type output options
	 */
	var TypeOutput;
	(function (TypeOutput) {
	    TypeOutput[TypeOutput["Number"] = 0] = "Number";
	    TypeOutput[TypeOutput["BigInt"] = 1] = "BigInt";
	    TypeOutput[TypeOutput["Uint8Array"] = 2] = "Uint8Array";
	    TypeOutput[TypeOutput["PrefixedHexString"] = 3] = "PrefixedHexString";
	})(TypeOutput = exports.TypeOutput || (exports.TypeOutput = {}));
	function toType(input, outputType) {
	    if (input === null) {
	        return null;
	    }
	    if (input === undefined) {
	        return undefined;
	    }
	    if (typeof input === 'string' && !(0, internal_js_1.isHexString)(input)) {
	        throw new Error(`A string must be provided with a 0x-prefix, given: ${input}`);
	    }
	    else if (typeof input === 'number' && !Number.isSafeInteger(input)) {
	        throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');
	    }
	    const output = (0, bytes_js_1.toBytes)(input);
	    switch (outputType) {
	        case TypeOutput.Uint8Array:
	            return output;
	        case TypeOutput.BigInt:
	            return (0, bytes_js_1.bytesToBigInt)(output);
	        case TypeOutput.Number: {
	            const bigInt = (0, bytes_js_1.bytesToBigInt)(output);
	            if (bigInt > BigInt(Number.MAX_SAFE_INTEGER)) {
	                throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)');
	            }
	            return Number(bigInt);
	        }
	        case TypeOutput.PrefixedHexString:
	            return (0, bytes_js_1.bytesToHex)(output);
	        default:
	            throw new Error('unknown outputType');
	    }
	}
	exports.toType = toType;
	
} (types$2));

Object.defineProperty(withdrawal, "__esModule", { value: true });
withdrawal.Withdrawal = void 0;
const address_js_1 = address;
const bytes_js_1$3 = requireBytes();
const constants_js_1$2 = constants$1;
const types_js_1$8 = types$2;
/**
 * Representation of EIP-4895 withdrawal data
 */
class Withdrawal {
    /**
     * This constructor assigns and validates the values.
     * Use the static factory methods to assist in creating a Withdrawal object from varying data types.
     * Its amount is in Gwei to match CL representation and for eventual ssz withdrawalsRoot
     */
    constructor(index, validatorIndex, address, 
    /**
     * withdrawal amount in Gwei to match the CL repesentation and eventually ssz withdrawalsRoot
     */
    amount) {
        this.index = index;
        this.validatorIndex = validatorIndex;
        this.address = address;
        this.amount = amount;
    }
    static fromWithdrawalData(withdrawalData) {
        const { index: indexData, validatorIndex: validatorIndexData, address: addressData, amount: amountData, } = withdrawalData;
        const index = (0, types_js_1$8.toType)(indexData, types_js_1$8.TypeOutput.BigInt);
        const validatorIndex = (0, types_js_1$8.toType)(validatorIndexData, types_js_1$8.TypeOutput.BigInt);
        const address = addressData instanceof address_js_1.Address ? addressData : new address_js_1.Address((0, bytes_js_1$3.toBytes)(addressData));
        const amount = (0, types_js_1$8.toType)(amountData, types_js_1$8.TypeOutput.BigInt);
        return new Withdrawal(index, validatorIndex, address, amount);
    }
    static fromValuesArray(withdrawalArray) {
        if (withdrawalArray.length !== 4) {
            throw Error(`Invalid withdrawalArray length expected=4 actual=${withdrawalArray.length}`);
        }
        const [index, validatorIndex, address, amount] = withdrawalArray;
        return Withdrawal.fromWithdrawalData({ index, validatorIndex, address, amount });
    }
    /**
     * Convert a withdrawal to a buffer array
     * @param withdrawal the withdrawal to convert
     * @returns buffer array of the withdrawal
     */
    static toBytesArray(withdrawal) {
        const { index, validatorIndex, address, amount } = withdrawal;
        const indexBytes = (0, types_js_1$8.toType)(index, types_js_1$8.TypeOutput.BigInt) === constants_js_1$2.BIGINT_0
            ? new Uint8Array()
            : (0, types_js_1$8.toType)(index, types_js_1$8.TypeOutput.Uint8Array);
        const validatorIndexBytes = (0, types_js_1$8.toType)(validatorIndex, types_js_1$8.TypeOutput.BigInt) === constants_js_1$2.BIGINT_0
            ? new Uint8Array()
            : (0, types_js_1$8.toType)(validatorIndex, types_js_1$8.TypeOutput.Uint8Array);
        const addressBytes = address instanceof address_js_1.Address ? address.bytes : (0, types_js_1$8.toType)(address, types_js_1$8.TypeOutput.Uint8Array);
        const amountBytes = (0, types_js_1$8.toType)(amount, types_js_1$8.TypeOutput.BigInt) === constants_js_1$2.BIGINT_0
            ? new Uint8Array()
            : (0, types_js_1$8.toType)(amount, types_js_1$8.TypeOutput.Uint8Array);
        return [indexBytes, validatorIndexBytes, addressBytes, amountBytes];
    }
    raw() {
        return Withdrawal.toBytesArray(this);
    }
    toValue() {
        return {
            index: this.index,
            validatorIndex: this.validatorIndex,
            address: this.address.bytes,
            amount: this.amount,
        };
    }
    toJSON() {
        return {
            index: (0, bytes_js_1$3.bigIntToHex)(this.index),
            validatorIndex: (0, bytes_js_1$3.bigIntToHex)(this.validatorIndex),
            address: (0, bytes_js_1$3.bytesToHex)(this.address.bytes),
            amount: (0, bytes_js_1$3.bigIntToHex)(this.amount),
        };
    }
}
withdrawal.Withdrawal = Withdrawal;

var signature = {};

Object.defineProperty(signature, "__esModule", { value: true });
signature.hashPersonalMessage = signature.isValidSignature = signature.fromRpcSig = signature.toCompactSig = signature.toRpcSig = signature.ecrecover = signature.calculateSigRecovery = signature.ecsign = void 0;
const keccak_js_1$3 = keccak;
const secp256k1_js_1 = secp256k1$1;
const bytes_js_1$2 = requireBytes();
const constants_js_1$1 = constants$1;
const helpers_js_1 = requireHelpers();
/**
 * Returns the ECDSA signature of a message hash.
 *
 * If `chainId` is provided assume an EIP-155-style signature and calculate the `v` value
 * accordingly, otherwise return a "static" `v` just derived from the `recovery` bit
 */
function ecsign(msgHash, privateKey, chainId) {
    const sig = secp256k1_js_1.secp256k1.sign(msgHash, privateKey);
    const buf = sig.toCompactRawBytes();
    const r = buf.slice(0, 32);
    const s = buf.slice(32, 64);
    const v = chainId === undefined
        ? BigInt(sig.recovery + 27)
        : BigInt(sig.recovery + 35) + BigInt(chainId) * constants_js_1$1.BIGINT_2;
    return { r, s, v };
}
signature.ecsign = ecsign;
function calculateSigRecovery(v, chainId) {
    if (v === constants_js_1$1.BIGINT_0 || v === constants_js_1$1.BIGINT_1)
        return v;
    if (chainId === undefined) {
        return v - constants_js_1$1.BIGINT_27;
    }
    return v - (chainId * constants_js_1$1.BIGINT_2 + BigInt(35));
}
signature.calculateSigRecovery = calculateSigRecovery;
function isValidSigRecovery(recovery) {
    return recovery === constants_js_1$1.BIGINT_0 || recovery === constants_js_1$1.BIGINT_1;
}
/**
 * ECDSA public key recovery from signature.
 * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions
 * @returns Recovered public key
 */
const ecrecover = function (msgHash, v, r, s, chainId) {
    const signature = (0, bytes_js_1$2.concatBytes)((0, bytes_js_1$2.setLengthLeft)(r, 32), (0, bytes_js_1$2.setLengthLeft)(s, 32));
    const recovery = calculateSigRecovery(v, chainId);
    if (!isValidSigRecovery(recovery)) {
        throw new Error('Invalid signature v value');
    }
    const sig = secp256k1_js_1.secp256k1.Signature.fromCompact(signature).addRecoveryBit(Number(recovery));
    const senderPubKey = sig.recoverPublicKey(msgHash);
    return senderPubKey.toRawBytes(false).slice(1);
};
signature.ecrecover = ecrecover;
/**
 * Convert signature parameters into the format of `eth_sign` RPC method.
 * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions
 * @returns Signature
 */
const toRpcSig = function (v, r, s, chainId) {
    const recovery = calculateSigRecovery(v, chainId);
    if (!isValidSigRecovery(recovery)) {
        throw new Error('Invalid signature v value');
    }
    // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin
    return (0, bytes_js_1$2.bytesToHex)((0, bytes_js_1$2.concatBytes)((0, bytes_js_1$2.setLengthLeft)(r, 32), (0, bytes_js_1$2.setLengthLeft)(s, 32), (0, bytes_js_1$2.toBytes)(v)));
};
signature.toRpcSig = toRpcSig;
/**
 * Convert signature parameters into the format of Compact Signature Representation (EIP-2098).
 * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions
 * @returns Signature
 */
const toCompactSig = function (v, r, s, chainId) {
    const recovery = calculateSigRecovery(v, chainId);
    if (!isValidSigRecovery(recovery)) {
        throw new Error('Invalid signature v value');
    }
    const ss = Uint8Array.from([...s]);
    if ((v > BigInt(28) && v % constants_js_1$1.BIGINT_2 === constants_js_1$1.BIGINT_1) || v === constants_js_1$1.BIGINT_1 || v === BigInt(28)) {
        ss[0] |= 0x80;
    }
    return (0, bytes_js_1$2.bytesToHex)((0, bytes_js_1$2.concatBytes)((0, bytes_js_1$2.setLengthLeft)(r, 32), (0, bytes_js_1$2.setLengthLeft)(ss, 32)));
};
signature.toCompactSig = toCompactSig;
/**
 * Convert signature format of the `eth_sign` RPC method to signature parameters
 *
 * NOTE: For an extracted `v` value < 27 (see Geth bug https://github.com/ethereum/go-ethereum/issues/2053)
 * `v + 27` is returned for the `v` value
 * NOTE: After EIP1559, `v` could be `0` or `1` but this function assumes
 * it's a signed message (EIP-191 or EIP-712) adding `27` at the end. Remove if needed.
 */
const fromRpcSig = function (sig) {
    const bytes = (0, bytes_js_1$2.toBytes)(sig);
    let r;
    let s;
    let v;
    if (bytes.length >= 65) {
        r = bytes.subarray(0, 32);
        s = bytes.subarray(32, 64);
        v = (0, bytes_js_1$2.bytesToBigInt)(bytes.subarray(64));
    }
    else if (bytes.length === 64) {
        // Compact Signature Representation (https://eips.ethereum.org/EIPS/eip-2098)
        r = bytes.subarray(0, 32);
        s = bytes.subarray(32, 64);
        v = BigInt((0, bytes_js_1$2.bytesToInt)(bytes.subarray(32, 33)) >> 7);
        s[0] &= 0x7f;
    }
    else {
        throw new Error('Invalid signature length');
    }
    // support both versions of `eth_sign` responses
    if (v < 27) {
        v = v + constants_js_1$1.BIGINT_27;
    }
    return {
        v,
        r,
        s,
    };
};
signature.fromRpcSig = fromRpcSig;
/**
 * Validate a ECDSA signature.
 * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions
 * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one
 */
const isValidSignature = function (v, r, s, homesteadOrLater = true, chainId) {
    if (r.length !== 32 || s.length !== 32) {
        return false;
    }
    if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {
        return false;
    }
    const rBigInt = (0, bytes_js_1$2.bytesToBigInt)(r);
    const sBigInt = (0, bytes_js_1$2.bytesToBigInt)(s);
    if (rBigInt === constants_js_1$1.BIGINT_0 ||
        rBigInt >= constants_js_1$1.SECP256K1_ORDER ||
        sBigInt === constants_js_1$1.BIGINT_0 ||
        sBigInt >= constants_js_1$1.SECP256K1_ORDER) {
        return false;
    }
    if (homesteadOrLater && sBigInt >= constants_js_1$1.SECP256K1_ORDER_DIV_2) {
        return false;
    }
    return true;
};
signature.isValidSignature = isValidSignature;
/**
 * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.
 * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`
 * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key
 * used to produce the signature.
 */
const hashPersonalMessage = function (message) {
    (0, helpers_js_1.assertIsBytes)(message);
    const prefix = (0, bytes_js_1$2.utf8ToBytes)(`\u0019Ethereum Signed Message:\n${message.length}`);
    return (0, keccak_js_1$3.keccak256)((0, bytes_js_1$2.concatBytes)(prefix, message));
};
signature.hashPersonalMessage = hashPersonalMessage;

var asyncEventEmitter = {};

/**
 * Ported to Typescript from original implementation below:
 * https://github.com/ahultgren/async-eventemitter -- MIT licensed
 *
 * Type Definitions based on work by: patarapolw <https://github.com/patarapolw> -- MIT licensed
 * that was contributed to Definitely Typed below:
 * https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/async-eventemitter
 */
Object.defineProperty(asyncEventEmitter, "__esModule", { value: true });
asyncEventEmitter.AsyncEventEmitter = void 0;
const events_1$1 = require$$0$3;
async function runInSeries(context, tasks, data) {
    let error;
    for await (const task of tasks) {
        try {
            if (task.length < 2) {
                //sync
                task.call(context, data);
            }
            else {
                await new Promise((resolve, reject) => {
                    task.call(context, data, (error) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            resolve();
                        }
                    });
                });
            }
        }
        catch (e) {
            error = e;
        }
    }
    if (error) {
        throw error;
    }
}
class AsyncEventEmitter extends events_1$1.EventEmitter {
    emit(event, ...args) {
        let [data, callback] = args;
        const self = this;
        let listeners = self._events[event] ?? [];
        // Optional data argument
        if (callback === undefined && typeof data === 'function') {
            callback = data;
            data = undefined;
        }
        // Special treatment of internal newListener and removeListener events
        if (event === 'newListener' || event === 'removeListener') {
            data = {
                event: data,
                fn: callback,
            };
            callback = undefined;
        }
        // A single listener is just a function not an array...
        listeners = Array.isArray(listeners) ? listeners : [listeners];
        runInSeries(self, listeners.slice(), data).then(callback).catch(callback);
        return self.listenerCount(event) > 0;
    }
    once(event, listener) {
        const self = this;
        let g;
        if (typeof listener !== 'function') {
            throw new TypeError('listener must be a function');
        }
        // Hack to support set arity
        if (listener.length >= 2) {
            g = function (e, next) {
                self.removeListener(event, g);
                void listener(e, next);
            };
        }
        else {
            g = function (e) {
                self.removeListener(event, g);
                void listener(e, g);
            };
        }
        self.on(event, g);
        return self;
    }
    first(event, listener) {
        let listeners = this._events[event] ?? [];
        // Contract
        if (typeof listener !== 'function') {
            throw new TypeError('listener must be a function');
        }
        // Listeners are not always an array
        if (!Array.isArray(listeners)) {
            this._events[event] = listeners = [listeners];
        }
        listeners.unshift(listener);
        return this;
    }
    before(event, target, listener) {
        return this.beforeOrAfter(event, target, listener);
    }
    after(event, target, listener) {
        return this.beforeOrAfter(event, target, listener, 'after');
    }
    beforeOrAfter(event, target, listener, beforeOrAfter) {
        let listeners = this._events[event] ?? [];
        let i;
        let index;
        const add = beforeOrAfter === 'after' ? 1 : 0;
        // Contract
        if (typeof listener !== 'function') {
            throw new TypeError('listener must be a function');
        }
        if (typeof target !== 'function') {
            throw new TypeError('target must be a function');
        }
        // Listeners are not always an array
        if (!Array.isArray(listeners)) {
            this._events[event] = listeners = [listeners];
        }
        index = listeners.length;
        for (i = listeners.length; i--;) {
            if (listeners[i] === target) {
                index = i + add;
                break;
            }
        }
        listeners.splice(index, 0, listener);
        return this;
    }
    on(event, listener) {
        return super.on(event, listener);
    }
    addListener(event, listener) {
        return super.addListener(event, listener);
    }
    prependListener(event, listener) {
        return super.prependListener(event, listener);
    }
    prependOnceListener(event, listener) {
        return super.prependOnceListener(event, listener);
    }
    removeAllListeners(event) {
        return super.removeAllListeners(event);
    }
    removeListener(event, listener) {
        return super.removeListener(event, listener);
    }
    eventNames() {
        return super.eventNames();
    }
    listeners(event) {
        return super.listeners(event);
    }
    listenerCount(event) {
        return super.listenerCount(event);
    }
    getMaxListeners() {
        return super.getMaxListeners();
    }
    setMaxListeners(maxListeners) {
        return super.setMaxListeners(maxListeners);
    }
}
asyncEventEmitter.AsyncEventEmitter = AsyncEventEmitter;

var blobs$1 = {};

var sha256 = {};

Object.defineProperty(sha256, "__esModule", { value: true });
sha256.sha256 = void 0;
const sha256_1 = sha256$1;
const utils_js_1$1 = utilsExports;
sha256.sha256 = (0, utils_js_1$1.wrapHash)(sha256_1.sha256);

var kzg$1 = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.initKZG = exports.kzg = void 0;
	function kzgNotLoaded() {
	    throw Error('kzg library not loaded');
	}
	// eslint-disable-next-line import/no-mutable-exports
	exports.kzg = {
	    loadTrustedSetup: kzgNotLoaded,
	    blobToKzgCommitment: kzgNotLoaded,
	    computeBlobKzgProof: kzgNotLoaded,
	    verifyKzgProof: kzgNotLoaded,
	    verifyBlobKzgProofBatch: kzgNotLoaded,
	};
	/**
	 * @param kzgLib a KZG implementation (defaults to c-kzg)
	 * @param trustedSetupPath the full path (e.g. "/home/linux/devnet4.txt") to a kzg trusted setup text file
	 */
	function initKZG(kzgLib, trustedSetupPath) {
	    exports.kzg = kzgLib;
	    exports.kzg.loadTrustedSetup(trustedSetupPath);
	}
	exports.initKZG = initKZG;
	
} (kzg$1));

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.commitmentsToVersionedHashes = exports.computeVersionedHash = exports.blobsToProofs = exports.blobsToCommitments = exports.getBlobs = void 0;
	const sha256_js_1 = sha256;
	const bytes_js_1 = requireBytes();
	const kzg_js_1 = kzg$1;
	/**
	 * These utilities for constructing blobs are borrowed from https://github.com/Inphi/eip4844-interop.git
	 */
	const BYTES_PER_FIELD_ELEMENT = 32;
	const FIELD_ELEMENTS_PER_BLOB = 4096;
	const USEFUL_BYTES_PER_BLOB = 32 * FIELD_ELEMENTS_PER_BLOB;
	const MAX_BLOBS_PER_TX = 2;
	const MAX_USEFUL_BYTES_PER_TX = USEFUL_BYTES_PER_BLOB * MAX_BLOBS_PER_TX - 1;
	const BLOB_SIZE = BYTES_PER_FIELD_ELEMENT * FIELD_ELEMENTS_PER_BLOB;
	function get_padded(data, blobs_len) {
	    const pdata = new Uint8Array(blobs_len * USEFUL_BYTES_PER_BLOB).fill(0);
	    pdata.set(data);
	    pdata[data.byteLength] = 0x80;
	    return pdata;
	}
	function get_blob(data) {
	    const blob = new Uint8Array(BLOB_SIZE);
	    for (let i = 0; i < FIELD_ELEMENTS_PER_BLOB; i++) {
	        const chunk = new Uint8Array(32);
	        chunk.set(data.subarray(i * 31, (i + 1) * 31), 0);
	        blob.set(chunk, i * 32);
	    }
	    return blob;
	}
	const getBlobs = (input) => {
	    const data = (0, bytes_js_1.utf8ToBytes)(input);
	    const len = data.byteLength;
	    if (len === 0) {
	        throw Error('invalid blob data');
	    }
	    if (len > MAX_USEFUL_BYTES_PER_TX) {
	        throw Error('blob data is too large');
	    }
	    const blobs_len = Math.ceil(len / USEFUL_BYTES_PER_BLOB);
	    const pdata = get_padded(data, blobs_len);
	    const blobs = [];
	    for (let i = 0; i < blobs_len; i++) {
	        const chunk = pdata.subarray(i * USEFUL_BYTES_PER_BLOB, (i + 1) * USEFUL_BYTES_PER_BLOB);
	        const blob = get_blob(chunk);
	        blobs.push(blob);
	    }
	    return blobs;
	};
	exports.getBlobs = getBlobs;
	const blobsToCommitments = (blobs) => {
	    const commitments = [];
	    for (const blob of blobs) {
	        commitments.push(kzg_js_1.kzg.blobToKzgCommitment(blob));
	    }
	    return commitments;
	};
	exports.blobsToCommitments = blobsToCommitments;
	const blobsToProofs = (blobs, commitments) => {
	    const proofs = blobs.map((blob, ctx) => kzg_js_1.kzg.computeBlobKzgProof(blob, commitments[ctx]));
	    return proofs;
	};
	exports.blobsToProofs = blobsToProofs;
	/**
	 * Converts a vector commitment for a given data blob to its versioned hash.  For 4844, this version
	 * number will be 0x01 for KZG vector commitments but could be different if future vector commitment
	 * types are introduced
	 * @param commitment a vector commitment to a blob
	 * @param blobCommitmentVersion the version number corresponding to the type of vector commitment
	 * @returns a versioned hash corresponding to a given blob vector commitment
	 */
	const computeVersionedHash = (commitment, blobCommitmentVersion) => {
	    const computedVersionedHash = new Uint8Array(32);
	    computedVersionedHash.set([blobCommitmentVersion], 0);
	    computedVersionedHash.set((0, sha256_js_1.sha256)(commitment).subarray(1), 1);
	    return computedVersionedHash;
	};
	exports.computeVersionedHash = computeVersionedHash;
	/**
	 * Generate an array of versioned hashes from corresponding kzg commitments
	 * @param commitments array of kzg commitments
	 * @returns array of versioned hashes
	 * Note: assumes KZG commitments (version 1 version hashes)
	 */
	const commitmentsToVersionedHashes = (commitments) => {
	    const hashes = [];
	    for (const commitment of commitments) {
	        hashes.push((0, exports.computeVersionedHash)(commitment, 0x01));
	    }
	    return hashes;
	};
	exports.commitmentsToVersionedHashes = commitmentsToVersionedHashes;
	
} (blobs$1));

var genesis = {};

Object.defineProperty(genesis, "__esModule", { value: true });
genesis.parseGethGenesisState = void 0;
const bytes_js_1$1 = requireBytes();
const internal_js_1 = requireInternal();
/**
 * Parses the geth genesis state into Blockchain {@link GenesisState}
 * @param json representing the `alloc` key in a Geth genesis file
 */
function parseGethGenesisState(json) {
    const state = {};
    for (let address of Object.keys(json.alloc)) {
        let { balance, code, storage, nonce } = json.alloc[address];
        // create a map with lowercase for easy lookups
        address = (0, bytes_js_1$1.addHexPrefix)(address.toLowerCase());
        balance = (0, internal_js_1.isHexPrefixed)(balance) ? balance : (0, bytes_js_1$1.bigIntToHex)(BigInt(balance));
        code = code !== undefined ? (0, bytes_js_1$1.addHexPrefix)(code) : undefined;
        storage = storage !== undefined ? Object.entries(storage) : undefined;
        nonce = nonce !== undefined ? (0, bytes_js_1$1.addHexPrefix)(nonce) : undefined;
        state[address] = [balance, code, storage, nonce];
    }
    return state;
}
genesis.parseGethGenesisState = parseGethGenesisState;

var lock = {};

Object.defineProperty(lock, "__esModule", { value: true });
lock.Lock = void 0;
// Based on https://github.com/jsoendermann/semaphore-async-await/blob/master/src/Semaphore.ts
class Lock {
    constructor() {
        this.permits = 1;
        this.promiseResolverQueue = [];
    }
    /**
     * Returns a promise used to wait for a permit to become available. This method should be awaited on.
     * @returns  A promise that gets resolved when execution is allowed to proceed.
     */
    async acquire() {
        if (this.permits > 0) {
            this.permits -= 1;
            return Promise.resolve(true);
        }
        // If there is no permit available, we return a promise that resolves once the semaphore gets
        // signaled enough times that permits is equal to one.
        return new Promise((resolver) => this.promiseResolverQueue.push(resolver));
    }
    /**
     * Increases the number of permits by one. If there are other functions waiting, one of them will
     * continue to execute in a future iteration of the event loop.
     */
    release() {
        this.permits += 1;
        if (this.permits > 1 && this.promiseResolverQueue.length > 0) {
            // eslint-disable-next-line no-console
            console.warn('Lock.permits should never be > 0 when there is someone waiting.');
        }
        else if (this.permits === 1 && this.promiseResolverQueue.length > 0) {
            // If there is someone else waiting, immediately consume the permit that was released
            // at the beginning of this function and let the waiting function resume.
            this.permits -= 1;
            const nextResolver = this.promiseResolverQueue.shift();
            if (nextResolver) {
                nextResolver(true);
            }
        }
    }
}
lock.Lock = Lock;

var mapDB = {};

Object.defineProperty(mapDB, "__esModule", { value: true });
mapDB.MapDB = void 0;
const bytes_js_1 = requireBytes();
class MapDB {
    constructor(database) {
        this._database = database ?? new Map();
    }
    async get(key) {
        const dbKey = key instanceof Uint8Array ? (0, bytes_js_1.bytesToUnprefixedHex)(key) : key.toString();
        return this._database.get(dbKey);
    }
    async put(key, val) {
        const dbKey = key instanceof Uint8Array ? (0, bytes_js_1.bytesToUnprefixedHex)(key) : key.toString();
        this._database.set(dbKey, val);
    }
    async del(key) {
        const dbKey = key instanceof Uint8Array ? (0, bytes_js_1.bytesToUnprefixedHex)(key) : key.toString();
        this._database.delete(dbKey);
    }
    async batch(opStack) {
        for (const op of opStack) {
            if (op.type === 'del') {
                await this.del(op.key);
            }
            if (op.type === 'put') {
                await this.put(op.key, op.value);
            }
        }
    }
    /**
     * Note that the returned shallow copy will share the underlying database with the original
     *
     * @returns DB
     */
    shallowCopy() {
        return new MapDB(this._database);
    }
    open() {
        return Promise.resolve();
    }
}
mapDB.MapDB = MapDB;

var provider = {};

Object.defineProperty(provider, "__esModule", { value: true });
provider.getProvider = provider.fetchFromProvider = void 0;
/**
 * Makes a simple RPC call to a remote Ethereum JSON-RPC provider and passes through the response.
 * No parameter or response validation is done.
 *
 * @param url the URL for the JSON RPC provider
 * @param params the parameters for the JSON-RPC method - refer to
 * https://ethereum.org/en/developers/docs/apis/json-rpc/ for details on RPC methods
 * @returns the `result` field from the JSON-RPC response
 * @example
 * ```ts
 * const provider = 'https://mainnet.infura.io/v3/...'
 * const params = {
 *   method: 'eth_getBlockByNumber',
 *   params: ['latest', false],
 * }
 *  const block = await fetchFromProvider(provider, params)
 */
const fetchFromProvider = async (url, params) => {
    const data = JSON.stringify({
        method: params.method,
        params: params.params,
        jsonrpc: '2.0',
        id: 1,
    });
    const res = await fetch(url, {
        headers: {
            'content-type': 'application/json',
        },
        method: 'POST',
        body: data,
    });
    if (!res.ok) {
        throw new Error(`JSONRpcError: ${JSON.stringify({
            method: params.method,
            status: res.status,
            message: await res.text().catch(() => {
                return 'Could not parse error message likely because of a network error';
            }),
        }, null, 2)}`);
    }
    const json = await res.json();
    // TODO we should check json.error here
    return json.result;
};
provider.fetchFromProvider = fetchFromProvider;
/**
 *
 * @param provider a URL string or {@link EthersProvider}
 * @returns the extracted URL string for the JSON-RPC Provider
 */
const getProvider = (provider) => {
    if (typeof provider === 'string') {
        return provider;
    }
    else if (typeof provider === 'object' && provider._getConnection !== undefined) {
        return provider._getConnection().url;
    }
    else {
        throw new Error('Must provide valid provider URL or Web3Provider');
    }
};
provider.getProvider = getProvider;

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.toAscii = exports.stripHexPrefix = exports.padToEven = exports.isHexString = exports.isHexPrefixed = exports.getKeys = exports.getBinarySize = exports.fromUtf8 = exports.fromAscii = exports.arrayContainsArray = void 0;
	/**
	 * Constants
	 */
	__exportStar(constants$1, exports);
	/**
	 * Units helpers
	 */
	__exportStar(units, exports);
	/**
	 * Account class and helper functions
	 */
	__exportStar(account, exports);
	/**
	 * Address type
	 */
	__exportStar(address, exports);
	/**
	 * DB type
	 */
	__exportStar(db, exports);
	/**
	 * Withdrawal type
	 */
	__exportStar(withdrawal, exports);
	/**
	 * ECDSA signature
	 */
	__exportStar(signature, exports);
	/**
	 * Utilities for manipulating bytes, Uint8Arrays, etc.
	 */
	__exportStar(requireBytes(), exports);
	/**
	 * Helpful TypeScript types
	 */
	__exportStar(types$2, exports);
	/**
	 * Export ethjs-util methods
	 */
	__exportStar(asyncEventEmitter, exports);
	__exportStar(blobs$1, exports);
	__exportStar(genesis, exports);
	var internal_js_1 = requireInternal();
	Object.defineProperty(exports, "arrayContainsArray", { enumerable: true, get: function () { return internal_js_1.arrayContainsArray; } });
	Object.defineProperty(exports, "fromAscii", { enumerable: true, get: function () { return internal_js_1.fromAscii; } });
	Object.defineProperty(exports, "fromUtf8", { enumerable: true, get: function () { return internal_js_1.fromUtf8; } });
	Object.defineProperty(exports, "getBinarySize", { enumerable: true, get: function () { return internal_js_1.getBinarySize; } });
	Object.defineProperty(exports, "getKeys", { enumerable: true, get: function () { return internal_js_1.getKeys; } });
	Object.defineProperty(exports, "isHexPrefixed", { enumerable: true, get: function () { return internal_js_1.isHexPrefixed; } });
	Object.defineProperty(exports, "isHexString", { enumerable: true, get: function () { return internal_js_1.isHexString; } });
	Object.defineProperty(exports, "padToEven", { enumerable: true, get: function () { return internal_js_1.padToEven; } });
	Object.defineProperty(exports, "stripHexPrefix", { enumerable: true, get: function () { return internal_js_1.stripHexPrefix; } });
	Object.defineProperty(exports, "toAscii", { enumerable: true, get: function () { return internal_js_1.toAscii; } });
	__exportStar(kzg$1, exports);
	__exportStar(lock, exports);
	__exportStar(mapDB, exports);
	__exportStar(provider, exports);
	
} (cjs$2));

var baseTransaction = {};

var cjs$1 = {};

var common = {};

var chains = {};

Object.defineProperty(chains, "__esModule", { value: true });
chains.chains = void 0;
chains.chains = {
    mainnet: {
        name: 'mainnet',
        chainId: 1,
        networkId: 1,
        defaultHardfork: 'shanghai',
        consensus: {
            type: 'pow',
            algorithm: 'ethash',
            ethash: {},
        },
        comment: 'The Ethereum main chain',
        url: 'https://ethstats.net/',
        genesis: {
            gasLimit: 5000,
            difficulty: 17179869184,
            nonce: '0x0000000000000042',
            extraData: '0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa',
        },
        hardforks: [
            {
                name: 'chainstart',
                block: 0,
                forkHash: '0xfc64ec04',
            },
            {
                name: 'homestead',
                block: 1150000,
                forkHash: '0x97c2c34c',
            },
            {
                name: 'dao',
                block: 1920000,
                forkHash: '0x91d1f948',
            },
            {
                name: 'tangerineWhistle',
                block: 2463000,
                forkHash: '0x7a64da13',
            },
            {
                name: 'spuriousDragon',
                block: 2675000,
                forkHash: '0x3edd5b10',
            },
            {
                name: 'byzantium',
                block: 4370000,
                forkHash: '0xa00bc324',
            },
            {
                name: 'constantinople',
                block: 7280000,
                forkHash: '0x668db0af',
            },
            {
                name: 'petersburg',
                block: 7280000,
                forkHash: '0x668db0af',
            },
            {
                name: 'istanbul',
                block: 9069000,
                forkHash: '0x879d6e30',
            },
            {
                name: 'muirGlacier',
                block: 9200000,
                forkHash: '0xe029e991',
            },
            {
                name: 'berlin',
                block: 12244000,
                forkHash: '0x0eb440f6',
            },
            {
                name: 'london',
                block: 12965000,
                forkHash: '0xb715077d',
            },
            {
                name: 'arrowGlacier',
                block: 13773000,
                forkHash: '0x20c327fc',
            },
            {
                name: 'grayGlacier',
                block: 15050000,
                forkHash: '0xf0afd0e3',
            },
            {
                // The forkHash will remain same as mergeForkIdTransition is post merge
                // terminal block: https://etherscan.io/block/15537393
                name: 'paris',
                ttd: '58750000000000000000000',
                block: 15537394,
                forkHash: '0xf0afd0e3',
            },
            {
                name: 'mergeForkIdTransition',
                block: null,
                forkHash: null,
            },
            {
                name: 'shanghai',
                block: null,
                timestamp: '1681338455',
                forkHash: '0xdce96c2d',
            },
            {
                name: 'cancun',
                block: null,
                timestamp: '1710338135',
                forkHash: '0x9f3d2254',
            },
        ],
        bootstrapNodes: [
            {
                ip: '18.138.108.67',
                port: 30303,
                id: 'd860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666',
                location: 'ap-southeast-1-001',
                comment: 'bootnode-aws-ap-southeast-1-001',
            },
            {
                ip: '3.209.45.79',
                port: 30303,
                id: '22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de',
                location: 'us-east-1-001',
                comment: 'bootnode-aws-us-east-1-001',
            },
            {
                ip: '65.108.70.101',
                port: 30303,
                id: '2b252ab6a1d0f971d9722cb839a42cb81db019ba44c08754628ab4a823487071b5695317c8ccd085219c3a03af063495b2f1da8d18218da2d6a82981b45e6ffc',
                location: 'eu-west-1-001',
                comment: 'bootnode-hetzner-hel',
            },
            {
                ip: '157.90.35.166',
                port: 30303,
                id: '4aeb4ab6c14b23e2c4cfdce879c04b0748a20d8e9b59e25ded2a08143e265c6c25936e74cbc8e641e3312ca288673d91f2f93f8e277de3cfa444ecdaaf982052',
                location: 'eu-central-1-001',
                comment: 'bootnode-hetzner-fsn',
            },
        ],
        dnsNetworks: [
            'enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net',
        ],
    },
    goerli: {
        name: 'goerli',
        chainId: 5,
        networkId: 5,
        defaultHardfork: 'shanghai',
        consensus: {
            type: 'poa',
            algorithm: 'clique',
            clique: {
                period: 15,
                epoch: 30000,
            },
        },
        comment: 'Cross-client PoA test network',
        url: 'https://github.com/goerli/testnet',
        genesis: {
            timestamp: '0x5c51a607',
            gasLimit: 10485760,
            difficulty: 1,
            nonce: '0x0000000000000000',
            extraData: '0x22466c6578692069732061207468696e6722202d204166726900000000000000e0a2bd4258d2768837baa26a28fe71dc079f84c70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
        },
        hardforks: [
            {
                name: 'chainstart',
                block: 0,
                forkHash: '0xa3f5ab08',
            },
            {
                name: 'homestead',
                block: 0,
                forkHash: '0xa3f5ab08',
            },
            {
                name: 'tangerineWhistle',
                block: 0,
                forkHash: '0xa3f5ab08',
            },
            {
                name: 'spuriousDragon',
                block: 0,
                forkHash: '0xa3f5ab08',
            },
            {
                name: 'byzantium',
                block: 0,
                forkHash: '0xa3f5ab08',
            },
            {
                name: 'constantinople',
                block: 0,
                forkHash: '0xa3f5ab08',
            },
            {
                name: 'petersburg',
                block: 0,
                forkHash: '0xa3f5ab08',
            },
            {
                name: 'istanbul',
                block: 1561651,
                forkHash: '0xc25efa5c',
            },
            {
                name: 'berlin',
                block: 4460644,
                forkHash: '0x757a1c47',
            },
            {
                name: 'london',
                block: 5062605,
                forkHash: '0xb8c6299d',
            },
            {
                // The forkHash will remain same as mergeForkIdTransition is post merge,
                // terminal block: https://goerli.etherscan.io/block/7382818
                name: 'paris',
                ttd: '10790000',
                block: 7382819,
                forkHash: '0xb8c6299d',
            },
            {
                name: 'mergeForkIdTransition',
                block: null,
                forkHash: null,
            },
            {
                name: 'shanghai',
                block: null,
                timestamp: '1678832736',
                forkHash: '0xf9843abf',
            },
            {
                name: 'cancun',
                block: null,
                timestamp: '1705473120',
                forkHash: '0x70cc14e2',
            },
        ],
        bootstrapNodes: [
            {
                ip: '51.141.78.53',
                port: 30303,
                id: '011f758e6552d105183b1761c5e2dea0111bc20fd5f6422bc7f91e0fabbec9a6595caf6239b37feb773dddd3f87240d99d859431891e4a642cf2a0a9e6cbb98a',
                location: '',
                comment: 'Upstream bootnode 1',
            },
            {
                ip: '13.93.54.137',
                port: 30303,
                id: '176b9417f511d05b6b2cf3e34b756cf0a7096b3094572a8f6ef4cdcb9d1f9d00683bf0f83347eebdf3b81c3521c2332086d9592802230bf528eaf606a1d9677b',
                location: '',
                comment: 'Upstream bootnode 2',
            },
            {
                ip: '94.237.54.114',
                port: 30313,
                id: '46add44b9f13965f7b9875ac6b85f016f341012d84f975377573800a863526f4da19ae2c620ec73d11591fa9510e992ecc03ad0751f53cc02f7c7ed6d55c7291',
                location: '',
                comment: 'Upstream bootnode 3',
            },
            {
                ip: '18.218.250.66',
                port: 30313,
                id: 'b5948a2d3e9d486c4d75bf32713221c2bd6cf86463302339299bd227dc2e276cd5a1c7ca4f43a0e9122fe9af884efed563bd2a1fd28661f3b5f5ad7bf1de5949',
                location: '',
                comment: 'Upstream bootnode 4',
            },
            {
                ip: '3.11.147.67',
                port: 30303,
                id: 'a61215641fb8714a373c80edbfa0ea8878243193f57c96eeb44d0bc019ef295abd4e044fd619bfc4c59731a73fb79afe84e9ab6da0c743ceb479cbb6d263fa91',
                location: '',
                comment: 'Ethereum Foundation bootnode',
            },
            {
                ip: '51.15.116.226',
                port: 30303,
                id: 'a869b02cec167211fb4815a82941db2e7ed2936fd90e78619c53eb17753fcf0207463e3419c264e2a1dd8786de0df7e68cf99571ab8aeb7c4e51367ef186b1dd',
                location: '',
                comment: 'Goerli Initiative bootnode',
            },
            {
                ip: '51.15.119.157',
                port: 30303,
                id: '807b37ee4816ecf407e9112224494b74dd5933625f655962d892f2f0f02d7fbbb3e2a94cf87a96609526f30c998fd71e93e2f53015c558ffc8b03eceaf30ee33',
                location: '',
                comment: 'Goerli Initiative bootnode',
            },
            {
                ip: '51.15.119.157',
                port: 40303,
                id: 'a59e33ccd2b3e52d578f1fbd70c6f9babda2650f0760d6ff3b37742fdcdfdb3defba5d56d315b40c46b70198c7621e63ffa3f987389c7118634b0fefbbdfa7fd',
                location: '',
                comment: 'Goerli Initiative bootnode',
            },
        ],
        dnsNetworks: [
            'enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.goerli.ethdisco.net',
        ],
    },
    sepolia: {
        name: 'sepolia',
        chainId: 11155111,
        networkId: 11155111,
        defaultHardfork: 'shanghai',
        consensus: {
            type: 'pow',
            algorithm: 'ethash',
            ethash: {},
        },
        comment: 'PoW test network to replace Ropsten',
        url: 'https://github.com/ethereum/go-ethereum/pull/23730',
        genesis: {
            timestamp: '0x6159af19',
            gasLimit: 30000000,
            difficulty: 131072,
            nonce: '0x0000000000000000',
            extraData: '0x5365706f6c69612c20417468656e732c204174746963612c2047726565636521',
        },
        hardforks: [
            {
                name: 'chainstart',
                block: 0,
                forkHash: '0xfe3366e7',
            },
            {
                name: 'homestead',
                block: 0,
                forkHash: '0xfe3366e7',
            },
            {
                name: 'tangerineWhistle',
                block: 0,
                forkHash: '0xfe3366e7',
            },
            {
                name: 'spuriousDragon',
                block: 0,
                forkHash: '0xfe3366e7',
            },
            {
                name: 'byzantium',
                block: 0,
                forkHash: '0xfe3366e7',
            },
            {
                name: 'constantinople',
                block: 0,
                forkHash: '0xfe3366e7',
            },
            {
                name: 'petersburg',
                block: 0,
                forkHash: '0xfe3366e7',
            },
            {
                name: 'istanbul',
                block: 0,
                forkHash: '0xfe3366e7',
            },
            {
                name: 'muirGlacier',
                block: 0,
                forkHash: '0xfe3366e7',
            },
            {
                name: 'berlin',
                block: 0,
                forkHash: '0xfe3366e7',
            },
            {
                name: 'london',
                block: 0,
                forkHash: '0xfe3366e7',
            },
            {
                // The forkHash will remain same as mergeForkIdTransition is post merge,
                // terminal block: https://sepolia.etherscan.io/block/1450408
                name: 'paris',
                ttd: '17000000000000000',
                block: 1450409,
                forkHash: '0xfe3366e7',
            },
            {
                name: 'mergeForkIdTransition',
                block: 1735371,
                forkHash: '0xb96cbd13',
            },
            {
                name: 'shanghai',
                block: null,
                timestamp: '1677557088',
                forkHash: '0xf7f9bc08',
            },
            {
                name: 'cancun',
                block: null,
                timestamp: '1706655072',
                forkHash: '0x88cf81d9',
            },
        ],
        bootstrapNodes: [
            {
                ip: '18.168.182.86',
                port: 30303,
                id: '9246d00bc8fd1742e5ad2428b80fc4dc45d786283e05ef6edbd9002cbc335d40998444732fbe921cb88e1d2c73d1b1de53bae6a2237996e9bfe14f871baf7066',
                location: '',
                comment: 'geth',
            },
            {
                ip: '52.14.151.177',
                port: 30303,
                id: 'ec66ddcf1a974950bd4c782789a7e04f8aa7110a72569b6e65fcd51e937e74eed303b1ea734e4d19cfaec9fbff9b6ee65bf31dcb50ba79acce9dd63a6aca61c7',
                location: '',
                comment: 'besu',
            },
            {
                ip: '165.22.196.173',
                port: 30303,
                id: 'ce970ad2e9daa9e14593de84a8b49da3d54ccfdf83cbc4fe519cb8b36b5918ed4eab087dedd4a62479b8d50756b492d5f762367c8d20329a7854ec01547568a6',
                location: '',
                comment: 'EF',
            },
            {
                ip: '65.108.95.67',
                port: 30303,
                id: '075503b13ed736244896efcde2a992ec0b451357d46cb7a8132c0384721742597fc8f0d91bbb40bb52e7d6e66728d36a1fda09176294e4a30cfac55dcce26bc6',
                location: '',
                comment: 'lodestar',
            },
        ],
        dnsNetworks: [
            'enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.sepolia.ethdisco.net',
        ],
    },
    holesky: {
        name: 'holesky',
        chainId: 17000,
        networkId: 17000,
        defaultHardfork: 'paris',
        consensus: {
            type: 'pos',
            algorithm: 'casper',
        },
        comment: 'PoS test network to replace Goerli',
        url: 'https://github.com/eth-clients/holesky/',
        genesis: {
            baseFeePerGas: '0x3B9ACA00',
            difficulty: '0x01',
            extraData: '0x',
            gasLimit: '0x17D7840',
            nonce: '0x0000000000001234',
            timestamp: '0x65156994',
        },
        hardforks: [
            {
                name: 'chainstart',
                block: 0,
                forkHash: '0xc61a6098',
            },
            {
                name: 'homestead',
                block: 0,
                forkHash: '0xc61a6098',
            },
            {
                name: 'tangerineWhistle',
                block: 0,
                forkHash: '0xc61a6098',
            },
            {
                name: 'spuriousDragon',
                block: 0,
                forkHash: '0xc61a6098',
            },
            {
                name: 'byzantium',
                block: 0,
                forkHash: '0xc61a6098',
            },
            {
                name: 'constantinople',
                block: 0,
                forkHash: '0xc61a6098',
            },
            {
                name: 'petersburg',
                block: 0,
                forkHash: '0xc61a6098',
            },
            {
                name: 'istanbul',
                block: 0,
                forkHash: '0xc61a6098',
            },
            {
                name: 'muirGlacier',
                block: 0,
                forkHash: '0xc61a6098',
            },
            {
                name: 'berlin',
                block: 0,
                forkHash: '0xc61a6098',
            },
            {
                name: 'london',
                block: 0,
                forkHash: '0xc61a6098',
            },
            {
                name: 'paris',
                ttd: '0',
                block: 0,
                forkHash: '0xc61a6098',
            },
            {
                name: 'mergeForkIdTransition',
                block: 0,
                forkHash: '0xc61a6098',
            },
            {
                name: 'shanghai',
                block: null,
                timestamp: '1696000704',
                forkHash: '0xfd4f016b',
            },
            {
                name: 'cancun',
                block: null,
                timestamp: '1707305664',
                forkHash: '0x9b192ad0',
            },
        ],
        bootstrapNodes: [
            {
                ip: '146.190.13.128',
                port: 30303,
                id: 'ac906289e4b7f12df423d654c5a962b6ebe5b3a74cc9e06292a85221f9a64a6f1cfdd6b714ed6dacef51578f92b34c60ee91e9ede9c7f8fadc4d347326d95e2b',
                location: '',
                comment: 'bootnode 1',
            },
            {
                ip: '178.128.136.233',
                port: 30303,
                id: 'a3435a0155a3e837c02f5e7f5662a2f1fbc25b48e4dc232016e1c51b544cb5b4510ef633ea3278c0e970fa8ad8141e2d4d0f9f95456c537ff05fdf9b31c15072',
                location: '',
                comment: 'bootnode 2',
            },
        ],
        dnsNetworks: [
            'enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.holesky.ethdisco.net',
        ],
    },
    kaustinen: {
        name: 'kaustinen',
        chainId: 69420,
        networkId: 69420,
        defaultHardfork: 'prague',
        consensus: {
            type: 'pos',
            algorithm: 'casper',
        },
        comment: 'Verkle kaustinen testnet 2 (likely temporary, do not hard-wire into production code)',
        url: 'https://github.com/eth-clients/kaustinen/',
        genesis: {
            difficulty: '0x01',
            extraData: '0x',
            gasLimit: '0x17D7840',
            nonce: '0x0000000000001234',
            timestamp: '0x65608a64',
        },
        hardforks: [
            {
                name: 'chainstart',
                block: 0,
            },
            {
                name: 'homestead',
                block: 0,
            },
            {
                name: 'tangerineWhistle',
                block: 0,
            },
            {
                name: 'spuriousDragon',
                block: 0,
            },
            {
                name: 'byzantium',
                block: 0,
            },
            {
                name: 'constantinople',
                block: 0,
            },
            {
                name: 'petersburg',
                block: 0,
            },
            {
                name: 'istanbul',
                block: 0,
            },
            {
                name: 'berlin',
                block: 0,
            },
            {
                name: 'london',
                block: 0,
            },
            {
                name: 'paris',
                ttd: '0',
                block: 0,
            },
            {
                name: 'mergeForkIdTransition',
                block: 0,
            },
            {
                name: 'shanghai',
                block: null,
                timestamp: '0',
            },
            {
                name: 'prague',
                block: null,
                timestamp: '1700825700',
            },
        ],
        bootstrapNodes: [],
        dnsNetworks: [],
    },
};

var crc$1 = {};

Object.defineProperty(crc$1, "__esModule", { value: true });
crc$1.crc32 = void 0;
/**
 * This code was duplicated from https://github.com/alexgorbatchev/crc/ under MIT license.
 * The code below is copied largely unmodified from the below file
 * https://github.com/alexgorbatchev/crc/blob/31fc3853e417b5fb5ec83335428805842575f699/src/calculators/crc32.ts
 */
let TABLE = [
    0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3,
    0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91,
    0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,
    0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5,
    0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,
    0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,
    0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f,
    0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d,
    0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,
    0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,
    0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457,
    0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,
    0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb,
    0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9,
    0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,
    0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad,
    0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683,
    0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,
    0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7,
    0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,
    0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,
    0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79,
    0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f,
    0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,
    0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,
    0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21,
    0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,
    0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45,
    0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db,
    0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,
    0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf,
    0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d,
];
if (typeof Int32Array !== 'undefined') {
    TABLE = new Int32Array(TABLE);
}
const crc = (current, previous) => {
    let crc = previous === 0 ? 0 : ~~previous ^ -1;
    for (let index = 0; index < current.length; index++) {
        crc = TABLE[(crc ^ current[index]) & 0xff] ^ (crc >>> 8);
    }
    return crc ^ -1;
};
const crc32 = (current, previous) => {
    return crc(current, previous) >>> 0;
};
crc$1.crc32 = crc32;

var eips = {};

var enums = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.CustomChain = exports.ConsensusAlgorithm = exports.ConsensusType = exports.Hardfork = exports.ChainGenesis = exports.Chain = void 0;
	const util_1 = cjs$2;
	var Chain;
	(function (Chain) {
	    Chain[Chain["Mainnet"] = 1] = "Mainnet";
	    Chain[Chain["Goerli"] = 5] = "Goerli";
	    Chain[Chain["Sepolia"] = 11155111] = "Sepolia";
	    Chain[Chain["Holesky"] = 17000] = "Holesky";
	    Chain[Chain["Kaustinen"] = 69420] = "Kaustinen";
	})(Chain = exports.Chain || (exports.Chain = {}));
	// Having this info as record will force typescript to make sure no chain is missed
	/**
	 * GenesisState info about well known ethereum chains
	 */
	exports.ChainGenesis = {
	    [Chain.Mainnet]: {
	        name: 'mainnet',
	        blockNumber: util_1.BIGINT_0,
	        stateRoot: (0, util_1.hexToBytes)('0xd7f8974fb5ac78d9ac099b9ad5018bedc2ce0a72dad1827a1709da30580f0544'),
	    },
	    [Chain.Goerli]: {
	        name: 'goerli',
	        blockNumber: util_1.BIGINT_0,
	        stateRoot: (0, util_1.hexToBytes)('0x5d6cded585e73c4e322c30c2f782a336316f17dd85a4863b9d838d2d4b8b3008'),
	    },
	    [Chain.Sepolia]: {
	        name: 'sepolia',
	        blockNumber: util_1.BIGINT_0,
	        stateRoot: (0, util_1.hexToBytes)('0x5eb6e371a698b8d68f665192350ffcecbbbf322916f4b51bd79bb6887da3f494'),
	    },
	    [Chain.Holesky]: {
	        name: 'holesky',
	        blockNumber: util_1.BIGINT_0,
	        stateRoot: (0, util_1.hexToBytes)('0x69d8c9d72f6fa4ad42d4702b433707212f90db395eb54dc20bc85de253788783'),
	    },
	    [Chain.Kaustinen]: {
	        name: 'kaustinen',
	        blockNumber: util_1.BIGINT_0,
	        stateRoot: (0, util_1.hexToBytes)('0x5e8519756841faf0b2c28951c451b61a4b407b70a5ce5b57992f4bec973173ff'),
	    },
	};
	(function (Hardfork) {
	    Hardfork["Chainstart"] = "chainstart";
	    Hardfork["Homestead"] = "homestead";
	    Hardfork["Dao"] = "dao";
	    Hardfork["TangerineWhistle"] = "tangerineWhistle";
	    Hardfork["SpuriousDragon"] = "spuriousDragon";
	    Hardfork["Byzantium"] = "byzantium";
	    Hardfork["Constantinople"] = "constantinople";
	    Hardfork["Petersburg"] = "petersburg";
	    Hardfork["Istanbul"] = "istanbul";
	    Hardfork["MuirGlacier"] = "muirGlacier";
	    Hardfork["Berlin"] = "berlin";
	    Hardfork["London"] = "london";
	    Hardfork["ArrowGlacier"] = "arrowGlacier";
	    Hardfork["GrayGlacier"] = "grayGlacier";
	    Hardfork["MergeForkIdTransition"] = "mergeForkIdTransition";
	    Hardfork["Paris"] = "paris";
	    Hardfork["Shanghai"] = "shanghai";
	    Hardfork["Cancun"] = "cancun";
	    Hardfork["Prague"] = "prague";
	})(exports.Hardfork || (exports.Hardfork = {}));
	(function (ConsensusType) {
	    ConsensusType["ProofOfStake"] = "pos";
	    ConsensusType["ProofOfWork"] = "pow";
	    ConsensusType["ProofOfAuthority"] = "poa";
	})(exports.ConsensusType || (exports.ConsensusType = {}));
	(function (ConsensusAlgorithm) {
	    ConsensusAlgorithm["Ethash"] = "ethash";
	    ConsensusAlgorithm["Clique"] = "clique";
	    ConsensusAlgorithm["Casper"] = "casper";
	})(exports.ConsensusAlgorithm || (exports.ConsensusAlgorithm = {}));
	(function (CustomChain) {
	    /**
	     * Polygon (Matic) Mainnet
	     *
	     * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)
	     */
	    CustomChain["PolygonMainnet"] = "polygon-mainnet";
	    /**
	     * Polygon (Matic) Mumbai Testnet
	     *
	     * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)
	     */
	    CustomChain["PolygonMumbai"] = "polygon-mumbai";
	    /**
	     * Arbitrum One - mainnet for Arbitrum roll-up
	     *
	     * - [Documentation](https://developer.offchainlabs.com/public-chains)
	     */
	    CustomChain["ArbitrumOne"] = "arbitrum-one";
	    /**
	     * xDai EVM sidechain with a native stable token
	     *
	     * - [Documentation](https://www.xdaichain.com/)
	     */
	    CustomChain["xDaiChain"] = "x-dai-chain";
	    /**
	     * Optimistic Kovan - testnet for Optimism roll-up
	     *
	     * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)
	     */
	    CustomChain["OptimisticKovan"] = "optimistic-kovan";
	    /**
	     * Optimistic Ethereum - mainnet for Optimism roll-up
	     *
	     * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)
	     */
	    CustomChain["OptimisticEthereum"] = "optimistic-ethereum";
	})(exports.CustomChain || (exports.CustomChain = {}));
	
} (enums));

Object.defineProperty(eips, "__esModule", { value: true });
eips.EIPs = void 0;
const enums_js_1$2 = enums;
var Status$1;
(function (Status) {
    Status["Draft"] = "draft";
    Status["Review"] = "review";
    Status["Final"] = "final";
})(Status$1 || (Status$1 = {}));
eips.EIPs = {
    1153: {
        comment: 'Transient storage opcodes',
        url: 'https://eips.ethereum.org/EIPS/eip-1153',
        status: Status$1.Review,
        minimumHardfork: enums_js_1$2.Hardfork.Chainstart,
        requiredEIPs: [],
        gasPrices: {
            tstore: {
                v: 100,
                d: 'Base fee of the TSTORE opcode',
            },
            tload: {
                v: 100,
                d: 'Base fee of the TLOAD opcode',
            },
        },
    },
    1559: {
        comment: 'Fee market change for ETH 1.0 chain',
        url: 'https://eips.ethereum.org/EIPS/eip-1559',
        status: Status$1.Final,
        minimumHardfork: enums_js_1$2.Hardfork.Berlin,
        requiredEIPs: [2930],
        gasConfig: {
            baseFeeMaxChangeDenominator: {
                v: 8,
                d: 'Maximum base fee change denominator',
            },
            elasticityMultiplier: {
                v: 2,
                d: 'Maximum block gas target elasticity',
            },
            initialBaseFee: {
                v: 1000000000,
                d: 'Initial base fee on first EIP1559 block',
            },
        },
    },
    2315: {
        comment: 'Simple subroutines for the EVM',
        url: 'https://eips.ethereum.org/EIPS/eip-2315',
        status: Status$1.Draft,
        minimumHardfork: enums_js_1$2.Hardfork.Istanbul,
        requiredEIPs: [],
        gasPrices: {
            beginsub: {
                v: 2,
                d: 'Base fee of the BEGINSUB opcode',
            },
            returnsub: {
                v: 5,
                d: 'Base fee of the RETURNSUB opcode',
            },
            jumpsub: {
                v: 10,
                d: 'Base fee of the JUMPSUB opcode',
            },
        },
    },
    2565: {
        comment: 'ModExp gas cost',
        url: 'https://eips.ethereum.org/EIPS/eip-2565',
        status: Status$1.Final,
        minimumHardfork: enums_js_1$2.Hardfork.Byzantium,
        requiredEIPs: [],
        gasPrices: {
            modexpGquaddivisor: {
                v: 3,
                d: 'Gquaddivisor from modexp precompile for gas calculation',
            },
        },
    },
    2718: {
        comment: 'Typed Transaction Envelope',
        url: 'https://eips.ethereum.org/EIPS/eip-2718',
        status: Status$1.Final,
        minimumHardfork: enums_js_1$2.Hardfork.Chainstart,
        requiredEIPs: [],
    },
    2929: {
        comment: 'Gas cost increases for state access opcodes',
        url: 'https://eips.ethereum.org/EIPS/eip-2929',
        status: Status$1.Final,
        minimumHardfork: enums_js_1$2.Hardfork.Chainstart,
        requiredEIPs: [],
        gasPrices: {
            coldsload: {
                v: 2100,
                d: 'Gas cost of the first read of storage from a given location (per transaction)',
            },
            coldaccountaccess: {
                v: 2600,
                d: 'Gas cost of the first read of a given address (per transaction)',
            },
            warmstorageread: {
                v: 100,
                d: "Gas cost of reading storage locations which have already loaded 'cold'",
            },
            sstoreCleanGasEIP2200: {
                v: 2900,
                d: 'Once per SSTORE operation from clean non-zero to something else',
            },
            sstoreNoopGasEIP2200: {
                v: 100,
                d: "Once per SSTORE operation if the value doesn't change",
            },
            sstoreDirtyGasEIP2200: {
                v: 100,
                d: 'Once per SSTORE operation if a dirty value is changed',
            },
            sstoreInitRefundEIP2200: {
                v: 19900,
                d: 'Once per SSTORE operation for resetting to the original zero value',
            },
            sstoreCleanRefundEIP2200: {
                v: 4900,
                d: 'Once per SSTORE operation for resetting to the original non-zero value',
            },
            call: {
                v: 0,
                d: 'Base fee of the CALL opcode',
            },
            callcode: {
                v: 0,
                d: 'Base fee of the CALLCODE opcode',
            },
            delegatecall: {
                v: 0,
                d: 'Base fee of the DELEGATECALL opcode',
            },
            staticcall: {
                v: 0,
                d: 'Base fee of the STATICCALL opcode',
            },
            balance: {
                v: 0,
                d: 'Base fee of the BALANCE opcode',
            },
            extcodesize: {
                v: 0,
                d: 'Base fee of the EXTCODESIZE opcode',
            },
            extcodecopy: {
                v: 0,
                d: 'Base fee of the EXTCODECOPY opcode',
            },
            extcodehash: {
                v: 0,
                d: 'Base fee of the EXTCODEHASH opcode',
            },
            sload: {
                v: 0,
                d: 'Base fee of the SLOAD opcode',
            },
            sstore: {
                v: 0,
                d: 'Base fee of the SSTORE opcode',
            },
        },
    },
    2930: {
        comment: 'Optional access lists',
        url: 'https://eips.ethereum.org/EIPS/eip-2930',
        status: Status$1.Final,
        minimumHardfork: enums_js_1$2.Hardfork.Istanbul,
        requiredEIPs: [2718, 2929],
        gasPrices: {
            accessListStorageKeyCost: {
                v: 1900,
                d: 'Gas cost per storage key in an Access List transaction',
            },
            accessListAddressCost: {
                v: 2400,
                d: 'Gas cost per storage key in an Access List transaction',
            },
        },
    },
    3074: {
        comment: 'AUTH and AUTHCALL opcodes',
        url: 'https://eips.ethereum.org/EIPS/eip-3074',
        status: Status$1.Review,
        minimumHardfork: enums_js_1$2.Hardfork.London,
        requiredEIPs: [],
        gasPrices: {
            auth: {
                v: 3100,
                d: 'Gas cost of the AUTH opcode',
            },
            authcall: {
                v: 0,
                d: 'Gas cost of the AUTHCALL opcode',
            },
            authcallValueTransfer: {
                v: 6700,
                d: 'Paid for CALL when the value transfer is non-zero',
            },
        },
    },
    3198: {
        comment: 'BASEFEE opcode',
        url: 'https://eips.ethereum.org/EIPS/eip-3198',
        status: Status$1.Final,
        minimumHardfork: enums_js_1$2.Hardfork.London,
        requiredEIPs: [],
        gasPrices: {
            basefee: {
                v: 2,
                d: 'Gas cost of the BASEFEE opcode',
            },
        },
    },
    3529: {
        comment: 'Reduction in refunds',
        url: 'https://eips.ethereum.org/EIPS/eip-3529',
        status: Status$1.Final,
        minimumHardfork: enums_js_1$2.Hardfork.Berlin,
        requiredEIPs: [2929],
        gasConfig: {
            maxRefundQuotient: {
                v: 5,
                d: 'Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)',
            },
        },
        gasPrices: {
            selfdestructRefund: {
                v: 0,
                d: 'Refunded following a selfdestruct operation',
            },
            sstoreClearRefundEIP2200: {
                v: 4800,
                d: 'Once per SSTORE operation for clearing an originally existing storage slot',
            },
        },
    },
    3540: {
        comment: 'EVM Object Format (EOF) v1',
        url: 'https://eips.ethereum.org/EIPS/eip-3540',
        status: Status$1.Review,
        minimumHardfork: enums_js_1$2.Hardfork.London,
        requiredEIPs: [3541],
    },
    3541: {
        comment: 'Reject new contracts starting with the 0xEF byte',
        url: 'https://eips.ethereum.org/EIPS/eip-3541',
        status: Status$1.Final,
        minimumHardfork: enums_js_1$2.Hardfork.Berlin,
        requiredEIPs: [],
    },
    3554: {
        comment: 'Difficulty Bomb Delay to December 1st 2021',
        url: 'https://eips.ethereum.org/EIPS/eip-3554',
        status: Status$1.Final,
        minimumHardfork: enums_js_1$2.Hardfork.MuirGlacier,
        requiredEIPs: [],
        pow: {
            difficultyBombDelay: {
                v: 9500000,
                d: 'the amount of blocks to delay the difficulty bomb with',
            },
        },
    },
    3607: {
        comment: 'Reject transactions from senders with deployed code',
        url: 'https://eips.ethereum.org/EIPS/eip-3607',
        status: Status$1.Final,
        minimumHardfork: enums_js_1$2.Hardfork.Chainstart,
        requiredEIPs: [],
    },
    3651: {
        comment: 'Warm COINBASE',
        url: 'https://eips.ethereum.org/EIPS/eip-3651',
        status: Status$1.Review,
        minimumHardfork: enums_js_1$2.Hardfork.London,
        requiredEIPs: [2929],
    },
    3670: {
        comment: 'EOF - Code Validation',
        url: 'https://eips.ethereum.org/EIPS/eip-3670',
        status: 'Review',
        minimumHardfork: enums_js_1$2.Hardfork.London,
        requiredEIPs: [3540],
        gasConfig: {},
        gasPrices: {},
        vm: {},
        pow: {},
    },
    3675: {
        comment: 'Upgrade consensus to Proof-of-Stake',
        url: 'https://eips.ethereum.org/EIPS/eip-3675',
        status: Status$1.Final,
        minimumHardfork: enums_js_1$2.Hardfork.London,
        requiredEIPs: [],
    },
    3855: {
        comment: 'PUSH0 instruction',
        url: 'https://eips.ethereum.org/EIPS/eip-3855',
        status: Status$1.Review,
        minimumHardfork: enums_js_1$2.Hardfork.Chainstart,
        requiredEIPs: [],
        gasPrices: {
            push0: {
                v: 2,
                d: 'Base fee of the PUSH0 opcode',
            },
        },
    },
    3860: {
        comment: 'Limit and meter initcode',
        url: 'https://eips.ethereum.org/EIPS/eip-3860',
        status: Status$1.Review,
        minimumHardfork: enums_js_1$2.Hardfork.SpuriousDragon,
        requiredEIPs: [],
        gasPrices: {
            initCodeWordCost: {
                v: 2,
                d: 'Gas to pay for each word (32 bytes) of initcode when creating a contract',
            },
        },
        vm: {
            maxInitCodeSize: {
                v: 49152,
                d: 'Maximum length of initialization code when creating a contract',
            },
        },
    },
    4345: {
        comment: 'Difficulty Bomb Delay to June 2022',
        url: 'https://eips.ethereum.org/EIPS/eip-4345',
        status: Status$1.Final,
        minimumHardfork: enums_js_1$2.Hardfork.London,
        requiredEIPs: [],
        pow: {
            difficultyBombDelay: {
                v: 10700000,
                d: 'the amount of blocks to delay the difficulty bomb with',
            },
        },
    },
    4399: {
        comment: 'Supplant DIFFICULTY opcode with PREVRANDAO',
        url: 'https://eips.ethereum.org/EIPS/eip-4399',
        status: Status$1.Review,
        minimumHardfork: enums_js_1$2.Hardfork.London,
        requiredEIPs: [],
        gasPrices: {
            prevrandao: {
                v: 2,
                d: 'Base fee of the PREVRANDAO opcode (previously DIFFICULTY)',
            },
        },
    },
    4788: {
        comment: 'Beacon block root in the EVM',
        url: 'https://eips.ethereum.org/EIPS/eip-4788',
        status: Status$1.Draft,
        minimumHardfork: enums_js_1$2.Hardfork.Cancun,
        requiredEIPs: [],
        gasPrices: {},
        vm: {
            historicalRootsLength: {
                v: 8191,
                d: 'The modulo parameter of the beaconroot ring buffer in the beaconroot statefull precompile',
            },
        },
    },
    4844: {
        comment: 'Shard Blob Transactions',
        url: 'https://eips.ethereum.org/EIPS/eip-4844',
        status: Status$1.Draft,
        minimumHardfork: enums_js_1$2.Hardfork.Paris,
        requiredEIPs: [1559, 2718, 2930, 4895],
        gasConfig: {
            blobGasPerBlob: {
                v: 131072,
                d: 'The base fee for blob gas per blob',
            },
            targetBlobGasPerBlock: {
                v: 393216,
                d: 'The target blob gas consumed per block',
            },
            maxblobGasPerBlock: {
                v: 786432,
                d: 'The max blob gas allowable per block',
            },
            blobGasPriceUpdateFraction: {
                v: 3338477,
                d: 'The denominator used in the exponential when calculating a blob gas price',
            },
        },
        gasPrices: {
            simpleGasPerBlob: {
                v: 12000,
                d: 'The basic gas fee for each blob',
            },
            minBlobGasPrice: {
                v: 1,
                d: 'The minimum fee per blob gas',
            },
            kzgPointEvaluationGasPrecompilePrice: {
                v: 50000,
                d: 'The fee associated with the point evaluation precompile',
            },
            blobhash: {
                v: 3,
                d: 'Base fee of the BLOBHASH opcode',
            },
        },
        sharding: {
            blobCommitmentVersionKzg: {
                v: 1,
                d: 'The number indicated a versioned hash is a KZG commitment',
            },
            fieldElementsPerBlob: {
                v: 4096,
                d: 'The number of field elements allowed per blob',
            },
        },
    },
    4895: {
        comment: 'Beacon chain push withdrawals as operations',
        url: 'https://eips.ethereum.org/EIPS/eip-4895',
        status: Status$1.Review,
        minimumHardfork: enums_js_1$2.Hardfork.Paris,
        requiredEIPs: [],
    },
    5133: {
        comment: 'Delaying Difficulty Bomb to mid-September 2022',
        url: 'https://eips.ethereum.org/EIPS/eip-5133',
        status: Status$1.Draft,
        minimumHardfork: enums_js_1$2.Hardfork.GrayGlacier,
        requiredEIPs: [],
        pow: {
            difficultyBombDelay: {
                v: 11400000,
                d: 'the amount of blocks to delay the difficulty bomb with',
            },
        },
    },
    5656: {
        comment: 'MCOPY - Memory copying instruction',
        url: 'https://eips.ethereum.org/EIPS/eip-5656',
        status: Status$1.Draft,
        minimumHardfork: enums_js_1$2.Hardfork.Shanghai,
        requiredEIPs: [],
        gasPrices: {
            mcopy: {
                v: 3,
                d: 'Base fee of the MCOPY opcode',
            },
        },
    },
    6780: {
        comment: 'SELFDESTRUCT only in same transaction',
        url: 'https://eips.ethereum.org/EIPS/eip-6780',
        status: Status$1.Draft,
        minimumHardfork: enums_js_1$2.Hardfork.London,
        requiredEIPs: [],
    },
    6800: {
        comment: 'Ethereum state using a unified verkle tree (experimental)',
        url: 'https://github.com/ethereum/EIPs/pull/6800',
        status: Status$1.Draft,
        minimumHardfork: enums_js_1$2.Hardfork.London,
        requiredEIPs: [],
    },
    7516: {
        comment: 'BLOBBASEFEE opcode',
        url: 'https://eips.ethereum.org/EIPS/eip-7516',
        status: Status$1.Draft,
        minimumHardfork: enums_js_1$2.Hardfork.Paris,
        requiredEIPs: [4844],
        gasPrices: {
            blobbasefee: {
                v: 2,
                d: 'Gas cost of the BLOBBASEFEE opcode',
            },
        },
    },
};

var hardforks = {};

Object.defineProperty(hardforks, "__esModule", { value: true });
hardforks.hardforks = void 0;
var Status;
(function (Status) {
    Status["Draft"] = "draft";
    Status["Review"] = "review";
    Status["Final"] = "final";
})(Status || (Status = {}));
hardforks.hardforks = {
    chainstart: {
        name: 'chainstart',
        comment: 'Start of the Ethereum main chain',
        url: '',
        status: Status.Final,
        gasConfig: {
            minGasLimit: {
                v: 5000,
                d: 'Minimum the gas limit may ever be',
            },
            gasLimitBoundDivisor: {
                v: 1024,
                d: 'The bound divisor of the gas limit, used in update calculations',
            },
            maxRefundQuotient: {
                v: 2,
                d: 'Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)',
            },
        },
        gasPrices: {
            base: {
                v: 2,
                d: 'Gas base cost, used e.g. for ChainID opcode (Istanbul)',
            },
            exp: {
                v: 10,
                d: 'Base fee of the EXP opcode',
            },
            expByte: {
                v: 10,
                d: 'Times ceil(log256(exponent)) for the EXP instruction',
            },
            keccak256: {
                v: 30,
                d: 'Base fee of the SHA3 opcode',
            },
            keccak256Word: {
                v: 6,
                d: "Once per word of the SHA3 operation's data",
            },
            sload: {
                v: 50,
                d: 'Base fee of the SLOAD opcode',
            },
            sstoreSet: {
                v: 20000,
                d: 'Once per SSTORE operation if the zeroness changes from zero',
            },
            sstoreReset: {
                v: 5000,
                d: 'Once per SSTORE operation if the zeroness does not change from zero',
            },
            sstoreRefund: {
                v: 15000,
                d: 'Once per SSTORE operation if the zeroness changes to zero',
            },
            jumpdest: {
                v: 1,
                d: 'Base fee of the JUMPDEST opcode',
            },
            log: {
                v: 375,
                d: 'Base fee of the LOG opcode',
            },
            logData: {
                v: 8,
                d: "Per byte in a LOG* operation's data",
            },
            logTopic: {
                v: 375,
                d: 'Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas',
            },
            create: {
                v: 32000,
                d: 'Base fee of the CREATE opcode',
            },
            call: {
                v: 40,
                d: 'Base fee of the CALL opcode',
            },
            callStipend: {
                v: 2300,
                d: 'Free gas given at beginning of call',
            },
            callValueTransfer: {
                v: 9000,
                d: 'Paid for CALL when the value transfor is non-zero',
            },
            callNewAccount: {
                v: 25000,
                d: "Paid for CALL when the destination address didn't exist prior",
            },
            selfdestructRefund: {
                v: 24000,
                d: 'Refunded following a selfdestruct operation',
            },
            memory: {
                v: 3,
                d: 'Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL',
            },
            quadCoeffDiv: {
                v: 512,
                d: 'Divisor for the quadratic particle of the memory cost equation',
            },
            createData: {
                v: 200,
                d: '',
            },
            tx: {
                v: 21000,
                d: 'Per transaction. NOTE: Not payable on data of calls between transactions',
            },
            txCreation: {
                v: 32000,
                d: 'The cost of creating a contract via tx',
            },
            txDataZero: {
                v: 4,
                d: 'Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions',
            },
            txDataNonZero: {
                v: 68,
                d: 'Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions',
            },
            copy: {
                v: 3,
                d: 'Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added',
            },
            ecRecover: {
                v: 3000,
                d: '',
            },
            sha256: {
                v: 60,
                d: '',
            },
            sha256Word: {
                v: 12,
                d: '',
            },
            ripemd160: {
                v: 600,
                d: '',
            },
            ripemd160Word: {
                v: 120,
                d: '',
            },
            identity: {
                v: 15,
                d: '',
            },
            identityWord: {
                v: 3,
                d: '',
            },
            stop: {
                v: 0,
                d: 'Base fee of the STOP opcode',
            },
            add: {
                v: 3,
                d: 'Base fee of the ADD opcode',
            },
            mul: {
                v: 5,
                d: 'Base fee of the MUL opcode',
            },
            sub: {
                v: 3,
                d: 'Base fee of the SUB opcode',
            },
            div: {
                v: 5,
                d: 'Base fee of the DIV opcode',
            },
            sdiv: {
                v: 5,
                d: 'Base fee of the SDIV opcode',
            },
            mod: {
                v: 5,
                d: 'Base fee of the MOD opcode',
            },
            smod: {
                v: 5,
                d: 'Base fee of the SMOD opcode',
            },
            addmod: {
                v: 8,
                d: 'Base fee of the ADDMOD opcode',
            },
            mulmod: {
                v: 8,
                d: 'Base fee of the MULMOD opcode',
            },
            signextend: {
                v: 5,
                d: 'Base fee of the SIGNEXTEND opcode',
            },
            lt: {
                v: 3,
                d: 'Base fee of the LT opcode',
            },
            gt: {
                v: 3,
                d: 'Base fee of the GT opcode',
            },
            slt: {
                v: 3,
                d: 'Base fee of the SLT opcode',
            },
            sgt: {
                v: 3,
                d: 'Base fee of the SGT opcode',
            },
            eq: {
                v: 3,
                d: 'Base fee of the EQ opcode',
            },
            iszero: {
                v: 3,
                d: 'Base fee of the ISZERO opcode',
            },
            and: {
                v: 3,
                d: 'Base fee of the AND opcode',
            },
            or: {
                v: 3,
                d: 'Base fee of the OR opcode',
            },
            xor: {
                v: 3,
                d: 'Base fee of the XOR opcode',
            },
            not: {
                v: 3,
                d: 'Base fee of the NOT opcode',
            },
            byte: {
                v: 3,
                d: 'Base fee of the BYTE opcode',
            },
            address: {
                v: 2,
                d: 'Base fee of the ADDRESS opcode',
            },
            balance: {
                v: 20,
                d: 'Base fee of the BALANCE opcode',
            },
            origin: {
                v: 2,
                d: 'Base fee of the ORIGIN opcode',
            },
            caller: {
                v: 2,
                d: 'Base fee of the CALLER opcode',
            },
            callvalue: {
                v: 2,
                d: 'Base fee of the CALLVALUE opcode',
            },
            calldataload: {
                v: 3,
                d: 'Base fee of the CALLDATALOAD opcode',
            },
            calldatasize: {
                v: 2,
                d: 'Base fee of the CALLDATASIZE opcode',
            },
            calldatacopy: {
                v: 3,
                d: 'Base fee of the CALLDATACOPY opcode',
            },
            codesize: {
                v: 2,
                d: 'Base fee of the CODESIZE opcode',
            },
            codecopy: {
                v: 3,
                d: 'Base fee of the CODECOPY opcode',
            },
            gasprice: {
                v: 2,
                d: 'Base fee of the GASPRICE opcode',
            },
            extcodesize: {
                v: 20,
                d: 'Base fee of the EXTCODESIZE opcode',
            },
            extcodecopy: {
                v: 20,
                d: 'Base fee of the EXTCODECOPY opcode',
            },
            blockhash: {
                v: 20,
                d: 'Base fee of the BLOCKHASH opcode',
            },
            coinbase: {
                v: 2,
                d: 'Base fee of the COINBASE opcode',
            },
            timestamp: {
                v: 2,
                d: 'Base fee of the TIMESTAMP opcode',
            },
            number: {
                v: 2,
                d: 'Base fee of the NUMBER opcode',
            },
            difficulty: {
                v: 2,
                d: 'Base fee of the DIFFICULTY opcode',
            },
            gaslimit: {
                v: 2,
                d: 'Base fee of the GASLIMIT opcode',
            },
            pop: {
                v: 2,
                d: 'Base fee of the POP opcode',
            },
            mload: {
                v: 3,
                d: 'Base fee of the MLOAD opcode',
            },
            mstore: {
                v: 3,
                d: 'Base fee of the MSTORE opcode',
            },
            mstore8: {
                v: 3,
                d: 'Base fee of the MSTORE8 opcode',
            },
            sstore: {
                v: 0,
                d: 'Base fee of the SSTORE opcode',
            },
            jump: {
                v: 8,
                d: 'Base fee of the JUMP opcode',
            },
            jumpi: {
                v: 10,
                d: 'Base fee of the JUMPI opcode',
            },
            pc: {
                v: 2,
                d: 'Base fee of the PC opcode',
            },
            msize: {
                v: 2,
                d: 'Base fee of the MSIZE opcode',
            },
            gas: {
                v: 2,
                d: 'Base fee of the GAS opcode',
            },
            push: {
                v: 3,
                d: 'Base fee of the PUSH opcode',
            },
            dup: {
                v: 3,
                d: 'Base fee of the DUP opcode',
            },
            swap: {
                v: 3,
                d: 'Base fee of the SWAP opcode',
            },
            callcode: {
                v: 40,
                d: 'Base fee of the CALLCODE opcode',
            },
            return: {
                v: 0,
                d: 'Base fee of the RETURN opcode',
            },
            invalid: {
                v: 0,
                d: 'Base fee of the INVALID opcode',
            },
            selfdestruct: {
                v: 0,
                d: 'Base fee of the SELFDESTRUCT opcode',
            },
        },
        vm: {
            stackLimit: {
                v: 1024,
                d: 'Maximum size of VM stack allowed',
            },
            callCreateDepth: {
                v: 1024,
                d: 'Maximum depth of call/create stack',
            },
            maxExtraDataSize: {
                v: 32,
                d: 'Maximum size extra data may be after Genesis',
            },
        },
        pow: {
            minimumDifficulty: {
                v: 131072,
                d: 'The minimum that the difficulty may ever be',
            },
            difficultyBoundDivisor: {
                v: 2048,
                d: 'The bound divisor of the difficulty, used in the update calculations',
            },
            durationLimit: {
                v: 13,
                d: 'The decision boundary on the blocktime duration used to determine whether difficulty should go up or not',
            },
            epochDuration: {
                v: 30000,
                d: 'Duration between proof-of-work epochs',
            },
            timebombPeriod: {
                v: 100000,
                d: 'Exponential difficulty timebomb period',
            },
            minerReward: {
                v: BigInt('5000000000000000000'),
                d: 'the amount a miner get rewarded for mining a block',
            },
            difficultyBombDelay: {
                v: 0,
                d: 'the amount of blocks to delay the difficulty bomb with',
            },
        },
    },
    homestead: {
        name: 'homestead',
        comment: 'Homestead hardfork with protocol and network changes',
        url: 'https://eips.ethereum.org/EIPS/eip-606',
        status: Status.Final,
        gasPrices: {
            delegatecall: {
                v: 40,
                d: 'Base fee of the DELEGATECALL opcode',
            },
        },
    },
    dao: {
        name: 'dao',
        comment: 'DAO rescue hardfork',
        url: 'https://eips.ethereum.org/EIPS/eip-779',
        status: Status.Final,
    },
    tangerineWhistle: {
        name: 'tangerineWhistle',
        comment: 'Hardfork with gas cost changes for IO-heavy operations',
        url: 'https://eips.ethereum.org/EIPS/eip-608',
        status: Status.Final,
        gasPrices: {
            sload: {
                v: 200,
                d: 'Once per SLOAD operation',
            },
            call: {
                v: 700,
                d: 'Once per CALL operation & message call transaction',
            },
            extcodesize: {
                v: 700,
                d: 'Base fee of the EXTCODESIZE opcode',
            },
            extcodecopy: {
                v: 700,
                d: 'Base fee of the EXTCODECOPY opcode',
            },
            balance: {
                v: 400,
                d: 'Base fee of the BALANCE opcode',
            },
            delegatecall: {
                v: 700,
                d: 'Base fee of the DELEGATECALL opcode',
            },
            callcode: {
                v: 700,
                d: 'Base fee of the CALLCODE opcode',
            },
            selfdestruct: {
                v: 5000,
                d: 'Base fee of the SELFDESTRUCT opcode',
            },
        },
    },
    spuriousDragon: {
        name: 'spuriousDragon',
        comment: 'HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit',
        url: 'https://eips.ethereum.org/EIPS/eip-607',
        status: Status.Final,
        gasPrices: {
            expByte: {
                v: 50,
                d: 'Times ceil(log256(exponent)) for the EXP instruction',
            },
        },
        vm: {
            maxCodeSize: {
                v: 24576,
                d: 'Maximum length of contract code',
            },
        },
    },
    byzantium: {
        name: 'byzantium',
        comment: 'Hardfork with new precompiles, instructions and other protocol changes',
        url: 'https://eips.ethereum.org/EIPS/eip-609',
        status: Status.Final,
        gasPrices: {
            modexpGquaddivisor: {
                v: 20,
                d: 'Gquaddivisor from modexp precompile for gas calculation',
            },
            ecAdd: {
                v: 500,
                d: 'Gas costs for curve addition precompile',
            },
            ecMul: {
                v: 40000,
                d: 'Gas costs for curve multiplication precompile',
            },
            ecPairing: {
                v: 100000,
                d: 'Base gas costs for curve pairing precompile',
            },
            ecPairingWord: {
                v: 80000,
                d: 'Gas costs regarding curve pairing precompile input length',
            },
            revert: {
                v: 0,
                d: 'Base fee of the REVERT opcode',
            },
            staticcall: {
                v: 700,
                d: 'Base fee of the STATICCALL opcode',
            },
            returndatasize: {
                v: 2,
                d: 'Base fee of the RETURNDATASIZE opcode',
            },
            returndatacopy: {
                v: 3,
                d: 'Base fee of the RETURNDATACOPY opcode',
            },
        },
        pow: {
            minerReward: {
                v: BigInt('3000000000000000000'),
                d: 'the amount a miner get rewarded for mining a block',
            },
            difficultyBombDelay: {
                v: 3000000,
                d: 'the amount of blocks to delay the difficulty bomb with',
            },
        },
    },
    constantinople: {
        name: 'constantinople',
        comment: 'Postponed hardfork including EIP-1283 (SSTORE gas metering changes)',
        url: 'https://eips.ethereum.org/EIPS/eip-1013',
        status: Status.Final,
        gasPrices: {
            netSstoreNoopGas: {
                v: 200,
                d: "Once per SSTORE operation if the value doesn't change",
            },
            netSstoreInitGas: {
                v: 20000,
                d: 'Once per SSTORE operation from clean zero',
            },
            netSstoreCleanGas: {
                v: 5000,
                d: 'Once per SSTORE operation from clean non-zero',
            },
            netSstoreDirtyGas: {
                v: 200,
                d: 'Once per SSTORE operation from dirty',
            },
            netSstoreClearRefund: {
                v: 15000,
                d: 'Once per SSTORE operation for clearing an originally existing storage slot',
            },
            netSstoreResetRefund: {
                v: 4800,
                d: 'Once per SSTORE operation for resetting to the original non-zero value',
            },
            netSstoreResetClearRefund: {
                v: 19800,
                d: 'Once per SSTORE operation for resetting to the original zero value',
            },
            shl: {
                v: 3,
                d: 'Base fee of the SHL opcode',
            },
            shr: {
                v: 3,
                d: 'Base fee of the SHR opcode',
            },
            sar: {
                v: 3,
                d: 'Base fee of the SAR opcode',
            },
            extcodehash: {
                v: 400,
                d: 'Base fee of the EXTCODEHASH opcode',
            },
            create2: {
                v: 32000,
                d: 'Base fee of the CREATE2 opcode',
            },
        },
        pow: {
            minerReward: {
                v: BigInt('2000000000000000000'),
                d: 'The amount a miner gets rewarded for mining a block',
            },
            difficultyBombDelay: {
                v: 5000000,
                d: 'the amount of blocks to delay the difficulty bomb with',
            },
        },
    },
    petersburg: {
        name: 'petersburg',
        comment: 'Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople',
        url: 'https://eips.ethereum.org/EIPS/eip-1716',
        status: Status.Final,
        gasPrices: {
            netSstoreNoopGas: {
                v: null,
                d: 'Removed along EIP-1283',
            },
            netSstoreInitGas: {
                v: null,
                d: 'Removed along EIP-1283',
            },
            netSstoreCleanGas: {
                v: null,
                d: 'Removed along EIP-1283',
            },
            netSstoreDirtyGas: {
                v: null,
                d: 'Removed along EIP-1283',
            },
            netSstoreClearRefund: {
                v: null,
                d: 'Removed along EIP-1283',
            },
            netSstoreResetRefund: {
                v: null,
                d: 'Removed along EIP-1283',
            },
            netSstoreResetClearRefund: {
                v: null,
                d: 'Removed along EIP-1283',
            },
        },
    },
    istanbul: {
        name: 'istanbul',
        comment: 'HF targeted for December 2019 following the Constantinople/Petersburg HF',
        url: 'https://eips.ethereum.org/EIPS/eip-1679',
        status: Status.Final,
        gasConfig: {},
        gasPrices: {
            blake2Round: {
                v: 1,
                d: 'Gas cost per round for the Blake2 F precompile',
            },
            ecAdd: {
                v: 150,
                d: 'Gas costs for curve addition precompile',
            },
            ecMul: {
                v: 6000,
                d: 'Gas costs for curve multiplication precompile',
            },
            ecPairing: {
                v: 45000,
                d: 'Base gas costs for curve pairing precompile',
            },
            ecPairingWord: {
                v: 34000,
                d: 'Gas costs regarding curve pairing precompile input length',
            },
            txDataNonZero: {
                v: 16,
                d: 'Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions',
            },
            sstoreSentryGasEIP2200: {
                v: 2300,
                d: 'Minimum gas required to be present for an SSTORE call, not consumed',
            },
            sstoreNoopGasEIP2200: {
                v: 800,
                d: "Once per SSTORE operation if the value doesn't change",
            },
            sstoreDirtyGasEIP2200: {
                v: 800,
                d: 'Once per SSTORE operation if a dirty value is changed',
            },
            sstoreInitGasEIP2200: {
                v: 20000,
                d: 'Once per SSTORE operation from clean zero to non-zero',
            },
            sstoreInitRefundEIP2200: {
                v: 19200,
                d: 'Once per SSTORE operation for resetting to the original zero value',
            },
            sstoreCleanGasEIP2200: {
                v: 5000,
                d: 'Once per SSTORE operation from clean non-zero to something else',
            },
            sstoreCleanRefundEIP2200: {
                v: 4200,
                d: 'Once per SSTORE operation for resetting to the original non-zero value',
            },
            sstoreClearRefundEIP2200: {
                v: 15000,
                d: 'Once per SSTORE operation for clearing an originally existing storage slot',
            },
            balance: {
                v: 700,
                d: 'Base fee of the BALANCE opcode',
            },
            extcodehash: {
                v: 700,
                d: 'Base fee of the EXTCODEHASH opcode',
            },
            chainid: {
                v: 2,
                d: 'Base fee of the CHAINID opcode',
            },
            selfbalance: {
                v: 5,
                d: 'Base fee of the SELFBALANCE opcode',
            },
            sload: {
                v: 800,
                d: 'Base fee of the SLOAD opcode',
            },
        },
    },
    muirGlacier: {
        name: 'muirGlacier',
        comment: 'HF to delay the difficulty bomb',
        url: 'https://eips.ethereum.org/EIPS/eip-2384',
        status: Status.Final,
        pow: {
            difficultyBombDelay: {
                v: 9000000,
                d: 'the amount of blocks to delay the difficulty bomb with',
            },
        },
    },
    berlin: {
        name: 'berlin',
        comment: 'HF targeted for July 2020 following the Muir Glacier HF',
        url: 'https://eips.ethereum.org/EIPS/eip-2070',
        status: Status.Final,
        eips: [2565, 2929, 2718, 2930],
    },
    london: {
        name: 'london',
        comment: 'HF targeted for July 2021 following the Berlin fork',
        url: 'https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md',
        status: Status.Final,
        eips: [1559, 3198, 3529, 3541],
    },
    arrowGlacier: {
        name: 'arrowGlacier',
        comment: 'HF to delay the difficulty bomb',
        url: 'https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md',
        status: Status.Final,
        eips: [4345],
    },
    grayGlacier: {
        name: 'grayGlacier',
        comment: 'Delaying the difficulty bomb to Mid September 2022',
        url: 'https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md',
        status: Status.Final,
        eips: [5133],
    },
    paris: {
        name: 'paris',
        comment: 'Hardfork to upgrade the consensus mechanism to Proof-of-Stake',
        url: 'https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md',
        status: Status.Final,
        consensus: {
            type: 'pos',
            algorithm: 'casper',
            casper: {},
        },
        eips: [3675, 4399],
    },
    mergeForkIdTransition: {
        name: 'mergeForkIdTransition',
        comment: 'Pre-merge hardfork to fork off non-upgraded clients',
        url: 'https://eips.ethereum.org/EIPS/eip-3675',
        status: Status.Final,
        eips: [],
    },
    shanghai: {
        name: 'shanghai',
        comment: 'Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode',
        url: 'https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md',
        status: Status.Final,
        eips: [3651, 3855, 3860, 4895],
    },
    cancun: {
        name: 'cancun',
        comment: 'Next feature hardfork after shanghai, includes proto-danksharding EIP 4844 blobs (still WIP hence not for production use), transient storage opcodes, parent beacon block root availability in EVM, selfdestruct only in same transaction, and blob base fee opcode',
        url: 'https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/cancun.md',
        status: Status.Final,
        eips: [1153, 4844, 4788, 5656, 6780, 7516],
    },
    prague: {
        name: 'prague',
        comment: 'Next feature hardfork after cancun, internally used for verkle testing/implementation (incomplete/experimental)',
        url: 'https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/prague.md',
        status: Status.Draft,
        eips: [6800],
    },
};

var utils$2 = {};

Object.defineProperty(utils$2, "__esModule", { value: true });
utils$2.parseGethGenesis = void 0;
const util_1$b = cjs$2;
const enums_js_1$1 = enums;
/**
 * Transforms Geth formatted nonce (i.e. hex string) to 8 byte 0x-prefixed string used internally
 * @param nonce string parsed from the Geth genesis file
 * @returns nonce as a 0x-prefixed 8 byte string
 */
function formatNonce(nonce) {
    if (!nonce || nonce === '0x0') {
        return '0x0000000000000000';
    }
    if ((0, util_1$b.isHexPrefixed)(nonce)) {
        return '0x' + (0, util_1$b.stripHexPrefix)(nonce).padStart(16, '0');
    }
    return '0x' + nonce.padStart(16, '0');
}
/**
 * Converts Geth genesis parameters to an EthereumJS compatible `CommonOpts` object
 * @param json object representing the Geth genesis file
 * @param optional mergeForkIdPostMerge which clarifies the placement of MergeForkIdTransition
 * hardfork, which by default is post merge as with the merged eth networks but could also come
 * before merge like in kiln genesis
 * @returns genesis parameters in a `CommonOpts` compliant object
 */
function parseGethParams(json, mergeForkIdPostMerge = true) {
    const { name, config, difficulty, mixHash, gasLimit, coinbase, baseFeePerGas, excessBlobGas, } = json;
    let { extraData, timestamp, nonce } = json;
    const genesisTimestamp = Number(timestamp);
    const { chainId } = config;
    // geth is not strictly putting empty fields with a 0x prefix
    if (extraData === '') {
        extraData = '0x';
    }
    // geth may use number for timestamp
    if (!(0, util_1$b.isHexPrefixed)(timestamp)) {
        timestamp = (0, util_1$b.intToHex)(parseInt(timestamp));
    }
    // geth may not give us a nonce strictly formatted to an 8 byte hex string
    if (nonce.length !== 18) {
        nonce = formatNonce(nonce);
    }
    // EIP155 and EIP158 are both part of Spurious Dragon hardfork and must occur at the same time
    // but have different configuration parameters in geth genesis parameters
    if (config.eip155Block !== config.eip158Block) {
        throw new Error('EIP155 block number must equal EIP 158 block number since both are part of SpuriousDragon hardfork and the client only supports activating the full hardfork');
    }
    const params = {
        name,
        chainId,
        networkId: chainId,
        genesis: {
            timestamp,
            gasLimit,
            difficulty,
            nonce,
            extraData,
            mixHash,
            coinbase,
            baseFeePerGas,
            excessBlobGas,
        },
        hardfork: undefined,
        hardforks: [],
        bootstrapNodes: [],
        consensus: config.clique !== undefined
            ? {
                type: 'poa',
                algorithm: 'clique',
                clique: {
                    // The recent geth genesis seems to be using blockperiodseconds
                    // and epochlength for clique specification
                    // see: https://hackmd.io/PqZgMpnkSWCWv5joJoFymQ
                    period: config.clique.period ?? config.clique.blockperiodseconds,
                    epoch: config.clique.epoch ?? config.clique.epochlength,
                },
            }
            : {
                type: 'pow',
                algorithm: 'ethash',
                ethash: {},
            },
    };
    const forkMap = {
        [enums_js_1$1.Hardfork.Homestead]: { name: 'homesteadBlock' },
        [enums_js_1$1.Hardfork.Dao]: { name: 'daoForkBlock' },
        [enums_js_1$1.Hardfork.TangerineWhistle]: { name: 'eip150Block' },
        [enums_js_1$1.Hardfork.SpuriousDragon]: { name: 'eip155Block' },
        [enums_js_1$1.Hardfork.Byzantium]: { name: 'byzantiumBlock' },
        [enums_js_1$1.Hardfork.Constantinople]: { name: 'constantinopleBlock' },
        [enums_js_1$1.Hardfork.Petersburg]: { name: 'petersburgBlock' },
        [enums_js_1$1.Hardfork.Istanbul]: { name: 'istanbulBlock' },
        [enums_js_1$1.Hardfork.MuirGlacier]: { name: 'muirGlacierBlock' },
        [enums_js_1$1.Hardfork.Berlin]: { name: 'berlinBlock' },
        [enums_js_1$1.Hardfork.London]: { name: 'londonBlock' },
        [enums_js_1$1.Hardfork.MergeForkIdTransition]: { name: 'mergeForkBlock', postMerge: mergeForkIdPostMerge },
        [enums_js_1$1.Hardfork.Shanghai]: { name: 'shanghaiTime', postMerge: true, isTimestamp: true },
        [enums_js_1$1.Hardfork.Cancun]: { name: 'cancunTime', postMerge: true, isTimestamp: true },
        [enums_js_1$1.Hardfork.Prague]: { name: 'pragueTime', postMerge: true, isTimestamp: true },
    };
    // forkMapRev is the map from config field name to Hardfork
    const forkMapRev = Object.keys(forkMap).reduce((acc, elem) => {
        acc[forkMap[elem].name] = elem;
        return acc;
    }, {});
    const configHardforkNames = Object.keys(config).filter((key) => forkMapRev[key] !== undefined && config[key] !== undefined && config[key] !== null);
    params.hardforks = configHardforkNames
        .map((nameBlock) => ({
        name: forkMapRev[nameBlock],
        block: forkMap[forkMapRev[nameBlock]].isTimestamp === true || typeof config[nameBlock] !== 'number'
            ? null
            : config[nameBlock],
        timestamp: forkMap[forkMapRev[nameBlock]].isTimestamp === true && typeof config[nameBlock] === 'number'
            ? config[nameBlock]
            : undefined,
    }))
        .filter((fork) => fork.block !== null || fork.timestamp !== undefined);
    params.hardforks.sort(function (a, b) {
        return (a.block ?? Infinity) - (b.block ?? Infinity);
    });
    params.hardforks.sort(function (a, b) {
        // non timestamp forks come before any timestamp forks
        return (a.timestamp ?? 0) - (b.timestamp ?? 0);
    });
    // only set the genesis timestamp forks to zero post the above sort has happended
    // to get the correct sorting
    for (const hf of params.hardforks) {
        if (hf.timestamp === genesisTimestamp) {
            hf.timestamp = 0;
        }
    }
    if (config.terminalTotalDifficulty !== undefined) {
        // Following points need to be considered for placement of merge hf
        // - Merge hardfork can't be placed at genesis
        // - Place merge hf before any hardforks that require CL participation for e.g. withdrawals
        // - Merge hardfork has to be placed just after genesis if any of the genesis hardforks make CL
        //   necessary for e.g. withdrawals
        const mergeConfig = {
            name: enums_js_1$1.Hardfork.Paris,
            ttd: config.terminalTotalDifficulty,
            block: null,
        };
        // Merge hardfork has to be placed before first hardfork that is dependent on merge
        const postMergeIndex = params.hardforks.findIndex((hf) => forkMap[hf.name]?.postMerge === true);
        if (postMergeIndex !== -1) {
            params.hardforks.splice(postMergeIndex, 0, mergeConfig);
        }
        else {
            params.hardforks.push(mergeConfig);
        }
    }
    const latestHardfork = params.hardforks.length > 0 ? params.hardforks.slice(-1)[0] : undefined;
    params.hardfork = latestHardfork?.name;
    params.hardforks.unshift({ name: enums_js_1$1.Hardfork.Chainstart, block: 0 });
    return params;
}
/**
 * Parses a genesis.json exported from Geth into parameters for Common instance
 * @param json representing the Geth genesis file
 * @param name optional chain name
 * @returns parsed params
 */
function parseGethGenesis(json, name, mergeForkIdPostMerge) {
    try {
        const required = ['config', 'difficulty', 'gasLimit', 'nonce', 'alloc'];
        if (required.some((field) => !(field in json))) {
            const missingField = required.filter((field) => !(field in json));
            throw new Error(`Invalid format, expected geth genesis field "${missingField}" missing`);
        }
        if (name !== undefined) {
            json.name = name;
        }
        return parseGethParams(json, mergeForkIdPostMerge);
    }
    catch (e) {
        throw new Error(`Error parsing parameters file: ${e.message}`);
    }
}
utils$2.parseGethGenesis = parseGethGenesis;

Object.defineProperty(common, "__esModule", { value: true });
common.Common = void 0;
const util_1$a = cjs$2;
const events_1 = require$$0$3;
const chains_js_1 = chains;
const crc_js_1 = crc$1;
const eips_js_1 = eips;
const enums_js_1 = enums;
const hardforks_js_1 = hardforks;
const utils_js_1 = utils$2;
/**
 * Common class to access chain and hardfork parameters and to provide
 * a unified and shared view on the network and hardfork state.
 *
 * Use the {@link Common.custom} static constructor for creating simple
 * custom chain {@link Common} objects (more complete custom chain setups
 * can be created via the main constructor and the {@link CommonOpts.customChains} parameter).
 */
let Common$1 = class Common {
    constructor(opts) {
        this._eips = [];
        this._paramsCache = {};
        this._activatedEIPsCache = [];
        this.events = new events_1.EventEmitter();
        this._customChains = opts.customChains ?? [];
        this._chainParams = this.setChain(opts.chain);
        this.DEFAULT_HARDFORK = this._chainParams.defaultHardfork ?? enums_js_1.Hardfork.Shanghai;
        // Assign hardfork changes in the sequence of the applied hardforks
        this.HARDFORK_CHANGES = this.hardforks().map((hf) => [
            hf.name,
            hardforks_js_1.hardforks[hf.name],
        ]);
        this._hardfork = this.DEFAULT_HARDFORK;
        if (opts.hardfork !== undefined) {
            this.setHardfork(opts.hardfork);
        }
        if (opts.eips) {
            this.setEIPs(opts.eips);
        }
        this.customCrypto = opts.customCrypto ?? {};
        if (Object.keys(this._paramsCache).length === 0) {
            this._buildParamsCache();
            this._buildActivatedEIPsCache();
        }
    }
    /**
     * Creates a {@link Common} object for a custom chain, based on a standard one.
     *
     * It uses all the {@link Chain} parameters from the {@link baseChain} option except the ones overridden
     * in a provided {@link chainParamsOrName} dictionary. Some usage example:
     *
     * ```javascript
     * Common.custom({chainId: 123})
     * ```
     *
     * There are also selected supported custom chains which can be initialized by using one of the
     * {@link CustomChains} for {@link chainParamsOrName}, e.g.:
     *
     * ```javascript
     * Common.custom(CustomChains.MaticMumbai)
     * ```
     *
     * Note that these supported custom chains only provide some base parameters (usually the chain and
     * network ID and a name) and can only be used for selected use cases (e.g. sending a tx with
     * the `@ethereumjs/tx` library to a Layer-2 chain).
     *
     * @param chainParamsOrName Custom parameter dict (`name` will default to `custom-chain`) or string with name of a supported custom chain
     * @param opts Custom chain options to set the {@link CustomCommonOpts.baseChain}, selected {@link CustomCommonOpts.hardfork} and others
     */
    static custom(chainParamsOrName, opts = {}) {
        const baseChain = opts.baseChain ?? 'mainnet';
        const standardChainParams = { ...Common._getChainParams(baseChain) };
        standardChainParams['name'] = 'custom-chain';
        if (typeof chainParamsOrName !== 'string') {
            return new Common({
                chain: {
                    ...standardChainParams,
                    ...chainParamsOrName,
                },
                ...opts,
            });
        }
        else {
            if (chainParamsOrName === enums_js_1.CustomChain.PolygonMainnet) {
                return Common.custom({
                    name: enums_js_1.CustomChain.PolygonMainnet,
                    chainId: 137,
                    networkId: 137,
                }, opts);
            }
            if (chainParamsOrName === enums_js_1.CustomChain.PolygonMumbai) {
                return Common.custom({
                    name: enums_js_1.CustomChain.PolygonMumbai,
                    chainId: 80001,
                    networkId: 80001,
                }, opts);
            }
            if (chainParamsOrName === enums_js_1.CustomChain.ArbitrumOne) {
                return Common.custom({
                    name: enums_js_1.CustomChain.ArbitrumOne,
                    chainId: 42161,
                    networkId: 42161,
                }, opts);
            }
            if (chainParamsOrName === enums_js_1.CustomChain.xDaiChain) {
                return Common.custom({
                    name: enums_js_1.CustomChain.xDaiChain,
                    chainId: 100,
                    networkId: 100,
                }, opts);
            }
            if (chainParamsOrName === enums_js_1.CustomChain.OptimisticKovan) {
                return Common.custom({
                    name: enums_js_1.CustomChain.OptimisticKovan,
                    chainId: 69,
                    networkId: 69,
                }, 
                // Optimism has not implemented the London hardfork yet (targeting Q1.22)
                { hardfork: enums_js_1.Hardfork.Berlin, ...opts });
            }
            if (chainParamsOrName === enums_js_1.CustomChain.OptimisticEthereum) {
                return Common.custom({
                    name: enums_js_1.CustomChain.OptimisticEthereum,
                    chainId: 10,
                    networkId: 10,
                }, 
                // Optimism has not implemented the London hardfork yet (targeting Q1.22)
                { hardfork: enums_js_1.Hardfork.Berlin, ...opts });
            }
            throw new Error(`Custom chain ${chainParamsOrName} not supported`);
        }
    }
    /**
     * Static method to load and set common from a geth genesis json
     * @param genesisJson json of geth configuration
     * @param { chain, eips, genesisHash, hardfork, mergeForkIdPostMerge } to further configure the common instance
     * @returns Common
     */
    static fromGethGenesis(genesisJson, { chain, eips, genesisHash, hardfork, mergeForkIdPostMerge, customCrypto }) {
        const genesisParams = (0, utils_js_1.parseGethGenesis)(genesisJson, chain, mergeForkIdPostMerge);
        const common = new Common({
            chain: genesisParams.name ?? 'custom',
            customChains: [genesisParams],
            eips,
            hardfork: hardfork ?? genesisParams.hardfork,
            customCrypto,
        });
        if (genesisHash !== undefined) {
            common.setForkHashes(genesisHash);
        }
        return common;
    }
    /**
     * Static method to determine if a {@link chainId} is supported as a standard chain
     * @param chainId bigint id (`1`) of a standard chain
     * @returns boolean
     */
    static isSupportedChainId(chainId) {
        const initializedChains = this.getInitializedChains();
        return Boolean(initializedChains['names'][chainId.toString()]);
    }
    static _getChainParams(chain, customChains) {
        const initializedChains = this.getInitializedChains(customChains);
        if (typeof chain === 'number' || typeof chain === 'bigint') {
            chain = chain.toString();
            if (initializedChains['names'][chain]) {
                const name = initializedChains['names'][chain];
                return initializedChains[name];
            }
            throw new Error(`Chain with ID ${chain} not supported`);
        }
        if (initializedChains[chain] !== undefined) {
            return initializedChains[chain];
        }
        throw new Error(`Chain with name ${chain} not supported`);
    }
    /**
     * Sets the chain
     * @param chain String ('mainnet') or Number (1) chain representation.
     *              Or, a Dictionary of chain parameters for a private network.
     * @returns The dictionary with parameters set as chain
     */
    setChain(chain) {
        if (typeof chain === 'number' || typeof chain === 'bigint' || typeof chain === 'string') {
            this._chainParams = Common._getChainParams(chain, this._customChains);
        }
        else if (typeof chain === 'object') {
            if (this._customChains.length > 0) {
                throw new Error('Chain must be a string, number, or bigint when initialized with customChains passed in');
            }
            const required = ['networkId', 'genesis', 'hardforks', 'bootstrapNodes'];
            for (const param of required) {
                if (!(param in chain)) {
                    throw new Error(`Missing required chain parameter: ${param}`);
                }
            }
            this._chainParams = chain;
        }
        else {
            throw new Error('Wrong input format');
        }
        for (const hf of this.hardforks()) {
            if (hf.block === undefined) {
                throw new Error(`Hardfork cannot have undefined block number`);
            }
        }
        return this._chainParams;
    }
    /**
     * Sets the hardfork to get params for
     * @param hardfork String identifier (e.g. 'byzantium') or {@link Hardfork} enum
     */
    setHardfork(hardfork) {
        let existing = false;
        for (const hfChanges of this.HARDFORK_CHANGES) {
            if (hfChanges[0] === hardfork) {
                if (this._hardfork !== hardfork) {
                    this._hardfork = hardfork;
                    this._buildParamsCache();
                    this._buildActivatedEIPsCache();
                    this.events.emit('hardforkChanged', hardfork);
                }
                existing = true;
            }
        }
        if (!existing) {
            throw new Error(`Hardfork with name ${hardfork} not supported`);
        }
    }
    /**
     * Returns the hardfork either based on block numer (older HFs) or
     * timestamp (Shanghai upwards).
     *
     * An optional TD takes precedence in case the corresponding HF block
     * is set to `null` or otherwise needs to match (if not an error
     * will be thrown).
     *
     * @param Opts Block number, timestamp or TD (all optional)
     * @returns The name of the HF
     */
    getHardforkBy(opts) {
        let { blockNumber, timestamp, td } = opts;
        blockNumber = (0, util_1$a.toType)(blockNumber, util_1$a.TypeOutput.BigInt);
        td = (0, util_1$a.toType)(td, util_1$a.TypeOutput.BigInt);
        timestamp = (0, util_1$a.toType)(timestamp, util_1$a.TypeOutput.BigInt);
        // Filter out hardforks with no block number, no ttd or no timestamp (i.e. unapplied hardforks)
        const hfs = this.hardforks().filter((hf) => hf.block !== null || (hf.ttd !== null && hf.ttd !== undefined) || hf.timestamp !== undefined);
        const mergeIndex = hfs.findIndex((hf) => hf.ttd !== null && hf.ttd !== undefined);
        const doubleTTDHF = hfs
            .slice(mergeIndex + 1)
            .findIndex((hf) => hf.ttd !== null && hf.ttd !== undefined);
        if (doubleTTDHF >= 0) {
            throw Error(`More than one merge hardforks found with ttd specified`);
        }
        // Find the first hardfork that has a block number greater than `blockNumber`
        // (skips the merge hardfork since it cannot have a block number specified).
        // If timestamp is not provided, it also skips timestamps hardforks to continue
        // discovering/checking number hardforks.
        let hfIndex = hfs.findIndex((hf) => (blockNumber !== undefined &&
            hf.block !== null &&
            BigInt(hf.block) > blockNumber) ||
            (timestamp !== undefined && hf.timestamp !== undefined && hf.timestamp > timestamp));
        if (hfIndex === -1) {
            // all hardforks apply, set hfIndex to the last one as that's the candidate
            hfIndex = hfs.length;
        }
        else if (hfIndex === 0) {
            // cannot have a case where a block number is before all applied hardforks
            // since the chain has to start with a hardfork
            throw Error('Must have at least one hardfork at block 0');
        }
        // If timestamp is not provided, we need to rollback to the last hf with block or ttd
        if (timestamp === undefined) {
            const stepBack = hfs
                .slice(0, hfIndex)
                .reverse()
                .findIndex((hf) => hf.block !== null || hf.ttd !== undefined);
            hfIndex = hfIndex - stepBack;
        }
        // Move hfIndex one back to arrive at candidate hardfork
        hfIndex = hfIndex - 1;
        // If the timestamp was not provided, we could have skipped timestamp hardforks to look for number
        // hardforks. so it will now be needed to rollback
        if (hfs[hfIndex].block === null && hfs[hfIndex].timestamp === undefined) {
            // We're on the merge hardfork.  Let's check the TTD
            if (td === undefined || td === null || BigInt(hfs[hfIndex].ttd) > td) {
                // Merge ttd greater than current td so we're on hardfork before merge
                hfIndex -= 1;
            }
        }
        else {
            if (mergeIndex >= 0 && td !== undefined && td !== null) {
                if (hfIndex >= mergeIndex && BigInt(hfs[mergeIndex].ttd) > td) {
                    throw Error('Maximum HF determined by total difficulty is lower than the block number HF');
                }
                else if (hfIndex < mergeIndex && BigInt(hfs[mergeIndex].ttd) < td) {
                    throw Error('HF determined by block number is lower than the minimum total difficulty HF');
                }
            }
        }
        const hfStartIndex = hfIndex;
        // Move the hfIndex to the end of the hardforks that might be scheduled on the same block/timestamp
        // This won't anyway be the case with Merge hfs
        for (; hfIndex < hfs.length - 1; hfIndex++) {
            // break out if hfIndex + 1 is not scheduled at hfIndex
            if (hfs[hfIndex].block !== hfs[hfIndex + 1].block ||
                hfs[hfIndex].timestamp !== hfs[hfIndex + 1].timestamp) {
                break;
            }
        }
        if (timestamp !== undefined) {
            const minTimeStamp = hfs
                .slice(0, hfStartIndex)
                .reduce((acc, hf) => Math.max(Number(hf.timestamp ?? '0'), acc), 0);
            if (minTimeStamp > timestamp) {
                throw Error(`Maximum HF determined by timestamp is lower than the block number/ttd HF`);
            }
            const maxTimeStamp = hfs
                .slice(hfIndex + 1)
                .reduce((acc, hf) => Math.min(Number(hf.timestamp ?? timestamp), acc), Number(timestamp));
            if (maxTimeStamp < timestamp) {
                throw Error(`Maximum HF determined by block number/ttd is lower than timestamp HF`);
            }
        }
        const hardfork = hfs[hfIndex];
        return hardfork.name;
    }
    /**
     * Sets a new hardfork either based on block numer (older HFs) or
     * timestamp (Shanghai upwards).
     *
     * An optional TD takes precedence in case the corresponding HF block
     * is set to `null` or otherwise needs to match (if not an error
     * will be thrown).
     *
     * @param Opts Block number, timestamp or TD (all optional)
     * @returns The name of the HF set
     */
    setHardforkBy(opts) {
        const hardfork = this.getHardforkBy(opts);
        this.setHardfork(hardfork);
        return hardfork;
    }
    /**
     * Internal helper function, returns the params for the given hardfork for the chain set
     * @param hardfork Hardfork name
     * @returns Dictionary with hardfork params or null if hardfork not on chain
     */
    _getHardfork(hardfork) {
        const hfs = this.hardforks();
        for (const hf of hfs) {
            if (hf['name'] === hardfork)
                return hf;
        }
        return null;
    }
    /**
     * Sets the active EIPs
     * @param eips
     */
    setEIPs(eips = []) {
        for (const eip of eips) {
            if (!(eip in eips_js_1.EIPs)) {
                throw new Error(`${eip} not supported`);
            }
            const minHF = this.gteHardfork(eips_js_1.EIPs[eip]['minimumHardfork']);
            if (!minHF) {
                throw new Error(`${eip} cannot be activated on hardfork ${this.hardfork()}, minimumHardfork: ${minHF}`);
            }
        }
        this._eips = eips;
        this._buildParamsCache();
        this._buildActivatedEIPsCache();
        for (const eip of eips) {
            if (eips_js_1.EIPs[eip].requiredEIPs !== undefined) {
                for (const elem of eips_js_1.EIPs[eip].requiredEIPs) {
                    if (!(eips.includes(elem) || this.isActivatedEIP(elem))) {
                        throw new Error(`${eip} requires EIP ${elem}, but is not included in the EIP list`);
                    }
                }
            }
        }
    }
    /**
     * Internal helper for _buildParamsCache()
     */
    _mergeWithParamsCache(params) {
        this._paramsCache['gasConfig'] = {
            ...this._paramsCache['gasConfig'],
            ...params['gasConfig'],
        };
        this._paramsCache['gasPrices'] = {
            ...this._paramsCache['gasPrices'],
            ...params['gasPrices'],
        };
        this._paramsCache['pow'] = {
            ...this._paramsCache['pow'],
            ...params['pow'],
        };
        this._paramsCache['sharding'] = {
            ...this._paramsCache['sharding'],
            ...params['sharding'],
        };
        this._paramsCache['vm'] = {
            ...this._paramsCache['vm'],
            ...params['vm'],
        };
    }
    /**
     * Build up a cache for all parameter values for the current HF and all activated EIPs
     */
    _buildParamsCache() {
        this._paramsCache = {};
        // Iterate through all hardforks up to hardfork set
        const hardfork = this.hardfork();
        for (const hfChanges of this.HARDFORK_CHANGES) {
            // EIP-referencing HF config (e.g. for berlin)
            if ('eips' in hfChanges[1]) {
                const hfEIPs = hfChanges[1]['eips'];
                for (const eip of hfEIPs) {
                    if (!(eip in eips_js_1.EIPs)) {
                        throw new Error(`${eip} not supported`);
                    }
                    this._mergeWithParamsCache(eips_js_1.EIPs[eip]);
                }
                // Parameter-inlining HF config (e.g. for istanbul)
            }
            else {
                this._mergeWithParamsCache(hfChanges[1]);
            }
            if (hfChanges[0] === hardfork)
                break;
        }
        // Iterate through all additionally activated EIPs
        for (const eip of this._eips) {
            if (!(eip in eips_js_1.EIPs)) {
                throw new Error(`${eip} not supported`);
            }
            this._mergeWithParamsCache(eips_js_1.EIPs[eip]);
        }
    }
    _buildActivatedEIPsCache() {
        this._activatedEIPsCache = [];
        for (const hfChanges of this.HARDFORK_CHANGES) {
            const hf = hfChanges[1];
            if (this.gteHardfork(hf['name']) && 'eips' in hf) {
                this._activatedEIPsCache = this._activatedEIPsCache.concat(hf['eips']);
            }
        }
        this._activatedEIPsCache = this._activatedEIPsCache.concat(this._eips);
    }
    /**
     * Returns a parameter for the current chain setup
     *
     * If the parameter is present in an EIP, the EIP always takes precedence.
     * Otherwise the parameter is taken from the latest applied HF with
     * a change on the respective parameter.
     *
     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')
     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)
     * @returns The value requested or `BigInt(0)` if not found
     */
    param(topic, name) {
        // TODO: consider the case that different active EIPs
        // can change the same parameter
        let value = null;
        if (this._paramsCache[topic] !== undefined &&
            this._paramsCache[topic][name] !== undefined) {
            value = this._paramsCache[topic][name].v;
        }
        return BigInt(value ?? 0);
    }
    /**
     * Returns the parameter corresponding to a hardfork
     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')
     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)
     * @param hardfork Hardfork name
     * @returns The value requested or `BigInt(0)` if not found
     */
    paramByHardfork(topic, name, hardfork) {
        let value = null;
        for (const hfChanges of this.HARDFORK_CHANGES) {
            // EIP-referencing HF config (e.g. for berlin)
            if ('eips' in hfChanges[1]) {
                const hfEIPs = hfChanges[1]['eips'];
                for (const eip of hfEIPs) {
                    const valueEIP = this.paramByEIP(topic, name, eip);
                    value = typeof valueEIP === 'bigint' ? valueEIP : value;
                }
                // Parameter-inlining HF config (e.g. for istanbul)
            }
            else {
                if (hfChanges[1][topic] !== undefined &&
                    hfChanges[1][topic][name] !== undefined) {
                    value = hfChanges[1][topic][name].v;
                }
            }
            if (hfChanges[0] === hardfork)
                break;
        }
        return BigInt(value ?? 0);
    }
    /**
     * Returns a parameter corresponding to an EIP
     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')
     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)
     * @param eip Number of the EIP
     * @returns The value requested or `undefined` if not found
     */
    paramByEIP(topic, name, eip) {
        if (!(eip in eips_js_1.EIPs)) {
            throw new Error(`${eip} not supported`);
        }
        const eipParams = eips_js_1.EIPs[eip];
        if (!(topic in eipParams)) {
            return undefined;
        }
        if (eipParams[topic][name] === undefined) {
            return undefined;
        }
        const value = eipParams[topic][name].v;
        return BigInt(value);
    }
    /**
     * Returns a parameter for the hardfork active on block number or
     * optional provided total difficulty (Merge HF)
     * @param topic Parameter topic
     * @param name Parameter name
     * @param blockNumber Block number
     * @param td Total difficulty
     *    * @returns The value requested or `BigInt(0)` if not found
     */
    paramByBlock(topic, name, blockNumber, td, timestamp) {
        const hardfork = this.getHardforkBy({ blockNumber, td, timestamp });
        return this.paramByHardfork(topic, name, hardfork);
    }
    /**
     * Checks if an EIP is activated by either being included in the EIPs
     * manually passed in with the {@link CommonOpts.eips} or in a
     * hardfork currently being active
     *
     * Note: this method only works for EIPs being supported
     * by the {@link CommonOpts.eips} constructor option
     * @param eip
     */
    isActivatedEIP(eip) {
        if (this._activatedEIPsCache.includes(eip)) {
            return true;
        }
        return false;
    }
    /**
     * Checks if set or provided hardfork is active on block number
     * @param hardfork Hardfork name or null (for HF set)
     * @param blockNumber
     * @returns True if HF is active on block number
     */
    hardforkIsActiveOnBlock(hardfork, blockNumber) {
        blockNumber = (0, util_1$a.toType)(blockNumber, util_1$a.TypeOutput.BigInt);
        hardfork = hardfork ?? this._hardfork;
        const hfBlock = this.hardforkBlock(hardfork);
        if (typeof hfBlock === 'bigint' && hfBlock !== util_1$a.BIGINT_0 && blockNumber >= hfBlock) {
            return true;
        }
        return false;
    }
    /**
     * Alias to hardforkIsActiveOnBlock when hardfork is set
     * @param blockNumber
     * @returns True if HF is active on block number
     */
    activeOnBlock(blockNumber) {
        return this.hardforkIsActiveOnBlock(null, blockNumber);
    }
    /**
     * Sequence based check if given or set HF1 is greater than or equal HF2
     * @param hardfork1 Hardfork name or null (if set)
     * @param hardfork2 Hardfork name
     * @param opts Hardfork options
     * @returns True if HF1 gte HF2
     */
    hardforkGteHardfork(hardfork1, hardfork2) {
        hardfork1 = hardfork1 ?? this._hardfork;
        const hardforks = this.hardforks();
        let posHf1 = -1, posHf2 = -1;
        let index = 0;
        for (const hf of hardforks) {
            if (hf['name'] === hardfork1)
                posHf1 = index;
            if (hf['name'] === hardfork2)
                posHf2 = index;
            index += 1;
        }
        return posHf1 >= posHf2 && posHf2 !== -1;
    }
    /**
     * Alias to hardforkGteHardfork when hardfork is set
     * @param hardfork Hardfork name
     * @returns True if hardfork set is greater than hardfork provided
     */
    gteHardfork(hardfork) {
        return this.hardforkGteHardfork(null, hardfork);
    }
    /**
     * Returns the hardfork change block for hardfork provided or set
     * @param hardfork Hardfork name, optional if HF set
     * @returns Block number or null if unscheduled
     */
    hardforkBlock(hardfork) {
        hardfork = hardfork ?? this._hardfork;
        const block = this._getHardfork(hardfork)?.['block'];
        if (block === undefined || block === null) {
            return null;
        }
        return BigInt(block);
    }
    hardforkTimestamp(hardfork) {
        hardfork = hardfork ?? this._hardfork;
        const timestamp = this._getHardfork(hardfork)?.['timestamp'];
        if (timestamp === undefined || timestamp === null) {
            return null;
        }
        return BigInt(timestamp);
    }
    /**
     * Returns the hardfork change block for eip
     * @param eip EIP number
     * @returns Block number or null if unscheduled
     */
    eipBlock(eip) {
        for (const hfChanges of this.HARDFORK_CHANGES) {
            const hf = hfChanges[1];
            if ('eips' in hf) {
                // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
                if (hf['eips'].includes(eip)) {
                    return this.hardforkBlock(hfChanges[0]);
                }
            }
        }
        return null;
    }
    /**
     * Returns the hardfork change total difficulty (Merge HF) for hardfork provided or set
     * @param hardfork Hardfork name, optional if HF set
     * @returns Total difficulty or null if no set
     */
    hardforkTTD(hardfork) {
        hardfork = hardfork ?? this._hardfork;
        const ttd = this._getHardfork(hardfork)?.['ttd'];
        if (ttd === undefined || ttd === null) {
            return null;
        }
        return BigInt(ttd);
    }
    /**
     * Returns the change block for the next hardfork after the hardfork provided or set
     * @param hardfork Hardfork name, optional if HF set
     * @returns Block timestamp, number or null if not available
     */
    nextHardforkBlockOrTimestamp(hardfork) {
        hardfork = hardfork ?? this._hardfork;
        const hfs = this.hardforks();
        let hfIndex = hfs.findIndex((hf) => hf.name === hardfork);
        // If the current hardfork is merge, go one behind as merge hf is not part of these
        // calcs even if the merge hf block is set
        if (hardfork === enums_js_1.Hardfork.Paris) {
            hfIndex -= 1;
        }
        // Hardfork not found
        if (hfIndex < 0) {
            return null;
        }
        let currHfTimeOrBlock = hfs[hfIndex].timestamp ?? hfs[hfIndex].block;
        currHfTimeOrBlock =
            currHfTimeOrBlock !== null && currHfTimeOrBlock !== undefined
                ? Number(currHfTimeOrBlock)
                : null;
        const nextHf = hfs.slice(hfIndex + 1).find((hf) => {
            let hfTimeOrBlock = hf.timestamp ?? hf.block;
            hfTimeOrBlock =
                hfTimeOrBlock !== null && hfTimeOrBlock !== undefined ? Number(hfTimeOrBlock) : null;
            return (hf.name !== enums_js_1.Hardfork.Paris &&
                hfTimeOrBlock !== null &&
                hfTimeOrBlock !== undefined &&
                hfTimeOrBlock !== currHfTimeOrBlock);
        });
        // If no next hf found with valid block or timestamp return null
        if (nextHf === undefined) {
            return null;
        }
        const nextHfBlock = nextHf.timestamp ?? nextHf.block;
        if (nextHfBlock === null || nextHfBlock === undefined) {
            return null;
        }
        return BigInt(nextHfBlock);
    }
    /**
     * Internal helper function to calculate a fork hash
     * @param hardfork Hardfork name
     * @param genesisHash Genesis block hash of the chain
     * @returns Fork hash as hex string
     */
    _calcForkHash(hardfork, genesisHash) {
        let hfBytes = new Uint8Array(0);
        let prevBlockOrTime = 0;
        for (const hf of this.hardforks()) {
            const { block, timestamp, name } = hf;
            // Timestamp to be used for timestamp based hfs even if we may bundle
            // block number with them retrospectively
            let blockOrTime = timestamp ?? block;
            blockOrTime = blockOrTime !== null ? Number(blockOrTime) : null;
            // Skip for chainstart (0), not applied HFs (null) and
            // when already applied on same blockOrTime HFs
            // and on the merge since forkhash doesn't change on merge hf
            if (typeof blockOrTime === 'number' &&
                blockOrTime !== 0 &&
                blockOrTime !== prevBlockOrTime &&
                name !== enums_js_1.Hardfork.Paris) {
                const hfBlockBytes = (0, util_1$a.hexToBytes)('0x' + blockOrTime.toString(16).padStart(16, '0'));
                hfBytes = (0, util_1$a.concatBytes)(hfBytes, hfBlockBytes);
                prevBlockOrTime = blockOrTime;
            }
            if (hf.name === hardfork)
                break;
        }
        const inputBytes = (0, util_1$a.concatBytes)(genesisHash, hfBytes);
        // CRC32 delivers result as signed (negative) 32-bit integer,
        // convert to hex string
        const forkhash = (0, util_1$a.bytesToHex)((0, util_1$a.intToBytes)((0, crc_js_1.crc32)(inputBytes) >>> 0));
        return forkhash;
    }
    /**
     * Returns an eth/64 compliant fork hash (EIP-2124)
     * @param hardfork Hardfork name, optional if HF set
     * @param genesisHash Genesis block hash of the chain, optional if already defined and not needed to be calculated
     */
    forkHash(hardfork, genesisHash) {
        hardfork = hardfork ?? this._hardfork;
        const data = this._getHardfork(hardfork);
        if (data === null ||
            (data?.block === null && data?.timestamp === undefined && data?.ttd === undefined)) {
            const msg = 'No fork hash calculation possible for future hardfork';
            throw new Error(msg);
        }
        if (data?.forkHash !== null && data?.forkHash !== undefined) {
            return data.forkHash;
        }
        if (!genesisHash)
            throw new Error('genesisHash required for forkHash calculation');
        return this._calcForkHash(hardfork, genesisHash);
    }
    /**
     *
     * @param forkHash Fork hash as a hex string
     * @returns Array with hardfork data (name, block, forkHash)
     */
    hardforkForForkHash(forkHash) {
        const resArray = this.hardforks().filter((hf) => {
            return hf.forkHash === forkHash;
        });
        return resArray.length >= 1 ? resArray[resArray.length - 1] : null;
    }
    /**
     * Sets any missing forkHashes on the passed-in {@link Common} instance
     * @param common The {@link Common} to set the forkHashes for
     * @param genesisHash The genesis block hash
     */
    setForkHashes(genesisHash) {
        for (const hf of this.hardforks()) {
            const blockOrTime = hf.timestamp ?? hf.block;
            if ((hf.forkHash === null || hf.forkHash === undefined) &&
                ((blockOrTime !== null && blockOrTime !== undefined) || typeof hf.ttd !== 'undefined')) {
                hf.forkHash = this.forkHash(hf.name, genesisHash);
            }
        }
    }
    /**
     * Returns the Genesis parameters of the current chain
     * @returns Genesis dictionary
     */
    genesis() {
        return this._chainParams.genesis;
    }
    /**
     * Returns the hardforks for current chain
     * @returns {Array} Array with arrays of hardforks
     */
    hardforks() {
        return this._chainParams.hardforks;
    }
    /**
     * Returns bootstrap nodes for the current chain
     * @returns {Dictionary} Dict with bootstrap nodes
     */
    bootstrapNodes() {
        return this._chainParams.bootstrapNodes;
    }
    /**
     * Returns DNS networks for the current chain
     * @returns {String[]} Array of DNS ENR urls
     */
    dnsNetworks() {
        return this._chainParams.dnsNetworks;
    }
    /**
     * Returns the hardfork set
     * @returns Hardfork name
     */
    hardfork() {
        return this._hardfork;
    }
    /**
     * Returns the Id of current chain
     * @returns chain Id
     */
    chainId() {
        return BigInt(this._chainParams.chainId);
    }
    /**
     * Returns the name of current chain
     * @returns chain name (lower case)
     */
    chainName() {
        return this._chainParams.name;
    }
    /**
     * Returns the Id of current network
     * @returns network Id
     */
    networkId() {
        return BigInt(this._chainParams.networkId);
    }
    /**
     * Returns the additionally activated EIPs
     * (by using the `eips` constructor option)
     * @returns List of EIPs
     */
    eips() {
        return this._eips;
    }
    /**
     * Returns the consensus type of the network
     * Possible values: "pow"|"poa"|"pos"
     *
     * Note: This value can update along a Hardfork.
     */
    consensusType() {
        const hardfork = this.hardfork();
        let value;
        for (const hfChanges of this.HARDFORK_CHANGES) {
            if ('consensus' in hfChanges[1]) {
                value = hfChanges[1]['consensus']['type'];
            }
            if (hfChanges[0] === hardfork)
                break;
        }
        return value ?? this._chainParams['consensus']['type'];
    }
    /**
     * Returns the concrete consensus implementation
     * algorithm or protocol for the network
     * e.g. "ethash" for "pow" consensus type,
     * "clique" for "poa" consensus type or
     * "casper" for "pos" consensus type.
     *
     * Note: This value can update along a Hardfork.
     */
    consensusAlgorithm() {
        const hardfork = this.hardfork();
        let value;
        for (const hfChanges of this.HARDFORK_CHANGES) {
            if ('consensus' in hfChanges[1]) {
                value = hfChanges[1]['consensus']['algorithm'];
            }
            if (hfChanges[0] === hardfork)
                break;
        }
        return value ?? this._chainParams['consensus']['algorithm'];
    }
    /**
     * Returns a dictionary with consensus configuration
     * parameters based on the consensus algorithm
     *
     * Expected returns (parameters must be present in
     * the respective chain json files):
     *
     * ethash: empty object
     * clique: period, epoch
     * casper: empty object
     *
     * Note: This value can update along a Hardfork.
     */
    consensusConfig() {
        const hardfork = this.hardfork();
        let value;
        for (const hfChanges of this.HARDFORK_CHANGES) {
            if ('consensus' in hfChanges[1]) {
                // The config parameter is named after the respective consensus algorithm
                const config = hfChanges[1];
                const algorithm = config['consensus']['algorithm'];
                value = config['consensus'][algorithm];
            }
            if (hfChanges[0] === hardfork)
                break;
        }
        return (value ?? this._chainParams['consensus'][this.consensusAlgorithm()] ?? {});
    }
    /**
     * Returns a deep copy of this {@link Common} instance.
     */
    copy() {
        const copy = Object.assign(Object.create(Object.getPrototypeOf(this)), this);
        copy.events = new events_1.EventEmitter();
        return copy;
    }
    static getInitializedChains(customChains) {
        const names = {};
        for (const [name, id] of Object.entries(enums_js_1.Chain)) {
            names[id] = name.toLowerCase();
        }
        const chains = { ...chains_js_1.chains };
        if (customChains) {
            for (const chain of customChains) {
                const { name } = chain;
                names[chain.chainId.toString()] = name;
                chains[name] = chain;
            }
        }
        chains.names = names;
        return chains;
    }
};
common.Common = Common$1;

var interfaces = {};

/**
 * External Interfaces for other EthereumJS libraries
 */
Object.defineProperty(interfaces, "__esModule", { value: true });

var types$1 = {};

Object.defineProperty(types$1, "__esModule", { value: true });

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar(common, exports);
	__exportStar(enums, exports);
	__exportStar(interfaces, exports);
	__exportStar(types$1, exports);
	__exportStar(utils$2, exports);
	
} (cjs$1));

var types = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.isBlobEIP4844TxData = exports.isFeeMarketEIP1559TxData = exports.isAccessListEIP2930TxData = exports.isLegacyTxData = exports.isBlobEIP4844Tx = exports.isFeeMarketEIP1559Tx = exports.isAccessListEIP2930Tx = exports.isLegacyTx = exports.TransactionType = exports.isAccessList = exports.isAccessListBytes = exports.Capability = void 0;
	const util_1 = cjs$2;
	(function (Capability) {
	    /**
	     * Tx supports EIP-155 replay protection
	     * See: [155](https://eips.ethereum.org/EIPS/eip-155) Replay Attack Protection EIP
	     */
	    Capability[Capability["EIP155ReplayProtection"] = 155] = "EIP155ReplayProtection";
	    /**
	     * Tx supports EIP-1559 gas fee market mechanism
	     * See: [1559](https://eips.ethereum.org/EIPS/eip-1559) Fee Market EIP
	     */
	    Capability[Capability["EIP1559FeeMarket"] = 1559] = "EIP1559FeeMarket";
	    /**
	     * Tx is a typed transaction as defined in EIP-2718
	     * See: [2718](https://eips.ethereum.org/EIPS/eip-2718) Transaction Type EIP
	     */
	    Capability[Capability["EIP2718TypedTransaction"] = 2718] = "EIP2718TypedTransaction";
	    /**
	     * Tx supports access list generation as defined in EIP-2930
	     * See: [2930](https://eips.ethereum.org/EIPS/eip-2930) Access Lists EIP
	     */
	    Capability[Capability["EIP2930AccessLists"] = 2930] = "EIP2930AccessLists";
	})(exports.Capability || (exports.Capability = {}));
	function isAccessListBytes(input) {
	    if (input.length === 0) {
	        return true;
	    }
	    const firstItem = input[0];
	    if (Array.isArray(firstItem)) {
	        return true;
	    }
	    return false;
	}
	exports.isAccessListBytes = isAccessListBytes;
	function isAccessList(input) {
	    return !isAccessListBytes(input); // This is exactly the same method, except the output is negated.
	}
	exports.isAccessList = isAccessList;
	/**
	 * Encompassing type for all transaction types.
	 */
	var TransactionType;
	(function (TransactionType) {
	    TransactionType[TransactionType["Legacy"] = 0] = "Legacy";
	    TransactionType[TransactionType["AccessListEIP2930"] = 1] = "AccessListEIP2930";
	    TransactionType[TransactionType["FeeMarketEIP1559"] = 2] = "FeeMarketEIP1559";
	    TransactionType[TransactionType["BlobEIP4844"] = 3] = "BlobEIP4844";
	})(TransactionType = exports.TransactionType || (exports.TransactionType = {}));
	function isLegacyTx(tx) {
	    return tx.type === TransactionType.Legacy;
	}
	exports.isLegacyTx = isLegacyTx;
	function isAccessListEIP2930Tx(tx) {
	    return tx.type === TransactionType.AccessListEIP2930;
	}
	exports.isAccessListEIP2930Tx = isAccessListEIP2930Tx;
	function isFeeMarketEIP1559Tx(tx) {
	    return tx.type === TransactionType.FeeMarketEIP1559;
	}
	exports.isFeeMarketEIP1559Tx = isFeeMarketEIP1559Tx;
	function isBlobEIP4844Tx(tx) {
	    return tx.type === TransactionType.BlobEIP4844;
	}
	exports.isBlobEIP4844Tx = isBlobEIP4844Tx;
	function isLegacyTxData(txData) {
	    const txType = Number((0, util_1.bytesToBigInt)((0, util_1.toBytes)(txData.type)));
	    return txType === TransactionType.Legacy;
	}
	exports.isLegacyTxData = isLegacyTxData;
	function isAccessListEIP2930TxData(txData) {
	    const txType = Number((0, util_1.bytesToBigInt)((0, util_1.toBytes)(txData.type)));
	    return txType === TransactionType.AccessListEIP2930;
	}
	exports.isAccessListEIP2930TxData = isAccessListEIP2930TxData;
	function isFeeMarketEIP1559TxData(txData) {
	    const txType = Number((0, util_1.bytesToBigInt)((0, util_1.toBytes)(txData.type)));
	    return txType === TransactionType.FeeMarketEIP1559;
	}
	exports.isFeeMarketEIP1559TxData = isFeeMarketEIP1559TxData;
	function isBlobEIP4844TxData(txData) {
	    const txType = Number((0, util_1.bytesToBigInt)((0, util_1.toBytes)(txData.type)));
	    return txType === TransactionType.BlobEIP4844;
	}
	exports.isBlobEIP4844TxData = isBlobEIP4844TxData;
	
} (types));

var util$5 = {};

Object.defineProperty(util$5, "__esModule", { value: true });
util$5.txTypeBytes = util$5.AccessLists = util$5.checkMaxInitCodeSize = void 0;
const util_1$9 = cjs$2;
const types_js_1$7 = types;
function checkMaxInitCodeSize(common, length) {
    const maxInitCodeSize = common.param('vm', 'maxInitCodeSize');
    if (maxInitCodeSize && BigInt(length) > maxInitCodeSize) {
        throw new Error(`the initcode size of this transaction is too large: it is ${length} while the max is ${common.param('vm', 'maxInitCodeSize')}`);
    }
}
util$5.checkMaxInitCodeSize = checkMaxInitCodeSize;
class AccessLists {
    static getAccessListData(accessList) {
        let AccessListJSON;
        let bufferAccessList;
        if ((0, types_js_1$7.isAccessList)(accessList)) {
            AccessListJSON = accessList;
            const newAccessList = [];
            for (let i = 0; i < accessList.length; i++) {
                const item = accessList[i];
                const addressBytes = (0, util_1$9.hexToBytes)(item.address);
                const storageItems = [];
                for (let index = 0; index < item.storageKeys.length; index++) {
                    storageItems.push((0, util_1$9.hexToBytes)(item.storageKeys[index]));
                }
                newAccessList.push([addressBytes, storageItems]);
            }
            bufferAccessList = newAccessList;
        }
        else {
            bufferAccessList = accessList ?? [];
            // build the JSON
            const json = [];
            for (let i = 0; i < bufferAccessList.length; i++) {
                const data = bufferAccessList[i];
                const address = (0, util_1$9.bytesToHex)(data[0]);
                const storageKeys = [];
                for (let item = 0; item < data[1].length; item++) {
                    storageKeys.push((0, util_1$9.bytesToHex)(data[1][item]));
                }
                const jsonItem = {
                    address,
                    storageKeys,
                };
                json.push(jsonItem);
            }
            AccessListJSON = json;
        }
        return {
            AccessListJSON,
            accessList: bufferAccessList,
        };
    }
    static verifyAccessList(accessList) {
        for (let key = 0; key < accessList.length; key++) {
            const accessListItem = accessList[key];
            const address = accessListItem[0];
            const storageSlots = accessListItem[1];
            if (accessListItem[2] !== undefined) {
                throw new Error('Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.');
            }
            if (address.length !== 20) {
                throw new Error('Invalid EIP-2930 transaction: address length should be 20 bytes');
            }
            for (let storageSlot = 0; storageSlot < storageSlots.length; storageSlot++) {
                if (storageSlots[storageSlot].length !== 32) {
                    throw new Error('Invalid EIP-2930 transaction: storage slot length should be 32 bytes');
                }
            }
        }
    }
    static getAccessListJSON(accessList) {
        const accessListJSON = [];
        for (let index = 0; index < accessList.length; index++) {
            const item = accessList[index];
            const JSONItem = {
                address: (0, util_1$9.bytesToHex)((0, util_1$9.setLengthLeft)(item[0], 20)),
                storageKeys: [],
            };
            const storageSlots = item[1];
            for (let slot = 0; slot < storageSlots.length; slot++) {
                const storageSlot = storageSlots[slot];
                JSONItem.storageKeys.push((0, util_1$9.bytesToHex)((0, util_1$9.setLengthLeft)(storageSlot, 32)));
            }
            accessListJSON.push(JSONItem);
        }
        return accessListJSON;
    }
    static getDataFeeEIP2930(accessList, common) {
        const accessListStorageKeyCost = common.param('gasPrices', 'accessListStorageKeyCost');
        const accessListAddressCost = common.param('gasPrices', 'accessListAddressCost');
        let slots = 0;
        for (let index = 0; index < accessList.length; index++) {
            const item = accessList[index];
            const storageSlots = item[1];
            slots += storageSlots.length;
        }
        const addresses = accessList.length;
        return addresses * Number(accessListAddressCost) + slots * Number(accessListStorageKeyCost);
    }
}
util$5.AccessLists = AccessLists;
function txTypeBytes(txType) {
    return (0, util_1$9.hexToBytes)('0x' + txType.toString(16).padStart(2, '0'));
}
util$5.txTypeBytes = txTypeBytes;

Object.defineProperty(baseTransaction, "__esModule", { value: true });
baseTransaction.BaseTransaction = void 0;
const common_1 = cjs$1;
const util_1$8 = cjs$2;
const types_js_1$6 = types;
const util_js_1$6 = util$5;
/**
 * This base class will likely be subject to further
 * refactoring along the introduction of additional tx types
 * on the Ethereum network.
 *
 * It is therefore not recommended to use directly.
 */
class BaseTransaction {
    constructor(txData, opts) {
        this.cache = {
            hash: undefined,
            dataFee: undefined,
            senderPubKey: undefined,
        };
        /**
         * List of tx type defining EIPs,
         * e.g. 1559 (fee market) and 2930 (access lists)
         * for FeeMarketEIP1559Transaction objects
         */
        this.activeCapabilities = [];
        /**
         * The default chain the tx falls back to if no Common
         * is provided and if the chain can't be derived from
         * a passed in chainId (only EIP-2718 typed txs) or
         * EIP-155 signature (legacy txs).
         *
         * @hidden
         */
        this.DEFAULT_CHAIN = common_1.Chain.Mainnet;
        const { nonce, gasLimit, to, value, data, v, r, s, type } = txData;
        this._type = Number((0, util_1$8.bytesToBigInt)((0, util_1$8.toBytes)(type)));
        this.txOptions = opts;
        const toB = (0, util_1$8.toBytes)(to === '' ? '0x' : to);
        const vB = (0, util_1$8.toBytes)(v === '' ? '0x' : v);
        const rB = (0, util_1$8.toBytes)(r === '' ? '0x' : r);
        const sB = (0, util_1$8.toBytes)(s === '' ? '0x' : s);
        this.nonce = (0, util_1$8.bytesToBigInt)((0, util_1$8.toBytes)(nonce === '' ? '0x' : nonce));
        this.gasLimit = (0, util_1$8.bytesToBigInt)((0, util_1$8.toBytes)(gasLimit === '' ? '0x' : gasLimit));
        this.to = toB.length > 0 ? new util_1$8.Address(toB) : undefined;
        this.value = (0, util_1$8.bytesToBigInt)((0, util_1$8.toBytes)(value === '' ? '0x' : value));
        this.data = (0, util_1$8.toBytes)(data === '' ? '0x' : data);
        this.v = vB.length > 0 ? (0, util_1$8.bytesToBigInt)(vB) : undefined;
        this.r = rB.length > 0 ? (0, util_1$8.bytesToBigInt)(rB) : undefined;
        this.s = sB.length > 0 ? (0, util_1$8.bytesToBigInt)(sB) : undefined;
        this._validateCannotExceedMaxInteger({ value: this.value, r: this.r, s: this.s });
        // geth limits gasLimit to 2^64-1
        this._validateCannotExceedMaxInteger({ gasLimit: this.gasLimit }, 64);
        // EIP-2681 limits nonce to 2^64-1 (cannot equal 2^64-1)
        this._validateCannotExceedMaxInteger({ nonce: this.nonce }, 64, true);
        const createContract = this.to === undefined || this.to === null;
        const allowUnlimitedInitCodeSize = opts.allowUnlimitedInitCodeSize ?? false;
        const common = opts.common ?? this._getCommon();
        if (createContract && common.isActivatedEIP(3860) && allowUnlimitedInitCodeSize === false) {
            (0, util_js_1$6.checkMaxInitCodeSize)(common, this.data.length);
        }
    }
    /**
     * Returns the transaction type.
     *
     * Note: legacy txs will return tx type `0`.
     */
    get type() {
        return this._type;
    }
    /**
     * Checks if a tx type defining capability is active
     * on a tx, for example the EIP-1559 fee market mechanism
     * or the EIP-2930 access list feature.
     *
     * Note that this is different from the tx type itself,
     * so EIP-2930 access lists can very well be active
     * on an EIP-1559 tx for example.
     *
     * This method can be useful for feature checks if the
     * tx type is unknown (e.g. when instantiated with
     * the tx factory).
     *
     * See `Capabilities` in the `types` module for a reference
     * on all supported capabilities.
     */
    supports(capability) {
        return this.activeCapabilities.includes(capability);
    }
    /**
     * Validates the transaction signature and minimum gas requirements.
     * @returns {string[]} an array of error strings
     */
    getValidationErrors() {
        const errors = [];
        if (this.isSigned() && !this.verifySignature()) {
            errors.push('Invalid Signature');
        }
        if (this.getBaseFee() > this.gasLimit) {
            errors.push(`gasLimit is too low. given ${this.gasLimit}, need at least ${this.getBaseFee()}`);
        }
        return errors;
    }
    /**
     * Validates the transaction signature and minimum gas requirements.
     * @returns {boolean} true if the transaction is valid, false otherwise
     */
    isValid() {
        const errors = this.getValidationErrors();
        return errors.length === 0;
    }
    /**
     * The minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)
     */
    getBaseFee() {
        const txFee = this.common.param('gasPrices', 'tx');
        let fee = this.getDataFee();
        if (txFee)
            fee += txFee;
        if (this.common.gteHardfork('homestead') && this.toCreationAddress()) {
            const txCreationFee = this.common.param('gasPrices', 'txCreation');
            if (txCreationFee)
                fee += txCreationFee;
        }
        return fee;
    }
    /**
     * The amount of gas paid for the data in this tx
     */
    getDataFee() {
        const txDataZero = this.common.param('gasPrices', 'txDataZero');
        const txDataNonZero = this.common.param('gasPrices', 'txDataNonZero');
        let cost = util_1$8.BIGINT_0;
        for (let i = 0; i < this.data.length; i++) {
            this.data[i] === 0 ? (cost += txDataZero) : (cost += txDataNonZero);
        }
        if ((this.to === undefined || this.to === null) && this.common.isActivatedEIP(3860)) {
            const dataLength = BigInt(Math.ceil(this.data.length / 32));
            const initCodeCost = this.common.param('gasPrices', 'initCodeWordCost') * dataLength;
            cost += initCodeCost;
        }
        return cost;
    }
    /**
     * If the tx's `to` is to the creation address
     */
    toCreationAddress() {
        return this.to === undefined || this.to.bytes.length === 0;
    }
    isSigned() {
        const { v, r, s } = this;
        if (v === undefined || r === undefined || s === undefined) {
            return false;
        }
        else {
            return true;
        }
    }
    /**
     * Determines if the signature is valid
     */
    verifySignature() {
        try {
            // Main signature verification is done in `getSenderPublicKey()`
            const publicKey = this.getSenderPublicKey();
            return (0, util_1$8.unpadBytes)(publicKey).length !== 0;
        }
        catch (e) {
            return false;
        }
    }
    /**
     * Returns the sender's address
     */
    getSenderAddress() {
        return new util_1$8.Address((0, util_1$8.publicToAddress)(this.getSenderPublicKey()));
    }
    /**
     * Signs a transaction.
     *
     * Note that the signed tx is returned as a new object,
     * use as follows:
     * ```javascript
     * const signedTx = tx.sign(privateKey)
     * ```
     */
    sign(privateKey) {
        if (privateKey.length !== 32) {
            const msg = this._errorMsg('Private key must be 32 bytes in length.');
            throw new Error(msg);
        }
        // Hack for the constellation that we have got a legacy tx after spuriousDragon with a non-EIP155 conforming signature
        // and want to recreate a signature (where EIP155 should be applied)
        // Leaving this hack lets the legacy.spec.ts -> sign(), verifySignature() test fail
        // 2021-06-23
        let hackApplied = false;
        if (this.type === types_js_1$6.TransactionType.Legacy &&
            this.common.gteHardfork('spuriousDragon') &&
            !this.supports(types_js_1$6.Capability.EIP155ReplayProtection)) {
            this.activeCapabilities.push(types_js_1$6.Capability.EIP155ReplayProtection);
            hackApplied = true;
        }
        const msgHash = this.getHashedMessageToSign();
        const ecSignFunction = this.common.customCrypto?.ecsign ?? util_1$8.ecsign;
        const { v, r, s } = ecSignFunction(msgHash, privateKey);
        const tx = this.addSignature(v, r, s, true);
        // Hack part 2
        if (hackApplied) {
            const index = this.activeCapabilities.indexOf(types_js_1$6.Capability.EIP155ReplayProtection);
            if (index > -1) {
                this.activeCapabilities.splice(index, 1);
            }
        }
        return tx;
    }
    /**
     * Returns an object with the JSON representation of the transaction
     */
    toJSON() {
        return {
            type: (0, util_1$8.bigIntToHex)(BigInt(this.type)),
            nonce: (0, util_1$8.bigIntToHex)(this.nonce),
            gasLimit: (0, util_1$8.bigIntToHex)(this.gasLimit),
            to: this.to !== undefined ? this.to.toString() : undefined,
            value: (0, util_1$8.bigIntToHex)(this.value),
            data: (0, util_1$8.bytesToHex)(this.data),
            v: this.v !== undefined ? (0, util_1$8.bigIntToHex)(this.v) : undefined,
            r: this.r !== undefined ? (0, util_1$8.bigIntToHex)(this.r) : undefined,
            s: this.s !== undefined ? (0, util_1$8.bigIntToHex)(this.s) : undefined,
        };
    }
    /**
     * Does chain ID checks on common and returns a common
     * to be used on instantiation
     * @hidden
     *
     * @param common - {@link Common} instance from tx options
     * @param chainId - Chain ID from tx options (typed txs) or signature (legacy tx)
     */
    _getCommon(common, chainId) {
        // Chain ID provided
        if (chainId !== undefined) {
            const chainIdBigInt = (0, util_1$8.bytesToBigInt)((0, util_1$8.toBytes)(chainId));
            if (common) {
                if (common.chainId() !== chainIdBigInt) {
                    const msg = this._errorMsg(`The chain ID does not match the chain ID of Common. Got: ${chainIdBigInt}, expected: ${common.chainId}`);
                    throw new Error(msg);
                }
                // Common provided, chain ID does match
                // -> Return provided Common
                return common.copy();
            }
            else {
                if (common_1.Common.isSupportedChainId(chainIdBigInt)) {
                    // No Common, chain ID supported by Common
                    // -> Instantiate Common with chain ID
                    return new common_1.Common({ chain: chainIdBigInt });
                }
                else {
                    // No Common, chain ID not supported by Common
                    // -> Instantiate custom Common derived from DEFAULT_CHAIN
                    return common_1.Common.custom({
                        name: 'custom-chain',
                        networkId: chainIdBigInt,
                        chainId: chainIdBigInt,
                    }, { baseChain: this.DEFAULT_CHAIN });
                }
            }
        }
        else {
            // No chain ID provided
            // -> return Common provided or create new default Common
            return common?.copy() ?? new common_1.Common({ chain: this.DEFAULT_CHAIN });
        }
    }
    /**
     * Validates that an object with BigInt values cannot exceed the specified bit limit.
     * @param values Object containing string keys and BigInt values
     * @param bits Number of bits to check (64 or 256)
     * @param cannotEqual Pass true if the number also cannot equal one less the maximum value
     */
    _validateCannotExceedMaxInteger(values, bits = 256, cannotEqual = false) {
        for (const [key, value] of Object.entries(values)) {
            switch (bits) {
                case 64:
                    if (cannotEqual) {
                        if (value !== undefined && value >= util_1$8.MAX_UINT64) {
                            const msg = this._errorMsg(`${key} cannot equal or exceed MAX_UINT64 (2^64-1), given ${value}`);
                            throw new Error(msg);
                        }
                    }
                    else {
                        if (value !== undefined && value > util_1$8.MAX_UINT64) {
                            const msg = this._errorMsg(`${key} cannot exceed MAX_UINT64 (2^64-1), given ${value}`);
                            throw new Error(msg);
                        }
                    }
                    break;
                case 256:
                    if (cannotEqual) {
                        if (value !== undefined && value >= util_1$8.MAX_INTEGER) {
                            const msg = this._errorMsg(`${key} cannot equal or exceed MAX_INTEGER (2^256-1), given ${value}`);
                            throw new Error(msg);
                        }
                    }
                    else {
                        if (value !== undefined && value > util_1$8.MAX_INTEGER) {
                            const msg = this._errorMsg(`${key} cannot exceed MAX_INTEGER (2^256-1), given ${value}`);
                            throw new Error(msg);
                        }
                    }
                    break;
                default: {
                    const msg = this._errorMsg('unimplemented bits value');
                    throw new Error(msg);
                }
            }
        }
    }
    static _validateNotArray(values) {
        const txDataKeys = [
            'nonce',
            'gasPrice',
            'gasLimit',
            'to',
            'value',
            'data',
            'v',
            'r',
            's',
            'type',
            'baseFee',
            'maxFeePerGas',
            'chainId',
        ];
        for (const [key, value] of Object.entries(values)) {
            if (txDataKeys.includes(key)) {
                if (Array.isArray(value)) {
                    throw new Error(`${key} cannot be an array`);
                }
            }
        }
    }
    /**
     * Returns the shared error postfix part for _error() method
     * tx type implementations.
     */
    _getSharedErrorPostfix() {
        let hash = '';
        try {
            hash = this.isSigned() ? (0, util_1$8.bytesToHex)(this.hash()) : 'not available (unsigned)';
        }
        catch (e) {
            hash = 'error';
        }
        let isSigned = '';
        try {
            isSigned = this.isSigned().toString();
        }
        catch (e) {
            hash = 'error';
        }
        let hf = '';
        try {
            hf = this.common.hardfork();
        }
        catch (e) {
            hf = 'error';
        }
        let postfix = `tx type=${this.type} hash=${hash} nonce=${this.nonce} value=${this.value} `;
        postfix += `signed=${isSigned} hf=${hf}`;
        return postfix;
    }
}
baseTransaction.BaseTransaction = BaseTransaction;

var eip1559 = {};

Object.defineProperty(eip1559, "__esModule", { value: true });
eip1559.getUpfrontCost = void 0;
function getUpfrontCost(tx, baseFee) {
    const prio = tx.maxPriorityFeePerGas;
    const maxBase = tx.maxFeePerGas - baseFee;
    const inclusionFeePerGas = prio < maxBase ? prio : maxBase;
    const gasPrice = inclusionFeePerGas + baseFee;
    return tx.gasLimit * gasPrice + tx.value;
}
eip1559.getUpfrontCost = getUpfrontCost;

var eip2718 = {};

var legacy = {};

Object.defineProperty(legacy, "__esModule", { value: true });
legacy.getSenderPublicKey = legacy.validateHighS = legacy.hash = legacy.getDataFee = legacy.isSigned = legacy.errorMsg = void 0;
const util_1$7 = cjs$2;
const keccak_js_1$2 = keccak;
const baseTransaction_js_1$4 = baseTransaction;
const types_js_1$5 = types;
function errorMsg(tx, msg) {
    return `${msg} (${tx.errorStr()})`;
}
legacy.errorMsg = errorMsg;
function isSigned(tx) {
    const { v, r, s } = tx;
    if (v === undefined || r === undefined || s === undefined) {
        return false;
    }
    else {
        return true;
    }
}
legacy.isSigned = isSigned;
/**
 * The amount of gas paid for the data in this tx
 */
function getDataFee$1(tx, extraCost) {
    if (tx.cache.dataFee && tx.cache.dataFee.hardfork === tx.common.hardfork()) {
        return tx.cache.dataFee.value;
    }
    const cost = baseTransaction_js_1$4.BaseTransaction.prototype.getDataFee.bind(tx)() + (extraCost ?? 0n);
    if (Object.isFrozen(tx)) {
        tx.cache.dataFee = {
            value: cost,
            hardfork: tx.common.hardfork(),
        };
    }
    return cost;
}
legacy.getDataFee = getDataFee$1;
function hash(tx) {
    if (!tx.isSigned()) {
        const msg = errorMsg(tx, 'Cannot call hash method if transaction is not signed');
        throw new Error(msg);
    }
    const keccakFunction = tx.common.customCrypto.keccak256 ?? keccak_js_1$2.keccak256;
    if (Object.isFrozen(tx)) {
        if (!tx.cache.hash) {
            tx.cache.hash = keccakFunction(tx.serialize());
        }
        return tx.cache.hash;
    }
    return keccakFunction(tx.serialize());
}
legacy.hash = hash;
/**
 * EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2are considered invalid.
 * Reasoning: https://ethereum.stackexchange.com/a/55728
 */
function validateHighS(tx) {
    const { s } = tx;
    if (tx.common.gteHardfork('homestead') && s !== undefined && s > util_1$7.SECP256K1_ORDER_DIV_2) {
        const msg = errorMsg(tx, 'Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');
        throw new Error(msg);
    }
}
legacy.validateHighS = validateHighS;
function getSenderPublicKey(tx) {
    if (tx.cache.senderPubKey !== undefined) {
        return tx.cache.senderPubKey;
    }
    const msgHash = tx.getMessageToVerifySignature();
    const { v, r, s } = tx;
    validateHighS(tx);
    try {
        const ecrecoverFunction = tx.common.customCrypto.ecrecover ?? util_1$7.ecrecover;
        const sender = ecrecoverFunction(msgHash, v, (0, util_1$7.bigIntToUnpaddedBytes)(r), (0, util_1$7.bigIntToUnpaddedBytes)(s), tx.supports(types_js_1$5.Capability.EIP155ReplayProtection) ? tx.common.chainId() : undefined);
        if (Object.isFrozen(tx)) {
            tx.cache.senderPubKey = sender;
        }
        return sender;
    }
    catch (e) {
        const msg = errorMsg(tx, 'Invalid Signature');
        throw new Error(msg);
    }
}
legacy.getSenderPublicKey = getSenderPublicKey;

Object.defineProperty(eip2718, "__esModule", { value: true });
eip2718.validateYParity = eip2718.serialize = eip2718.getHashedMessageToSign = void 0;
const rlp_1$4 = cjs$3;
const util_1$6 = cjs$2;
const keccak_js_1$1 = keccak;
const util_js_1$5 = util$5;
const legacy_js_1 = legacy;
function getHashedMessageToSign(tx) {
    const keccakFunction = tx.common.customCrypto.keccak256 ?? keccak_js_1$1.keccak256;
    return keccakFunction(tx.getMessageToSign());
}
eip2718.getHashedMessageToSign = getHashedMessageToSign;
function serialize(tx, base) {
    return (0, util_1$6.concatBytes)((0, util_js_1$5.txTypeBytes)(tx.type), rlp_1$4.RLP.encode(base ?? tx.raw()));
}
eip2718.serialize = serialize;
function validateYParity(tx) {
    const { v } = tx;
    if (v !== undefined && v !== util_1$6.BIGINT_0 && v !== util_1$6.BIGINT_1) {
        const msg = (0, legacy_js_1.errorMsg)(tx, 'The y-parity of the transaction should either be 0 or 1');
        throw new Error(msg);
    }
}
eip2718.validateYParity = validateYParity;

var eip2930 = {};

Object.defineProperty(eip2930, "__esModule", { value: true });
eip2930.getDataFee = void 0;
const util_js_1$4 = util$5;
const Legacy$4 = legacy;
/**
 * The amount of gas paid for the data in this tx
 */
function getDataFee(tx) {
    return Legacy$4.getDataFee(tx, BigInt(util_js_1$4.AccessLists.getDataFeeEIP2930(tx.accessList, tx.common)));
}
eip2930.getDataFee = getDataFee;

Object.defineProperty(eip1559Transaction, "__esModule", { value: true });
eip1559Transaction.FeeMarketEIP1559Transaction = void 0;
const rlp_1$3 = cjs$3;
const util_1$5 = cjs$2;
const baseTransaction_js_1$3 = baseTransaction;
const EIP1559$1 = eip1559;
const EIP2718$2 = eip2718;
const EIP2930$2 = eip2930;
const Legacy$3 = legacy;
const types_js_1$4 = types;
const util_js_1$3 = util$5;
/**
 * Typed transaction with a new gas fee market mechanism
 *
 * - TransactionType: 2
 * - EIP: [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559)
 */
class FeeMarketEIP1559Transaction extends baseTransaction_js_1$3.BaseTransaction {
    /**
     * This constructor takes the values, validates them, assigns them and freezes the object.
     *
     * It is not recommended to use this constructor directly. Instead use
     * the static factory methods to assist in creating a Transaction object from
     * varying data types.
     */
    constructor(txData, opts = {}) {
        super({ ...txData, type: types_js_1$4.TransactionType.FeeMarketEIP1559 }, opts);
        const { chainId, accessList, maxFeePerGas, maxPriorityFeePerGas } = txData;
        this.common = this._getCommon(opts.common, chainId);
        this.chainId = this.common.chainId();
        if (this.common.isActivatedEIP(1559) === false) {
            throw new Error('EIP-1559 not enabled on Common');
        }
        this.activeCapabilities = this.activeCapabilities.concat([1559, 2718, 2930]);
        // Populate the access list fields
        const accessListData = util_js_1$3.AccessLists.getAccessListData(accessList ?? []);
        this.accessList = accessListData.accessList;
        this.AccessListJSON = accessListData.AccessListJSON;
        // Verify the access list format.
        util_js_1$3.AccessLists.verifyAccessList(this.accessList);
        this.maxFeePerGas = (0, util_1$5.bytesToBigInt)((0, util_1$5.toBytes)(maxFeePerGas === '' ? '0x' : maxFeePerGas));
        this.maxPriorityFeePerGas = (0, util_1$5.bytesToBigInt)((0, util_1$5.toBytes)(maxPriorityFeePerGas === '' ? '0x' : maxPriorityFeePerGas));
        this._validateCannotExceedMaxInteger({
            maxFeePerGas: this.maxFeePerGas,
            maxPriorityFeePerGas: this.maxPriorityFeePerGas,
        });
        baseTransaction_js_1$3.BaseTransaction._validateNotArray(txData);
        if (this.gasLimit * this.maxFeePerGas > util_1$5.MAX_INTEGER) {
            const msg = this._errorMsg('gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)');
            throw new Error(msg);
        }
        if (this.maxFeePerGas < this.maxPriorityFeePerGas) {
            const msg = this._errorMsg('maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)');
            throw new Error(msg);
        }
        EIP2718$2.validateYParity(this);
        Legacy$3.validateHighS(this);
        const freeze = opts?.freeze ?? true;
        if (freeze) {
            Object.freeze(this);
        }
    }
    /**
     * Instantiate a transaction from a data dictionary.
     *
     * Format: { chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,
     * accessList, v, r, s }
     *
     * Notes:
     * - `chainId` will be set automatically if not provided
     * - All parameters are optional and have some basic default values
     */
    static fromTxData(txData, opts = {}) {
        return new FeeMarketEIP1559Transaction(txData, opts);
    }
    /**
     * Instantiate a transaction from the serialized tx.
     *
     * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,
     * accessList, signatureYParity, signatureR, signatureS])`
     */
    static fromSerializedTx(serialized, opts = {}) {
        if ((0, util_1$5.equalsBytes)(serialized.subarray(0, 1), (0, util_js_1$3.txTypeBytes)(types_js_1$4.TransactionType.FeeMarketEIP1559)) ===
            false) {
            throw new Error(`Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: ${types_js_1$4.TransactionType.FeeMarketEIP1559}, received: ${(0, util_1$5.bytesToHex)(serialized.subarray(0, 1))}`);
        }
        const values = rlp_1$3.RLP.decode(serialized.subarray(1));
        if (!Array.isArray(values)) {
            throw new Error('Invalid serialized tx input: must be array');
        }
        return FeeMarketEIP1559Transaction.fromValuesArray(values, opts);
    }
    /**
     * Create a transaction from a values array.
     *
     * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,
     * accessList, signatureYParity, signatureR, signatureS]`
     */
    static fromValuesArray(values, opts = {}) {
        if (values.length !== 9 && values.length !== 12) {
            throw new Error('Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).');
        }
        const [chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data, accessList, v, r, s,] = values;
        this._validateNotArray({ chainId, v });
        (0, util_1$5.validateNoLeadingZeroes)({ nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, value, v, r, s });
        return new FeeMarketEIP1559Transaction({
            chainId: (0, util_1$5.bytesToBigInt)(chainId),
            nonce,
            maxPriorityFeePerGas,
            maxFeePerGas,
            gasLimit,
            to,
            value,
            data,
            accessList: accessList ?? [],
            v: v !== undefined ? (0, util_1$5.bytesToBigInt)(v) : undefined,
            r,
            s,
        }, opts);
    }
    /**
     * The amount of gas paid for the data in this tx
     */
    getDataFee() {
        return EIP2930$2.getDataFee(this);
    }
    /**
     * The up front amount that an account must have for this transaction to be valid
     * @param baseFee The base fee of the block (will be set to 0 if not provided)
     */
    getUpfrontCost(baseFee = util_1$5.BIGINT_0) {
        return EIP1559$1.getUpfrontCost(this, baseFee);
    }
    /**
     * Returns a Uint8Array Array of the raw Bytes of the EIP-1559 transaction, in order.
     *
     * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,
     * accessList, signatureYParity, signatureR, signatureS]`
     *
     * Use {@link FeeMarketEIP1559Transaction.serialize} to add a transaction to a block
     * with {@link Block.fromValuesArray}.
     *
     * For an unsigned tx this method uses the empty Bytes values for the
     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant
     * representation for external signing use {@link FeeMarketEIP1559Transaction.getMessageToSign}.
     */
    raw() {
        return [
            (0, util_1$5.bigIntToUnpaddedBytes)(this.chainId),
            (0, util_1$5.bigIntToUnpaddedBytes)(this.nonce),
            (0, util_1$5.bigIntToUnpaddedBytes)(this.maxPriorityFeePerGas),
            (0, util_1$5.bigIntToUnpaddedBytes)(this.maxFeePerGas),
            (0, util_1$5.bigIntToUnpaddedBytes)(this.gasLimit),
            this.to !== undefined ? this.to.bytes : new Uint8Array(0),
            (0, util_1$5.bigIntToUnpaddedBytes)(this.value),
            this.data,
            this.accessList,
            this.v !== undefined ? (0, util_1$5.bigIntToUnpaddedBytes)(this.v) : new Uint8Array(0),
            this.r !== undefined ? (0, util_1$5.bigIntToUnpaddedBytes)(this.r) : new Uint8Array(0),
            this.s !== undefined ? (0, util_1$5.bigIntToUnpaddedBytes)(this.s) : new Uint8Array(0),
        ];
    }
    /**
     * Returns the serialized encoding of the EIP-1559 transaction.
     *
     * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,
     * accessList, signatureYParity, signatureR, signatureS])`
     *
     * Note that in contrast to the legacy tx serialization format this is not
     * valid RLP any more due to the raw tx type preceding and concatenated to
     * the RLP encoding of the values.
     */
    serialize() {
        return EIP2718$2.serialize(this);
    }
    /**
     * Returns the raw serialized unsigned tx, which can be used
     * to sign the transaction (e.g. for sending to a hardware wallet).
     *
     * Note: in contrast to the legacy tx the raw message format is already
     * serialized and doesn't need to be RLP encoded any more.
     *
     * ```javascript
     * const serializedMessage = tx.getMessageToSign() // use this for the HW wallet input
     * ```
     */
    getMessageToSign() {
        return EIP2718$2.serialize(this, this.raw().slice(0, 9));
    }
    /**
     * Returns the hashed serialized unsigned tx, which can be used
     * to sign the transaction (e.g. for sending to a hardware wallet).
     *
     * Note: in contrast to the legacy tx the raw message format is already
     * serialized and doesn't need to be RLP encoded any more.
     */
    getHashedMessageToSign() {
        return EIP2718$2.getHashedMessageToSign(this);
    }
    /**
     * Computes a sha3-256 hash of the serialized tx.
     *
     * This method can only be used for signed txs (it throws otherwise).
     * Use {@link FeeMarketEIP1559Transaction.getMessageToSign} to get a tx hash for the purpose of signing.
     */
    hash() {
        return Legacy$3.hash(this);
    }
    /**
     * Computes a sha3-256 hash which can be used to verify the signature
     */
    getMessageToVerifySignature() {
        return this.getHashedMessageToSign();
    }
    /**
     * Returns the public key of the sender
     */
    getSenderPublicKey() {
        return Legacy$3.getSenderPublicKey(this);
    }
    addSignature(v, r, s, convertV = false) {
        r = (0, util_1$5.toBytes)(r);
        s = (0, util_1$5.toBytes)(s);
        const opts = { ...this.txOptions, common: this.common };
        return FeeMarketEIP1559Transaction.fromTxData({
            chainId: this.chainId,
            nonce: this.nonce,
            maxPriorityFeePerGas: this.maxPriorityFeePerGas,
            maxFeePerGas: this.maxFeePerGas,
            gasLimit: this.gasLimit,
            to: this.to,
            value: this.value,
            data: this.data,
            accessList: this.accessList,
            v: convertV ? v - util_1$5.BIGINT_27 : v,
            r: (0, util_1$5.bytesToBigInt)(r),
            s: (0, util_1$5.bytesToBigInt)(s),
        }, opts);
    }
    /**
     * Returns an object with the JSON representation of the transaction
     */
    toJSON() {
        const accessListJSON = util_js_1$3.AccessLists.getAccessListJSON(this.accessList);
        const baseJson = super.toJSON();
        return {
            ...baseJson,
            chainId: (0, util_1$5.bigIntToHex)(this.chainId),
            maxPriorityFeePerGas: (0, util_1$5.bigIntToHex)(this.maxPriorityFeePerGas),
            maxFeePerGas: (0, util_1$5.bigIntToHex)(this.maxFeePerGas),
            accessList: accessListJSON,
        };
    }
    /**
     * Return a compact error string representation of the object
     */
    errorStr() {
        let errorStr = this._getSharedErrorPostfix();
        errorStr += ` maxFeePerGas=${this.maxFeePerGas} maxPriorityFeePerGas=${this.maxPriorityFeePerGas}`;
        return errorStr;
    }
    /**
     * Internal helper function to create an annotated error message
     *
     * @param msg Base error message
     * @hidden
     */
    _errorMsg(msg) {
        return Legacy$3.errorMsg(this, msg);
    }
}
eip1559Transaction.FeeMarketEIP1559Transaction = FeeMarketEIP1559Transaction;

var eip2930Transaction = {};

Object.defineProperty(eip2930Transaction, "__esModule", { value: true });
eip2930Transaction.AccessListEIP2930Transaction = void 0;
const rlp_1$2 = cjs$3;
const util_1$4 = cjs$2;
const baseTransaction_js_1$2 = baseTransaction;
const EIP2718$1 = eip2718;
const EIP2930$1 = eip2930;
const Legacy$2 = legacy;
const types_js_1$3 = types;
const util_js_1$2 = util$5;
/**
 * Typed transaction with optional access lists
 *
 * - TransactionType: 1
 * - EIP: [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930)
 */
class AccessListEIP2930Transaction extends baseTransaction_js_1$2.BaseTransaction {
    /**
     * This constructor takes the values, validates them, assigns them and freezes the object.
     *
     * It is not recommended to use this constructor directly. Instead use
     * the static factory methods to assist in creating a Transaction object from
     * varying data types.
     */
    constructor(txData, opts = {}) {
        super({ ...txData, type: types_js_1$3.TransactionType.AccessListEIP2930 }, opts);
        const { chainId, accessList, gasPrice } = txData;
        this.common = this._getCommon(opts.common, chainId);
        this.chainId = this.common.chainId();
        // EIP-2718 check is done in Common
        if (!this.common.isActivatedEIP(2930)) {
            throw new Error('EIP-2930 not enabled on Common');
        }
        this.activeCapabilities = this.activeCapabilities.concat([2718, 2930]);
        // Populate the access list fields
        const accessListData = util_js_1$2.AccessLists.getAccessListData(accessList ?? []);
        this.accessList = accessListData.accessList;
        this.AccessListJSON = accessListData.AccessListJSON;
        // Verify the access list format.
        util_js_1$2.AccessLists.verifyAccessList(this.accessList);
        this.gasPrice = (0, util_1$4.bytesToBigInt)((0, util_1$4.toBytes)(gasPrice === '' ? '0x' : gasPrice));
        this._validateCannotExceedMaxInteger({
            gasPrice: this.gasPrice,
        });
        baseTransaction_js_1$2.BaseTransaction._validateNotArray(txData);
        if (this.gasPrice * this.gasLimit > util_1$4.MAX_INTEGER) {
            const msg = this._errorMsg('gasLimit * gasPrice cannot exceed MAX_INTEGER');
            throw new Error(msg);
        }
        EIP2718$1.validateYParity(this);
        Legacy$2.validateHighS(this);
        const freeze = opts?.freeze ?? true;
        if (freeze) {
            Object.freeze(this);
        }
    }
    /**
     * Instantiate a transaction from a data dictionary.
     *
     * Format: { chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,
     * v, r, s }
     *
     * Notes:
     * - `chainId` will be set automatically if not provided
     * - All parameters are optional and have some basic default values
     */
    static fromTxData(txData, opts = {}) {
        return new AccessListEIP2930Transaction(txData, opts);
    }
    /**
     * Instantiate a transaction from the serialized tx.
     *
     * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,
     * signatureYParity (v), signatureR (r), signatureS (s)])`
     */
    static fromSerializedTx(serialized, opts = {}) {
        if ((0, util_1$4.equalsBytes)(serialized.subarray(0, 1), (0, util_js_1$2.txTypeBytes)(types_js_1$3.TransactionType.AccessListEIP2930)) ===
            false) {
            throw new Error(`Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: ${types_js_1$3.TransactionType.AccessListEIP2930}, received: ${(0, util_1$4.bytesToHex)(serialized.subarray(0, 1))}`);
        }
        const values = rlp_1$2.RLP.decode(Uint8Array.from(serialized.subarray(1)));
        if (!Array.isArray(values)) {
            throw new Error('Invalid serialized tx input: must be array');
        }
        return AccessListEIP2930Transaction.fromValuesArray(values, opts);
    }
    /**
     * Create a transaction from a values array.
     *
     * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,
     * signatureYParity (v), signatureR (r), signatureS (s)]`
     */
    static fromValuesArray(values, opts = {}) {
        if (values.length !== 8 && values.length !== 11) {
            throw new Error('Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).');
        }
        const [chainId, nonce, gasPrice, gasLimit, to, value, data, accessList, v, r, s] = values;
        this._validateNotArray({ chainId, v });
        (0, util_1$4.validateNoLeadingZeroes)({ nonce, gasPrice, gasLimit, value, v, r, s });
        const emptyAccessList = [];
        return new AccessListEIP2930Transaction({
            chainId: (0, util_1$4.bytesToBigInt)(chainId),
            nonce,
            gasPrice,
            gasLimit,
            to,
            value,
            data,
            accessList: accessList ?? emptyAccessList,
            v: v !== undefined ? (0, util_1$4.bytesToBigInt)(v) : undefined,
            r,
            s,
        }, opts);
    }
    /**
     * The amount of gas paid for the data in this tx
     */
    getDataFee() {
        return EIP2930$1.getDataFee(this);
    }
    /**
     * The up front amount that an account must have for this transaction to be valid
     */
    getUpfrontCost() {
        return this.gasLimit * this.gasPrice + this.value;
    }
    /**
     * Returns a Uint8Array Array of the raw Bytess of the EIP-2930 transaction, in order.
     *
     * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,
     * signatureYParity (v), signatureR (r), signatureS (s)]`
     *
     * Use {@link AccessListEIP2930Transaction.serialize} to add a transaction to a block
     * with {@link Block.fromValuesArray}.
     *
     * For an unsigned tx this method uses the empty Bytes values for the
     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant
     * representation for external signing use {@link AccessListEIP2930Transaction.getMessageToSign}.
     */
    raw() {
        return [
            (0, util_1$4.bigIntToUnpaddedBytes)(this.chainId),
            (0, util_1$4.bigIntToUnpaddedBytes)(this.nonce),
            (0, util_1$4.bigIntToUnpaddedBytes)(this.gasPrice),
            (0, util_1$4.bigIntToUnpaddedBytes)(this.gasLimit),
            this.to !== undefined ? this.to.bytes : new Uint8Array(0),
            (0, util_1$4.bigIntToUnpaddedBytes)(this.value),
            this.data,
            this.accessList,
            this.v !== undefined ? (0, util_1$4.bigIntToUnpaddedBytes)(this.v) : new Uint8Array(0),
            this.r !== undefined ? (0, util_1$4.bigIntToUnpaddedBytes)(this.r) : new Uint8Array(0),
            this.s !== undefined ? (0, util_1$4.bigIntToUnpaddedBytes)(this.s) : new Uint8Array(0),
        ];
    }
    /**
     * Returns the serialized encoding of the EIP-2930 transaction.
     *
     * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,
     * signatureYParity (v), signatureR (r), signatureS (s)])`
     *
     * Note that in contrast to the legacy tx serialization format this is not
     * valid RLP any more due to the raw tx type preceding and concatenated to
     * the RLP encoding of the values.
     */
    serialize() {
        return EIP2718$1.serialize(this);
    }
    /**
     * Returns the raw serialized unsigned tx, which can be used
     * to sign the transaction (e.g. for sending to a hardware wallet).
     *
     * Note: in contrast to the legacy tx the raw message format is already
     * serialized and doesn't need to be RLP encoded any more.
     *
     * ```javascript
     * const serializedMessage = tx.getMessageToSign() // use this for the HW wallet input
     * ```
     */
    getMessageToSign() {
        return EIP2718$1.serialize(this, this.raw().slice(0, 8));
    }
    /**
     * Returns the hashed serialized unsigned tx, which can be used
     * to sign the transaction (e.g. for sending to a hardware wallet).
     *
     * Note: in contrast to the legacy tx the raw message format is already
     * serialized and doesn't need to be RLP encoded any more.
     */
    getHashedMessageToSign() {
        return EIP2718$1.getHashedMessageToSign(this);
    }
    /**
     * Computes a sha3-256 hash of the serialized tx.
     *
     * This method can only be used for signed txs (it throws otherwise).
     * Use {@link AccessListEIP2930Transaction.getMessageToSign} to get a tx hash for the purpose of signing.
     */
    hash() {
        return Legacy$2.hash(this);
    }
    /**
     * Computes a sha3-256 hash which can be used to verify the signature
     */
    getMessageToVerifySignature() {
        return this.getHashedMessageToSign();
    }
    /**
     * Returns the public key of the sender
     */
    getSenderPublicKey() {
        return Legacy$2.getSenderPublicKey(this);
    }
    addSignature(v, r, s, convertV = false) {
        r = (0, util_1$4.toBytes)(r);
        s = (0, util_1$4.toBytes)(s);
        const opts = { ...this.txOptions, common: this.common };
        return AccessListEIP2930Transaction.fromTxData({
            chainId: this.chainId,
            nonce: this.nonce,
            gasPrice: this.gasPrice,
            gasLimit: this.gasLimit,
            to: this.to,
            value: this.value,
            data: this.data,
            accessList: this.accessList,
            v: convertV ? v - util_1$4.BIGINT_27 : v,
            r: (0, util_1$4.bytesToBigInt)(r),
            s: (0, util_1$4.bytesToBigInt)(s),
        }, opts);
    }
    /**
     * Returns an object with the JSON representation of the transaction
     */
    toJSON() {
        const accessListJSON = util_js_1$2.AccessLists.getAccessListJSON(this.accessList);
        const baseJson = super.toJSON();
        return {
            ...baseJson,
            chainId: (0, util_1$4.bigIntToHex)(this.chainId),
            gasPrice: (0, util_1$4.bigIntToHex)(this.gasPrice),
            accessList: accessListJSON,
        };
    }
    /**
     * Return a compact error string representation of the object
     */
    errorStr() {
        let errorStr = this._getSharedErrorPostfix();
        // Keep ? for this.accessList since this otherwise causes Hardhat E2E tests to fail
        errorStr += ` gasPrice=${this.gasPrice} accessListCount=${this.accessList?.length ?? 0}`;
        return errorStr;
    }
    /**
     * Internal helper function to create an annotated error message
     *
     * @param msg Base error message
     * @hidden
     */
    _errorMsg(msg) {
        return Legacy$2.errorMsg(this, msg);
    }
}
eip2930Transaction.AccessListEIP2930Transaction = AccessListEIP2930Transaction;

var eip4844Transaction = {};

var constants = {};

/** EIP4844 constants */
Object.defineProperty(constants, "__esModule", { value: true });
constants.BYTES_PER_FIELD_ELEMENT = constants.FIELD_ELEMENTS_PER_BLOB = constants.MAX_TX_WRAP_KZG_COMMITMENTS = constants.LIMIT_BLOBS_PER_TX = constants.MAX_VERSIONED_HASHES_LIST_SIZE = constants.MAX_ACCESS_LIST_SIZE = constants.MAX_CALLDATA_SIZE = void 0;
constants.MAX_CALLDATA_SIZE = 16777216; // 2 ** 24
constants.MAX_ACCESS_LIST_SIZE = 16777216; // 2 ** 24
constants.MAX_VERSIONED_HASHES_LIST_SIZE = 16777216; // 2 ** 24
constants.LIMIT_BLOBS_PER_TX = 6; // 786432 / 2^17 (`MAX_BLOB_GAS_PER_BLOCK` / `GAS_PER_BLOB`)
constants.MAX_TX_WRAP_KZG_COMMITMENTS = 16777216; // 2 ** 24
constants.FIELD_ELEMENTS_PER_BLOB = 4096; // This is also in the Common 4844 parameters but needed here since types can't access Common params
constants.BYTES_PER_FIELD_ELEMENT = 32;

Object.defineProperty(eip4844Transaction, "__esModule", { value: true });
eip4844Transaction.BlobEIP4844Transaction = void 0;
const rlp_1$1 = cjs$3;
const util_1$3 = cjs$2;
const baseTransaction_js_1$1 = baseTransaction;
const EIP1559 = eip1559;
const EIP2718 = eip2718;
const EIP2930 = eip2930;
const Legacy$1 = legacy;
const constants_js_1 = constants;
const types_js_1$2 = types;
const util_js_1$1 = util$5;
const validateBlobTransactionNetworkWrapper = (blobVersionedHashes, blobs, commitments, kzgProofs, version, kzg) => {
    if (!(blobVersionedHashes.length === blobs.length && blobs.length === commitments.length)) {
        throw new Error('Number of blobVersionedHashes, blobs, and commitments not all equal');
    }
    if (blobVersionedHashes.length === 0) {
        throw new Error('Invalid transaction with empty blobs');
    }
    let isValid;
    try {
        isValid = kzg.verifyBlobKzgProofBatch(blobs, commitments, kzgProofs);
    }
    catch (error) {
        throw new Error(`KZG verification of blobs fail with error=${error}`);
    }
    if (!isValid) {
        throw new Error('KZG proof cannot be verified from blobs/commitments');
    }
    for (let x = 0; x < blobVersionedHashes.length; x++) {
        const computedVersionedHash = (0, util_1$3.computeVersionedHash)(commitments[x], version);
        if (!(0, util_1$3.equalsBytes)(computedVersionedHash, blobVersionedHashes[x])) {
            throw new Error(`commitment for blob at index ${x} does not match versionedHash`);
        }
    }
};
/**
 * Typed transaction with a new gas fee market mechanism for transactions that include "blobs" of data
 *
 * - TransactionType: 3
 * - EIP: [EIP-4844](https://eips.ethereum.org/EIPS/eip-4844)
 */
let BlobEIP4844Transaction$1 = class BlobEIP4844Transaction extends baseTransaction_js_1$1.BaseTransaction {
    /**
     * This constructor takes the values, validates them, assigns them and freezes the object.
     *
     * It is not recommended to use this constructor directly. Instead use
     * the static constructors or factory methods to assist in creating a Transaction object from
     * varying data types.
     */
    constructor(txData, opts = {}) {
        super({ ...txData, type: types_js_1$2.TransactionType.BlobEIP4844 }, opts);
        const { chainId, accessList, maxFeePerGas, maxPriorityFeePerGas, maxFeePerBlobGas } = txData;
        this.common = this._getCommon(opts.common, chainId);
        this.chainId = this.common.chainId();
        if (this.common.isActivatedEIP(1559) === false) {
            throw new Error('EIP-1559 not enabled on Common');
        }
        if (this.common.isActivatedEIP(4844) === false) {
            throw new Error('EIP-4844 not enabled on Common');
        }
        this.activeCapabilities = this.activeCapabilities.concat([1559, 2718, 2930]);
        // Populate the access list fields
        const accessListData = util_js_1$1.AccessLists.getAccessListData(accessList ?? []);
        this.accessList = accessListData.accessList;
        this.AccessListJSON = accessListData.AccessListJSON;
        // Verify the access list format.
        util_js_1$1.AccessLists.verifyAccessList(this.accessList);
        this.maxFeePerGas = (0, util_1$3.bytesToBigInt)((0, util_1$3.toBytes)(maxFeePerGas === '' ? '0x' : maxFeePerGas));
        this.maxPriorityFeePerGas = (0, util_1$3.bytesToBigInt)((0, util_1$3.toBytes)(maxPriorityFeePerGas === '' ? '0x' : maxPriorityFeePerGas));
        this._validateCannotExceedMaxInteger({
            maxFeePerGas: this.maxFeePerGas,
            maxPriorityFeePerGas: this.maxPriorityFeePerGas,
        });
        baseTransaction_js_1$1.BaseTransaction._validateNotArray(txData);
        if (this.gasLimit * this.maxFeePerGas > util_1$3.MAX_INTEGER) {
            const msg = this._errorMsg('gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)');
            throw new Error(msg);
        }
        if (this.maxFeePerGas < this.maxPriorityFeePerGas) {
            const msg = this._errorMsg('maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)');
            throw new Error(msg);
        }
        this.maxFeePerBlobGas = (0, util_1$3.bytesToBigInt)((0, util_1$3.toBytes)((maxFeePerBlobGas ?? '') === '' ? '0x' : maxFeePerBlobGas));
        this.blobVersionedHashes = (txData.blobVersionedHashes ?? []).map((vh) => (0, util_1$3.toBytes)(vh));
        EIP2718.validateYParity(this);
        Legacy$1.validateHighS(this);
        for (const hash of this.blobVersionedHashes) {
            if (hash.length !== 32) {
                const msg = this._errorMsg('versioned hash is invalid length');
                throw new Error(msg);
            }
            if (BigInt(hash[0]) !== this.common.param('sharding', 'blobCommitmentVersionKzg')) {
                const msg = this._errorMsg('versioned hash does not start with KZG commitment version');
                throw new Error(msg);
            }
        }
        if (this.blobVersionedHashes.length > constants_js_1.LIMIT_BLOBS_PER_TX) {
            const msg = this._errorMsg(`tx can contain at most ${constants_js_1.LIMIT_BLOBS_PER_TX} blobs`);
            throw new Error(msg);
        }
        else if (this.blobVersionedHashes.length === 0) {
            const msg = this._errorMsg(`tx should contain at least one blob`);
            throw new Error(msg);
        }
        if (this.to === undefined) {
            const msg = this._errorMsg(`tx should have a "to" field and cannot be used to create contracts`);
            throw new Error(msg);
        }
        this.blobs = txData.blobs?.map((blob) => (0, util_1$3.toBytes)(blob));
        this.kzgCommitments = txData.kzgCommitments?.map((commitment) => (0, util_1$3.toBytes)(commitment));
        this.kzgProofs = txData.kzgProofs?.map((proof) => (0, util_1$3.toBytes)(proof));
        const freeze = opts?.freeze ?? true;
        if (freeze) {
            Object.freeze(this);
        }
    }
    static fromTxData(txData, opts) {
        if (txData.blobsData !== undefined) {
            if (txData.blobs !== undefined) {
                throw new Error('cannot have both raw blobs data and encoded blobs in constructor');
            }
            if (txData.kzgCommitments !== undefined) {
                throw new Error('cannot have both raw blobs data and KZG commitments in constructor');
            }
            if (txData.blobVersionedHashes !== undefined) {
                throw new Error('cannot have both raw blobs data and versioned hashes in constructor');
            }
            if (txData.kzgProofs !== undefined) {
                throw new Error('cannot have both raw blobs data and KZG proofs in constructor');
            }
            txData.blobs = (0, util_1$3.getBlobs)(txData.blobsData.reduce((acc, cur) => acc + cur));
            txData.kzgCommitments = (0, util_1$3.blobsToCommitments)(txData.blobs);
            txData.blobVersionedHashes = (0, util_1$3.commitmentsToVersionedHashes)(txData.kzgCommitments);
            txData.kzgProofs = (0, util_1$3.blobsToProofs)(txData.blobs, txData.kzgCommitments);
        }
        return new BlobEIP4844Transaction(txData, opts);
    }
    /**
     * Creates the minimal representation of a blob transaction from the network wrapper version.
     * The minimal representation is used when adding transactions to an execution payload/block
     * @param txData a {@link BlobEIP4844Transaction} containing optional blobs/kzg commitments
     * @param opts - dictionary of {@link TxOptions}
     * @returns the "minimal" representation of a BlobEIP4844Transaction (i.e. transaction object minus blobs and kzg commitments)
     */
    static minimalFromNetworkWrapper(txData, opts) {
        if (opts?.common?.customCrypto?.kzg === undefined) {
            throw new Error('kzg instance required to instantiate blob tx');
        }
        const tx = BlobEIP4844Transaction.fromTxData({
            ...txData,
            ...{ blobs: undefined, kzgCommitments: undefined, kzgProofs: undefined },
        }, opts);
        return tx;
    }
    /**
     * Instantiate a transaction from the serialized tx.
     *
     * Format: `0x03 || rlp([chain_id, nonce, max_priority_fee_per_gas, max_fee_per_gas, gas_limit, to, value, data,
     * access_list, max_fee_per_data_gas, blob_versioned_hashes, y_parity, r, s])`
     */
    static fromSerializedTx(serialized, opts = {}) {
        if (opts.common?.customCrypto?.kzg === undefined) {
            throw new Error('kzg instance required to instantiate blob tx');
        }
        if ((0, util_1$3.equalsBytes)(serialized.subarray(0, 1), (0, util_js_1$1.txTypeBytes)(types_js_1$2.TransactionType.BlobEIP4844)) === false) {
            throw new Error(`Invalid serialized tx input: not an EIP-4844 transaction (wrong tx type, expected: ${types_js_1$2.TransactionType.BlobEIP4844}, received: ${(0, util_1$3.bytesToHex)(serialized.subarray(0, 1))}`);
        }
        const values = rlp_1$1.RLP.decode(serialized.subarray(1));
        if (!Array.isArray(values)) {
            throw new Error('Invalid serialized tx input: must be array');
        }
        return BlobEIP4844Transaction.fromValuesArray(values, opts);
    }
    /**
     * Create a transaction from a values array.
     *
     * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,
     * accessList, signatureYParity, signatureR, signatureS]`
     */
    static fromValuesArray(values, opts = {}) {
        if (opts.common?.customCrypto?.kzg === undefined) {
            throw new Error('kzg instance required to instantiate blob tx');
        }
        if (values.length !== 11 && values.length !== 14) {
            throw new Error('Invalid EIP-4844 transaction. Only expecting 11 values (for unsigned tx) or 14 values (for signed tx).');
        }
        const [chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data, accessList, maxFeePerBlobGas, blobVersionedHashes, v, r, s,] = values;
        this._validateNotArray({ chainId, v });
        (0, util_1$3.validateNoLeadingZeroes)({
            nonce,
            maxPriorityFeePerGas,
            maxFeePerGas,
            gasLimit,
            value,
            maxFeePerBlobGas,
            v,
            r,
            s,
        });
        return new BlobEIP4844Transaction({
            chainId: (0, util_1$3.bytesToBigInt)(chainId),
            nonce,
            maxPriorityFeePerGas,
            maxFeePerGas,
            gasLimit,
            to,
            value,
            data,
            accessList: accessList ?? [],
            maxFeePerBlobGas,
            blobVersionedHashes,
            v: v !== undefined ? (0, util_1$3.bytesToBigInt)(v) : undefined,
            r,
            s,
        }, opts);
    }
    /**
     * Creates a transaction from the network encoding of a blob transaction (with blobs/commitments/proof)
     * @param serialized a buffer representing a serialized BlobTransactionNetworkWrapper
     * @param opts any TxOptions defined
     * @returns a BlobEIP4844Transaction
     */
    static fromSerializedBlobTxNetworkWrapper(serialized, opts) {
        if (!opts || !opts.common) {
            throw new Error('common instance required to validate versioned hashes');
        }
        if (opts.common?.customCrypto?.kzg === undefined) {
            throw new Error('kzg instance required to instantiate blob tx');
        }
        if ((0, util_1$3.equalsBytes)(serialized.subarray(0, 1), (0, util_js_1$1.txTypeBytes)(types_js_1$2.TransactionType.BlobEIP4844)) === false) {
            throw new Error(`Invalid serialized tx input: not an EIP-4844 transaction (wrong tx type, expected: ${types_js_1$2.TransactionType.BlobEIP4844}, received: ${(0, util_1$3.bytesToHex)(serialized.subarray(0, 1))}`);
        }
        // Validate network wrapper
        const networkTxValues = rlp_1$1.RLP.decode(serialized.subarray(1));
        if (networkTxValues.length !== 4) {
            throw Error(`Expected 4 values in the deserialized network transaction`);
        }
        const [txValues, blobs, kzgCommitments, kzgProofs] = networkTxValues;
        // Construct the tx but don't freeze yet, we will assign blobs etc once validated
        const decodedTx = BlobEIP4844Transaction.fromValuesArray(txValues, { ...opts, freeze: false });
        if (decodedTx.to === undefined) {
            throw Error('BlobEIP4844Transaction can not be send without a valid `to`');
        }
        const version = Number(opts.common.param('sharding', 'blobCommitmentVersionKzg'));
        validateBlobTransactionNetworkWrapper(decodedTx.blobVersionedHashes, blobs, kzgCommitments, kzgProofs, version, opts.common.customCrypto.kzg);
        // set the network blob data on the tx
        decodedTx.blobs = blobs;
        decodedTx.kzgCommitments = kzgCommitments;
        decodedTx.kzgProofs = kzgProofs;
        // freeze the tx
        const freeze = opts?.freeze ?? true;
        if (freeze) {
            Object.freeze(decodedTx);
        }
        return decodedTx;
    }
    /**
     * The amount of gas paid for the data in this tx
     */
    getDataFee() {
        return EIP2930.getDataFee(this);
    }
    /**
     * The up front amount that an account must have for this transaction to be valid
     * @param baseFee The base fee of the block (will be set to 0 if not provided)
     */
    getUpfrontCost(baseFee = util_1$3.BIGINT_0) {
        return EIP1559.getUpfrontCost(this, baseFee);
    }
    /**
     * Returns a Uint8Array Array of the raw Bytes of the EIP-4844 transaction, in order.
     *
     * Format: [chain_id, nonce, max_priority_fee_per_gas, max_fee_per_gas, gas_limit, to, value, data,
     * access_list, max_fee_per_data_gas, blob_versioned_hashes, y_parity, r, s]`.
     *
     * Use {@link BlobEIP4844Transaction.serialize} to add a transaction to a block
     * with {@link Block.fromValuesArray}.
     *
     * For an unsigned tx this method uses the empty Bytes values for the
     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant
     * representation for external signing use {@link BlobEIP4844Transaction.getMessageToSign}.
     */
    raw() {
        return [
            (0, util_1$3.bigIntToUnpaddedBytes)(this.chainId),
            (0, util_1$3.bigIntToUnpaddedBytes)(this.nonce),
            (0, util_1$3.bigIntToUnpaddedBytes)(this.maxPriorityFeePerGas),
            (0, util_1$3.bigIntToUnpaddedBytes)(this.maxFeePerGas),
            (0, util_1$3.bigIntToUnpaddedBytes)(this.gasLimit),
            this.to !== undefined ? this.to.bytes : new Uint8Array(0),
            (0, util_1$3.bigIntToUnpaddedBytes)(this.value),
            this.data,
            this.accessList,
            (0, util_1$3.bigIntToUnpaddedBytes)(this.maxFeePerBlobGas),
            this.blobVersionedHashes,
            this.v !== undefined ? (0, util_1$3.bigIntToUnpaddedBytes)(this.v) : new Uint8Array(0),
            this.r !== undefined ? (0, util_1$3.bigIntToUnpaddedBytes)(this.r) : new Uint8Array(0),
            this.s !== undefined ? (0, util_1$3.bigIntToUnpaddedBytes)(this.s) : new Uint8Array(0),
        ];
    }
    /**
     * Returns the serialized encoding of the EIP-4844 transaction.
     *
     * Format: `0x03 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,
     * access_list, max_fee_per_data_gas, blob_versioned_hashes, y_parity, r, s])`.
     *
     * Note that in contrast to the legacy tx serialization format this is not
     * valid RLP any more due to the raw tx type preceding and concatenated to
     * the RLP encoding of the values.
     */
    serialize() {
        return EIP2718.serialize(this);
    }
    /**
     * @returns the serialized form of a blob transaction in the network wrapper format (used for gossipping mempool transactions over devp2p)
     */
    serializeNetworkWrapper() {
        if (this.blobs === undefined ||
            this.kzgCommitments === undefined ||
            this.kzgProofs === undefined) {
            throw new Error('cannot serialize network wrapper without blobs, KZG commitments and KZG proofs provided');
        }
        return EIP2718.serialize(this, [this.raw(), this.blobs, this.kzgCommitments, this.kzgProofs]);
    }
    /**
     * Returns the raw serialized unsigned tx, which can be used
     * to sign the transaction (e.g. for sending to a hardware wallet).
     *
     * Note: in contrast to the legacy tx the raw message format is already
     * serialized and doesn't need to be RLP encoded any more.
     *
     * ```javascript
     * const serializedMessage = tx.getMessageToSign() // use this for the HW wallet input
     * ```
     */
    getMessageToSign() {
        return EIP2718.serialize(this, this.raw().slice(0, 11));
    }
    /**
     * Returns the hashed serialized unsigned tx, which can be used
     * to sign the transaction (e.g. for sending to a hardware wallet).
     *
     * Note: in contrast to the legacy tx the raw message format is already
     * serialized and doesn't need to be RLP encoded any more.
     */
    getHashedMessageToSign() {
        return EIP2718.getHashedMessageToSign(this);
    }
    /**
     * Computes a sha3-256 hash of the serialized tx.
     *
     * This method can only be used for signed txs (it throws otherwise).
     * Use {@link BlobEIP4844Transaction.getMessageToSign} to get a tx hash for the purpose of signing.
     */
    hash() {
        return Legacy$1.hash(this);
    }
    getMessageToVerifySignature() {
        return this.getHashedMessageToSign();
    }
    /**
     * Returns the public key of the sender
     */
    getSenderPublicKey() {
        return Legacy$1.getSenderPublicKey(this);
    }
    toJSON() {
        const accessListJSON = util_js_1$1.AccessLists.getAccessListJSON(this.accessList);
        const baseJson = super.toJSON();
        return {
            ...baseJson,
            chainId: (0, util_1$3.bigIntToHex)(this.chainId),
            maxPriorityFeePerGas: (0, util_1$3.bigIntToHex)(this.maxPriorityFeePerGas),
            maxFeePerGas: (0, util_1$3.bigIntToHex)(this.maxFeePerGas),
            accessList: accessListJSON,
            maxFeePerBlobGas: (0, util_1$3.bigIntToHex)(this.maxFeePerBlobGas),
            blobVersionedHashes: this.blobVersionedHashes.map((hash) => (0, util_1$3.bytesToHex)(hash)),
        };
    }
    addSignature(v, r, s, convertV = false) {
        r = (0, util_1$3.toBytes)(r);
        s = (0, util_1$3.toBytes)(s);
        const opts = { ...this.txOptions, common: this.common };
        return BlobEIP4844Transaction.fromTxData({
            chainId: this.chainId,
            nonce: this.nonce,
            maxPriorityFeePerGas: this.maxPriorityFeePerGas,
            maxFeePerGas: this.maxFeePerGas,
            gasLimit: this.gasLimit,
            to: this.to,
            value: this.value,
            data: this.data,
            accessList: this.accessList,
            v: convertV ? v - util_1$3.BIGINT_27 : v,
            r: (0, util_1$3.bytesToBigInt)(r),
            s: (0, util_1$3.bytesToBigInt)(s),
            maxFeePerBlobGas: this.maxFeePerBlobGas,
            blobVersionedHashes: this.blobVersionedHashes,
            blobs: this.blobs,
            kzgCommitments: this.kzgCommitments,
            kzgProofs: this.kzgProofs,
        }, opts);
    }
    /**
     * Return a compact error string representation of the object
     */
    errorStr() {
        let errorStr = this._getSharedErrorPostfix();
        errorStr += ` maxFeePerGas=${this.maxFeePerGas} maxPriorityFeePerGas=${this.maxPriorityFeePerGas}`;
        return errorStr;
    }
    /**
     * Internal helper function to create an annotated error message
     *
     * @param msg Base error message
     * @hidden
     */
    _errorMsg(msg) {
        return Legacy$1.errorMsg(this, msg);
    }
    /**
     * @returns the number of blobs included with this transaction
     */
    numBlobs() {
        return this.blobVersionedHashes.length;
    }
};
eip4844Transaction.BlobEIP4844Transaction = BlobEIP4844Transaction$1;

var legacyTransaction = {};

Object.defineProperty(legacyTransaction, "__esModule", { value: true });
legacyTransaction.LegacyTransaction = void 0;
const rlp_1 = cjs$3;
const util_1$2 = cjs$2;
const keccak_js_1 = keccak;
const baseTransaction_js_1 = baseTransaction;
const Legacy = legacy;
const types_js_1$1 = types;
function meetsEIP155(_v, chainId) {
    const v = Number(_v);
    const chainIdDoubled = Number(chainId) * 2;
    return v === chainIdDoubled + 35 || v === chainIdDoubled + 36;
}
/**
 * An Ethereum non-typed (legacy) transaction
 */
class LegacyTransaction extends baseTransaction_js_1.BaseTransaction {
    /**
     * This constructor takes the values, validates them, assigns them and freezes the object.
     *
     * It is not recommended to use this constructor directly. Instead use
     * the static factory methods to assist in creating a Transaction object from
     * varying data types.
     */
    constructor(txData, opts = {}) {
        super({ ...txData, type: types_js_1$1.TransactionType.Legacy }, opts);
        this.common = this._validateTxV(this.v, opts.common);
        this.keccakFunction = this.common.customCrypto.keccak256 ?? keccak_js_1.keccak256;
        this.gasPrice = (0, util_1$2.bytesToBigInt)((0, util_1$2.toBytes)(txData.gasPrice === '' ? '0x' : txData.gasPrice));
        if (this.gasPrice * this.gasLimit > util_1$2.MAX_INTEGER) {
            const msg = this._errorMsg('gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)');
            throw new Error(msg);
        }
        this._validateCannotExceedMaxInteger({ gasPrice: this.gasPrice });
        baseTransaction_js_1.BaseTransaction._validateNotArray(txData);
        if (this.common.gteHardfork('spuriousDragon')) {
            if (!this.isSigned()) {
                this.activeCapabilities.push(types_js_1$1.Capability.EIP155ReplayProtection);
            }
            else {
                // EIP155 spec:
                // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36
                // then when computing the hash of a transaction for purposes of signing or recovering
                // instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data)
                // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.
                // v and chain ID meet EIP-155 conditions
                if (meetsEIP155(this.v, this.common.chainId())) {
                    this.activeCapabilities.push(types_js_1$1.Capability.EIP155ReplayProtection);
                }
            }
        }
        const freeze = opts?.freeze ?? true;
        if (freeze) {
            Object.freeze(this);
        }
    }
    /**
     * Instantiate a transaction from a data dictionary.
     *
     * Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }
     *
     * Notes:
     * - All parameters are optional and have some basic default values
     */
    static fromTxData(txData, opts = {}) {
        return new LegacyTransaction(txData, opts);
    }
    /**
     * Instantiate a transaction from the serialized tx.
     *
     * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`
     */
    static fromSerializedTx(serialized, opts = {}) {
        const values = rlp_1.RLP.decode(serialized);
        if (!Array.isArray(values)) {
            throw new Error('Invalid serialized tx input. Must be array');
        }
        return this.fromValuesArray(values, opts);
    }
    /**
     * Create a transaction from a values array.
     *
     * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`
     */
    static fromValuesArray(values, opts = {}) {
        // If length is not 6, it has length 9. If v/r/s are empty Uint8Arrays, it is still an unsigned transaction
        // This happens if you get the RLP data from `raw()`
        if (values.length !== 6 && values.length !== 9) {
            throw new Error('Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).');
        }
        const [nonce, gasPrice, gasLimit, to, value, data, v, r, s] = values;
        (0, util_1$2.validateNoLeadingZeroes)({ nonce, gasPrice, gasLimit, value, v, r, s });
        return new LegacyTransaction({
            nonce,
            gasPrice,
            gasLimit,
            to,
            value,
            data,
            v,
            r,
            s,
        }, opts);
    }
    /**
     * Returns a Uint8Array Array of the raw Bytes of the legacy transaction, in order.
     *
     * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`
     *
     * For legacy txs this is also the correct format to add transactions
     * to a block with {@link Block.fromValuesArray} (use the `serialize()` method
     * for typed txs).
     *
     * For an unsigned tx this method returns the empty Bytes values
     * for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant
     * representation have a look at {@link Transaction.getMessageToSign}.
     */
    raw() {
        return [
            (0, util_1$2.bigIntToUnpaddedBytes)(this.nonce),
            (0, util_1$2.bigIntToUnpaddedBytes)(this.gasPrice),
            (0, util_1$2.bigIntToUnpaddedBytes)(this.gasLimit),
            this.to !== undefined ? this.to.bytes : new Uint8Array(0),
            (0, util_1$2.bigIntToUnpaddedBytes)(this.value),
            this.data,
            this.v !== undefined ? (0, util_1$2.bigIntToUnpaddedBytes)(this.v) : new Uint8Array(0),
            this.r !== undefined ? (0, util_1$2.bigIntToUnpaddedBytes)(this.r) : new Uint8Array(0),
            this.s !== undefined ? (0, util_1$2.bigIntToUnpaddedBytes)(this.s) : new Uint8Array(0),
        ];
    }
    /**
     * Returns the serialized encoding of the legacy transaction.
     *
     * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`
     *
     * For an unsigned tx this method uses the empty Uint8Array values for the
     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant
     * representation for external signing use {@link Transaction.getMessageToSign}.
     */
    serialize() {
        return rlp_1.RLP.encode(this.raw());
    }
    /**
     * Returns the raw unsigned tx, which can be used
     * to sign the transaction (e.g. for sending to a hardware wallet).
     *
     * Note: the raw message message format for the legacy tx is not RLP encoded
     * and you might need to do yourself with:
     *
     * ```javascript
     * import { RLP } from '@ethereumjs/rlp'
     * const message = tx.getMessageToSign()
     * const serializedMessage = RLP.encode(message)) // use this for the HW wallet input
     * ```
     */
    getMessageToSign() {
        const message = [
            (0, util_1$2.bigIntToUnpaddedBytes)(this.nonce),
            (0, util_1$2.bigIntToUnpaddedBytes)(this.gasPrice),
            (0, util_1$2.bigIntToUnpaddedBytes)(this.gasLimit),
            this.to !== undefined ? this.to.bytes : new Uint8Array(0),
            (0, util_1$2.bigIntToUnpaddedBytes)(this.value),
            this.data,
        ];
        if (this.supports(types_js_1$1.Capability.EIP155ReplayProtection)) {
            message.push((0, util_1$2.bigIntToUnpaddedBytes)(this.common.chainId()));
            message.push((0, util_1$2.unpadBytes)((0, util_1$2.toBytes)(0)));
            message.push((0, util_1$2.unpadBytes)((0, util_1$2.toBytes)(0)));
        }
        return message;
    }
    /**
     * Returns the hashed serialized unsigned tx, which can be used
     * to sign the transaction (e.g. for sending to a hardware wallet).
     */
    getHashedMessageToSign() {
        const message = this.getMessageToSign();
        return this.keccakFunction(rlp_1.RLP.encode(message));
    }
    /**
     * The amount of gas paid for the data in this tx
     */
    getDataFee() {
        return Legacy.getDataFee(this);
    }
    /**
     * The up front amount that an account must have for this transaction to be valid
     */
    getUpfrontCost() {
        return this.gasLimit * this.gasPrice + this.value;
    }
    /**
     * Computes a sha3-256 hash of the serialized tx.
     *
     * This method can only be used for signed txs (it throws otherwise).
     * Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.
     */
    hash() {
        return Legacy.hash(this);
    }
    /**
     * Computes a sha3-256 hash which can be used to verify the signature
     */
    getMessageToVerifySignature() {
        if (!this.isSigned()) {
            const msg = this._errorMsg('This transaction is not signed');
            throw new Error(msg);
        }
        return this.getHashedMessageToSign();
    }
    /**
     * Returns the public key of the sender
     */
    getSenderPublicKey() {
        return Legacy.getSenderPublicKey(this);
    }
    addSignature(v, r, s, convertV = false) {
        r = (0, util_1$2.toBytes)(r);
        s = (0, util_1$2.toBytes)(s);
        if (convertV && this.supports(types_js_1$1.Capability.EIP155ReplayProtection)) {
            v += this.common.chainId() * util_1$2.BIGINT_2 + util_1$2.BIGINT_8;
        }
        const opts = { ...this.txOptions, common: this.common };
        return LegacyTransaction.fromTxData({
            nonce: this.nonce,
            gasPrice: this.gasPrice,
            gasLimit: this.gasLimit,
            to: this.to,
            value: this.value,
            data: this.data,
            v,
            r: (0, util_1$2.bytesToBigInt)(r),
            s: (0, util_1$2.bytesToBigInt)(s),
        }, opts);
    }
    /**
     * Returns an object with the JSON representation of the transaction.
     */
    toJSON() {
        const baseJson = super.toJSON();
        return {
            ...baseJson,
            gasPrice: (0, util_1$2.bigIntToHex)(this.gasPrice),
        };
    }
    /**
     * Validates tx's `v` value
     */
    _validateTxV(_v, common) {
        let chainIdBigInt;
        const v = _v !== undefined ? Number(_v) : undefined;
        // Check for valid v values in the scope of a signed legacy tx
        if (v !== undefined) {
            // v is 1. not matching the EIP-155 chainId included case and...
            // v is 2. not matching the classic v=27 or v=28 case
            if (v < 37 && v !== 27 && v !== 28) {
                throw new Error(`Legacy txs need either v = 27/28 or v >= 37 (EIP-155 replay protection), got v = ${v}`);
            }
        }
        // No unsigned tx and EIP-155 activated and chain ID included
        if (v !== undefined &&
            v !== 0 &&
            (!common || common.gteHardfork('spuriousDragon')) &&
            v !== 27 &&
            v !== 28) {
            if (common) {
                if (!meetsEIP155(BigInt(v), common.chainId())) {
                    throw new Error(`Incompatible EIP155-based V ${v} and chain id ${common.chainId()}. See the Common parameter of the Transaction constructor to set the chain id.`);
                }
            }
            else {
                // Derive the original chain ID
                let numSub;
                if ((v - 35) % 2 === 0) {
                    numSub = 35;
                }
                else {
                    numSub = 36;
                }
                // Use derived chain ID to create a proper Common
                chainIdBigInt = BigInt(v - numSub) / util_1$2.BIGINT_2;
            }
        }
        return this._getCommon(common, chainIdBigInt);
    }
    /**
     * Return a compact error string representation of the object
     */
    errorStr() {
        let errorStr = this._getSharedErrorPostfix();
        errorStr += ` gasPrice=${this.gasPrice}`;
        return errorStr;
    }
    /**
     * Internal helper function to create an annotated error message
     *
     * @param msg Base error message
     * @hidden
     */
    _errorMsg(msg) {
        return Legacy.errorMsg(this, msg);
    }
}
legacyTransaction.LegacyTransaction = LegacyTransaction;

var transactionFactory = {};

var fromRpc = {};

Object.defineProperty(fromRpc, "__esModule", { value: true });
fromRpc.normalizeTxParams = void 0;
const util_1$1 = cjs$2;
const normalizeTxParams = (_txParams) => {
    const txParams = Object.assign({}, _txParams);
    txParams.gasLimit = (0, util_1$1.toType)(txParams.gasLimit ?? txParams.gas, util_1$1.TypeOutput.BigInt);
    txParams.data = txParams.data === undefined ? txParams.input : txParams.data;
    // check and convert gasPrice and value params
    txParams.gasPrice = txParams.gasPrice !== undefined ? BigInt(txParams.gasPrice) : undefined;
    txParams.value = txParams.value !== undefined ? BigInt(txParams.value) : undefined;
    // strict byte length checking
    txParams.to =
        txParams.to !== null && txParams.to !== undefined
            ? (0, util_1$1.setLengthLeft)((0, util_1$1.toBytes)(txParams.to), 20)
            : null;
    // Normalize the v/r/s values. If RPC returns '0x0', ensure v/r/s are set to `undefined` in the tx.
    // If this is not done, then the transaction creation will throw, because `v` is `0`.
    // Note: this still means that `isSigned` will return `false`.
    // v/r/s values are `0x0` on networks like Optimism, where the tx is a system tx.
    // For instance: https://optimistic.etherscan.io/tx/0xf4304cb09b3f58a8e5d20fec5f393c96ccffe0269aaf632cb2be7a8a0f0c91cc
    txParams.v = txParams.v === '0x0' ? '0x' : txParams.v;
    txParams.r = txParams.r === '0x0' ? '0x' : txParams.r;
    txParams.s = txParams.s === '0x0' ? '0x' : txParams.s;
    if (txParams.v !== '0x' || txParams.r !== '0x' || txParams.s !== '0x') {
        txParams.v = (0, util_1$1.toType)(txParams.v, util_1$1.TypeOutput.BigInt);
    }
    return txParams;
};
fromRpc.normalizeTxParams = normalizeTxParams;

Object.defineProperty(transactionFactory, "__esModule", { value: true });
transactionFactory.TransactionFactory = void 0;
const util_1 = cjs$2;
const eip1559Transaction_js_1 = eip1559Transaction;
const eip2930Transaction_js_1 = eip2930Transaction;
const eip4844Transaction_js_1 = eip4844Transaction;
const fromRpc_js_1 = fromRpc;
const legacyTransaction_js_1 = legacyTransaction;
const types_js_1 = types;
class TransactionFactory {
    // It is not possible to instantiate a TransactionFactory object.
    constructor() { }
    /**
     * Create a transaction from a `txData` object
     *
     * @param txData - The transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)
     * @param txOptions - Options to pass on to the constructor of the transaction
     */
    static fromTxData(txData, txOptions = {}) {
        if (!('type' in txData) || txData.type === undefined) {
            // Assume legacy transaction
            return legacyTransaction_js_1.LegacyTransaction.fromTxData(txData, txOptions);
        }
        else {
            if ((0, types_js_1.isLegacyTxData)(txData)) {
                return legacyTransaction_js_1.LegacyTransaction.fromTxData(txData, txOptions);
            }
            else if ((0, types_js_1.isAccessListEIP2930TxData)(txData)) {
                return eip2930Transaction_js_1.AccessListEIP2930Transaction.fromTxData(txData, txOptions);
            }
            else if ((0, types_js_1.isFeeMarketEIP1559TxData)(txData)) {
                return eip1559Transaction_js_1.FeeMarketEIP1559Transaction.fromTxData(txData, txOptions);
            }
            else if ((0, types_js_1.isBlobEIP4844TxData)(txData)) {
                return eip4844Transaction_js_1.BlobEIP4844Transaction.fromTxData(txData, txOptions);
            }
            else {
                throw new Error(`Tx instantiation with type ${txData?.type} not supported`);
            }
        }
    }
    /**
     * This method tries to decode serialized data.
     *
     * @param data - The data Uint8Array
     * @param txOptions - The transaction options
     */
    static fromSerializedData(data, txOptions = {}) {
        if (data[0] <= 0x7f) {
            // Determine the type.
            switch (data[0]) {
                case types_js_1.TransactionType.AccessListEIP2930:
                    return eip2930Transaction_js_1.AccessListEIP2930Transaction.fromSerializedTx(data, txOptions);
                case types_js_1.TransactionType.FeeMarketEIP1559:
                    return eip1559Transaction_js_1.FeeMarketEIP1559Transaction.fromSerializedTx(data, txOptions);
                case types_js_1.TransactionType.BlobEIP4844:
                    return eip4844Transaction_js_1.BlobEIP4844Transaction.fromSerializedTx(data, txOptions);
                default:
                    throw new Error(`TypedTransaction with ID ${data[0]} unknown`);
            }
        }
        else {
            return legacyTransaction_js_1.LegacyTransaction.fromSerializedTx(data, txOptions);
        }
    }
    /**
     * When decoding a BlockBody, in the transactions field, a field is either:
     * A Uint8Array (a TypedTransaction - encoded as TransactionType || rlp(TransactionPayload))
     * A Uint8Array[] (Legacy Transaction)
     * This method returns the right transaction.
     *
     * @param data - A Uint8Array or Uint8Array[]
     * @param txOptions - The transaction options
     */
    static fromBlockBodyData(data, txOptions = {}) {
        if (data instanceof Uint8Array) {
            return this.fromSerializedData(data, txOptions);
        }
        else if (Array.isArray(data)) {
            // It is a legacy transaction
            return legacyTransaction_js_1.LegacyTransaction.fromValuesArray(data, txOptions);
        }
        else {
            throw new Error('Cannot decode transaction: unknown type input');
        }
    }
    /**
     *  Method to retrieve a transaction from the provider
     * @param provider - a url string for a JSON-RPC provider or an Ethers JsonRPCProvider object
     * @param txHash - Transaction hash
     * @param txOptions - The transaction options
     * @returns the transaction specified by `txHash`
     */
    static async fromJsonRpcProvider(provider, txHash, txOptions) {
        const prov = (0, util_1.getProvider)(provider);
        const txData = await (0, util_1.fetchFromProvider)(prov, {
            method: 'eth_getTransactionByHash',
            params: [txHash],
        });
        if (txData === null) {
            throw new Error('No data returned from provider');
        }
        return TransactionFactory.fromRPC(txData, txOptions);
    }
    /**
     * Method to decode data retrieved from RPC, such as `eth_getTransactionByHash`
     * Note that this normalizes some of the parameters
     * @param txData The RPC-encoded data
     * @param txOptions The transaction options
     * @returns
     */
    static async fromRPC(txData, txOptions = {}) {
        return TransactionFactory.fromTxData((0, fromRpc_js_1.normalizeTxParams)(txData), txOptions);
    }
}
transactionFactory.TransactionFactory = TransactionFactory;

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.TransactionFactory = exports.LegacyTransaction = exports.BlobEIP4844Transaction = exports.AccessListEIP2930Transaction = exports.FeeMarketEIP1559Transaction = void 0;
	var eip1559Transaction_js_1 = eip1559Transaction;
	Object.defineProperty(exports, "FeeMarketEIP1559Transaction", { enumerable: true, get: function () { return eip1559Transaction_js_1.FeeMarketEIP1559Transaction; } });
	var eip2930Transaction_js_1 = eip2930Transaction;
	Object.defineProperty(exports, "AccessListEIP2930Transaction", { enumerable: true, get: function () { return eip2930Transaction_js_1.AccessListEIP2930Transaction; } });
	var eip4844Transaction_js_1 = eip4844Transaction;
	Object.defineProperty(exports, "BlobEIP4844Transaction", { enumerable: true, get: function () { return eip4844Transaction_js_1.BlobEIP4844Transaction; } });
	var legacyTransaction_js_1 = legacyTransaction;
	Object.defineProperty(exports, "LegacyTransaction", { enumerable: true, get: function () { return legacyTransaction_js_1.LegacyTransaction; } });
	var transactionFactory_js_1 = transactionFactory;
	Object.defineProperty(exports, "TransactionFactory", { enumerable: true, get: function () { return transactionFactory_js_1.TransactionFactory; } });
	__exportStar(types, exports);
	
} (cjs$4));

var cjs = {};

var util$4 = {};

Object.defineProperty(util$4, "__esModule", { value: true });
util$4.hexToBytes = util$4.padToEven = util$4.bytesToHex = void 0;
/****************  Borrowed wholesale from @ethereumjs/util to avoid external dependencies  *******/
const hexByByte = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));
const bytesToHex = (bytes) => {
    let hex = '0x';
    if (bytes === undefined || bytes.length === 0)
        return hex;
    for (const byte of bytes) {
        hex += hexByByte[byte];
    }
    return hex;
};
util$4.bytesToHex = bytesToHex;
/**
 * Pads a `String` to have an even length
 * @param value
 * @return output
 */
function padToEven(value) {
    let a = value;
    if (typeof a !== 'string') {
        throw new Error(`[padToEven] value must be type 'string', received ${typeof a}`);
    }
    if (a.length % 2)
        a = `0${a}`;
    return a;
}
util$4.padToEven = padToEven;
// hexToBytes cache
const hexToBytesMapFirstKey = {};
const hexToBytesMapSecondKey = {};
for (let i = 0; i < 16; i++) {
    const vSecondKey = i;
    const vFirstKey = i * 16;
    const key = i.toString(16).toLowerCase();
    hexToBytesMapSecondKey[key] = vSecondKey;
    hexToBytesMapSecondKey[key.toUpperCase()] = vSecondKey;
    hexToBytesMapFirstKey[key] = vFirstKey;
    hexToBytesMapFirstKey[key.toUpperCase()] = vFirstKey;
}
function _unprefixedHexToBytes(hex) {
    const byteLen = hex.length;
    const bytes = new Uint8Array(byteLen / 2);
    for (let i = 0; i < byteLen; i += 2) {
        bytes[i / 2] = hexToBytesMapFirstKey[hex[i]] + hexToBytesMapSecondKey[hex[i + 1]];
    }
    return bytes;
}
const hexToBytes = (hex) => {
    if (typeof hex !== 'string') {
        throw new Error(`hex argument type ${typeof hex} must be of type string`);
    }
    if (!/^0x[0-9a-fA-F]*$/.test(hex)) {
        throw new Error(`Input must be a 0x-prefixed hexadecimal string, got ${hex}`);
    }
    hex = hex.slice(2);
    if (hex.length % 2 !== 0) {
        hex = padToEven(hex);
    }
    return _unprefixedHexToBytes(hex);
};
util$4.hexToBytes = hexToBytes;

var kzg = {};

(function (exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = void 0;
	function _regeneratorRuntime() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
	function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
	function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
	function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
	function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
	function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
	var kzg = function () {
	  var _scriptDir = require$$0$4.pathToFileURL(__filename).toString();
	  return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
	    var moduleArg,
	      c,
	      m,
	      p,
	      u,
	      v,
	      x,
	      y,
	      z,
	      A,
	      B,
	      C,
	      _yield$import,
	      a,
	      _require,
	      fs,
	      D,
	      F,
	      G,
	      J,
	      K,
	      L,
	      M,
	      N,
	      O,
	      P,
	      Q,
	      aa,
	      R,
	      S,
	      T,
	      H,
	      ba,
	      E,
	      U,
	      ca,
	      da,
	      ea,
	      ha,
	      ia,
	      V,
	      ja,
	      W,
	      ma,
	      oa,
	      Y,
	      _ka,
	      _la,
	      _X,
	      Z,
	      qa,
	      _args = arguments;
	    return _regeneratorRuntime().wrap(function _callee$(_context) {
	      while (1) switch (_context.prev = _context.next) {
	        case 0:
	          qa = function _qa() {
	            function a() {
	              if (!Z && (Z = !0, c.calledRun = !0, !K)) {
	                V(P);
	                m(c);
	                if (c.onRuntimeInitialized) c.onRuntimeInitialized();
	                if (c.postRun) for ("function" == typeof c.postRun && (c.postRun = [c.postRun]); c.postRun.length;) {
	                  var b = c.postRun.shift();
	                  Q.unshift(b);
	                }
	                V(Q);
	              }
	            }
	            if (!(0 < R)) {
	              if (c.preRun) for ("function" == typeof c.preRun && (c.preRun = [c.preRun]); c.preRun.length;) aa();
	              V(O);
	              0 < R || (c.setStatus ? (c.setStatus("Running..."), setTimeout(function () {
	                setTimeout(function () {
	                  c.setStatus("");
	                }, 1);
	                a();
	              }, 1)) : a());
	            }
	          };
	          ia = function _ia(a, b) {
	            var d = U;
	            return G || "function" != typeof WebAssembly.instantiateStreaming || ba(d) || E(d) || y || "function" != typeof fetch ? ha(d, a, b) : fetch(d, {
	              credentials: "same-origin"
	            }).then(function (e) {
	              return WebAssembly.instantiateStreaming(e, a).then(b, function (f) {
	                F("wasm streaming compile failed: ".concat(f));
	                F("falling back to ArrayBuffer instantiation");
	                return ha(d, a, b);
	              });
	            });
	          };
	          ha = function _ha(a, b, d) {
	            return ea(a).then(function (e) {
	              return WebAssembly.instantiate(e, b);
	            }).then(function (e) {
	              return e;
	            }).then(d, function (e) {
	              F("failed to asynchronously prepare wasm: ".concat(e));
	              H(e);
	            });
	          };
	          ea = function _ea(a) {
	            if (!G && (v || x)) {
	              if ("function" == typeof fetch && !E(a)) return fetch(a, {
	                credentials: "same-origin"
	              }).then(function (b) {
	                if (!b.ok) throw "failed to load wasm binary file at '".concat(a, "'");
	                return b.arrayBuffer();
	              })["catch"](function () {
	                return da(a);
	              });
	              if (B) return new Promise(function (b, d) {
	                B(a, function (e) {
	                  return b(new Uint8Array(e));
	                }, d);
	              });
	            }
	            return Promise.resolve().then(function () {
	              return da(a);
	            });
	          };
	          da = function _da(a) {
	            if (a == U && G) return new Uint8Array(G);
	            if (C) return C(a);
	            throw "both async and sync fetching of the wasm failed";
	          };
	          H = function _H(a) {
	            var _c$onAbort;
	            (_c$onAbort = c.onAbort) === null || _c$onAbort === void 0 || _c$onAbort.call(c, a);
	            a = "Aborted(" + a + ")";
	            F(a);
	            K = !0;
	            a = new WebAssembly.RuntimeError(a + ". Build with -sASSERTIONS for more info.");
	            p(a);
	            throw a;
	          };
	          aa = function _aa() {
	            var a = c.preRun.shift();
	            O.unshift(a);
	          };
	          N = function _N() {
	            var a = J.buffer;
	            c.HEAP8 = L = new Int8Array(a);
	            c.HEAP16 = new Int16Array(a);
	            c.HEAPU8 = M = new Uint8Array(a);
	            c.HEAPU16 = new Uint16Array(a);
	            c.HEAP32 = new Int32Array(a);
	            c.HEAPU32 = new Uint32Array(a);
	            c.HEAPF32 = new Float32Array(a);
	            c.HEAPF64 = new Float64Array(a);
	          };
	          moduleArg = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
	          c = moduleArg;
	          c.ready = new Promise(function (a, b) {
	            m = a;
	            p = b;
	          });
	          u = Object.assign({}, c), v = "object" == (typeof window === "undefined" ? "undefined" : _typeof(window)), x = "function" == typeof importScripts, y = "object" == (typeof process === "undefined" ? "undefined" : _typeof(process)) && "object" == _typeof(process.versions) && "string" == typeof process.versions.node, z = "";
	          if (!y) {
	            _context.next = 25;
	            break;
	          }
	          _context.next = 15;
	          return Promise.resolve().then(function () {
	            return _interopRequireWildcard(require$$1$1);
	          });
	        case 15:
	          _yield$import = _context.sent;
	          a = _yield$import.createRequire;
	          _require = a(require$$0$4.pathToFileURL(__filename).toString()), fs = _require("fs"), D = _require("path");
	          x ? z = D.dirname(z) + "/" : z = _require("url").fileURLToPath(new URL("./", require$$0$4.pathToFileURL(__filename).toString()));
	          A = function A(b, d) {
	            b = E(b) ? new URL(b) : D.normalize(b);
	            return fs.readFileSync(b, d ? void 0 : "utf8");
	          };
	          C = function C(b) {
	            b = A(b, !0);
	            b.buffer || (b = new Uint8Array(b));
	            return b;
	          };
	          B = function B(b, d, e) {
	            var f = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : !0;
	            b = E(b) ? new URL(b) : D.normalize(b);
	            fs.readFile(b, f ? void 0 : "utf8", function (h, q) {
	              h ? e(h) : d(f ? q.buffer : q);
	            });
	          };
	          process.argv.slice(2);
	          _context.next = 26;
	          break;
	        case 25:
	          if (v || x) x ? z = self.location.href : "undefined" != typeof document && document.currentScript && (z = document.currentScript.src), _scriptDir && (z = _scriptDir), z.startsWith("blob:") ? z = "" : z = z.substr(0, z.replace(/[?#].*/, "").lastIndexOf("/") + 1), A = function A(a) {
	            var b = new XMLHttpRequest();
	            b.open("GET", a, !1);
	            b.send(null);
	            return b.responseText;
	          }, x && (C = function C(a) {
	            var b = new XMLHttpRequest();
	            b.open("GET", a, !1);
	            b.responseType = "arraybuffer";
	            b.send(null);
	            return new Uint8Array(b.response);
	          }), B = function B(a, b, d) {
	            var e = new XMLHttpRequest();
	            e.open("GET", a, !0);
	            e.responseType = "arraybuffer";
	            e.onload = function () {
	              200 == e.status || 0 == e.status && e.response ? b(e.response) : d();
	            };
	            e.onerror = d;
	            e.send(null);
	          };
	        case 26:
	          c.print || console.log.bind(console);
	          F = c.printErr || console.error.bind(console);
	          Object.assign(c, u);
	          u = null;
	          c.wasmBinary && (G = c.wasmBinary);
	          "object" != (typeof WebAssembly === "undefined" ? "undefined" : _typeof(WebAssembly)) && H("no native wasm support detected");
	          K = !1;
	          O = [], P = [], Q = [];
	          R = 0, S = null, T = null;
	          ba = function ba(a) {
	            return a.startsWith("data:application/octet-stream;base64,");
	          }, E = function E(a) {
	            return a.startsWith("file://");
	          };
	          if (c.locateFile) {
	            if (U = "../wasm/kzg.wasm", !ba(U)) {
	              ca = U;
	              U = c.locateFile ? c.locateFile(ca, z) : z + ca;
	            }
	          } else U = new URL("../wasm/kzg.wasm", require$$0$4.pathToFileURL(__filename).toString()).href;
	          V = function V(a) {
	            for (; 0 < a.length;) a.shift()(c);
	          }, ja = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, W = function W(a) {
	            if (a) {
	              for (var b = M, d = a + NaN, e = a; b[e] && !(e >= d);) ++e;
	              if (16 < e - a && b.buffer && ja) a = ja.decode(b.subarray(a, e));else {
	                for (d = ""; a < e;) {
	                  var f = b[a++];
	                  if (f & 128) {
	                    var h = b[a++] & 63;
	                    if (192 == (f & 224)) d += String.fromCharCode((f & 31) << 6 | h);else {
	                      var q = b[a++] & 63;
	                      f = 224 == (f & 240) ? (f & 15) << 12 | h << 6 | q : (f & 7) << 18 | h << 12 | q << 6 | b[a++] & 63;
	                      65536 > f ? d += String.fromCharCode(f) : (f -= 65536, d += String.fromCharCode(55296 | f >> 10, 56320 | f & 1023));
	                    }
	                  } else d += String.fromCharCode(f);
	                }
	                a = d;
	              }
	            } else a = "";
	            return a;
	          }, ma = function ma(a, b, d, e) {
	            var f = {
	              string: function string(k) {
	                var r = 0;
	                if (null !== k && void 0 !== k && 0 !== k) {
	                  for (var g = r = 0; g < k.length; ++g) {
	                    var n = k.charCodeAt(g);
	                    127 >= n ? r++ : 2047 >= n ? r += 2 : 55296 <= n && 57343 >= n ? (r += 4, ++g) : r += 3;
	                  }
	                  var t = r + 1;
	                  g = r = _X(t);
	                  n = M;
	                  if (0 < t) {
	                    t = g + t - 1;
	                    for (var I = 0; I < k.length; ++I) {
	                      var l = k.charCodeAt(I);
	                      if (55296 <= l && 57343 >= l) {
	                        var na = k.charCodeAt(++I);
	                        l = 65536 + ((l & 1023) << 10) | na & 1023;
	                      }
	                      if (127 >= l) {
	                        if (g >= t) break;
	                        n[g++] = l;
	                      } else {
	                        if (2047 >= l) {
	                          if (g + 1 >= t) break;
	                          n[g++] = 192 | l >> 6;
	                        } else {
	                          if (65535 >= l) {
	                            if (g + 2 >= t) break;
	                            n[g++] = 224 | l >> 12;
	                          } else {
	                            if (g + 3 >= t) break;
	                            n[g++] = 240 | l >> 18;
	                            n[g++] = 128 | l >> 12 & 63;
	                          }
	                          n[g++] = 128 | l >> 6 & 63;
	                        }
	                        n[g++] = 128 | l & 63;
	                      }
	                    }
	                    n[g] = 0;
	                  }
	                }
	                return r;
	              },
	              array: function array(k) {
	                var r = _X(k.length);
	                L.set(k, r);
	                return r;
	              }
	            };
	            a = c["_" + a];
	            var h = [],
	              q = 0;
	            if (e) for (var w = 0; w < e.length; w++) {
	              var fa = f[d[w]];
	              fa ? (0 === q && (q = _ka()), h[w] = fa(e[w])) : h[w] = e[w];
	            }
	            d = a.apply(null, h);
	            return d = function (k) {
	              0 !== q && _la(q);
	              return "string" === b ? W(k) : "boolean" === b ? !!k : k;
	            }(d);
	          }, oa = {
	            c: function c(a, b, d, e) {
	              H("Assertion failed: ".concat(W(a), ", at: ") + [b ? W(b) : "unknown filename", d, e ? W(e) : "unknown function"]);
	            },
	            b: function b(a, _b, d) {
	              return M.copyWithin(a, _b, _b + d);
	            },
	            a: function a(_a) {
	              var b = M.length;
	              _a >>>= 0;
	              if (2147483648 < _a) return !1;
	              for (var d = 1; 4 >= d; d *= 2) {
	                var e = b * (1 + .2 / d);
	                e = Math.min(e, _a + 100663296);
	                var f = Math;
	                e = Math.max(_a, e);
	                a: {
	                  f = (f.min.call(f, 2147483648, e + (65536 - e % 65536) % 65536) - J.buffer.byteLength + 65535) / 65536;
	                  try {
	                    J.grow(f);
	                    N();
	                    var h = 1;
	                    break a;
	                  } catch (q) {}
	                  h = void 0;
	                }
	                if (h) return !0;
	              }
	              return !1;
	            }
	          }, Y = function (_c$monitorRunDependen2) {
	            function a(d) {
	              var _c$monitorRunDependen;
	              Y = d.exports;
	              J = Y.d;
	              N();
	              P.unshift(Y.e);
	              R--;
	              (_c$monitorRunDependen = c.monitorRunDependencies) === null || _c$monitorRunDependen === void 0 || _c$monitorRunDependen.call(c, R);
	              0 == R && (null !== S && (clearInterval(S), S = null), T && (d = T, T = null, d()));
	              return Y;
	            }
	            var b = {
	              a: oa
	            };
	            R++;
	            (_c$monitorRunDependen2 = c.monitorRunDependencies) === null || _c$monitorRunDependen2 === void 0 || _c$monitorRunDependen2.call(c, R);
	            if (c.instantiateWasm) try {
	              return c.instantiateWasm(b, a);
	            } catch (d) {
	              F("Module.instantiateWasm callback failed with error: ".concat(d)), p(d);
	            }
	            ia(b, function (d) {
	              a(d.instance);
	            })["catch"](p);
	            return {};
	          }();
	          c._load_trusted_setup_from_wasm = function (a, b, d, e) {
	            return (c._load_trusted_setup_from_wasm = Y.f)(a, b, d, e);
	          };
	          c._free_trusted_setup_wasm = function () {
	            return (c._free_trusted_setup_wasm = Y.g)();
	          };
	          c._blob_to_kzg_commitment_wasm = function (a) {
	            return (c._blob_to_kzg_commitment_wasm = Y.h)(a);
	          };
	          c._compute_blob_kzg_proof_wasm = function (a, b) {
	            return (c._compute_blob_kzg_proof_wasm = Y.i)(a, b);
	          };
	          c._verify_blob_kzg_proof_wasm = function (a, b, d) {
	            return (c._verify_blob_kzg_proof_wasm = Y.j)(a, b, d);
	          };
	          c._verify_kzg_proof_wasm = function (a, b, d, e) {
	            return (c._verify_kzg_proof_wasm = Y.k)(a, b, d, e);
	          };
	          _ka = function ka() {
	            return (_ka = Y.m)();
	          }, _la = function la(a) {
	            return (_la = Y.n)(a);
	          }, _X = function X(a) {
	            return (_X = Y.o)(a);
	          };
	          c.cwrap = function (a, b, d, e) {
	            var f = !d || d.every(function (h) {
	              return "number" === h || "boolean" === h;
	            });
	            return "string" !== b && f && !e ? c["_" + a] : function () {
	              return ma(a, b, d, arguments);
	            };
	          };
	          T = function pa() {
	            Z || qa();
	            Z || (T = pa);
	          };
	          if (c.preInit) for ("function" == typeof c.preInit && (c.preInit = [c.preInit]); 0 < c.preInit.length;) c.preInit.pop()();
	          qa();
	          return _context.abrupt("return", moduleArg.ready);
	        case 50:
	        case "end":
	          return _context.stop();
	      }
	    }, _callee);
	  }));
	}();
	exports["default"] = kzg; 
} (kzg));

var trustedSetup$1 = {};

Object.defineProperty(trustedSetup$1, "__esModule", { value: true });
const trustedSetup = {
    "n1": 4096,
    "n2": 65,
    "g1": "",
    "g2": ""
};
trustedSetup$1.default = trustedSetup;

Object.defineProperty(cjs, "__esModule", { value: true });
cjs.loadKZG = void 0;
const util_js_1 = util$4;
const kzg_js_1 = kzg;
const trustedSetup_js_1 = trustedSetup$1;
/**
 * Initialization function that instantiates WASM code and returns an object matching the `KZG` interface exposed by `@ethereumjs/util`
 *
 * @param trustedSetup Optional trusted setup, otherwise official KZG setup from the KZG ceremony is used
 *
 * @returns object - the KZG methods required for all 4844 related operations
 */
const loadKZG$1 = async (trustedSetup = trustedSetup_js_1.default) => {
    const module = await (0, kzg_js_1.default)();
    const loadTrustedSetupWasm = module.cwrap('load_trusted_setup_from_wasm', 'number', ['string', 'number', 'string', 'number']);
    const freeTrustedSetup = module.cwrap('free_trusted_setup_wasm', null, []);
    const blobToKzgCommitmentWasm = module.cwrap('blob_to_kzg_commitment_wasm', 'string', ['array']);
    const computeBlobKzgProofWasm = module.cwrap('compute_blob_kzg_proof_wasm', 'string', ['array', 'array']);
    const verifyBlobKzgProofWasm = module.cwrap('verify_blob_kzg_proof_wasm', 'string', ['array', 'array', 'array']);
    const verifyKzgProofWasm = module.cwrap('verify_kzg_proof_wasm', 'string', ['array', 'array', 'array', 'array']);
    /**
     *
     * @param trustedSetup - an optional trusted setup parameter provided by the user
     * @returns 0 if loaded successfully or 1 otherwise
     */
    const loadTrustedSetup = (trustedSetup = trustedSetup_js_1.default) => {
        return loadTrustedSetupWasm(trustedSetup.g1, trustedSetup.n1, trustedSetup.g2, trustedSetup.n2);
    };
    /**
     *
     * @param blob - a blob of data formatted as a flattened Uint8Array of 4096 big endian KZG field elements
     * @returns a KZG commitment corresponding to the input blob formatted as a 48 byte Uint8Array
     */
    const blobToKzgCommitment = (blob) => {
        const blobHex = '0x' + blobToKzgCommitmentWasm(blob);
        return (0, util_js_1.hexToBytes)(blobHex);
    };
    /**
     *
     * @param blob  - a blob of data formatted as a flattened Uint8Array of 4096 big endian KZG field elements
     * @param commitment - a KZG commitment corresponding to a blob formatted as a 48 byte Uint8Array
     * @returns a 48 byte KZG proof corresponding to the blob and KZG commitment
     */
    const computeBlobKzgProof = (blob, commitment) => {
        const proofHex = '0x' + computeBlobKzgProofWasm(blob, commitment);
        return (0, util_js_1.hexToBytes)(proofHex);
    };
    /**
     *
     * @param blobs - an array of blobs
     * @param commitments - an array of corresponding commitments
     * @param proofs - an array of corresponding KZG proofs
     * @returns returns true if all proofs are verified against their blobs and commitments; false otherise
     */
    const verifyBlobKzgProofBatch = (blobs, commitments, proofs) => {
        if (blobs.length !== commitments.length && commitments.length !== proofs.length) {
            throw new Error('number of blobs, commitments, and proofs, must match');
        }
        for (let x = 0; x < blobs.length; x++) {
            const res = verifyBlobKzgProofWasm(blobs[x], commitments[x], proofs[x]);
            if (res !== 'true')
                return false;
        }
        return true;
    };
    /**
     *
     * @param blob - a blob of data formatted as a flattened Uint8Array of 4096 big endian KZG field elements
     * @param commitment - a 48 byte KZG commitment corresponding to the blob
     * @param proof - a 48 byte KZG proof corresponding to the blob and commitment
     * @returns true if proof is verified; false otherwise
     */
    const verifyBlobKzgProof = (blob, commitment, proof) => {
        const res = verifyBlobKzgProofWasm(blob, commitment, proof);
        return res === 'true';
    };
    /**
     *
     * @param commitment - a KZG commitment corresponding to two points z and y
     * @param z - an input point
     * @param y - the output point corresponding to the proof and commitment
     * @param proof
     * @returns true if proof is verified; false otherwise
     */
    const verifyKzgProof = (commitment, z, y, proof) => {
        const res = verifyKzgProofWasm(commitment, z, y, proof);
        return res === 'true';
    };
    loadTrustedSetup(trustedSetup);
    return {
        loadTrustedSetup, freeTrustedSetup, blobToKzgCommitment, computeBlobKzgProof, verifyBlobKzgProofBatch, verifyKzgProof, verifyBlobKzgProof
    };
};
cjs.loadKZG = loadKZG$1;

var Stream$2 = require$$0$2.Stream;
var util$3 = require$$1$2;

var delayed_stream = DelayedStream$1;
function DelayedStream$1() {
  this.source = null;
  this.dataSize = 0;
  this.maxDataSize = 1024 * 1024;
  this.pauseStream = true;

  this._maxDataSizeExceeded = false;
  this._released = false;
  this._bufferedEvents = [];
}
util$3.inherits(DelayedStream$1, Stream$2);

DelayedStream$1.create = function(source, options) {
  var delayedStream = new this();

  options = options || {};
  for (var option in options) {
    delayedStream[option] = options[option];
  }

  delayedStream.source = source;

  var realEmit = source.emit;
  source.emit = function() {
    delayedStream._handleEmit(arguments);
    return realEmit.apply(source, arguments);
  };

  source.on('error', function() {});
  if (delayedStream.pauseStream) {
    source.pause();
  }

  return delayedStream;
};

Object.defineProperty(DelayedStream$1.prototype, 'readable', {
  configurable: true,
  enumerable: true,
  get: function() {
    return this.source.readable;
  }
});

DelayedStream$1.prototype.setEncoding = function() {
  return this.source.setEncoding.apply(this.source, arguments);
};

DelayedStream$1.prototype.resume = function() {
  if (!this._released) {
    this.release();
  }

  this.source.resume();
};

DelayedStream$1.prototype.pause = function() {
  this.source.pause();
};

DelayedStream$1.prototype.release = function() {
  this._released = true;

  this._bufferedEvents.forEach(function(args) {
    this.emit.apply(this, args);
  }.bind(this));
  this._bufferedEvents = [];
};

DelayedStream$1.prototype.pipe = function() {
  var r = Stream$2.prototype.pipe.apply(this, arguments);
  this.resume();
  return r;
};

DelayedStream$1.prototype._handleEmit = function(args) {
  if (this._released) {
    this.emit.apply(this, args);
    return;
  }

  if (args[0] === 'data') {
    this.dataSize += args[1].length;
    this._checkIfMaxDataSizeExceeded();
  }

  this._bufferedEvents.push(args);
};

DelayedStream$1.prototype._checkIfMaxDataSizeExceeded = function() {
  if (this._maxDataSizeExceeded) {
    return;
  }

  if (this.dataSize <= this.maxDataSize) {
    return;
  }

  this._maxDataSizeExceeded = true;
  var message =
    'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';
  this.emit('error', new Error(message));
};

var util$2 = require$$1$2;
var Stream$1 = require$$0$2.Stream;
var DelayedStream = delayed_stream;

var combined_stream = CombinedStream$1;
function CombinedStream$1() {
  this.writable = false;
  this.readable = true;
  this.dataSize = 0;
  this.maxDataSize = 2 * 1024 * 1024;
  this.pauseStreams = true;

  this._released = false;
  this._streams = [];
  this._currentStream = null;
  this._insideLoop = false;
  this._pendingNext = false;
}
util$2.inherits(CombinedStream$1, Stream$1);

CombinedStream$1.create = function(options) {
  var combinedStream = new this();

  options = options || {};
  for (var option in options) {
    combinedStream[option] = options[option];
  }

  return combinedStream;
};

CombinedStream$1.isStreamLike = function(stream) {
  return (typeof stream !== 'function')
    && (typeof stream !== 'string')
    && (typeof stream !== 'boolean')
    && (typeof stream !== 'number')
    && (!Buffer.isBuffer(stream));
};

CombinedStream$1.prototype.append = function(stream) {
  var isStreamLike = CombinedStream$1.isStreamLike(stream);

  if (isStreamLike) {
    if (!(stream instanceof DelayedStream)) {
      var newStream = DelayedStream.create(stream, {
        maxDataSize: Infinity,
        pauseStream: this.pauseStreams,
      });
      stream.on('data', this._checkDataSize.bind(this));
      stream = newStream;
    }

    this._handleErrors(stream);

    if (this.pauseStreams) {
      stream.pause();
    }
  }

  this._streams.push(stream);
  return this;
};

CombinedStream$1.prototype.pipe = function(dest, options) {
  Stream$1.prototype.pipe.call(this, dest, options);
  this.resume();
  return dest;
};

CombinedStream$1.prototype._getNext = function() {
  this._currentStream = null;

  if (this._insideLoop) {
    this._pendingNext = true;
    return; // defer call
  }

  this._insideLoop = true;
  try {
    do {
      this._pendingNext = false;
      this._realGetNext();
    } while (this._pendingNext);
  } finally {
    this._insideLoop = false;
  }
};

CombinedStream$1.prototype._realGetNext = function() {
  var stream = this._streams.shift();


  if (typeof stream == 'undefined') {
    this.end();
    return;
  }

  if (typeof stream !== 'function') {
    this._pipeNext(stream);
    return;
  }

  var getStream = stream;
  getStream(function(stream) {
    var isStreamLike = CombinedStream$1.isStreamLike(stream);
    if (isStreamLike) {
      stream.on('data', this._checkDataSize.bind(this));
      this._handleErrors(stream);
    }

    this._pipeNext(stream);
  }.bind(this));
};

CombinedStream$1.prototype._pipeNext = function(stream) {
  this._currentStream = stream;

  var isStreamLike = CombinedStream$1.isStreamLike(stream);
  if (isStreamLike) {
    stream.on('end', this._getNext.bind(this));
    stream.pipe(this, {end: false});
    return;
  }

  var value = stream;
  this.write(value);
  this._getNext();
};

CombinedStream$1.prototype._handleErrors = function(stream) {
  var self = this;
  stream.on('error', function(err) {
    self._emitError(err);
  });
};

CombinedStream$1.prototype.write = function(data) {
  this.emit('data', data);
};

CombinedStream$1.prototype.pause = function() {
  if (!this.pauseStreams) {
    return;
  }

  if(this.pauseStreams && this._currentStream && typeof(this._currentStream.pause) == 'function') this._currentStream.pause();
  this.emit('pause');
};

CombinedStream$1.prototype.resume = function() {
  if (!this._released) {
    this._released = true;
    this.writable = true;
    this._getNext();
  }

  if(this.pauseStreams && this._currentStream && typeof(this._currentStream.resume) == 'function') this._currentStream.resume();
  this.emit('resume');
};

CombinedStream$1.prototype.end = function() {
  this._reset();
  this.emit('end');
};

CombinedStream$1.prototype.destroy = function() {
  this._reset();
  this.emit('close');
};

CombinedStream$1.prototype._reset = function() {
  this.writable = false;
  this._streams = [];
  this._currentStream = null;
};

CombinedStream$1.prototype._checkDataSize = function() {
  this._updateDataSize();
  if (this.dataSize <= this.maxDataSize) {
    return;
  }

  var message =
    'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';
  this._emitError(new Error(message));
};

CombinedStream$1.prototype._updateDataSize = function() {
  this.dataSize = 0;

  var self = this;
  this._streams.forEach(function(stream) {
    if (!stream.dataSize) {
      return;
    }

    self.dataSize += stream.dataSize;
  });

  if (this._currentStream && this._currentStream.dataSize) {
    this.dataSize += this._currentStream.dataSize;
  }
};

CombinedStream$1.prototype._emitError = function(err) {
  this._reset();
  this.emit('error', err);
};

var mimeTypes = {};

var require$$0 = {
	"application/1d-interleaved-parityfec": {
	source: "iana"
},
	"application/3gpdash-qoe-report+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/3gpp-ims+xml": {
	source: "iana",
	compressible: true
},
	"application/3gpphal+json": {
	source: "iana",
	compressible: true
},
	"application/3gpphalforms+json": {
	source: "iana",
	compressible: true
},
	"application/a2l": {
	source: "iana"
},
	"application/ace+cbor": {
	source: "iana"
},
	"application/activemessage": {
	source: "iana"
},
	"application/activity+json": {
	source: "iana",
	compressible: true
},
	"application/alto-costmap+json": {
	source: "iana",
	compressible: true
},
	"application/alto-costmapfilter+json": {
	source: "iana",
	compressible: true
},
	"application/alto-directory+json": {
	source: "iana",
	compressible: true
},
	"application/alto-endpointcost+json": {
	source: "iana",
	compressible: true
},
	"application/alto-endpointcostparams+json": {
	source: "iana",
	compressible: true
},
	"application/alto-endpointprop+json": {
	source: "iana",
	compressible: true
},
	"application/alto-endpointpropparams+json": {
	source: "iana",
	compressible: true
},
	"application/alto-error+json": {
	source: "iana",
	compressible: true
},
	"application/alto-networkmap+json": {
	source: "iana",
	compressible: true
},
	"application/alto-networkmapfilter+json": {
	source: "iana",
	compressible: true
},
	"application/alto-updatestreamcontrol+json": {
	source: "iana",
	compressible: true
},
	"application/alto-updatestreamparams+json": {
	source: "iana",
	compressible: true
},
	"application/aml": {
	source: "iana"
},
	"application/andrew-inset": {
	source: "iana",
	extensions: [
		"ez"
	]
},
	"application/applefile": {
	source: "iana"
},
	"application/applixware": {
	source: "apache",
	extensions: [
		"aw"
	]
},
	"application/at+jwt": {
	source: "iana"
},
	"application/atf": {
	source: "iana"
},
	"application/atfx": {
	source: "iana"
},
	"application/atom+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"atom"
	]
},
	"application/atomcat+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"atomcat"
	]
},
	"application/atomdeleted+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"atomdeleted"
	]
},
	"application/atomicmail": {
	source: "iana"
},
	"application/atomsvc+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"atomsvc"
	]
},
	"application/atsc-dwd+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"dwd"
	]
},
	"application/atsc-dynamic-event-message": {
	source: "iana"
},
	"application/atsc-held+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"held"
	]
},
	"application/atsc-rdt+json": {
	source: "iana",
	compressible: true
},
	"application/atsc-rsat+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"rsat"
	]
},
	"application/atxml": {
	source: "iana"
},
	"application/auth-policy+xml": {
	source: "iana",
	compressible: true
},
	"application/bacnet-xdd+zip": {
	source: "iana",
	compressible: false
},
	"application/batch-smtp": {
	source: "iana"
},
	"application/bdoc": {
	compressible: false,
	extensions: [
		"bdoc"
	]
},
	"application/beep+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/calendar+json": {
	source: "iana",
	compressible: true
},
	"application/calendar+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xcs"
	]
},
	"application/call-completion": {
	source: "iana"
},
	"application/cals-1840": {
	source: "iana"
},
	"application/captive+json": {
	source: "iana",
	compressible: true
},
	"application/cbor": {
	source: "iana"
},
	"application/cbor-seq": {
	source: "iana"
},
	"application/cccex": {
	source: "iana"
},
	"application/ccmp+xml": {
	source: "iana",
	compressible: true
},
	"application/ccxml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"ccxml"
	]
},
	"application/cdfx+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"cdfx"
	]
},
	"application/cdmi-capability": {
	source: "iana",
	extensions: [
		"cdmia"
	]
},
	"application/cdmi-container": {
	source: "iana",
	extensions: [
		"cdmic"
	]
},
	"application/cdmi-domain": {
	source: "iana",
	extensions: [
		"cdmid"
	]
},
	"application/cdmi-object": {
	source: "iana",
	extensions: [
		"cdmio"
	]
},
	"application/cdmi-queue": {
	source: "iana",
	extensions: [
		"cdmiq"
	]
},
	"application/cdni": {
	source: "iana"
},
	"application/cea": {
	source: "iana"
},
	"application/cea-2018+xml": {
	source: "iana",
	compressible: true
},
	"application/cellml+xml": {
	source: "iana",
	compressible: true
},
	"application/cfw": {
	source: "iana"
},
	"application/city+json": {
	source: "iana",
	compressible: true
},
	"application/clr": {
	source: "iana"
},
	"application/clue+xml": {
	source: "iana",
	compressible: true
},
	"application/clue_info+xml": {
	source: "iana",
	compressible: true
},
	"application/cms": {
	source: "iana"
},
	"application/cnrp+xml": {
	source: "iana",
	compressible: true
},
	"application/coap-group+json": {
	source: "iana",
	compressible: true
},
	"application/coap-payload": {
	source: "iana"
},
	"application/commonground": {
	source: "iana"
},
	"application/conference-info+xml": {
	source: "iana",
	compressible: true
},
	"application/cose": {
	source: "iana"
},
	"application/cose-key": {
	source: "iana"
},
	"application/cose-key-set": {
	source: "iana"
},
	"application/cpl+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"cpl"
	]
},
	"application/csrattrs": {
	source: "iana"
},
	"application/csta+xml": {
	source: "iana",
	compressible: true
},
	"application/cstadata+xml": {
	source: "iana",
	compressible: true
},
	"application/csvm+json": {
	source: "iana",
	compressible: true
},
	"application/cu-seeme": {
	source: "apache",
	extensions: [
		"cu"
	]
},
	"application/cwt": {
	source: "iana"
},
	"application/cybercash": {
	source: "iana"
},
	"application/dart": {
	compressible: true
},
	"application/dash+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"mpd"
	]
},
	"application/dash-patch+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"mpp"
	]
},
	"application/dashdelta": {
	source: "iana"
},
	"application/davmount+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"davmount"
	]
},
	"application/dca-rft": {
	source: "iana"
},
	"application/dcd": {
	source: "iana"
},
	"application/dec-dx": {
	source: "iana"
},
	"application/dialog-info+xml": {
	source: "iana",
	compressible: true
},
	"application/dicom": {
	source: "iana"
},
	"application/dicom+json": {
	source: "iana",
	compressible: true
},
	"application/dicom+xml": {
	source: "iana",
	compressible: true
},
	"application/dii": {
	source: "iana"
},
	"application/dit": {
	source: "iana"
},
	"application/dns": {
	source: "iana"
},
	"application/dns+json": {
	source: "iana",
	compressible: true
},
	"application/dns-message": {
	source: "iana"
},
	"application/docbook+xml": {
	source: "apache",
	compressible: true,
	extensions: [
		"dbk"
	]
},
	"application/dots+cbor": {
	source: "iana"
},
	"application/dskpp+xml": {
	source: "iana",
	compressible: true
},
	"application/dssc+der": {
	source: "iana",
	extensions: [
		"dssc"
	]
},
	"application/dssc+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xdssc"
	]
},
	"application/dvcs": {
	source: "iana"
},
	"application/ecmascript": {
	source: "iana",
	compressible: true,
	extensions: [
		"es",
		"ecma"
	]
},
	"application/edi-consent": {
	source: "iana"
},
	"application/edi-x12": {
	source: "iana",
	compressible: false
},
	"application/edifact": {
	source: "iana",
	compressible: false
},
	"application/efi": {
	source: "iana"
},
	"application/elm+json": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/elm+xml": {
	source: "iana",
	compressible: true
},
	"application/emergencycalldata.cap+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/emergencycalldata.comment+xml": {
	source: "iana",
	compressible: true
},
	"application/emergencycalldata.control+xml": {
	source: "iana",
	compressible: true
},
	"application/emergencycalldata.deviceinfo+xml": {
	source: "iana",
	compressible: true
},
	"application/emergencycalldata.ecall.msd": {
	source: "iana"
},
	"application/emergencycalldata.providerinfo+xml": {
	source: "iana",
	compressible: true
},
	"application/emergencycalldata.serviceinfo+xml": {
	source: "iana",
	compressible: true
},
	"application/emergencycalldata.subscriberinfo+xml": {
	source: "iana",
	compressible: true
},
	"application/emergencycalldata.veds+xml": {
	source: "iana",
	compressible: true
},
	"application/emma+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"emma"
	]
},
	"application/emotionml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"emotionml"
	]
},
	"application/encaprtp": {
	source: "iana"
},
	"application/epp+xml": {
	source: "iana",
	compressible: true
},
	"application/epub+zip": {
	source: "iana",
	compressible: false,
	extensions: [
		"epub"
	]
},
	"application/eshop": {
	source: "iana"
},
	"application/exi": {
	source: "iana",
	extensions: [
		"exi"
	]
},
	"application/expect-ct-report+json": {
	source: "iana",
	compressible: true
},
	"application/express": {
	source: "iana",
	extensions: [
		"exp"
	]
},
	"application/fastinfoset": {
	source: "iana"
},
	"application/fastsoap": {
	source: "iana"
},
	"application/fdt+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"fdt"
	]
},
	"application/fhir+json": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/fhir+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/fido.trusted-apps+json": {
	compressible: true
},
	"application/fits": {
	source: "iana"
},
	"application/flexfec": {
	source: "iana"
},
	"application/font-sfnt": {
	source: "iana"
},
	"application/font-tdpfr": {
	source: "iana",
	extensions: [
		"pfr"
	]
},
	"application/font-woff": {
	source: "iana",
	compressible: false
},
	"application/framework-attributes+xml": {
	source: "iana",
	compressible: true
},
	"application/geo+json": {
	source: "iana",
	compressible: true,
	extensions: [
		"geojson"
	]
},
	"application/geo+json-seq": {
	source: "iana"
},
	"application/geopackage+sqlite3": {
	source: "iana"
},
	"application/geoxacml+xml": {
	source: "iana",
	compressible: true
},
	"application/gltf-buffer": {
	source: "iana"
},
	"application/gml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"gml"
	]
},
	"application/gpx+xml": {
	source: "apache",
	compressible: true,
	extensions: [
		"gpx"
	]
},
	"application/gxf": {
	source: "apache",
	extensions: [
		"gxf"
	]
},
	"application/gzip": {
	source: "iana",
	compressible: false,
	extensions: [
		"gz"
	]
},
	"application/h224": {
	source: "iana"
},
	"application/held+xml": {
	source: "iana",
	compressible: true
},
	"application/hjson": {
	extensions: [
		"hjson"
	]
},
	"application/http": {
	source: "iana"
},
	"application/hyperstudio": {
	source: "iana",
	extensions: [
		"stk"
	]
},
	"application/ibe-key-request+xml": {
	source: "iana",
	compressible: true
},
	"application/ibe-pkg-reply+xml": {
	source: "iana",
	compressible: true
},
	"application/ibe-pp-data": {
	source: "iana"
},
	"application/iges": {
	source: "iana"
},
	"application/im-iscomposing+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/index": {
	source: "iana"
},
	"application/index.cmd": {
	source: "iana"
},
	"application/index.obj": {
	source: "iana"
},
	"application/index.response": {
	source: "iana"
},
	"application/index.vnd": {
	source: "iana"
},
	"application/inkml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"ink",
		"inkml"
	]
},
	"application/iotp": {
	source: "iana"
},
	"application/ipfix": {
	source: "iana",
	extensions: [
		"ipfix"
	]
},
	"application/ipp": {
	source: "iana"
},
	"application/isup": {
	source: "iana"
},
	"application/its+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"its"
	]
},
	"application/java-archive": {
	source: "apache",
	compressible: false,
	extensions: [
		"jar",
		"war",
		"ear"
	]
},
	"application/java-serialized-object": {
	source: "apache",
	compressible: false,
	extensions: [
		"ser"
	]
},
	"application/java-vm": {
	source: "apache",
	compressible: false,
	extensions: [
		"class"
	]
},
	"application/javascript": {
	source: "iana",
	charset: "UTF-8",
	compressible: true,
	extensions: [
		"js",
		"mjs"
	]
},
	"application/jf2feed+json": {
	source: "iana",
	compressible: true
},
	"application/jose": {
	source: "iana"
},
	"application/jose+json": {
	source: "iana",
	compressible: true
},
	"application/jrd+json": {
	source: "iana",
	compressible: true
},
	"application/jscalendar+json": {
	source: "iana",
	compressible: true
},
	"application/json": {
	source: "iana",
	charset: "UTF-8",
	compressible: true,
	extensions: [
		"json",
		"map"
	]
},
	"application/json-patch+json": {
	source: "iana",
	compressible: true
},
	"application/json-seq": {
	source: "iana"
},
	"application/json5": {
	extensions: [
		"json5"
	]
},
	"application/jsonml+json": {
	source: "apache",
	compressible: true,
	extensions: [
		"jsonml"
	]
},
	"application/jwk+json": {
	source: "iana",
	compressible: true
},
	"application/jwk-set+json": {
	source: "iana",
	compressible: true
},
	"application/jwt": {
	source: "iana"
},
	"application/kpml-request+xml": {
	source: "iana",
	compressible: true
},
	"application/kpml-response+xml": {
	source: "iana",
	compressible: true
},
	"application/ld+json": {
	source: "iana",
	compressible: true,
	extensions: [
		"jsonld"
	]
},
	"application/lgr+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"lgr"
	]
},
	"application/link-format": {
	source: "iana"
},
	"application/load-control+xml": {
	source: "iana",
	compressible: true
},
	"application/lost+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"lostxml"
	]
},
	"application/lostsync+xml": {
	source: "iana",
	compressible: true
},
	"application/lpf+zip": {
	source: "iana",
	compressible: false
},
	"application/lxf": {
	source: "iana"
},
	"application/mac-binhex40": {
	source: "iana",
	extensions: [
		"hqx"
	]
},
	"application/mac-compactpro": {
	source: "apache",
	extensions: [
		"cpt"
	]
},
	"application/macwriteii": {
	source: "iana"
},
	"application/mads+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"mads"
	]
},
	"application/manifest+json": {
	source: "iana",
	charset: "UTF-8",
	compressible: true,
	extensions: [
		"webmanifest"
	]
},
	"application/marc": {
	source: "iana",
	extensions: [
		"mrc"
	]
},
	"application/marcxml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"mrcx"
	]
},
	"application/mathematica": {
	source: "iana",
	extensions: [
		"ma",
		"nb",
		"mb"
	]
},
	"application/mathml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"mathml"
	]
},
	"application/mathml-content+xml": {
	source: "iana",
	compressible: true
},
	"application/mathml-presentation+xml": {
	source: "iana",
	compressible: true
},
	"application/mbms-associated-procedure-description+xml": {
	source: "iana",
	compressible: true
},
	"application/mbms-deregister+xml": {
	source: "iana",
	compressible: true
},
	"application/mbms-envelope+xml": {
	source: "iana",
	compressible: true
},
	"application/mbms-msk+xml": {
	source: "iana",
	compressible: true
},
	"application/mbms-msk-response+xml": {
	source: "iana",
	compressible: true
},
	"application/mbms-protection-description+xml": {
	source: "iana",
	compressible: true
},
	"application/mbms-reception-report+xml": {
	source: "iana",
	compressible: true
},
	"application/mbms-register+xml": {
	source: "iana",
	compressible: true
},
	"application/mbms-register-response+xml": {
	source: "iana",
	compressible: true
},
	"application/mbms-schedule+xml": {
	source: "iana",
	compressible: true
},
	"application/mbms-user-service-description+xml": {
	source: "iana",
	compressible: true
},
	"application/mbox": {
	source: "iana",
	extensions: [
		"mbox"
	]
},
	"application/media-policy-dataset+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"mpf"
	]
},
	"application/media_control+xml": {
	source: "iana",
	compressible: true
},
	"application/mediaservercontrol+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"mscml"
	]
},
	"application/merge-patch+json": {
	source: "iana",
	compressible: true
},
	"application/metalink+xml": {
	source: "apache",
	compressible: true,
	extensions: [
		"metalink"
	]
},
	"application/metalink4+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"meta4"
	]
},
	"application/mets+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"mets"
	]
},
	"application/mf4": {
	source: "iana"
},
	"application/mikey": {
	source: "iana"
},
	"application/mipc": {
	source: "iana"
},
	"application/missing-blocks+cbor-seq": {
	source: "iana"
},
	"application/mmt-aei+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"maei"
	]
},
	"application/mmt-usd+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"musd"
	]
},
	"application/mods+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"mods"
	]
},
	"application/moss-keys": {
	source: "iana"
},
	"application/moss-signature": {
	source: "iana"
},
	"application/mosskey-data": {
	source: "iana"
},
	"application/mosskey-request": {
	source: "iana"
},
	"application/mp21": {
	source: "iana",
	extensions: [
		"m21",
		"mp21"
	]
},
	"application/mp4": {
	source: "iana",
	extensions: [
		"mp4s",
		"m4p"
	]
},
	"application/mpeg4-generic": {
	source: "iana"
},
	"application/mpeg4-iod": {
	source: "iana"
},
	"application/mpeg4-iod-xmt": {
	source: "iana"
},
	"application/mrb-consumer+xml": {
	source: "iana",
	compressible: true
},
	"application/mrb-publish+xml": {
	source: "iana",
	compressible: true
},
	"application/msc-ivr+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/msc-mixer+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/msword": {
	source: "iana",
	compressible: false,
	extensions: [
		"doc",
		"dot"
	]
},
	"application/mud+json": {
	source: "iana",
	compressible: true
},
	"application/multipart-core": {
	source: "iana"
},
	"application/mxf": {
	source: "iana",
	extensions: [
		"mxf"
	]
},
	"application/n-quads": {
	source: "iana",
	extensions: [
		"nq"
	]
},
	"application/n-triples": {
	source: "iana",
	extensions: [
		"nt"
	]
},
	"application/nasdata": {
	source: "iana"
},
	"application/news-checkgroups": {
	source: "iana",
	charset: "US-ASCII"
},
	"application/news-groupinfo": {
	source: "iana",
	charset: "US-ASCII"
},
	"application/news-transmission": {
	source: "iana"
},
	"application/nlsml+xml": {
	source: "iana",
	compressible: true
},
	"application/node": {
	source: "iana",
	extensions: [
		"cjs"
	]
},
	"application/nss": {
	source: "iana"
},
	"application/oauth-authz-req+jwt": {
	source: "iana"
},
	"application/oblivious-dns-message": {
	source: "iana"
},
	"application/ocsp-request": {
	source: "iana"
},
	"application/ocsp-response": {
	source: "iana"
},
	"application/octet-stream": {
	source: "iana",
	compressible: false,
	extensions: [
		"bin",
		"dms",
		"lrf",
		"mar",
		"so",
		"dist",
		"distz",
		"pkg",
		"bpk",
		"dump",
		"elc",
		"deploy",
		"exe",
		"dll",
		"deb",
		"dmg",
		"iso",
		"img",
		"msi",
		"msp",
		"msm",
		"buffer"
	]
},
	"application/oda": {
	source: "iana",
	extensions: [
		"oda"
	]
},
	"application/odm+xml": {
	source: "iana",
	compressible: true
},
	"application/odx": {
	source: "iana"
},
	"application/oebps-package+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"opf"
	]
},
	"application/ogg": {
	source: "iana",
	compressible: false,
	extensions: [
		"ogx"
	]
},
	"application/omdoc+xml": {
	source: "apache",
	compressible: true,
	extensions: [
		"omdoc"
	]
},
	"application/onenote": {
	source: "apache",
	extensions: [
		"onetoc",
		"onetoc2",
		"onetmp",
		"onepkg"
	]
},
	"application/opc-nodeset+xml": {
	source: "iana",
	compressible: true
},
	"application/oscore": {
	source: "iana"
},
	"application/oxps": {
	source: "iana",
	extensions: [
		"oxps"
	]
},
	"application/p21": {
	source: "iana"
},
	"application/p21+zip": {
	source: "iana",
	compressible: false
},
	"application/p2p-overlay+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"relo"
	]
},
	"application/parityfec": {
	source: "iana"
},
	"application/passport": {
	source: "iana"
},
	"application/patch-ops-error+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xer"
	]
},
	"application/pdf": {
	source: "iana",
	compressible: false,
	extensions: [
		"pdf"
	]
},
	"application/pdx": {
	source: "iana"
},
	"application/pem-certificate-chain": {
	source: "iana"
},
	"application/pgp-encrypted": {
	source: "iana",
	compressible: false,
	extensions: [
		"pgp"
	]
},
	"application/pgp-keys": {
	source: "iana",
	extensions: [
		"asc"
	]
},
	"application/pgp-signature": {
	source: "iana",
	extensions: [
		"asc",
		"sig"
	]
},
	"application/pics-rules": {
	source: "apache",
	extensions: [
		"prf"
	]
},
	"application/pidf+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/pidf-diff+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/pkcs10": {
	source: "iana",
	extensions: [
		"p10"
	]
},
	"application/pkcs12": {
	source: "iana"
},
	"application/pkcs7-mime": {
	source: "iana",
	extensions: [
		"p7m",
		"p7c"
	]
},
	"application/pkcs7-signature": {
	source: "iana",
	extensions: [
		"p7s"
	]
},
	"application/pkcs8": {
	source: "iana",
	extensions: [
		"p8"
	]
},
	"application/pkcs8-encrypted": {
	source: "iana"
},
	"application/pkix-attr-cert": {
	source: "iana",
	extensions: [
		"ac"
	]
},
	"application/pkix-cert": {
	source: "iana",
	extensions: [
		"cer"
	]
},
	"application/pkix-crl": {
	source: "iana",
	extensions: [
		"crl"
	]
},
	"application/pkix-pkipath": {
	source: "iana",
	extensions: [
		"pkipath"
	]
},
	"application/pkixcmp": {
	source: "iana",
	extensions: [
		"pki"
	]
},
	"application/pls+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"pls"
	]
},
	"application/poc-settings+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/postscript": {
	source: "iana",
	compressible: true,
	extensions: [
		"ai",
		"eps",
		"ps"
	]
},
	"application/ppsp-tracker+json": {
	source: "iana",
	compressible: true
},
	"application/problem+json": {
	source: "iana",
	compressible: true
},
	"application/problem+xml": {
	source: "iana",
	compressible: true
},
	"application/provenance+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"provx"
	]
},
	"application/prs.alvestrand.titrax-sheet": {
	source: "iana"
},
	"application/prs.cww": {
	source: "iana",
	extensions: [
		"cww"
	]
},
	"application/prs.cyn": {
	source: "iana",
	charset: "7-BIT"
},
	"application/prs.hpub+zip": {
	source: "iana",
	compressible: false
},
	"application/prs.nprend": {
	source: "iana"
},
	"application/prs.plucker": {
	source: "iana"
},
	"application/prs.rdf-xml-crypt": {
	source: "iana"
},
	"application/prs.xsf+xml": {
	source: "iana",
	compressible: true
},
	"application/pskc+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"pskcxml"
	]
},
	"application/pvd+json": {
	source: "iana",
	compressible: true
},
	"application/qsig": {
	source: "iana"
},
	"application/raml+yaml": {
	compressible: true,
	extensions: [
		"raml"
	]
},
	"application/raptorfec": {
	source: "iana"
},
	"application/rdap+json": {
	source: "iana",
	compressible: true
},
	"application/rdf+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"rdf",
		"owl"
	]
},
	"application/reginfo+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"rif"
	]
},
	"application/relax-ng-compact-syntax": {
	source: "iana",
	extensions: [
		"rnc"
	]
},
	"application/remote-printing": {
	source: "iana"
},
	"application/reputon+json": {
	source: "iana",
	compressible: true
},
	"application/resource-lists+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"rl"
	]
},
	"application/resource-lists-diff+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"rld"
	]
},
	"application/rfc+xml": {
	source: "iana",
	compressible: true
},
	"application/riscos": {
	source: "iana"
},
	"application/rlmi+xml": {
	source: "iana",
	compressible: true
},
	"application/rls-services+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"rs"
	]
},
	"application/route-apd+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"rapd"
	]
},
	"application/route-s-tsid+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"sls"
	]
},
	"application/route-usd+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"rusd"
	]
},
	"application/rpki-ghostbusters": {
	source: "iana",
	extensions: [
		"gbr"
	]
},
	"application/rpki-manifest": {
	source: "iana",
	extensions: [
		"mft"
	]
},
	"application/rpki-publication": {
	source: "iana"
},
	"application/rpki-roa": {
	source: "iana",
	extensions: [
		"roa"
	]
},
	"application/rpki-updown": {
	source: "iana"
},
	"application/rsd+xml": {
	source: "apache",
	compressible: true,
	extensions: [
		"rsd"
	]
},
	"application/rss+xml": {
	source: "apache",
	compressible: true,
	extensions: [
		"rss"
	]
},
	"application/rtf": {
	source: "iana",
	compressible: true,
	extensions: [
		"rtf"
	]
},
	"application/rtploopback": {
	source: "iana"
},
	"application/rtx": {
	source: "iana"
},
	"application/samlassertion+xml": {
	source: "iana",
	compressible: true
},
	"application/samlmetadata+xml": {
	source: "iana",
	compressible: true
},
	"application/sarif+json": {
	source: "iana",
	compressible: true
},
	"application/sarif-external-properties+json": {
	source: "iana",
	compressible: true
},
	"application/sbe": {
	source: "iana"
},
	"application/sbml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"sbml"
	]
},
	"application/scaip+xml": {
	source: "iana",
	compressible: true
},
	"application/scim+json": {
	source: "iana",
	compressible: true
},
	"application/scvp-cv-request": {
	source: "iana",
	extensions: [
		"scq"
	]
},
	"application/scvp-cv-response": {
	source: "iana",
	extensions: [
		"scs"
	]
},
	"application/scvp-vp-request": {
	source: "iana",
	extensions: [
		"spq"
	]
},
	"application/scvp-vp-response": {
	source: "iana",
	extensions: [
		"spp"
	]
},
	"application/sdp": {
	source: "iana",
	extensions: [
		"sdp"
	]
},
	"application/secevent+jwt": {
	source: "iana"
},
	"application/senml+cbor": {
	source: "iana"
},
	"application/senml+json": {
	source: "iana",
	compressible: true
},
	"application/senml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"senmlx"
	]
},
	"application/senml-etch+cbor": {
	source: "iana"
},
	"application/senml-etch+json": {
	source: "iana",
	compressible: true
},
	"application/senml-exi": {
	source: "iana"
},
	"application/sensml+cbor": {
	source: "iana"
},
	"application/sensml+json": {
	source: "iana",
	compressible: true
},
	"application/sensml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"sensmlx"
	]
},
	"application/sensml-exi": {
	source: "iana"
},
	"application/sep+xml": {
	source: "iana",
	compressible: true
},
	"application/sep-exi": {
	source: "iana"
},
	"application/session-info": {
	source: "iana"
},
	"application/set-payment": {
	source: "iana"
},
	"application/set-payment-initiation": {
	source: "iana",
	extensions: [
		"setpay"
	]
},
	"application/set-registration": {
	source: "iana"
},
	"application/set-registration-initiation": {
	source: "iana",
	extensions: [
		"setreg"
	]
},
	"application/sgml": {
	source: "iana"
},
	"application/sgml-open-catalog": {
	source: "iana"
},
	"application/shf+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"shf"
	]
},
	"application/sieve": {
	source: "iana",
	extensions: [
		"siv",
		"sieve"
	]
},
	"application/simple-filter+xml": {
	source: "iana",
	compressible: true
},
	"application/simple-message-summary": {
	source: "iana"
},
	"application/simplesymbolcontainer": {
	source: "iana"
},
	"application/sipc": {
	source: "iana"
},
	"application/slate": {
	source: "iana"
},
	"application/smil": {
	source: "iana"
},
	"application/smil+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"smi",
		"smil"
	]
},
	"application/smpte336m": {
	source: "iana"
},
	"application/soap+fastinfoset": {
	source: "iana"
},
	"application/soap+xml": {
	source: "iana",
	compressible: true
},
	"application/sparql-query": {
	source: "iana",
	extensions: [
		"rq"
	]
},
	"application/sparql-results+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"srx"
	]
},
	"application/spdx+json": {
	source: "iana",
	compressible: true
},
	"application/spirits-event+xml": {
	source: "iana",
	compressible: true
},
	"application/sql": {
	source: "iana"
},
	"application/srgs": {
	source: "iana",
	extensions: [
		"gram"
	]
},
	"application/srgs+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"grxml"
	]
},
	"application/sru+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"sru"
	]
},
	"application/ssdl+xml": {
	source: "apache",
	compressible: true,
	extensions: [
		"ssdl"
	]
},
	"application/ssml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"ssml"
	]
},
	"application/stix+json": {
	source: "iana",
	compressible: true
},
	"application/swid+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"swidtag"
	]
},
	"application/tamp-apex-update": {
	source: "iana"
},
	"application/tamp-apex-update-confirm": {
	source: "iana"
},
	"application/tamp-community-update": {
	source: "iana"
},
	"application/tamp-community-update-confirm": {
	source: "iana"
},
	"application/tamp-error": {
	source: "iana"
},
	"application/tamp-sequence-adjust": {
	source: "iana"
},
	"application/tamp-sequence-adjust-confirm": {
	source: "iana"
},
	"application/tamp-status-query": {
	source: "iana"
},
	"application/tamp-status-response": {
	source: "iana"
},
	"application/tamp-update": {
	source: "iana"
},
	"application/tamp-update-confirm": {
	source: "iana"
},
	"application/tar": {
	compressible: true
},
	"application/taxii+json": {
	source: "iana",
	compressible: true
},
	"application/td+json": {
	source: "iana",
	compressible: true
},
	"application/tei+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"tei",
		"teicorpus"
	]
},
	"application/tetra_isi": {
	source: "iana"
},
	"application/thraud+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"tfi"
	]
},
	"application/timestamp-query": {
	source: "iana"
},
	"application/timestamp-reply": {
	source: "iana"
},
	"application/timestamped-data": {
	source: "iana",
	extensions: [
		"tsd"
	]
},
	"application/tlsrpt+gzip": {
	source: "iana"
},
	"application/tlsrpt+json": {
	source: "iana",
	compressible: true
},
	"application/tnauthlist": {
	source: "iana"
},
	"application/token-introspection+jwt": {
	source: "iana"
},
	"application/toml": {
	compressible: true,
	extensions: [
		"toml"
	]
},
	"application/trickle-ice-sdpfrag": {
	source: "iana"
},
	"application/trig": {
	source: "iana",
	extensions: [
		"trig"
	]
},
	"application/ttml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"ttml"
	]
},
	"application/tve-trigger": {
	source: "iana"
},
	"application/tzif": {
	source: "iana"
},
	"application/tzif-leap": {
	source: "iana"
},
	"application/ubjson": {
	compressible: false,
	extensions: [
		"ubj"
	]
},
	"application/ulpfec": {
	source: "iana"
},
	"application/urc-grpsheet+xml": {
	source: "iana",
	compressible: true
},
	"application/urc-ressheet+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"rsheet"
	]
},
	"application/urc-targetdesc+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"td"
	]
},
	"application/urc-uisocketdesc+xml": {
	source: "iana",
	compressible: true
},
	"application/vcard+json": {
	source: "iana",
	compressible: true
},
	"application/vcard+xml": {
	source: "iana",
	compressible: true
},
	"application/vemmi": {
	source: "iana"
},
	"application/vividence.scriptfile": {
	source: "apache"
},
	"application/vnd.1000minds.decision-model+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"1km"
	]
},
	"application/vnd.3gpp-prose+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp-prose-pc3ch+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp-v2x-local-service-information": {
	source: "iana"
},
	"application/vnd.3gpp.5gnas": {
	source: "iana"
},
	"application/vnd.3gpp.access-transfer-events+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.bsf+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.gmop+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.gtpc": {
	source: "iana"
},
	"application/vnd.3gpp.interworking-data": {
	source: "iana"
},
	"application/vnd.3gpp.lpp": {
	source: "iana"
},
	"application/vnd.3gpp.mc-signalling-ear": {
	source: "iana"
},
	"application/vnd.3gpp.mcdata-affiliation-command+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcdata-info+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcdata-payload": {
	source: "iana"
},
	"application/vnd.3gpp.mcdata-service-config+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcdata-signalling": {
	source: "iana"
},
	"application/vnd.3gpp.mcdata-ue-config+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcdata-user-profile+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcptt-affiliation-command+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcptt-floor-request+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcptt-info+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcptt-location-info+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcptt-mbms-usage-info+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcptt-service-config+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcptt-signed+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcptt-ue-config+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcptt-ue-init-config+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcptt-user-profile+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcvideo-affiliation-command+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcvideo-affiliation-info+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcvideo-info+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcvideo-location-info+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcvideo-mbms-usage-info+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcvideo-service-config+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcvideo-transmission-request+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcvideo-ue-config+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mcvideo-user-profile+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.mid-call+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.ngap": {
	source: "iana"
},
	"application/vnd.3gpp.pfcp": {
	source: "iana"
},
	"application/vnd.3gpp.pic-bw-large": {
	source: "iana",
	extensions: [
		"plb"
	]
},
	"application/vnd.3gpp.pic-bw-small": {
	source: "iana",
	extensions: [
		"psb"
	]
},
	"application/vnd.3gpp.pic-bw-var": {
	source: "iana",
	extensions: [
		"pvb"
	]
},
	"application/vnd.3gpp.s1ap": {
	source: "iana"
},
	"application/vnd.3gpp.sms": {
	source: "iana"
},
	"application/vnd.3gpp.sms+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.srvcc-ext+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.srvcc-info+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.state-and-event-info+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp.ussd+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp2.bcmcsinfo+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.3gpp2.sms": {
	source: "iana"
},
	"application/vnd.3gpp2.tcap": {
	source: "iana",
	extensions: [
		"tcap"
	]
},
	"application/vnd.3lightssoftware.imagescal": {
	source: "iana"
},
	"application/vnd.3m.post-it-notes": {
	source: "iana",
	extensions: [
		"pwn"
	]
},
	"application/vnd.accpac.simply.aso": {
	source: "iana",
	extensions: [
		"aso"
	]
},
	"application/vnd.accpac.simply.imp": {
	source: "iana",
	extensions: [
		"imp"
	]
},
	"application/vnd.acucobol": {
	source: "iana",
	extensions: [
		"acu"
	]
},
	"application/vnd.acucorp": {
	source: "iana",
	extensions: [
		"atc",
		"acutc"
	]
},
	"application/vnd.adobe.air-application-installer-package+zip": {
	source: "apache",
	compressible: false,
	extensions: [
		"air"
	]
},
	"application/vnd.adobe.flash.movie": {
	source: "iana"
},
	"application/vnd.adobe.formscentral.fcdt": {
	source: "iana",
	extensions: [
		"fcdt"
	]
},
	"application/vnd.adobe.fxp": {
	source: "iana",
	extensions: [
		"fxp",
		"fxpl"
	]
},
	"application/vnd.adobe.partial-upload": {
	source: "iana"
},
	"application/vnd.adobe.xdp+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xdp"
	]
},
	"application/vnd.adobe.xfdf": {
	source: "iana",
	extensions: [
		"xfdf"
	]
},
	"application/vnd.aether.imp": {
	source: "iana"
},
	"application/vnd.afpc.afplinedata": {
	source: "iana"
},
	"application/vnd.afpc.afplinedata-pagedef": {
	source: "iana"
},
	"application/vnd.afpc.cmoca-cmresource": {
	source: "iana"
},
	"application/vnd.afpc.foca-charset": {
	source: "iana"
},
	"application/vnd.afpc.foca-codedfont": {
	source: "iana"
},
	"application/vnd.afpc.foca-codepage": {
	source: "iana"
},
	"application/vnd.afpc.modca": {
	source: "iana"
},
	"application/vnd.afpc.modca-cmtable": {
	source: "iana"
},
	"application/vnd.afpc.modca-formdef": {
	source: "iana"
},
	"application/vnd.afpc.modca-mediummap": {
	source: "iana"
},
	"application/vnd.afpc.modca-objectcontainer": {
	source: "iana"
},
	"application/vnd.afpc.modca-overlay": {
	source: "iana"
},
	"application/vnd.afpc.modca-pagesegment": {
	source: "iana"
},
	"application/vnd.age": {
	source: "iana",
	extensions: [
		"age"
	]
},
	"application/vnd.ah-barcode": {
	source: "iana"
},
	"application/vnd.ahead.space": {
	source: "iana",
	extensions: [
		"ahead"
	]
},
	"application/vnd.airzip.filesecure.azf": {
	source: "iana",
	extensions: [
		"azf"
	]
},
	"application/vnd.airzip.filesecure.azs": {
	source: "iana",
	extensions: [
		"azs"
	]
},
	"application/vnd.amadeus+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.amazon.ebook": {
	source: "apache",
	extensions: [
		"azw"
	]
},
	"application/vnd.amazon.mobi8-ebook": {
	source: "iana"
},
	"application/vnd.americandynamics.acc": {
	source: "iana",
	extensions: [
		"acc"
	]
},
	"application/vnd.amiga.ami": {
	source: "iana",
	extensions: [
		"ami"
	]
},
	"application/vnd.amundsen.maze+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.android.ota": {
	source: "iana"
},
	"application/vnd.android.package-archive": {
	source: "apache",
	compressible: false,
	extensions: [
		"apk"
	]
},
	"application/vnd.anki": {
	source: "iana"
},
	"application/vnd.anser-web-certificate-issue-initiation": {
	source: "iana",
	extensions: [
		"cii"
	]
},
	"application/vnd.anser-web-funds-transfer-initiation": {
	source: "apache",
	extensions: [
		"fti"
	]
},
	"application/vnd.antix.game-component": {
	source: "iana",
	extensions: [
		"atx"
	]
},
	"application/vnd.apache.arrow.file": {
	source: "iana"
},
	"application/vnd.apache.arrow.stream": {
	source: "iana"
},
	"application/vnd.apache.thrift.binary": {
	source: "iana"
},
	"application/vnd.apache.thrift.compact": {
	source: "iana"
},
	"application/vnd.apache.thrift.json": {
	source: "iana"
},
	"application/vnd.api+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.aplextor.warrp+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.apothekende.reservation+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.apple.installer+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"mpkg"
	]
},
	"application/vnd.apple.keynote": {
	source: "iana",
	extensions: [
		"key"
	]
},
	"application/vnd.apple.mpegurl": {
	source: "iana",
	extensions: [
		"m3u8"
	]
},
	"application/vnd.apple.numbers": {
	source: "iana",
	extensions: [
		"numbers"
	]
},
	"application/vnd.apple.pages": {
	source: "iana",
	extensions: [
		"pages"
	]
},
	"application/vnd.apple.pkpass": {
	compressible: false,
	extensions: [
		"pkpass"
	]
},
	"application/vnd.arastra.swi": {
	source: "iana"
},
	"application/vnd.aristanetworks.swi": {
	source: "iana",
	extensions: [
		"swi"
	]
},
	"application/vnd.artisan+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.artsquare": {
	source: "iana"
},
	"application/vnd.astraea-software.iota": {
	source: "iana",
	extensions: [
		"iota"
	]
},
	"application/vnd.audiograph": {
	source: "iana",
	extensions: [
		"aep"
	]
},
	"application/vnd.autopackage": {
	source: "iana"
},
	"application/vnd.avalon+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.avistar+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.balsamiq.bmml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"bmml"
	]
},
	"application/vnd.balsamiq.bmpr": {
	source: "iana"
},
	"application/vnd.banana-accounting": {
	source: "iana"
},
	"application/vnd.bbf.usp.error": {
	source: "iana"
},
	"application/vnd.bbf.usp.msg": {
	source: "iana"
},
	"application/vnd.bbf.usp.msg+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.bekitzur-stech+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.bint.med-content": {
	source: "iana"
},
	"application/vnd.biopax.rdf+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.blink-idb-value-wrapper": {
	source: "iana"
},
	"application/vnd.blueice.multipass": {
	source: "iana",
	extensions: [
		"mpm"
	]
},
	"application/vnd.bluetooth.ep.oob": {
	source: "iana"
},
	"application/vnd.bluetooth.le.oob": {
	source: "iana"
},
	"application/vnd.bmi": {
	source: "iana",
	extensions: [
		"bmi"
	]
},
	"application/vnd.bpf": {
	source: "iana"
},
	"application/vnd.bpf3": {
	source: "iana"
},
	"application/vnd.businessobjects": {
	source: "iana",
	extensions: [
		"rep"
	]
},
	"application/vnd.byu.uapi+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.cab-jscript": {
	source: "iana"
},
	"application/vnd.canon-cpdl": {
	source: "iana"
},
	"application/vnd.canon-lips": {
	source: "iana"
},
	"application/vnd.capasystems-pg+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.cendio.thinlinc.clientconf": {
	source: "iana"
},
	"application/vnd.century-systems.tcp_stream": {
	source: "iana"
},
	"application/vnd.chemdraw+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"cdxml"
	]
},
	"application/vnd.chess-pgn": {
	source: "iana"
},
	"application/vnd.chipnuts.karaoke-mmd": {
	source: "iana",
	extensions: [
		"mmd"
	]
},
	"application/vnd.ciedi": {
	source: "iana"
},
	"application/vnd.cinderella": {
	source: "iana",
	extensions: [
		"cdy"
	]
},
	"application/vnd.cirpack.isdn-ext": {
	source: "iana"
},
	"application/vnd.citationstyles.style+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"csl"
	]
},
	"application/vnd.claymore": {
	source: "iana",
	extensions: [
		"cla"
	]
},
	"application/vnd.cloanto.rp9": {
	source: "iana",
	extensions: [
		"rp9"
	]
},
	"application/vnd.clonk.c4group": {
	source: "iana",
	extensions: [
		"c4g",
		"c4d",
		"c4f",
		"c4p",
		"c4u"
	]
},
	"application/vnd.cluetrust.cartomobile-config": {
	source: "iana",
	extensions: [
		"c11amc"
	]
},
	"application/vnd.cluetrust.cartomobile-config-pkg": {
	source: "iana",
	extensions: [
		"c11amz"
	]
},
	"application/vnd.coffeescript": {
	source: "iana"
},
	"application/vnd.collabio.xodocuments.document": {
	source: "iana"
},
	"application/vnd.collabio.xodocuments.document-template": {
	source: "iana"
},
	"application/vnd.collabio.xodocuments.presentation": {
	source: "iana"
},
	"application/vnd.collabio.xodocuments.presentation-template": {
	source: "iana"
},
	"application/vnd.collabio.xodocuments.spreadsheet": {
	source: "iana"
},
	"application/vnd.collabio.xodocuments.spreadsheet-template": {
	source: "iana"
},
	"application/vnd.collection+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.collection.doc+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.collection.next+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.comicbook+zip": {
	source: "iana",
	compressible: false
},
	"application/vnd.comicbook-rar": {
	source: "iana"
},
	"application/vnd.commerce-battelle": {
	source: "iana"
},
	"application/vnd.commonspace": {
	source: "iana",
	extensions: [
		"csp"
	]
},
	"application/vnd.contact.cmsg": {
	source: "iana",
	extensions: [
		"cdbcmsg"
	]
},
	"application/vnd.coreos.ignition+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.cosmocaller": {
	source: "iana",
	extensions: [
		"cmc"
	]
},
	"application/vnd.crick.clicker": {
	source: "iana",
	extensions: [
		"clkx"
	]
},
	"application/vnd.crick.clicker.keyboard": {
	source: "iana",
	extensions: [
		"clkk"
	]
},
	"application/vnd.crick.clicker.palette": {
	source: "iana",
	extensions: [
		"clkp"
	]
},
	"application/vnd.crick.clicker.template": {
	source: "iana",
	extensions: [
		"clkt"
	]
},
	"application/vnd.crick.clicker.wordbank": {
	source: "iana",
	extensions: [
		"clkw"
	]
},
	"application/vnd.criticaltools.wbs+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"wbs"
	]
},
	"application/vnd.cryptii.pipe+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.crypto-shade-file": {
	source: "iana"
},
	"application/vnd.cryptomator.encrypted": {
	source: "iana"
},
	"application/vnd.cryptomator.vault": {
	source: "iana"
},
	"application/vnd.ctc-posml": {
	source: "iana",
	extensions: [
		"pml"
	]
},
	"application/vnd.ctct.ws+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.cups-pdf": {
	source: "iana"
},
	"application/vnd.cups-postscript": {
	source: "iana"
},
	"application/vnd.cups-ppd": {
	source: "iana",
	extensions: [
		"ppd"
	]
},
	"application/vnd.cups-raster": {
	source: "iana"
},
	"application/vnd.cups-raw": {
	source: "iana"
},
	"application/vnd.curl": {
	source: "iana"
},
	"application/vnd.curl.car": {
	source: "apache",
	extensions: [
		"car"
	]
},
	"application/vnd.curl.pcurl": {
	source: "apache",
	extensions: [
		"pcurl"
	]
},
	"application/vnd.cyan.dean.root+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.cybank": {
	source: "iana"
},
	"application/vnd.cyclonedx+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.cyclonedx+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.d2l.coursepackage1p0+zip": {
	source: "iana",
	compressible: false
},
	"application/vnd.d3m-dataset": {
	source: "iana"
},
	"application/vnd.d3m-problem": {
	source: "iana"
},
	"application/vnd.dart": {
	source: "iana",
	compressible: true,
	extensions: [
		"dart"
	]
},
	"application/vnd.data-vision.rdz": {
	source: "iana",
	extensions: [
		"rdz"
	]
},
	"application/vnd.datapackage+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.dataresource+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.dbf": {
	source: "iana",
	extensions: [
		"dbf"
	]
},
	"application/vnd.debian.binary-package": {
	source: "iana"
},
	"application/vnd.dece.data": {
	source: "iana",
	extensions: [
		"uvf",
		"uvvf",
		"uvd",
		"uvvd"
	]
},
	"application/vnd.dece.ttml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"uvt",
		"uvvt"
	]
},
	"application/vnd.dece.unspecified": {
	source: "iana",
	extensions: [
		"uvx",
		"uvvx"
	]
},
	"application/vnd.dece.zip": {
	source: "iana",
	extensions: [
		"uvz",
		"uvvz"
	]
},
	"application/vnd.denovo.fcselayout-link": {
	source: "iana",
	extensions: [
		"fe_launch"
	]
},
	"application/vnd.desmume.movie": {
	source: "iana"
},
	"application/vnd.dir-bi.plate-dl-nosuffix": {
	source: "iana"
},
	"application/vnd.dm.delegation+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.dna": {
	source: "iana",
	extensions: [
		"dna"
	]
},
	"application/vnd.document+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.dolby.mlp": {
	source: "apache",
	extensions: [
		"mlp"
	]
},
	"application/vnd.dolby.mobile.1": {
	source: "iana"
},
	"application/vnd.dolby.mobile.2": {
	source: "iana"
},
	"application/vnd.doremir.scorecloud-binary-document": {
	source: "iana"
},
	"application/vnd.dpgraph": {
	source: "iana",
	extensions: [
		"dpg"
	]
},
	"application/vnd.dreamfactory": {
	source: "iana",
	extensions: [
		"dfac"
	]
},
	"application/vnd.drive+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.ds-keypoint": {
	source: "apache",
	extensions: [
		"kpxx"
	]
},
	"application/vnd.dtg.local": {
	source: "iana"
},
	"application/vnd.dtg.local.flash": {
	source: "iana"
},
	"application/vnd.dtg.local.html": {
	source: "iana"
},
	"application/vnd.dvb.ait": {
	source: "iana",
	extensions: [
		"ait"
	]
},
	"application/vnd.dvb.dvbisl+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.dvb.dvbj": {
	source: "iana"
},
	"application/vnd.dvb.esgcontainer": {
	source: "iana"
},
	"application/vnd.dvb.ipdcdftnotifaccess": {
	source: "iana"
},
	"application/vnd.dvb.ipdcesgaccess": {
	source: "iana"
},
	"application/vnd.dvb.ipdcesgaccess2": {
	source: "iana"
},
	"application/vnd.dvb.ipdcesgpdd": {
	source: "iana"
},
	"application/vnd.dvb.ipdcroaming": {
	source: "iana"
},
	"application/vnd.dvb.iptv.alfec-base": {
	source: "iana"
},
	"application/vnd.dvb.iptv.alfec-enhancement": {
	source: "iana"
},
	"application/vnd.dvb.notif-aggregate-root+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.dvb.notif-container+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.dvb.notif-generic+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.dvb.notif-ia-msglist+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.dvb.notif-ia-registration-request+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.dvb.notif-ia-registration-response+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.dvb.notif-init+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.dvb.pfr": {
	source: "iana"
},
	"application/vnd.dvb.service": {
	source: "iana",
	extensions: [
		"svc"
	]
},
	"application/vnd.dxr": {
	source: "iana"
},
	"application/vnd.dynageo": {
	source: "iana",
	extensions: [
		"geo"
	]
},
	"application/vnd.dzr": {
	source: "iana"
},
	"application/vnd.easykaraoke.cdgdownload": {
	source: "iana"
},
	"application/vnd.ecdis-update": {
	source: "iana"
},
	"application/vnd.ecip.rlp": {
	source: "iana"
},
	"application/vnd.eclipse.ditto+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.ecowin.chart": {
	source: "iana",
	extensions: [
		"mag"
	]
},
	"application/vnd.ecowin.filerequest": {
	source: "iana"
},
	"application/vnd.ecowin.fileupdate": {
	source: "iana"
},
	"application/vnd.ecowin.series": {
	source: "iana"
},
	"application/vnd.ecowin.seriesrequest": {
	source: "iana"
},
	"application/vnd.ecowin.seriesupdate": {
	source: "iana"
},
	"application/vnd.efi.img": {
	source: "iana"
},
	"application/vnd.efi.iso": {
	source: "iana"
},
	"application/vnd.emclient.accessrequest+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.enliven": {
	source: "iana",
	extensions: [
		"nml"
	]
},
	"application/vnd.enphase.envoy": {
	source: "iana"
},
	"application/vnd.eprints.data+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.epson.esf": {
	source: "iana",
	extensions: [
		"esf"
	]
},
	"application/vnd.epson.msf": {
	source: "iana",
	extensions: [
		"msf"
	]
},
	"application/vnd.epson.quickanime": {
	source: "iana",
	extensions: [
		"qam"
	]
},
	"application/vnd.epson.salt": {
	source: "iana",
	extensions: [
		"slt"
	]
},
	"application/vnd.epson.ssf": {
	source: "iana",
	extensions: [
		"ssf"
	]
},
	"application/vnd.ericsson.quickcall": {
	source: "iana"
},
	"application/vnd.espass-espass+zip": {
	source: "iana",
	compressible: false
},
	"application/vnd.eszigno3+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"es3",
		"et3"
	]
},
	"application/vnd.etsi.aoc+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.asic-e+zip": {
	source: "iana",
	compressible: false
},
	"application/vnd.etsi.asic-s+zip": {
	source: "iana",
	compressible: false
},
	"application/vnd.etsi.cug+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.iptvcommand+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.iptvdiscovery+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.iptvprofile+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.iptvsad-bc+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.iptvsad-cod+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.iptvsad-npvr+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.iptvservice+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.iptvsync+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.iptvueprofile+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.mcid+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.mheg5": {
	source: "iana"
},
	"application/vnd.etsi.overload-control-policy-dataset+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.pstn+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.sci+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.simservs+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.timestamp-token": {
	source: "iana"
},
	"application/vnd.etsi.tsl+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.etsi.tsl.der": {
	source: "iana"
},
	"application/vnd.eu.kasparian.car+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.eudora.data": {
	source: "iana"
},
	"application/vnd.evolv.ecig.profile": {
	source: "iana"
},
	"application/vnd.evolv.ecig.settings": {
	source: "iana"
},
	"application/vnd.evolv.ecig.theme": {
	source: "iana"
},
	"application/vnd.exstream-empower+zip": {
	source: "iana",
	compressible: false
},
	"application/vnd.exstream-package": {
	source: "iana"
},
	"application/vnd.ezpix-album": {
	source: "iana",
	extensions: [
		"ez2"
	]
},
	"application/vnd.ezpix-package": {
	source: "iana",
	extensions: [
		"ez3"
	]
},
	"application/vnd.f-secure.mobile": {
	source: "iana"
},
	"application/vnd.familysearch.gedcom+zip": {
	source: "iana",
	compressible: false
},
	"application/vnd.fastcopy-disk-image": {
	source: "iana"
},
	"application/vnd.fdf": {
	source: "iana",
	extensions: [
		"fdf"
	]
},
	"application/vnd.fdsn.mseed": {
	source: "iana",
	extensions: [
		"mseed"
	]
},
	"application/vnd.fdsn.seed": {
	source: "iana",
	extensions: [
		"seed",
		"dataless"
	]
},
	"application/vnd.ffsns": {
	source: "iana"
},
	"application/vnd.ficlab.flb+zip": {
	source: "iana",
	compressible: false
},
	"application/vnd.filmit.zfc": {
	source: "iana"
},
	"application/vnd.fints": {
	source: "iana"
},
	"application/vnd.firemonkeys.cloudcell": {
	source: "iana"
},
	"application/vnd.flographit": {
	source: "iana",
	extensions: [
		"gph"
	]
},
	"application/vnd.fluxtime.clip": {
	source: "iana",
	extensions: [
		"ftc"
	]
},
	"application/vnd.font-fontforge-sfd": {
	source: "iana"
},
	"application/vnd.framemaker": {
	source: "iana",
	extensions: [
		"fm",
		"frame",
		"maker",
		"book"
	]
},
	"application/vnd.frogans.fnc": {
	source: "iana",
	extensions: [
		"fnc"
	]
},
	"application/vnd.frogans.ltf": {
	source: "iana",
	extensions: [
		"ltf"
	]
},
	"application/vnd.fsc.weblaunch": {
	source: "iana",
	extensions: [
		"fsc"
	]
},
	"application/vnd.fujifilm.fb.docuworks": {
	source: "iana"
},
	"application/vnd.fujifilm.fb.docuworks.binder": {
	source: "iana"
},
	"application/vnd.fujifilm.fb.docuworks.container": {
	source: "iana"
},
	"application/vnd.fujifilm.fb.jfi+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.fujitsu.oasys": {
	source: "iana",
	extensions: [
		"oas"
	]
},
	"application/vnd.fujitsu.oasys2": {
	source: "iana",
	extensions: [
		"oa2"
	]
},
	"application/vnd.fujitsu.oasys3": {
	source: "iana",
	extensions: [
		"oa3"
	]
},
	"application/vnd.fujitsu.oasysgp": {
	source: "iana",
	extensions: [
		"fg5"
	]
},
	"application/vnd.fujitsu.oasysprs": {
	source: "iana",
	extensions: [
		"bh2"
	]
},
	"application/vnd.fujixerox.art-ex": {
	source: "iana"
},
	"application/vnd.fujixerox.art4": {
	source: "iana"
},
	"application/vnd.fujixerox.ddd": {
	source: "iana",
	extensions: [
		"ddd"
	]
},
	"application/vnd.fujixerox.docuworks": {
	source: "iana",
	extensions: [
		"xdw"
	]
},
	"application/vnd.fujixerox.docuworks.binder": {
	source: "iana",
	extensions: [
		"xbd"
	]
},
	"application/vnd.fujixerox.docuworks.container": {
	source: "iana"
},
	"application/vnd.fujixerox.hbpl": {
	source: "iana"
},
	"application/vnd.fut-misnet": {
	source: "iana"
},
	"application/vnd.futoin+cbor": {
	source: "iana"
},
	"application/vnd.futoin+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.fuzzysheet": {
	source: "iana",
	extensions: [
		"fzs"
	]
},
	"application/vnd.genomatix.tuxedo": {
	source: "iana",
	extensions: [
		"txd"
	]
},
	"application/vnd.gentics.grd+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.geo+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.geocube+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.geogebra.file": {
	source: "iana",
	extensions: [
		"ggb"
	]
},
	"application/vnd.geogebra.slides": {
	source: "iana"
},
	"application/vnd.geogebra.tool": {
	source: "iana",
	extensions: [
		"ggt"
	]
},
	"application/vnd.geometry-explorer": {
	source: "iana",
	extensions: [
		"gex",
		"gre"
	]
},
	"application/vnd.geonext": {
	source: "iana",
	extensions: [
		"gxt"
	]
},
	"application/vnd.geoplan": {
	source: "iana",
	extensions: [
		"g2w"
	]
},
	"application/vnd.geospace": {
	source: "iana",
	extensions: [
		"g3w"
	]
},
	"application/vnd.gerber": {
	source: "iana"
},
	"application/vnd.globalplatform.card-content-mgt": {
	source: "iana"
},
	"application/vnd.globalplatform.card-content-mgt-response": {
	source: "iana"
},
	"application/vnd.gmx": {
	source: "iana",
	extensions: [
		"gmx"
	]
},
	"application/vnd.google-apps.document": {
	compressible: false,
	extensions: [
		"gdoc"
	]
},
	"application/vnd.google-apps.presentation": {
	compressible: false,
	extensions: [
		"gslides"
	]
},
	"application/vnd.google-apps.spreadsheet": {
	compressible: false,
	extensions: [
		"gsheet"
	]
},
	"application/vnd.google-earth.kml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"kml"
	]
},
	"application/vnd.google-earth.kmz": {
	source: "iana",
	compressible: false,
	extensions: [
		"kmz"
	]
},
	"application/vnd.gov.sk.e-form+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.gov.sk.e-form+zip": {
	source: "iana",
	compressible: false
},
	"application/vnd.gov.sk.xmldatacontainer+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.grafeq": {
	source: "iana",
	extensions: [
		"gqf",
		"gqs"
	]
},
	"application/vnd.gridmp": {
	source: "iana"
},
	"application/vnd.groove-account": {
	source: "iana",
	extensions: [
		"gac"
	]
},
	"application/vnd.groove-help": {
	source: "iana",
	extensions: [
		"ghf"
	]
},
	"application/vnd.groove-identity-message": {
	source: "iana",
	extensions: [
		"gim"
	]
},
	"application/vnd.groove-injector": {
	source: "iana",
	extensions: [
		"grv"
	]
},
	"application/vnd.groove-tool-message": {
	source: "iana",
	extensions: [
		"gtm"
	]
},
	"application/vnd.groove-tool-template": {
	source: "iana",
	extensions: [
		"tpl"
	]
},
	"application/vnd.groove-vcard": {
	source: "iana",
	extensions: [
		"vcg"
	]
},
	"application/vnd.hal+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.hal+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"hal"
	]
},
	"application/vnd.handheld-entertainment+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"zmm"
	]
},
	"application/vnd.hbci": {
	source: "iana",
	extensions: [
		"hbci"
	]
},
	"application/vnd.hc+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.hcl-bireports": {
	source: "iana"
},
	"application/vnd.hdt": {
	source: "iana"
},
	"application/vnd.heroku+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.hhe.lesson-player": {
	source: "iana",
	extensions: [
		"les"
	]
},
	"application/vnd.hl7cda+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/vnd.hl7v2+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/vnd.hp-hpgl": {
	source: "iana",
	extensions: [
		"hpgl"
	]
},
	"application/vnd.hp-hpid": {
	source: "iana",
	extensions: [
		"hpid"
	]
},
	"application/vnd.hp-hps": {
	source: "iana",
	extensions: [
		"hps"
	]
},
	"application/vnd.hp-jlyt": {
	source: "iana",
	extensions: [
		"jlt"
	]
},
	"application/vnd.hp-pcl": {
	source: "iana",
	extensions: [
		"pcl"
	]
},
	"application/vnd.hp-pclxl": {
	source: "iana",
	extensions: [
		"pclxl"
	]
},
	"application/vnd.httphone": {
	source: "iana"
},
	"application/vnd.hydrostatix.sof-data": {
	source: "iana",
	extensions: [
		"sfd-hdstx"
	]
},
	"application/vnd.hyper+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.hyper-item+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.hyperdrive+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.hzn-3d-crossword": {
	source: "iana"
},
	"application/vnd.ibm.afplinedata": {
	source: "iana"
},
	"application/vnd.ibm.electronic-media": {
	source: "iana"
},
	"application/vnd.ibm.minipay": {
	source: "iana",
	extensions: [
		"mpy"
	]
},
	"application/vnd.ibm.modcap": {
	source: "iana",
	extensions: [
		"afp",
		"listafp",
		"list3820"
	]
},
	"application/vnd.ibm.rights-management": {
	source: "iana",
	extensions: [
		"irm"
	]
},
	"application/vnd.ibm.secure-container": {
	source: "iana",
	extensions: [
		"sc"
	]
},
	"application/vnd.iccprofile": {
	source: "iana",
	extensions: [
		"icc",
		"icm"
	]
},
	"application/vnd.ieee.1905": {
	source: "iana"
},
	"application/vnd.igloader": {
	source: "iana",
	extensions: [
		"igl"
	]
},
	"application/vnd.imagemeter.folder+zip": {
	source: "iana",
	compressible: false
},
	"application/vnd.imagemeter.image+zip": {
	source: "iana",
	compressible: false
},
	"application/vnd.immervision-ivp": {
	source: "iana",
	extensions: [
		"ivp"
	]
},
	"application/vnd.immervision-ivu": {
	source: "iana",
	extensions: [
		"ivu"
	]
},
	"application/vnd.ims.imsccv1p1": {
	source: "iana"
},
	"application/vnd.ims.imsccv1p2": {
	source: "iana"
},
	"application/vnd.ims.imsccv1p3": {
	source: "iana"
},
	"application/vnd.ims.lis.v2.result+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.ims.lti.v2.toolconsumerprofile+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.ims.lti.v2.toolproxy+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.ims.lti.v2.toolproxy.id+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.ims.lti.v2.toolsettings+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.ims.lti.v2.toolsettings.simple+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.informedcontrol.rms+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.informix-visionary": {
	source: "iana"
},
	"application/vnd.infotech.project": {
	source: "iana"
},
	"application/vnd.infotech.project+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.innopath.wamp.notification": {
	source: "iana"
},
	"application/vnd.insors.igm": {
	source: "iana",
	extensions: [
		"igm"
	]
},
	"application/vnd.intercon.formnet": {
	source: "iana",
	extensions: [
		"xpw",
		"xpx"
	]
},
	"application/vnd.intergeo": {
	source: "iana",
	extensions: [
		"i2g"
	]
},
	"application/vnd.intertrust.digibox": {
	source: "iana"
},
	"application/vnd.intertrust.nncp": {
	source: "iana"
},
	"application/vnd.intu.qbo": {
	source: "iana",
	extensions: [
		"qbo"
	]
},
	"application/vnd.intu.qfx": {
	source: "iana",
	extensions: [
		"qfx"
	]
},
	"application/vnd.iptc.g2.catalogitem+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.iptc.g2.conceptitem+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.iptc.g2.knowledgeitem+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.iptc.g2.newsitem+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.iptc.g2.newsmessage+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.iptc.g2.packageitem+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.iptc.g2.planningitem+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.ipunplugged.rcprofile": {
	source: "iana",
	extensions: [
		"rcprofile"
	]
},
	"application/vnd.irepository.package+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"irp"
	]
},
	"application/vnd.is-xpr": {
	source: "iana",
	extensions: [
		"xpr"
	]
},
	"application/vnd.isac.fcs": {
	source: "iana",
	extensions: [
		"fcs"
	]
},
	"application/vnd.iso11783-10+zip": {
	source: "iana",
	compressible: false
},
	"application/vnd.jam": {
	source: "iana",
	extensions: [
		"jam"
	]
},
	"application/vnd.japannet-directory-service": {
	source: "iana"
},
	"application/vnd.japannet-jpnstore-wakeup": {
	source: "iana"
},
	"application/vnd.japannet-payment-wakeup": {
	source: "iana"
},
	"application/vnd.japannet-registration": {
	source: "iana"
},
	"application/vnd.japannet-registration-wakeup": {
	source: "iana"
},
	"application/vnd.japannet-setstore-wakeup": {
	source: "iana"
},
	"application/vnd.japannet-verification": {
	source: "iana"
},
	"application/vnd.japannet-verification-wakeup": {
	source: "iana"
},
	"application/vnd.jcp.javame.midlet-rms": {
	source: "iana",
	extensions: [
		"rms"
	]
},
	"application/vnd.jisp": {
	source: "iana",
	extensions: [
		"jisp"
	]
},
	"application/vnd.joost.joda-archive": {
	source: "iana",
	extensions: [
		"joda"
	]
},
	"application/vnd.jsk.isdn-ngn": {
	source: "iana"
},
	"application/vnd.kahootz": {
	source: "iana",
	extensions: [
		"ktz",
		"ktr"
	]
},
	"application/vnd.kde.karbon": {
	source: "iana",
	extensions: [
		"karbon"
	]
},
	"application/vnd.kde.kchart": {
	source: "iana",
	extensions: [
		"chrt"
	]
},
	"application/vnd.kde.kformula": {
	source: "iana",
	extensions: [
		"kfo"
	]
},
	"application/vnd.kde.kivio": {
	source: "iana",
	extensions: [
		"flw"
	]
},
	"application/vnd.kde.kontour": {
	source: "iana",
	extensions: [
		"kon"
	]
},
	"application/vnd.kde.kpresenter": {
	source: "iana",
	extensions: [
		"kpr",
		"kpt"
	]
},
	"application/vnd.kde.kspread": {
	source: "iana",
	extensions: [
		"ksp"
	]
},
	"application/vnd.kde.kword": {
	source: "iana",
	extensions: [
		"kwd",
		"kwt"
	]
},
	"application/vnd.kenameaapp": {
	source: "iana",
	extensions: [
		"htke"
	]
},
	"application/vnd.kidspiration": {
	source: "iana",
	extensions: [
		"kia"
	]
},
	"application/vnd.kinar": {
	source: "iana",
	extensions: [
		"kne",
		"knp"
	]
},
	"application/vnd.koan": {
	source: "iana",
	extensions: [
		"skp",
		"skd",
		"skt",
		"skm"
	]
},
	"application/vnd.kodak-descriptor": {
	source: "iana",
	extensions: [
		"sse"
	]
},
	"application/vnd.las": {
	source: "iana"
},
	"application/vnd.las.las+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.las.las+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"lasxml"
	]
},
	"application/vnd.laszip": {
	source: "iana"
},
	"application/vnd.leap+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.liberty-request+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.llamagraphics.life-balance.desktop": {
	source: "iana",
	extensions: [
		"lbd"
	]
},
	"application/vnd.llamagraphics.life-balance.exchange+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"lbe"
	]
},
	"application/vnd.logipipe.circuit+zip": {
	source: "iana",
	compressible: false
},
	"application/vnd.loom": {
	source: "iana"
},
	"application/vnd.lotus-1-2-3": {
	source: "iana",
	extensions: [
		"123"
	]
},
	"application/vnd.lotus-approach": {
	source: "iana",
	extensions: [
		"apr"
	]
},
	"application/vnd.lotus-freelance": {
	source: "iana",
	extensions: [
		"pre"
	]
},
	"application/vnd.lotus-notes": {
	source: "iana",
	extensions: [
		"nsf"
	]
},
	"application/vnd.lotus-organizer": {
	source: "iana",
	extensions: [
		"org"
	]
},
	"application/vnd.lotus-screencam": {
	source: "iana",
	extensions: [
		"scm"
	]
},
	"application/vnd.lotus-wordpro": {
	source: "iana",
	extensions: [
		"lwp"
	]
},
	"application/vnd.macports.portpkg": {
	source: "iana",
	extensions: [
		"portpkg"
	]
},
	"application/vnd.mapbox-vector-tile": {
	source: "iana",
	extensions: [
		"mvt"
	]
},
	"application/vnd.marlin.drm.actiontoken+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.marlin.drm.conftoken+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.marlin.drm.license+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.marlin.drm.mdcf": {
	source: "iana"
},
	"application/vnd.mason+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.maxar.archive.3tz+zip": {
	source: "iana",
	compressible: false
},
	"application/vnd.maxmind.maxmind-db": {
	source: "iana"
},
	"application/vnd.mcd": {
	source: "iana",
	extensions: [
		"mcd"
	]
},
	"application/vnd.medcalcdata": {
	source: "iana",
	extensions: [
		"mc1"
	]
},
	"application/vnd.mediastation.cdkey": {
	source: "iana",
	extensions: [
		"cdkey"
	]
},
	"application/vnd.meridian-slingshot": {
	source: "iana"
},
	"application/vnd.mfer": {
	source: "iana",
	extensions: [
		"mwf"
	]
},
	"application/vnd.mfmp": {
	source: "iana",
	extensions: [
		"mfm"
	]
},
	"application/vnd.micro+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.micrografx.flo": {
	source: "iana",
	extensions: [
		"flo"
	]
},
	"application/vnd.micrografx.igx": {
	source: "iana",
	extensions: [
		"igx"
	]
},
	"application/vnd.microsoft.portable-executable": {
	source: "iana"
},
	"application/vnd.microsoft.windows.thumbnail-cache": {
	source: "iana"
},
	"application/vnd.miele+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.mif": {
	source: "iana",
	extensions: [
		"mif"
	]
},
	"application/vnd.minisoft-hp3000-save": {
	source: "iana"
},
	"application/vnd.mitsubishi.misty-guard.trustweb": {
	source: "iana"
},
	"application/vnd.mobius.daf": {
	source: "iana",
	extensions: [
		"daf"
	]
},
	"application/vnd.mobius.dis": {
	source: "iana",
	extensions: [
		"dis"
	]
},
	"application/vnd.mobius.mbk": {
	source: "iana",
	extensions: [
		"mbk"
	]
},
	"application/vnd.mobius.mqy": {
	source: "iana",
	extensions: [
		"mqy"
	]
},
	"application/vnd.mobius.msl": {
	source: "iana",
	extensions: [
		"msl"
	]
},
	"application/vnd.mobius.plc": {
	source: "iana",
	extensions: [
		"plc"
	]
},
	"application/vnd.mobius.txf": {
	source: "iana",
	extensions: [
		"txf"
	]
},
	"application/vnd.mophun.application": {
	source: "iana",
	extensions: [
		"mpn"
	]
},
	"application/vnd.mophun.certificate": {
	source: "iana",
	extensions: [
		"mpc"
	]
},
	"application/vnd.motorola.flexsuite": {
	source: "iana"
},
	"application/vnd.motorola.flexsuite.adsi": {
	source: "iana"
},
	"application/vnd.motorola.flexsuite.fis": {
	source: "iana"
},
	"application/vnd.motorola.flexsuite.gotap": {
	source: "iana"
},
	"application/vnd.motorola.flexsuite.kmr": {
	source: "iana"
},
	"application/vnd.motorola.flexsuite.ttc": {
	source: "iana"
},
	"application/vnd.motorola.flexsuite.wem": {
	source: "iana"
},
	"application/vnd.motorola.iprm": {
	source: "iana"
},
	"application/vnd.mozilla.xul+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xul"
	]
},
	"application/vnd.ms-3mfdocument": {
	source: "iana"
},
	"application/vnd.ms-artgalry": {
	source: "iana",
	extensions: [
		"cil"
	]
},
	"application/vnd.ms-asf": {
	source: "iana"
},
	"application/vnd.ms-cab-compressed": {
	source: "iana",
	extensions: [
		"cab"
	]
},
	"application/vnd.ms-color.iccprofile": {
	source: "apache"
},
	"application/vnd.ms-excel": {
	source: "iana",
	compressible: false,
	extensions: [
		"xls",
		"xlm",
		"xla",
		"xlc",
		"xlt",
		"xlw"
	]
},
	"application/vnd.ms-excel.addin.macroenabled.12": {
	source: "iana",
	extensions: [
		"xlam"
	]
},
	"application/vnd.ms-excel.sheet.binary.macroenabled.12": {
	source: "iana",
	extensions: [
		"xlsb"
	]
},
	"application/vnd.ms-excel.sheet.macroenabled.12": {
	source: "iana",
	extensions: [
		"xlsm"
	]
},
	"application/vnd.ms-excel.template.macroenabled.12": {
	source: "iana",
	extensions: [
		"xltm"
	]
},
	"application/vnd.ms-fontobject": {
	source: "iana",
	compressible: true,
	extensions: [
		"eot"
	]
},
	"application/vnd.ms-htmlhelp": {
	source: "iana",
	extensions: [
		"chm"
	]
},
	"application/vnd.ms-ims": {
	source: "iana",
	extensions: [
		"ims"
	]
},
	"application/vnd.ms-lrm": {
	source: "iana",
	extensions: [
		"lrm"
	]
},
	"application/vnd.ms-office.activex+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.ms-officetheme": {
	source: "iana",
	extensions: [
		"thmx"
	]
},
	"application/vnd.ms-opentype": {
	source: "apache",
	compressible: true
},
	"application/vnd.ms-outlook": {
	compressible: false,
	extensions: [
		"msg"
	]
},
	"application/vnd.ms-package.obfuscated-opentype": {
	source: "apache"
},
	"application/vnd.ms-pki.seccat": {
	source: "apache",
	extensions: [
		"cat"
	]
},
	"application/vnd.ms-pki.stl": {
	source: "apache",
	extensions: [
		"stl"
	]
},
	"application/vnd.ms-playready.initiator+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.ms-powerpoint": {
	source: "iana",
	compressible: false,
	extensions: [
		"ppt",
		"pps",
		"pot"
	]
},
	"application/vnd.ms-powerpoint.addin.macroenabled.12": {
	source: "iana",
	extensions: [
		"ppam"
	]
},
	"application/vnd.ms-powerpoint.presentation.macroenabled.12": {
	source: "iana",
	extensions: [
		"pptm"
	]
},
	"application/vnd.ms-powerpoint.slide.macroenabled.12": {
	source: "iana",
	extensions: [
		"sldm"
	]
},
	"application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
	source: "iana",
	extensions: [
		"ppsm"
	]
},
	"application/vnd.ms-powerpoint.template.macroenabled.12": {
	source: "iana",
	extensions: [
		"potm"
	]
},
	"application/vnd.ms-printdevicecapabilities+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.ms-printing.printticket+xml": {
	source: "apache",
	compressible: true
},
	"application/vnd.ms-printschematicket+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.ms-project": {
	source: "iana",
	extensions: [
		"mpp",
		"mpt"
	]
},
	"application/vnd.ms-tnef": {
	source: "iana"
},
	"application/vnd.ms-windows.devicepairing": {
	source: "iana"
},
	"application/vnd.ms-windows.nwprinting.oob": {
	source: "iana"
},
	"application/vnd.ms-windows.printerpairing": {
	source: "iana"
},
	"application/vnd.ms-windows.wsd.oob": {
	source: "iana"
},
	"application/vnd.ms-wmdrm.lic-chlg-req": {
	source: "iana"
},
	"application/vnd.ms-wmdrm.lic-resp": {
	source: "iana"
},
	"application/vnd.ms-wmdrm.meter-chlg-req": {
	source: "iana"
},
	"application/vnd.ms-wmdrm.meter-resp": {
	source: "iana"
},
	"application/vnd.ms-word.document.macroenabled.12": {
	source: "iana",
	extensions: [
		"docm"
	]
},
	"application/vnd.ms-word.template.macroenabled.12": {
	source: "iana",
	extensions: [
		"dotm"
	]
},
	"application/vnd.ms-works": {
	source: "iana",
	extensions: [
		"wps",
		"wks",
		"wcm",
		"wdb"
	]
},
	"application/vnd.ms-wpl": {
	source: "iana",
	extensions: [
		"wpl"
	]
},
	"application/vnd.ms-xpsdocument": {
	source: "iana",
	compressible: false,
	extensions: [
		"xps"
	]
},
	"application/vnd.msa-disk-image": {
	source: "iana"
},
	"application/vnd.mseq": {
	source: "iana",
	extensions: [
		"mseq"
	]
},
	"application/vnd.msign": {
	source: "iana"
},
	"application/vnd.multiad.creator": {
	source: "iana"
},
	"application/vnd.multiad.creator.cif": {
	source: "iana"
},
	"application/vnd.music-niff": {
	source: "iana"
},
	"application/vnd.musician": {
	source: "iana",
	extensions: [
		"mus"
	]
},
	"application/vnd.muvee.style": {
	source: "iana",
	extensions: [
		"msty"
	]
},
	"application/vnd.mynfc": {
	source: "iana",
	extensions: [
		"taglet"
	]
},
	"application/vnd.nacamar.ybrid+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.ncd.control": {
	source: "iana"
},
	"application/vnd.ncd.reference": {
	source: "iana"
},
	"application/vnd.nearst.inv+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.nebumind.line": {
	source: "iana"
},
	"application/vnd.nervana": {
	source: "iana"
},
	"application/vnd.netfpx": {
	source: "iana"
},
	"application/vnd.neurolanguage.nlu": {
	source: "iana",
	extensions: [
		"nlu"
	]
},
	"application/vnd.nimn": {
	source: "iana"
},
	"application/vnd.nintendo.nitro.rom": {
	source: "iana"
},
	"application/vnd.nintendo.snes.rom": {
	source: "iana"
},
	"application/vnd.nitf": {
	source: "iana",
	extensions: [
		"ntf",
		"nitf"
	]
},
	"application/vnd.noblenet-directory": {
	source: "iana",
	extensions: [
		"nnd"
	]
},
	"application/vnd.noblenet-sealer": {
	source: "iana",
	extensions: [
		"nns"
	]
},
	"application/vnd.noblenet-web": {
	source: "iana",
	extensions: [
		"nnw"
	]
},
	"application/vnd.nokia.catalogs": {
	source: "iana"
},
	"application/vnd.nokia.conml+wbxml": {
	source: "iana"
},
	"application/vnd.nokia.conml+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.nokia.iptv.config+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.nokia.isds-radio-presets": {
	source: "iana"
},
	"application/vnd.nokia.landmark+wbxml": {
	source: "iana"
},
	"application/vnd.nokia.landmark+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.nokia.landmarkcollection+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.nokia.n-gage.ac+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"ac"
	]
},
	"application/vnd.nokia.n-gage.data": {
	source: "iana",
	extensions: [
		"ngdat"
	]
},
	"application/vnd.nokia.n-gage.symbian.install": {
	source: "iana",
	extensions: [
		"n-gage"
	]
},
	"application/vnd.nokia.ncd": {
	source: "iana"
},
	"application/vnd.nokia.pcd+wbxml": {
	source: "iana"
},
	"application/vnd.nokia.pcd+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.nokia.radio-preset": {
	source: "iana",
	extensions: [
		"rpst"
	]
},
	"application/vnd.nokia.radio-presets": {
	source: "iana",
	extensions: [
		"rpss"
	]
},
	"application/vnd.novadigm.edm": {
	source: "iana",
	extensions: [
		"edm"
	]
},
	"application/vnd.novadigm.edx": {
	source: "iana",
	extensions: [
		"edx"
	]
},
	"application/vnd.novadigm.ext": {
	source: "iana",
	extensions: [
		"ext"
	]
},
	"application/vnd.ntt-local.content-share": {
	source: "iana"
},
	"application/vnd.ntt-local.file-transfer": {
	source: "iana"
},
	"application/vnd.ntt-local.ogw_remote-access": {
	source: "iana"
},
	"application/vnd.ntt-local.sip-ta_remote": {
	source: "iana"
},
	"application/vnd.ntt-local.sip-ta_tcp_stream": {
	source: "iana"
},
	"application/vnd.oasis.opendocument.chart": {
	source: "iana",
	extensions: [
		"odc"
	]
},
	"application/vnd.oasis.opendocument.chart-template": {
	source: "iana",
	extensions: [
		"otc"
	]
},
	"application/vnd.oasis.opendocument.database": {
	source: "iana",
	extensions: [
		"odb"
	]
},
	"application/vnd.oasis.opendocument.formula": {
	source: "iana",
	extensions: [
		"odf"
	]
},
	"application/vnd.oasis.opendocument.formula-template": {
	source: "iana",
	extensions: [
		"odft"
	]
},
	"application/vnd.oasis.opendocument.graphics": {
	source: "iana",
	compressible: false,
	extensions: [
		"odg"
	]
},
	"application/vnd.oasis.opendocument.graphics-template": {
	source: "iana",
	extensions: [
		"otg"
	]
},
	"application/vnd.oasis.opendocument.image": {
	source: "iana",
	extensions: [
		"odi"
	]
},
	"application/vnd.oasis.opendocument.image-template": {
	source: "iana",
	extensions: [
		"oti"
	]
},
	"application/vnd.oasis.opendocument.presentation": {
	source: "iana",
	compressible: false,
	extensions: [
		"odp"
	]
},
	"application/vnd.oasis.opendocument.presentation-template": {
	source: "iana",
	extensions: [
		"otp"
	]
},
	"application/vnd.oasis.opendocument.spreadsheet": {
	source: "iana",
	compressible: false,
	extensions: [
		"ods"
	]
},
	"application/vnd.oasis.opendocument.spreadsheet-template": {
	source: "iana",
	extensions: [
		"ots"
	]
},
	"application/vnd.oasis.opendocument.text": {
	source: "iana",
	compressible: false,
	extensions: [
		"odt"
	]
},
	"application/vnd.oasis.opendocument.text-master": {
	source: "iana",
	extensions: [
		"odm"
	]
},
	"application/vnd.oasis.opendocument.text-template": {
	source: "iana",
	extensions: [
		"ott"
	]
},
	"application/vnd.oasis.opendocument.text-web": {
	source: "iana",
	extensions: [
		"oth"
	]
},
	"application/vnd.obn": {
	source: "iana"
},
	"application/vnd.ocf+cbor": {
	source: "iana"
},
	"application/vnd.oci.image.manifest.v1+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.oftn.l10n+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.oipf.contentaccessdownload+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oipf.contentaccessstreaming+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oipf.cspg-hexbinary": {
	source: "iana"
},
	"application/vnd.oipf.dae.svg+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oipf.dae.xhtml+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oipf.mippvcontrolmessage+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oipf.pae.gem": {
	source: "iana"
},
	"application/vnd.oipf.spdiscovery+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oipf.spdlist+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oipf.ueprofile+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oipf.userprofile+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.olpc-sugar": {
	source: "iana",
	extensions: [
		"xo"
	]
},
	"application/vnd.oma-scws-config": {
	source: "iana"
},
	"application/vnd.oma-scws-http-request": {
	source: "iana"
},
	"application/vnd.oma-scws-http-response": {
	source: "iana"
},
	"application/vnd.oma.bcast.associated-procedure-parameter+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.bcast.drm-trigger+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.bcast.imd+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.bcast.ltkm": {
	source: "iana"
},
	"application/vnd.oma.bcast.notification+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.bcast.provisioningtrigger": {
	source: "iana"
},
	"application/vnd.oma.bcast.sgboot": {
	source: "iana"
},
	"application/vnd.oma.bcast.sgdd+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.bcast.sgdu": {
	source: "iana"
},
	"application/vnd.oma.bcast.simple-symbol-container": {
	source: "iana"
},
	"application/vnd.oma.bcast.smartcard-trigger+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.bcast.sprov+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.bcast.stkm": {
	source: "iana"
},
	"application/vnd.oma.cab-address-book+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.cab-feature-handler+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.cab-pcc+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.cab-subs-invite+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.cab-user-prefs+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.dcd": {
	source: "iana"
},
	"application/vnd.oma.dcdc": {
	source: "iana"
},
	"application/vnd.oma.dd2+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"dd2"
	]
},
	"application/vnd.oma.drm.risd+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.group-usage-list+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.lwm2m+cbor": {
	source: "iana"
},
	"application/vnd.oma.lwm2m+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.lwm2m+tlv": {
	source: "iana"
},
	"application/vnd.oma.pal+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.poc.detailed-progress-report+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.poc.final-report+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.poc.groups+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.poc.invocation-descriptor+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.poc.optimized-progress-report+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.push": {
	source: "iana"
},
	"application/vnd.oma.scidm.messages+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oma.xcap-directory+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.omads-email+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/vnd.omads-file+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/vnd.omads-folder+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/vnd.omaloc-supl-init": {
	source: "iana"
},
	"application/vnd.onepager": {
	source: "iana"
},
	"application/vnd.onepagertamp": {
	source: "iana"
},
	"application/vnd.onepagertamx": {
	source: "iana"
},
	"application/vnd.onepagertat": {
	source: "iana"
},
	"application/vnd.onepagertatp": {
	source: "iana"
},
	"application/vnd.onepagertatx": {
	source: "iana"
},
	"application/vnd.openblox.game+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"obgx"
	]
},
	"application/vnd.openblox.game-binary": {
	source: "iana"
},
	"application/vnd.openeye.oeb": {
	source: "iana"
},
	"application/vnd.openofficeorg.extension": {
	source: "apache",
	extensions: [
		"oxt"
	]
},
	"application/vnd.openstreetmap.data+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"osm"
	]
},
	"application/vnd.opentimestamps.ots": {
	source: "iana"
},
	"application/vnd.openxmlformats-officedocument.custom-properties+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.drawing+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.extended-properties+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.presentation": {
	source: "iana",
	compressible: false,
	extensions: [
		"pptx"
	]
},
	"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.slide": {
	source: "iana",
	extensions: [
		"sldx"
	]
},
	"application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
	source: "iana",
	extensions: [
		"ppsx"
	]
},
	"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.template": {
	source: "iana",
	extensions: [
		"potx"
	]
},
	"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
	source: "iana",
	compressible: false,
	extensions: [
		"xlsx"
	]
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
	source: "iana",
	extensions: [
		"xltx"
	]
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.theme+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.themeoverride+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.vmldrawing": {
	source: "iana"
},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
	source: "iana",
	compressible: false,
	extensions: [
		"docx"
	]
},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
	source: "iana",
	extensions: [
		"dotx"
	]
},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-package.core-properties+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.openxmlformats-package.relationships+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oracle.resource+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.orange.indata": {
	source: "iana"
},
	"application/vnd.osa.netdeploy": {
	source: "iana"
},
	"application/vnd.osgeo.mapguide.package": {
	source: "iana",
	extensions: [
		"mgp"
	]
},
	"application/vnd.osgi.bundle": {
	source: "iana"
},
	"application/vnd.osgi.dp": {
	source: "iana",
	extensions: [
		"dp"
	]
},
	"application/vnd.osgi.subsystem": {
	source: "iana",
	extensions: [
		"esa"
	]
},
	"application/vnd.otps.ct-kip+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.oxli.countgraph": {
	source: "iana"
},
	"application/vnd.pagerduty+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.palm": {
	source: "iana",
	extensions: [
		"pdb",
		"pqa",
		"oprc"
	]
},
	"application/vnd.panoply": {
	source: "iana"
},
	"application/vnd.paos.xml": {
	source: "iana"
},
	"application/vnd.patentdive": {
	source: "iana"
},
	"application/vnd.patientecommsdoc": {
	source: "iana"
},
	"application/vnd.pawaafile": {
	source: "iana",
	extensions: [
		"paw"
	]
},
	"application/vnd.pcos": {
	source: "iana"
},
	"application/vnd.pg.format": {
	source: "iana",
	extensions: [
		"str"
	]
},
	"application/vnd.pg.osasli": {
	source: "iana",
	extensions: [
		"ei6"
	]
},
	"application/vnd.piaccess.application-licence": {
	source: "iana"
},
	"application/vnd.picsel": {
	source: "iana",
	extensions: [
		"efif"
	]
},
	"application/vnd.pmi.widget": {
	source: "iana",
	extensions: [
		"wg"
	]
},
	"application/vnd.poc.group-advertisement+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.pocketlearn": {
	source: "iana",
	extensions: [
		"plf"
	]
},
	"application/vnd.powerbuilder6": {
	source: "iana",
	extensions: [
		"pbd"
	]
},
	"application/vnd.powerbuilder6-s": {
	source: "iana"
},
	"application/vnd.powerbuilder7": {
	source: "iana"
},
	"application/vnd.powerbuilder7-s": {
	source: "iana"
},
	"application/vnd.powerbuilder75": {
	source: "iana"
},
	"application/vnd.powerbuilder75-s": {
	source: "iana"
},
	"application/vnd.preminet": {
	source: "iana"
},
	"application/vnd.previewsystems.box": {
	source: "iana",
	extensions: [
		"box"
	]
},
	"application/vnd.proteus.magazine": {
	source: "iana",
	extensions: [
		"mgz"
	]
},
	"application/vnd.psfs": {
	source: "iana"
},
	"application/vnd.publishare-delta-tree": {
	source: "iana",
	extensions: [
		"qps"
	]
},
	"application/vnd.pvi.ptid1": {
	source: "iana",
	extensions: [
		"ptid"
	]
},
	"application/vnd.pwg-multiplexed": {
	source: "iana"
},
	"application/vnd.pwg-xhtml-print+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.qualcomm.brew-app-res": {
	source: "iana"
},
	"application/vnd.quarantainenet": {
	source: "iana"
},
	"application/vnd.quark.quarkxpress": {
	source: "iana",
	extensions: [
		"qxd",
		"qxt",
		"qwd",
		"qwt",
		"qxl",
		"qxb"
	]
},
	"application/vnd.quobject-quoxdocument": {
	source: "iana"
},
	"application/vnd.radisys.moml+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.radisys.msml+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.radisys.msml-audit+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.radisys.msml-audit-conf+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.radisys.msml-audit-conn+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.radisys.msml-audit-dialog+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.radisys.msml-audit-stream+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.radisys.msml-conf+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.radisys.msml-dialog+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.radisys.msml-dialog-base+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.radisys.msml-dialog-fax-detect+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.radisys.msml-dialog-group+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.radisys.msml-dialog-speech+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.radisys.msml-dialog-transform+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.rainstor.data": {
	source: "iana"
},
	"application/vnd.rapid": {
	source: "iana"
},
	"application/vnd.rar": {
	source: "iana",
	extensions: [
		"rar"
	]
},
	"application/vnd.realvnc.bed": {
	source: "iana",
	extensions: [
		"bed"
	]
},
	"application/vnd.recordare.musicxml": {
	source: "iana",
	extensions: [
		"mxl"
	]
},
	"application/vnd.recordare.musicxml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"musicxml"
	]
},
	"application/vnd.renlearn.rlprint": {
	source: "iana"
},
	"application/vnd.resilient.logic": {
	source: "iana"
},
	"application/vnd.restful+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.rig.cryptonote": {
	source: "iana",
	extensions: [
		"cryptonote"
	]
},
	"application/vnd.rim.cod": {
	source: "apache",
	extensions: [
		"cod"
	]
},
	"application/vnd.rn-realmedia": {
	source: "apache",
	extensions: [
		"rm"
	]
},
	"application/vnd.rn-realmedia-vbr": {
	source: "apache",
	extensions: [
		"rmvb"
	]
},
	"application/vnd.route66.link66+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"link66"
	]
},
	"application/vnd.rs-274x": {
	source: "iana"
},
	"application/vnd.ruckus.download": {
	source: "iana"
},
	"application/vnd.s3sms": {
	source: "iana"
},
	"application/vnd.sailingtracker.track": {
	source: "iana",
	extensions: [
		"st"
	]
},
	"application/vnd.sar": {
	source: "iana"
},
	"application/vnd.sbm.cid": {
	source: "iana"
},
	"application/vnd.sbm.mid2": {
	source: "iana"
},
	"application/vnd.scribus": {
	source: "iana"
},
	"application/vnd.sealed.3df": {
	source: "iana"
},
	"application/vnd.sealed.csf": {
	source: "iana"
},
	"application/vnd.sealed.doc": {
	source: "iana"
},
	"application/vnd.sealed.eml": {
	source: "iana"
},
	"application/vnd.sealed.mht": {
	source: "iana"
},
	"application/vnd.sealed.net": {
	source: "iana"
},
	"application/vnd.sealed.ppt": {
	source: "iana"
},
	"application/vnd.sealed.tiff": {
	source: "iana"
},
	"application/vnd.sealed.xls": {
	source: "iana"
},
	"application/vnd.sealedmedia.softseal.html": {
	source: "iana"
},
	"application/vnd.sealedmedia.softseal.pdf": {
	source: "iana"
},
	"application/vnd.seemail": {
	source: "iana",
	extensions: [
		"see"
	]
},
	"application/vnd.seis+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.sema": {
	source: "iana",
	extensions: [
		"sema"
	]
},
	"application/vnd.semd": {
	source: "iana",
	extensions: [
		"semd"
	]
},
	"application/vnd.semf": {
	source: "iana",
	extensions: [
		"semf"
	]
},
	"application/vnd.shade-save-file": {
	source: "iana"
},
	"application/vnd.shana.informed.formdata": {
	source: "iana",
	extensions: [
		"ifm"
	]
},
	"application/vnd.shana.informed.formtemplate": {
	source: "iana",
	extensions: [
		"itp"
	]
},
	"application/vnd.shana.informed.interchange": {
	source: "iana",
	extensions: [
		"iif"
	]
},
	"application/vnd.shana.informed.package": {
	source: "iana",
	extensions: [
		"ipk"
	]
},
	"application/vnd.shootproof+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.shopkick+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.shp": {
	source: "iana"
},
	"application/vnd.shx": {
	source: "iana"
},
	"application/vnd.sigrok.session": {
	source: "iana"
},
	"application/vnd.simtech-mindmapper": {
	source: "iana",
	extensions: [
		"twd",
		"twds"
	]
},
	"application/vnd.siren+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.smaf": {
	source: "iana",
	extensions: [
		"mmf"
	]
},
	"application/vnd.smart.notebook": {
	source: "iana"
},
	"application/vnd.smart.teacher": {
	source: "iana",
	extensions: [
		"teacher"
	]
},
	"application/vnd.snesdev-page-table": {
	source: "iana"
},
	"application/vnd.software602.filler.form+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"fo"
	]
},
	"application/vnd.software602.filler.form-xml-zip": {
	source: "iana"
},
	"application/vnd.solent.sdkm+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"sdkm",
		"sdkd"
	]
},
	"application/vnd.spotfire.dxp": {
	source: "iana",
	extensions: [
		"dxp"
	]
},
	"application/vnd.spotfire.sfs": {
	source: "iana",
	extensions: [
		"sfs"
	]
},
	"application/vnd.sqlite3": {
	source: "iana"
},
	"application/vnd.sss-cod": {
	source: "iana"
},
	"application/vnd.sss-dtf": {
	source: "iana"
},
	"application/vnd.sss-ntf": {
	source: "iana"
},
	"application/vnd.stardivision.calc": {
	source: "apache",
	extensions: [
		"sdc"
	]
},
	"application/vnd.stardivision.draw": {
	source: "apache",
	extensions: [
		"sda"
	]
},
	"application/vnd.stardivision.impress": {
	source: "apache",
	extensions: [
		"sdd"
	]
},
	"application/vnd.stardivision.math": {
	source: "apache",
	extensions: [
		"smf"
	]
},
	"application/vnd.stardivision.writer": {
	source: "apache",
	extensions: [
		"sdw",
		"vor"
	]
},
	"application/vnd.stardivision.writer-global": {
	source: "apache",
	extensions: [
		"sgl"
	]
},
	"application/vnd.stepmania.package": {
	source: "iana",
	extensions: [
		"smzip"
	]
},
	"application/vnd.stepmania.stepchart": {
	source: "iana",
	extensions: [
		"sm"
	]
},
	"application/vnd.street-stream": {
	source: "iana"
},
	"application/vnd.sun.wadl+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"wadl"
	]
},
	"application/vnd.sun.xml.calc": {
	source: "apache",
	extensions: [
		"sxc"
	]
},
	"application/vnd.sun.xml.calc.template": {
	source: "apache",
	extensions: [
		"stc"
	]
},
	"application/vnd.sun.xml.draw": {
	source: "apache",
	extensions: [
		"sxd"
	]
},
	"application/vnd.sun.xml.draw.template": {
	source: "apache",
	extensions: [
		"std"
	]
},
	"application/vnd.sun.xml.impress": {
	source: "apache",
	extensions: [
		"sxi"
	]
},
	"application/vnd.sun.xml.impress.template": {
	source: "apache",
	extensions: [
		"sti"
	]
},
	"application/vnd.sun.xml.math": {
	source: "apache",
	extensions: [
		"sxm"
	]
},
	"application/vnd.sun.xml.writer": {
	source: "apache",
	extensions: [
		"sxw"
	]
},
	"application/vnd.sun.xml.writer.global": {
	source: "apache",
	extensions: [
		"sxg"
	]
},
	"application/vnd.sun.xml.writer.template": {
	source: "apache",
	extensions: [
		"stw"
	]
},
	"application/vnd.sus-calendar": {
	source: "iana",
	extensions: [
		"sus",
		"susp"
	]
},
	"application/vnd.svd": {
	source: "iana",
	extensions: [
		"svd"
	]
},
	"application/vnd.swiftview-ics": {
	source: "iana"
},
	"application/vnd.sycle+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.syft+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.symbian.install": {
	source: "apache",
	extensions: [
		"sis",
		"sisx"
	]
},
	"application/vnd.syncml+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true,
	extensions: [
		"xsm"
	]
},
	"application/vnd.syncml.dm+wbxml": {
	source: "iana",
	charset: "UTF-8",
	extensions: [
		"bdm"
	]
},
	"application/vnd.syncml.dm+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true,
	extensions: [
		"xdm"
	]
},
	"application/vnd.syncml.dm.notification": {
	source: "iana"
},
	"application/vnd.syncml.dmddf+wbxml": {
	source: "iana"
},
	"application/vnd.syncml.dmddf+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true,
	extensions: [
		"ddf"
	]
},
	"application/vnd.syncml.dmtnds+wbxml": {
	source: "iana"
},
	"application/vnd.syncml.dmtnds+xml": {
	source: "iana",
	charset: "UTF-8",
	compressible: true
},
	"application/vnd.syncml.ds.notification": {
	source: "iana"
},
	"application/vnd.tableschema+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.tao.intent-module-archive": {
	source: "iana",
	extensions: [
		"tao"
	]
},
	"application/vnd.tcpdump.pcap": {
	source: "iana",
	extensions: [
		"pcap",
		"cap",
		"dmp"
	]
},
	"application/vnd.think-cell.ppttc+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.tmd.mediaflex.api+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.tml": {
	source: "iana"
},
	"application/vnd.tmobile-livetv": {
	source: "iana",
	extensions: [
		"tmo"
	]
},
	"application/vnd.tri.onesource": {
	source: "iana"
},
	"application/vnd.trid.tpt": {
	source: "iana",
	extensions: [
		"tpt"
	]
},
	"application/vnd.triscape.mxs": {
	source: "iana",
	extensions: [
		"mxs"
	]
},
	"application/vnd.trueapp": {
	source: "iana",
	extensions: [
		"tra"
	]
},
	"application/vnd.truedoc": {
	source: "iana"
},
	"application/vnd.ubisoft.webplayer": {
	source: "iana"
},
	"application/vnd.ufdl": {
	source: "iana",
	extensions: [
		"ufd",
		"ufdl"
	]
},
	"application/vnd.uiq.theme": {
	source: "iana",
	extensions: [
		"utz"
	]
},
	"application/vnd.umajin": {
	source: "iana",
	extensions: [
		"umj"
	]
},
	"application/vnd.unity": {
	source: "iana",
	extensions: [
		"unityweb"
	]
},
	"application/vnd.uoml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"uoml"
	]
},
	"application/vnd.uplanet.alert": {
	source: "iana"
},
	"application/vnd.uplanet.alert-wbxml": {
	source: "iana"
},
	"application/vnd.uplanet.bearer-choice": {
	source: "iana"
},
	"application/vnd.uplanet.bearer-choice-wbxml": {
	source: "iana"
},
	"application/vnd.uplanet.cacheop": {
	source: "iana"
},
	"application/vnd.uplanet.cacheop-wbxml": {
	source: "iana"
},
	"application/vnd.uplanet.channel": {
	source: "iana"
},
	"application/vnd.uplanet.channel-wbxml": {
	source: "iana"
},
	"application/vnd.uplanet.list": {
	source: "iana"
},
	"application/vnd.uplanet.list-wbxml": {
	source: "iana"
},
	"application/vnd.uplanet.listcmd": {
	source: "iana"
},
	"application/vnd.uplanet.listcmd-wbxml": {
	source: "iana"
},
	"application/vnd.uplanet.signal": {
	source: "iana"
},
	"application/vnd.uri-map": {
	source: "iana"
},
	"application/vnd.valve.source.material": {
	source: "iana"
},
	"application/vnd.vcx": {
	source: "iana",
	extensions: [
		"vcx"
	]
},
	"application/vnd.vd-study": {
	source: "iana"
},
	"application/vnd.vectorworks": {
	source: "iana"
},
	"application/vnd.vel+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.verimatrix.vcas": {
	source: "iana"
},
	"application/vnd.veritone.aion+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.veryant.thin": {
	source: "iana"
},
	"application/vnd.ves.encrypted": {
	source: "iana"
},
	"application/vnd.vidsoft.vidconference": {
	source: "iana"
},
	"application/vnd.visio": {
	source: "iana",
	extensions: [
		"vsd",
		"vst",
		"vss",
		"vsw"
	]
},
	"application/vnd.visionary": {
	source: "iana",
	extensions: [
		"vis"
	]
},
	"application/vnd.vividence.scriptfile": {
	source: "iana"
},
	"application/vnd.vsf": {
	source: "iana",
	extensions: [
		"vsf"
	]
},
	"application/vnd.wap.sic": {
	source: "iana"
},
	"application/vnd.wap.slc": {
	source: "iana"
},
	"application/vnd.wap.wbxml": {
	source: "iana",
	charset: "UTF-8",
	extensions: [
		"wbxml"
	]
},
	"application/vnd.wap.wmlc": {
	source: "iana",
	extensions: [
		"wmlc"
	]
},
	"application/vnd.wap.wmlscriptc": {
	source: "iana",
	extensions: [
		"wmlsc"
	]
},
	"application/vnd.webturbo": {
	source: "iana",
	extensions: [
		"wtb"
	]
},
	"application/vnd.wfa.dpp": {
	source: "iana"
},
	"application/vnd.wfa.p2p": {
	source: "iana"
},
	"application/vnd.wfa.wsc": {
	source: "iana"
},
	"application/vnd.windows.devicepairing": {
	source: "iana"
},
	"application/vnd.wmc": {
	source: "iana"
},
	"application/vnd.wmf.bootstrap": {
	source: "iana"
},
	"application/vnd.wolfram.mathematica": {
	source: "iana"
},
	"application/vnd.wolfram.mathematica.package": {
	source: "iana"
},
	"application/vnd.wolfram.player": {
	source: "iana",
	extensions: [
		"nbp"
	]
},
	"application/vnd.wordperfect": {
	source: "iana",
	extensions: [
		"wpd"
	]
},
	"application/vnd.wqd": {
	source: "iana",
	extensions: [
		"wqd"
	]
},
	"application/vnd.wrq-hp3000-labelled": {
	source: "iana"
},
	"application/vnd.wt.stf": {
	source: "iana",
	extensions: [
		"stf"
	]
},
	"application/vnd.wv.csp+wbxml": {
	source: "iana"
},
	"application/vnd.wv.csp+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.wv.ssp+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.xacml+json": {
	source: "iana",
	compressible: true
},
	"application/vnd.xara": {
	source: "iana",
	extensions: [
		"xar"
	]
},
	"application/vnd.xfdl": {
	source: "iana",
	extensions: [
		"xfdl"
	]
},
	"application/vnd.xfdl.webform": {
	source: "iana"
},
	"application/vnd.xmi+xml": {
	source: "iana",
	compressible: true
},
	"application/vnd.xmpie.cpkg": {
	source: "iana"
},
	"application/vnd.xmpie.dpkg": {
	source: "iana"
},
	"application/vnd.xmpie.plan": {
	source: "iana"
},
	"application/vnd.xmpie.ppkg": {
	source: "iana"
},
	"application/vnd.xmpie.xlim": {
	source: "iana"
},
	"application/vnd.yamaha.hv-dic": {
	source: "iana",
	extensions: [
		"hvd"
	]
},
	"application/vnd.yamaha.hv-script": {
	source: "iana",
	extensions: [
		"hvs"
	]
},
	"application/vnd.yamaha.hv-voice": {
	source: "iana",
	extensions: [
		"hvp"
	]
},
	"application/vnd.yamaha.openscoreformat": {
	source: "iana",
	extensions: [
		"osf"
	]
},
	"application/vnd.yamaha.openscoreformat.osfpvg+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"osfpvg"
	]
},
	"application/vnd.yamaha.remote-setup": {
	source: "iana"
},
	"application/vnd.yamaha.smaf-audio": {
	source: "iana",
	extensions: [
		"saf"
	]
},
	"application/vnd.yamaha.smaf-phrase": {
	source: "iana",
	extensions: [
		"spf"
	]
},
	"application/vnd.yamaha.through-ngn": {
	source: "iana"
},
	"application/vnd.yamaha.tunnel-udpencap": {
	source: "iana"
},
	"application/vnd.yaoweme": {
	source: "iana"
},
	"application/vnd.yellowriver-custom-menu": {
	source: "iana",
	extensions: [
		"cmp"
	]
},
	"application/vnd.youtube.yt": {
	source: "iana"
},
	"application/vnd.zul": {
	source: "iana",
	extensions: [
		"zir",
		"zirz"
	]
},
	"application/vnd.zzazz.deck+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"zaz"
	]
},
	"application/voicexml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"vxml"
	]
},
	"application/voucher-cms+json": {
	source: "iana",
	compressible: true
},
	"application/vq-rtcpxr": {
	source: "iana"
},
	"application/wasm": {
	source: "iana",
	compressible: true,
	extensions: [
		"wasm"
	]
},
	"application/watcherinfo+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"wif"
	]
},
	"application/webpush-options+json": {
	source: "iana",
	compressible: true
},
	"application/whoispp-query": {
	source: "iana"
},
	"application/whoispp-response": {
	source: "iana"
},
	"application/widget": {
	source: "iana",
	extensions: [
		"wgt"
	]
},
	"application/winhlp": {
	source: "apache",
	extensions: [
		"hlp"
	]
},
	"application/wita": {
	source: "iana"
},
	"application/wordperfect5.1": {
	source: "iana"
},
	"application/wsdl+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"wsdl"
	]
},
	"application/wspolicy+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"wspolicy"
	]
},
	"application/x-7z-compressed": {
	source: "apache",
	compressible: false,
	extensions: [
		"7z"
	]
},
	"application/x-abiword": {
	source: "apache",
	extensions: [
		"abw"
	]
},
	"application/x-ace-compressed": {
	source: "apache",
	extensions: [
		"ace"
	]
},
	"application/x-amf": {
	source: "apache"
},
	"application/x-apple-diskimage": {
	source: "apache",
	extensions: [
		"dmg"
	]
},
	"application/x-arj": {
	compressible: false,
	extensions: [
		"arj"
	]
},
	"application/x-authorware-bin": {
	source: "apache",
	extensions: [
		"aab",
		"x32",
		"u32",
		"vox"
	]
},
	"application/x-authorware-map": {
	source: "apache",
	extensions: [
		"aam"
	]
},
	"application/x-authorware-seg": {
	source: "apache",
	extensions: [
		"aas"
	]
},
	"application/x-bcpio": {
	source: "apache",
	extensions: [
		"bcpio"
	]
},
	"application/x-bdoc": {
	compressible: false,
	extensions: [
		"bdoc"
	]
},
	"application/x-bittorrent": {
	source: "apache",
	extensions: [
		"torrent"
	]
},
	"application/x-blorb": {
	source: "apache",
	extensions: [
		"blb",
		"blorb"
	]
},
	"application/x-bzip": {
	source: "apache",
	compressible: false,
	extensions: [
		"bz"
	]
},
	"application/x-bzip2": {
	source: "apache",
	compressible: false,
	extensions: [
		"bz2",
		"boz"
	]
},
	"application/x-cbr": {
	source: "apache",
	extensions: [
		"cbr",
		"cba",
		"cbt",
		"cbz",
		"cb7"
	]
},
	"application/x-cdlink": {
	source: "apache",
	extensions: [
		"vcd"
	]
},
	"application/x-cfs-compressed": {
	source: "apache",
	extensions: [
		"cfs"
	]
},
	"application/x-chat": {
	source: "apache",
	extensions: [
		"chat"
	]
},
	"application/x-chess-pgn": {
	source: "apache",
	extensions: [
		"pgn"
	]
},
	"application/x-chrome-extension": {
	extensions: [
		"crx"
	]
},
	"application/x-cocoa": {
	source: "nginx",
	extensions: [
		"cco"
	]
},
	"application/x-compress": {
	source: "apache"
},
	"application/x-conference": {
	source: "apache",
	extensions: [
		"nsc"
	]
},
	"application/x-cpio": {
	source: "apache",
	extensions: [
		"cpio"
	]
},
	"application/x-csh": {
	source: "apache",
	extensions: [
		"csh"
	]
},
	"application/x-deb": {
	compressible: false
},
	"application/x-debian-package": {
	source: "apache",
	extensions: [
		"deb",
		"udeb"
	]
},
	"application/x-dgc-compressed": {
	source: "apache",
	extensions: [
		"dgc"
	]
},
	"application/x-director": {
	source: "apache",
	extensions: [
		"dir",
		"dcr",
		"dxr",
		"cst",
		"cct",
		"cxt",
		"w3d",
		"fgd",
		"swa"
	]
},
	"application/x-doom": {
	source: "apache",
	extensions: [
		"wad"
	]
},
	"application/x-dtbncx+xml": {
	source: "apache",
	compressible: true,
	extensions: [
		"ncx"
	]
},
	"application/x-dtbook+xml": {
	source: "apache",
	compressible: true,
	extensions: [
		"dtb"
	]
},
	"application/x-dtbresource+xml": {
	source: "apache",
	compressible: true,
	extensions: [
		"res"
	]
},
	"application/x-dvi": {
	source: "apache",
	compressible: false,
	extensions: [
		"dvi"
	]
},
	"application/x-envoy": {
	source: "apache",
	extensions: [
		"evy"
	]
},
	"application/x-eva": {
	source: "apache",
	extensions: [
		"eva"
	]
},
	"application/x-font-bdf": {
	source: "apache",
	extensions: [
		"bdf"
	]
},
	"application/x-font-dos": {
	source: "apache"
},
	"application/x-font-framemaker": {
	source: "apache"
},
	"application/x-font-ghostscript": {
	source: "apache",
	extensions: [
		"gsf"
	]
},
	"application/x-font-libgrx": {
	source: "apache"
},
	"application/x-font-linux-psf": {
	source: "apache",
	extensions: [
		"psf"
	]
},
	"application/x-font-pcf": {
	source: "apache",
	extensions: [
		"pcf"
	]
},
	"application/x-font-snf": {
	source: "apache",
	extensions: [
		"snf"
	]
},
	"application/x-font-speedo": {
	source: "apache"
},
	"application/x-font-sunos-news": {
	source: "apache"
},
	"application/x-font-type1": {
	source: "apache",
	extensions: [
		"pfa",
		"pfb",
		"pfm",
		"afm"
	]
},
	"application/x-font-vfont": {
	source: "apache"
},
	"application/x-freearc": {
	source: "apache",
	extensions: [
		"arc"
	]
},
	"application/x-futuresplash": {
	source: "apache",
	extensions: [
		"spl"
	]
},
	"application/x-gca-compressed": {
	source: "apache",
	extensions: [
		"gca"
	]
},
	"application/x-glulx": {
	source: "apache",
	extensions: [
		"ulx"
	]
},
	"application/x-gnumeric": {
	source: "apache",
	extensions: [
		"gnumeric"
	]
},
	"application/x-gramps-xml": {
	source: "apache",
	extensions: [
		"gramps"
	]
},
	"application/x-gtar": {
	source: "apache",
	extensions: [
		"gtar"
	]
},
	"application/x-gzip": {
	source: "apache"
},
	"application/x-hdf": {
	source: "apache",
	extensions: [
		"hdf"
	]
},
	"application/x-httpd-php": {
	compressible: true,
	extensions: [
		"php"
	]
},
	"application/x-install-instructions": {
	source: "apache",
	extensions: [
		"install"
	]
},
	"application/x-iso9660-image": {
	source: "apache",
	extensions: [
		"iso"
	]
},
	"application/x-iwork-keynote-sffkey": {
	extensions: [
		"key"
	]
},
	"application/x-iwork-numbers-sffnumbers": {
	extensions: [
		"numbers"
	]
},
	"application/x-iwork-pages-sffpages": {
	extensions: [
		"pages"
	]
},
	"application/x-java-archive-diff": {
	source: "nginx",
	extensions: [
		"jardiff"
	]
},
	"application/x-java-jnlp-file": {
	source: "apache",
	compressible: false,
	extensions: [
		"jnlp"
	]
},
	"application/x-javascript": {
	compressible: true
},
	"application/x-keepass2": {
	extensions: [
		"kdbx"
	]
},
	"application/x-latex": {
	source: "apache",
	compressible: false,
	extensions: [
		"latex"
	]
},
	"application/x-lua-bytecode": {
	extensions: [
		"luac"
	]
},
	"application/x-lzh-compressed": {
	source: "apache",
	extensions: [
		"lzh",
		"lha"
	]
},
	"application/x-makeself": {
	source: "nginx",
	extensions: [
		"run"
	]
},
	"application/x-mie": {
	source: "apache",
	extensions: [
		"mie"
	]
},
	"application/x-mobipocket-ebook": {
	source: "apache",
	extensions: [
		"prc",
		"mobi"
	]
},
	"application/x-mpegurl": {
	compressible: false
},
	"application/x-ms-application": {
	source: "apache",
	extensions: [
		"application"
	]
},
	"application/x-ms-shortcut": {
	source: "apache",
	extensions: [
		"lnk"
	]
},
	"application/x-ms-wmd": {
	source: "apache",
	extensions: [
		"wmd"
	]
},
	"application/x-ms-wmz": {
	source: "apache",
	extensions: [
		"wmz"
	]
},
	"application/x-ms-xbap": {
	source: "apache",
	extensions: [
		"xbap"
	]
},
	"application/x-msaccess": {
	source: "apache",
	extensions: [
		"mdb"
	]
},
	"application/x-msbinder": {
	source: "apache",
	extensions: [
		"obd"
	]
},
	"application/x-mscardfile": {
	source: "apache",
	extensions: [
		"crd"
	]
},
	"application/x-msclip": {
	source: "apache",
	extensions: [
		"clp"
	]
},
	"application/x-msdos-program": {
	extensions: [
		"exe"
	]
},
	"application/x-msdownload": {
	source: "apache",
	extensions: [
		"exe",
		"dll",
		"com",
		"bat",
		"msi"
	]
},
	"application/x-msmediaview": {
	source: "apache",
	extensions: [
		"mvb",
		"m13",
		"m14"
	]
},
	"application/x-msmetafile": {
	source: "apache",
	extensions: [
		"wmf",
		"wmz",
		"emf",
		"emz"
	]
},
	"application/x-msmoney": {
	source: "apache",
	extensions: [
		"mny"
	]
},
	"application/x-mspublisher": {
	source: "apache",
	extensions: [
		"pub"
	]
},
	"application/x-msschedule": {
	source: "apache",
	extensions: [
		"scd"
	]
},
	"application/x-msterminal": {
	source: "apache",
	extensions: [
		"trm"
	]
},
	"application/x-mswrite": {
	source: "apache",
	extensions: [
		"wri"
	]
},
	"application/x-netcdf": {
	source: "apache",
	extensions: [
		"nc",
		"cdf"
	]
},
	"application/x-ns-proxy-autoconfig": {
	compressible: true,
	extensions: [
		"pac"
	]
},
	"application/x-nzb": {
	source: "apache",
	extensions: [
		"nzb"
	]
},
	"application/x-perl": {
	source: "nginx",
	extensions: [
		"pl",
		"pm"
	]
},
	"application/x-pilot": {
	source: "nginx",
	extensions: [
		"prc",
		"pdb"
	]
},
	"application/x-pkcs12": {
	source: "apache",
	compressible: false,
	extensions: [
		"p12",
		"pfx"
	]
},
	"application/x-pkcs7-certificates": {
	source: "apache",
	extensions: [
		"p7b",
		"spc"
	]
},
	"application/x-pkcs7-certreqresp": {
	source: "apache",
	extensions: [
		"p7r"
	]
},
	"application/x-pki-message": {
	source: "iana"
},
	"application/x-rar-compressed": {
	source: "apache",
	compressible: false,
	extensions: [
		"rar"
	]
},
	"application/x-redhat-package-manager": {
	source: "nginx",
	extensions: [
		"rpm"
	]
},
	"application/x-research-info-systems": {
	source: "apache",
	extensions: [
		"ris"
	]
},
	"application/x-sea": {
	source: "nginx",
	extensions: [
		"sea"
	]
},
	"application/x-sh": {
	source: "apache",
	compressible: true,
	extensions: [
		"sh"
	]
},
	"application/x-shar": {
	source: "apache",
	extensions: [
		"shar"
	]
},
	"application/x-shockwave-flash": {
	source: "apache",
	compressible: false,
	extensions: [
		"swf"
	]
},
	"application/x-silverlight-app": {
	source: "apache",
	extensions: [
		"xap"
	]
},
	"application/x-sql": {
	source: "apache",
	extensions: [
		"sql"
	]
},
	"application/x-stuffit": {
	source: "apache",
	compressible: false,
	extensions: [
		"sit"
	]
},
	"application/x-stuffitx": {
	source: "apache",
	extensions: [
		"sitx"
	]
},
	"application/x-subrip": {
	source: "apache",
	extensions: [
		"srt"
	]
},
	"application/x-sv4cpio": {
	source: "apache",
	extensions: [
		"sv4cpio"
	]
},
	"application/x-sv4crc": {
	source: "apache",
	extensions: [
		"sv4crc"
	]
},
	"application/x-t3vm-image": {
	source: "apache",
	extensions: [
		"t3"
	]
},
	"application/x-tads": {
	source: "apache",
	extensions: [
		"gam"
	]
},
	"application/x-tar": {
	source: "apache",
	compressible: true,
	extensions: [
		"tar"
	]
},
	"application/x-tcl": {
	source: "apache",
	extensions: [
		"tcl",
		"tk"
	]
},
	"application/x-tex": {
	source: "apache",
	extensions: [
		"tex"
	]
},
	"application/x-tex-tfm": {
	source: "apache",
	extensions: [
		"tfm"
	]
},
	"application/x-texinfo": {
	source: "apache",
	extensions: [
		"texinfo",
		"texi"
	]
},
	"application/x-tgif": {
	source: "apache",
	extensions: [
		"obj"
	]
},
	"application/x-ustar": {
	source: "apache",
	extensions: [
		"ustar"
	]
},
	"application/x-virtualbox-hdd": {
	compressible: true,
	extensions: [
		"hdd"
	]
},
	"application/x-virtualbox-ova": {
	compressible: true,
	extensions: [
		"ova"
	]
},
	"application/x-virtualbox-ovf": {
	compressible: true,
	extensions: [
		"ovf"
	]
},
	"application/x-virtualbox-vbox": {
	compressible: true,
	extensions: [
		"vbox"
	]
},
	"application/x-virtualbox-vbox-extpack": {
	compressible: false,
	extensions: [
		"vbox-extpack"
	]
},
	"application/x-virtualbox-vdi": {
	compressible: true,
	extensions: [
		"vdi"
	]
},
	"application/x-virtualbox-vhd": {
	compressible: true,
	extensions: [
		"vhd"
	]
},
	"application/x-virtualbox-vmdk": {
	compressible: true,
	extensions: [
		"vmdk"
	]
},
	"application/x-wais-source": {
	source: "apache",
	extensions: [
		"src"
	]
},
	"application/x-web-app-manifest+json": {
	compressible: true,
	extensions: [
		"webapp"
	]
},
	"application/x-www-form-urlencoded": {
	source: "iana",
	compressible: true
},
	"application/x-x509-ca-cert": {
	source: "iana",
	extensions: [
		"der",
		"crt",
		"pem"
	]
},
	"application/x-x509-ca-ra-cert": {
	source: "iana"
},
	"application/x-x509-next-ca-cert": {
	source: "iana"
},
	"application/x-xfig": {
	source: "apache",
	extensions: [
		"fig"
	]
},
	"application/x-xliff+xml": {
	source: "apache",
	compressible: true,
	extensions: [
		"xlf"
	]
},
	"application/x-xpinstall": {
	source: "apache",
	compressible: false,
	extensions: [
		"xpi"
	]
},
	"application/x-xz": {
	source: "apache",
	extensions: [
		"xz"
	]
},
	"application/x-zmachine": {
	source: "apache",
	extensions: [
		"z1",
		"z2",
		"z3",
		"z4",
		"z5",
		"z6",
		"z7",
		"z8"
	]
},
	"application/x400-bp": {
	source: "iana"
},
	"application/xacml+xml": {
	source: "iana",
	compressible: true
},
	"application/xaml+xml": {
	source: "apache",
	compressible: true,
	extensions: [
		"xaml"
	]
},
	"application/xcap-att+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xav"
	]
},
	"application/xcap-caps+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xca"
	]
},
	"application/xcap-diff+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xdf"
	]
},
	"application/xcap-el+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xel"
	]
},
	"application/xcap-error+xml": {
	source: "iana",
	compressible: true
},
	"application/xcap-ns+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xns"
	]
},
	"application/xcon-conference-info+xml": {
	source: "iana",
	compressible: true
},
	"application/xcon-conference-info-diff+xml": {
	source: "iana",
	compressible: true
},
	"application/xenc+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xenc"
	]
},
	"application/xhtml+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xhtml",
		"xht"
	]
},
	"application/xhtml-voice+xml": {
	source: "apache",
	compressible: true
},
	"application/xliff+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xlf"
	]
},
	"application/xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xml",
		"xsl",
		"xsd",
		"rng"
	]
},
	"application/xml-dtd": {
	source: "iana",
	compressible: true,
	extensions: [
		"dtd"
	]
},
	"application/xml-external-parsed-entity": {
	source: "iana"
},
	"application/xml-patch+xml": {
	source: "iana",
	compressible: true
},
	"application/xmpp+xml": {
	source: "iana",
	compressible: true
},
	"application/xop+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xop"
	]
},
	"application/xproc+xml": {
	source: "apache",
	compressible: true,
	extensions: [
		"xpl"
	]
},
	"application/xslt+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xsl",
		"xslt"
	]
},
	"application/xspf+xml": {
	source: "apache",
	compressible: true,
	extensions: [
		"xspf"
	]
},
	"application/xv+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"mxml",
		"xhvml",
		"xvml",
		"xvm"
	]
},
	"application/yang": {
	source: "iana",
	extensions: [
		"yang"
	]
},
	"application/yang-data+json": {
	source: "iana",
	compressible: true
},
	"application/yang-data+xml": {
	source: "iana",
	compressible: true
},
	"application/yang-patch+json": {
	source: "iana",
	compressible: true
},
	"application/yang-patch+xml": {
	source: "iana",
	compressible: true
},
	"application/yin+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"yin"
	]
},
	"application/zip": {
	source: "iana",
	compressible: false,
	extensions: [
		"zip"
	]
},
	"application/zlib": {
	source: "iana"
},
	"application/zstd": {
	source: "iana"
},
	"audio/1d-interleaved-parityfec": {
	source: "iana"
},
	"audio/32kadpcm": {
	source: "iana"
},
	"audio/3gpp": {
	source: "iana",
	compressible: false,
	extensions: [
		"3gpp"
	]
},
	"audio/3gpp2": {
	source: "iana"
},
	"audio/aac": {
	source: "iana"
},
	"audio/ac3": {
	source: "iana"
},
	"audio/adpcm": {
	source: "apache",
	extensions: [
		"adp"
	]
},
	"audio/amr": {
	source: "iana",
	extensions: [
		"amr"
	]
},
	"audio/amr-wb": {
	source: "iana"
},
	"audio/amr-wb+": {
	source: "iana"
},
	"audio/aptx": {
	source: "iana"
},
	"audio/asc": {
	source: "iana"
},
	"audio/atrac-advanced-lossless": {
	source: "iana"
},
	"audio/atrac-x": {
	source: "iana"
},
	"audio/atrac3": {
	source: "iana"
},
	"audio/basic": {
	source: "iana",
	compressible: false,
	extensions: [
		"au",
		"snd"
	]
},
	"audio/bv16": {
	source: "iana"
},
	"audio/bv32": {
	source: "iana"
},
	"audio/clearmode": {
	source: "iana"
},
	"audio/cn": {
	source: "iana"
},
	"audio/dat12": {
	source: "iana"
},
	"audio/dls": {
	source: "iana"
},
	"audio/dsr-es201108": {
	source: "iana"
},
	"audio/dsr-es202050": {
	source: "iana"
},
	"audio/dsr-es202211": {
	source: "iana"
},
	"audio/dsr-es202212": {
	source: "iana"
},
	"audio/dv": {
	source: "iana"
},
	"audio/dvi4": {
	source: "iana"
},
	"audio/eac3": {
	source: "iana"
},
	"audio/encaprtp": {
	source: "iana"
},
	"audio/evrc": {
	source: "iana"
},
	"audio/evrc-qcp": {
	source: "iana"
},
	"audio/evrc0": {
	source: "iana"
},
	"audio/evrc1": {
	source: "iana"
},
	"audio/evrcb": {
	source: "iana"
},
	"audio/evrcb0": {
	source: "iana"
},
	"audio/evrcb1": {
	source: "iana"
},
	"audio/evrcnw": {
	source: "iana"
},
	"audio/evrcnw0": {
	source: "iana"
},
	"audio/evrcnw1": {
	source: "iana"
},
	"audio/evrcwb": {
	source: "iana"
},
	"audio/evrcwb0": {
	source: "iana"
},
	"audio/evrcwb1": {
	source: "iana"
},
	"audio/evs": {
	source: "iana"
},
	"audio/flexfec": {
	source: "iana"
},
	"audio/fwdred": {
	source: "iana"
},
	"audio/g711-0": {
	source: "iana"
},
	"audio/g719": {
	source: "iana"
},
	"audio/g722": {
	source: "iana"
},
	"audio/g7221": {
	source: "iana"
},
	"audio/g723": {
	source: "iana"
},
	"audio/g726-16": {
	source: "iana"
},
	"audio/g726-24": {
	source: "iana"
},
	"audio/g726-32": {
	source: "iana"
},
	"audio/g726-40": {
	source: "iana"
},
	"audio/g728": {
	source: "iana"
},
	"audio/g729": {
	source: "iana"
},
	"audio/g7291": {
	source: "iana"
},
	"audio/g729d": {
	source: "iana"
},
	"audio/g729e": {
	source: "iana"
},
	"audio/gsm": {
	source: "iana"
},
	"audio/gsm-efr": {
	source: "iana"
},
	"audio/gsm-hr-08": {
	source: "iana"
},
	"audio/ilbc": {
	source: "iana"
},
	"audio/ip-mr_v2.5": {
	source: "iana"
},
	"audio/isac": {
	source: "apache"
},
	"audio/l16": {
	source: "iana"
},
	"audio/l20": {
	source: "iana"
},
	"audio/l24": {
	source: "iana",
	compressible: false
},
	"audio/l8": {
	source: "iana"
},
	"audio/lpc": {
	source: "iana"
},
	"audio/melp": {
	source: "iana"
},
	"audio/melp1200": {
	source: "iana"
},
	"audio/melp2400": {
	source: "iana"
},
	"audio/melp600": {
	source: "iana"
},
	"audio/mhas": {
	source: "iana"
},
	"audio/midi": {
	source: "apache",
	extensions: [
		"mid",
		"midi",
		"kar",
		"rmi"
	]
},
	"audio/mobile-xmf": {
	source: "iana",
	extensions: [
		"mxmf"
	]
},
	"audio/mp3": {
	compressible: false,
	extensions: [
		"mp3"
	]
},
	"audio/mp4": {
	source: "iana",
	compressible: false,
	extensions: [
		"m4a",
		"mp4a"
	]
},
	"audio/mp4a-latm": {
	source: "iana"
},
	"audio/mpa": {
	source: "iana"
},
	"audio/mpa-robust": {
	source: "iana"
},
	"audio/mpeg": {
	source: "iana",
	compressible: false,
	extensions: [
		"mpga",
		"mp2",
		"mp2a",
		"mp3",
		"m2a",
		"m3a"
	]
},
	"audio/mpeg4-generic": {
	source: "iana"
},
	"audio/musepack": {
	source: "apache"
},
	"audio/ogg": {
	source: "iana",
	compressible: false,
	extensions: [
		"oga",
		"ogg",
		"spx",
		"opus"
	]
},
	"audio/opus": {
	source: "iana"
},
	"audio/parityfec": {
	source: "iana"
},
	"audio/pcma": {
	source: "iana"
},
	"audio/pcma-wb": {
	source: "iana"
},
	"audio/pcmu": {
	source: "iana"
},
	"audio/pcmu-wb": {
	source: "iana"
},
	"audio/prs.sid": {
	source: "iana"
},
	"audio/qcelp": {
	source: "iana"
},
	"audio/raptorfec": {
	source: "iana"
},
	"audio/red": {
	source: "iana"
},
	"audio/rtp-enc-aescm128": {
	source: "iana"
},
	"audio/rtp-midi": {
	source: "iana"
},
	"audio/rtploopback": {
	source: "iana"
},
	"audio/rtx": {
	source: "iana"
},
	"audio/s3m": {
	source: "apache",
	extensions: [
		"s3m"
	]
},
	"audio/scip": {
	source: "iana"
},
	"audio/silk": {
	source: "apache",
	extensions: [
		"sil"
	]
},
	"audio/smv": {
	source: "iana"
},
	"audio/smv-qcp": {
	source: "iana"
},
	"audio/smv0": {
	source: "iana"
},
	"audio/sofa": {
	source: "iana"
},
	"audio/sp-midi": {
	source: "iana"
},
	"audio/speex": {
	source: "iana"
},
	"audio/t140c": {
	source: "iana"
},
	"audio/t38": {
	source: "iana"
},
	"audio/telephone-event": {
	source: "iana"
},
	"audio/tetra_acelp": {
	source: "iana"
},
	"audio/tetra_acelp_bb": {
	source: "iana"
},
	"audio/tone": {
	source: "iana"
},
	"audio/tsvcis": {
	source: "iana"
},
	"audio/uemclip": {
	source: "iana"
},
	"audio/ulpfec": {
	source: "iana"
},
	"audio/usac": {
	source: "iana"
},
	"audio/vdvi": {
	source: "iana"
},
	"audio/vmr-wb": {
	source: "iana"
},
	"audio/vnd.3gpp.iufp": {
	source: "iana"
},
	"audio/vnd.4sb": {
	source: "iana"
},
	"audio/vnd.audiokoz": {
	source: "iana"
},
	"audio/vnd.celp": {
	source: "iana"
},
	"audio/vnd.cisco.nse": {
	source: "iana"
},
	"audio/vnd.cmles.radio-events": {
	source: "iana"
},
	"audio/vnd.cns.anp1": {
	source: "iana"
},
	"audio/vnd.cns.inf1": {
	source: "iana"
},
	"audio/vnd.dece.audio": {
	source: "iana",
	extensions: [
		"uva",
		"uvva"
	]
},
	"audio/vnd.digital-winds": {
	source: "iana",
	extensions: [
		"eol"
	]
},
	"audio/vnd.dlna.adts": {
	source: "iana"
},
	"audio/vnd.dolby.heaac.1": {
	source: "iana"
},
	"audio/vnd.dolby.heaac.2": {
	source: "iana"
},
	"audio/vnd.dolby.mlp": {
	source: "iana"
},
	"audio/vnd.dolby.mps": {
	source: "iana"
},
	"audio/vnd.dolby.pl2": {
	source: "iana"
},
	"audio/vnd.dolby.pl2x": {
	source: "iana"
},
	"audio/vnd.dolby.pl2z": {
	source: "iana"
},
	"audio/vnd.dolby.pulse.1": {
	source: "iana"
},
	"audio/vnd.dra": {
	source: "iana",
	extensions: [
		"dra"
	]
},
	"audio/vnd.dts": {
	source: "iana",
	extensions: [
		"dts"
	]
},
	"audio/vnd.dts.hd": {
	source: "iana",
	extensions: [
		"dtshd"
	]
},
	"audio/vnd.dts.uhd": {
	source: "iana"
},
	"audio/vnd.dvb.file": {
	source: "iana"
},
	"audio/vnd.everad.plj": {
	source: "iana"
},
	"audio/vnd.hns.audio": {
	source: "iana"
},
	"audio/vnd.lucent.voice": {
	source: "iana",
	extensions: [
		"lvp"
	]
},
	"audio/vnd.ms-playready.media.pya": {
	source: "iana",
	extensions: [
		"pya"
	]
},
	"audio/vnd.nokia.mobile-xmf": {
	source: "iana"
},
	"audio/vnd.nortel.vbk": {
	source: "iana"
},
	"audio/vnd.nuera.ecelp4800": {
	source: "iana",
	extensions: [
		"ecelp4800"
	]
},
	"audio/vnd.nuera.ecelp7470": {
	source: "iana",
	extensions: [
		"ecelp7470"
	]
},
	"audio/vnd.nuera.ecelp9600": {
	source: "iana",
	extensions: [
		"ecelp9600"
	]
},
	"audio/vnd.octel.sbc": {
	source: "iana"
},
	"audio/vnd.presonus.multitrack": {
	source: "iana"
},
	"audio/vnd.qcelp": {
	source: "iana"
},
	"audio/vnd.rhetorex.32kadpcm": {
	source: "iana"
},
	"audio/vnd.rip": {
	source: "iana",
	extensions: [
		"rip"
	]
},
	"audio/vnd.rn-realaudio": {
	compressible: false
},
	"audio/vnd.sealedmedia.softseal.mpeg": {
	source: "iana"
},
	"audio/vnd.vmx.cvsd": {
	source: "iana"
},
	"audio/vnd.wave": {
	compressible: false
},
	"audio/vorbis": {
	source: "iana",
	compressible: false
},
	"audio/vorbis-config": {
	source: "iana"
},
	"audio/wav": {
	compressible: false,
	extensions: [
		"wav"
	]
},
	"audio/wave": {
	compressible: false,
	extensions: [
		"wav"
	]
},
	"audio/webm": {
	source: "apache",
	compressible: false,
	extensions: [
		"weba"
	]
},
	"audio/x-aac": {
	source: "apache",
	compressible: false,
	extensions: [
		"aac"
	]
},
	"audio/x-aiff": {
	source: "apache",
	extensions: [
		"aif",
		"aiff",
		"aifc"
	]
},
	"audio/x-caf": {
	source: "apache",
	compressible: false,
	extensions: [
		"caf"
	]
},
	"audio/x-flac": {
	source: "apache",
	extensions: [
		"flac"
	]
},
	"audio/x-m4a": {
	source: "nginx",
	extensions: [
		"m4a"
	]
},
	"audio/x-matroska": {
	source: "apache",
	extensions: [
		"mka"
	]
},
	"audio/x-mpegurl": {
	source: "apache",
	extensions: [
		"m3u"
	]
},
	"audio/x-ms-wax": {
	source: "apache",
	extensions: [
		"wax"
	]
},
	"audio/x-ms-wma": {
	source: "apache",
	extensions: [
		"wma"
	]
},
	"audio/x-pn-realaudio": {
	source: "apache",
	extensions: [
		"ram",
		"ra"
	]
},
	"audio/x-pn-realaudio-plugin": {
	source: "apache",
	extensions: [
		"rmp"
	]
},
	"audio/x-realaudio": {
	source: "nginx",
	extensions: [
		"ra"
	]
},
	"audio/x-tta": {
	source: "apache"
},
	"audio/x-wav": {
	source: "apache",
	extensions: [
		"wav"
	]
},
	"audio/xm": {
	source: "apache",
	extensions: [
		"xm"
	]
},
	"chemical/x-cdx": {
	source: "apache",
	extensions: [
		"cdx"
	]
},
	"chemical/x-cif": {
	source: "apache",
	extensions: [
		"cif"
	]
},
	"chemical/x-cmdf": {
	source: "apache",
	extensions: [
		"cmdf"
	]
},
	"chemical/x-cml": {
	source: "apache",
	extensions: [
		"cml"
	]
},
	"chemical/x-csml": {
	source: "apache",
	extensions: [
		"csml"
	]
},
	"chemical/x-pdb": {
	source: "apache"
},
	"chemical/x-xyz": {
	source: "apache",
	extensions: [
		"xyz"
	]
},
	"font/collection": {
	source: "iana",
	extensions: [
		"ttc"
	]
},
	"font/otf": {
	source: "iana",
	compressible: true,
	extensions: [
		"otf"
	]
},
	"font/sfnt": {
	source: "iana"
},
	"font/ttf": {
	source: "iana",
	compressible: true,
	extensions: [
		"ttf"
	]
},
	"font/woff": {
	source: "iana",
	extensions: [
		"woff"
	]
},
	"font/woff2": {
	source: "iana",
	extensions: [
		"woff2"
	]
},
	"image/aces": {
	source: "iana",
	extensions: [
		"exr"
	]
},
	"image/apng": {
	compressible: false,
	extensions: [
		"apng"
	]
},
	"image/avci": {
	source: "iana",
	extensions: [
		"avci"
	]
},
	"image/avcs": {
	source: "iana",
	extensions: [
		"avcs"
	]
},
	"image/avif": {
	source: "iana",
	compressible: false,
	extensions: [
		"avif"
	]
},
	"image/bmp": {
	source: "iana",
	compressible: true,
	extensions: [
		"bmp"
	]
},
	"image/cgm": {
	source: "iana",
	extensions: [
		"cgm"
	]
},
	"image/dicom-rle": {
	source: "iana",
	extensions: [
		"drle"
	]
},
	"image/emf": {
	source: "iana",
	extensions: [
		"emf"
	]
},
	"image/fits": {
	source: "iana",
	extensions: [
		"fits"
	]
},
	"image/g3fax": {
	source: "iana",
	extensions: [
		"g3"
	]
},
	"image/gif": {
	source: "iana",
	compressible: false,
	extensions: [
		"gif"
	]
},
	"image/heic": {
	source: "iana",
	extensions: [
		"heic"
	]
},
	"image/heic-sequence": {
	source: "iana",
	extensions: [
		"heics"
	]
},
	"image/heif": {
	source: "iana",
	extensions: [
		"heif"
	]
},
	"image/heif-sequence": {
	source: "iana",
	extensions: [
		"heifs"
	]
},
	"image/hej2k": {
	source: "iana",
	extensions: [
		"hej2"
	]
},
	"image/hsj2": {
	source: "iana",
	extensions: [
		"hsj2"
	]
},
	"image/ief": {
	source: "iana",
	extensions: [
		"ief"
	]
},
	"image/jls": {
	source: "iana",
	extensions: [
		"jls"
	]
},
	"image/jp2": {
	source: "iana",
	compressible: false,
	extensions: [
		"jp2",
		"jpg2"
	]
},
	"image/jpeg": {
	source: "iana",
	compressible: false,
	extensions: [
		"jpeg",
		"jpg",
		"jpe"
	]
},
	"image/jph": {
	source: "iana",
	extensions: [
		"jph"
	]
},
	"image/jphc": {
	source: "iana",
	extensions: [
		"jhc"
	]
},
	"image/jpm": {
	source: "iana",
	compressible: false,
	extensions: [
		"jpm"
	]
},
	"image/jpx": {
	source: "iana",
	compressible: false,
	extensions: [
		"jpx",
		"jpf"
	]
},
	"image/jxr": {
	source: "iana",
	extensions: [
		"jxr"
	]
},
	"image/jxra": {
	source: "iana",
	extensions: [
		"jxra"
	]
},
	"image/jxrs": {
	source: "iana",
	extensions: [
		"jxrs"
	]
},
	"image/jxs": {
	source: "iana",
	extensions: [
		"jxs"
	]
},
	"image/jxsc": {
	source: "iana",
	extensions: [
		"jxsc"
	]
},
	"image/jxsi": {
	source: "iana",
	extensions: [
		"jxsi"
	]
},
	"image/jxss": {
	source: "iana",
	extensions: [
		"jxss"
	]
},
	"image/ktx": {
	source: "iana",
	extensions: [
		"ktx"
	]
},
	"image/ktx2": {
	source: "iana",
	extensions: [
		"ktx2"
	]
},
	"image/naplps": {
	source: "iana"
},
	"image/pjpeg": {
	compressible: false
},
	"image/png": {
	source: "iana",
	compressible: false,
	extensions: [
		"png"
	]
},
	"image/prs.btif": {
	source: "iana",
	extensions: [
		"btif"
	]
},
	"image/prs.pti": {
	source: "iana",
	extensions: [
		"pti"
	]
},
	"image/pwg-raster": {
	source: "iana"
},
	"image/sgi": {
	source: "apache",
	extensions: [
		"sgi"
	]
},
	"image/svg+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"svg",
		"svgz"
	]
},
	"image/t38": {
	source: "iana",
	extensions: [
		"t38"
	]
},
	"image/tiff": {
	source: "iana",
	compressible: false,
	extensions: [
		"tif",
		"tiff"
	]
},
	"image/tiff-fx": {
	source: "iana",
	extensions: [
		"tfx"
	]
},
	"image/vnd.adobe.photoshop": {
	source: "iana",
	compressible: true,
	extensions: [
		"psd"
	]
},
	"image/vnd.airzip.accelerator.azv": {
	source: "iana",
	extensions: [
		"azv"
	]
},
	"image/vnd.cns.inf2": {
	source: "iana"
},
	"image/vnd.dece.graphic": {
	source: "iana",
	extensions: [
		"uvi",
		"uvvi",
		"uvg",
		"uvvg"
	]
},
	"image/vnd.djvu": {
	source: "iana",
	extensions: [
		"djvu",
		"djv"
	]
},
	"image/vnd.dvb.subtitle": {
	source: "iana",
	extensions: [
		"sub"
	]
},
	"image/vnd.dwg": {
	source: "iana",
	extensions: [
		"dwg"
	]
},
	"image/vnd.dxf": {
	source: "iana",
	extensions: [
		"dxf"
	]
},
	"image/vnd.fastbidsheet": {
	source: "iana",
	extensions: [
		"fbs"
	]
},
	"image/vnd.fpx": {
	source: "iana",
	extensions: [
		"fpx"
	]
},
	"image/vnd.fst": {
	source: "iana",
	extensions: [
		"fst"
	]
},
	"image/vnd.fujixerox.edmics-mmr": {
	source: "iana",
	extensions: [
		"mmr"
	]
},
	"image/vnd.fujixerox.edmics-rlc": {
	source: "iana",
	extensions: [
		"rlc"
	]
},
	"image/vnd.globalgraphics.pgb": {
	source: "iana"
},
	"image/vnd.microsoft.icon": {
	source: "iana",
	compressible: true,
	extensions: [
		"ico"
	]
},
	"image/vnd.mix": {
	source: "iana"
},
	"image/vnd.mozilla.apng": {
	source: "iana"
},
	"image/vnd.ms-dds": {
	compressible: true,
	extensions: [
		"dds"
	]
},
	"image/vnd.ms-modi": {
	source: "iana",
	extensions: [
		"mdi"
	]
},
	"image/vnd.ms-photo": {
	source: "apache",
	extensions: [
		"wdp"
	]
},
	"image/vnd.net-fpx": {
	source: "iana",
	extensions: [
		"npx"
	]
},
	"image/vnd.pco.b16": {
	source: "iana",
	extensions: [
		"b16"
	]
},
	"image/vnd.radiance": {
	source: "iana"
},
	"image/vnd.sealed.png": {
	source: "iana"
},
	"image/vnd.sealedmedia.softseal.gif": {
	source: "iana"
},
	"image/vnd.sealedmedia.softseal.jpg": {
	source: "iana"
},
	"image/vnd.svf": {
	source: "iana"
},
	"image/vnd.tencent.tap": {
	source: "iana",
	extensions: [
		"tap"
	]
},
	"image/vnd.valve.source.texture": {
	source: "iana",
	extensions: [
		"vtf"
	]
},
	"image/vnd.wap.wbmp": {
	source: "iana",
	extensions: [
		"wbmp"
	]
},
	"image/vnd.xiff": {
	source: "iana",
	extensions: [
		"xif"
	]
},
	"image/vnd.zbrush.pcx": {
	source: "iana",
	extensions: [
		"pcx"
	]
},
	"image/webp": {
	source: "apache",
	extensions: [
		"webp"
	]
},
	"image/wmf": {
	source: "iana",
	extensions: [
		"wmf"
	]
},
	"image/x-3ds": {
	source: "apache",
	extensions: [
		"3ds"
	]
},
	"image/x-cmu-raster": {
	source: "apache",
	extensions: [
		"ras"
	]
},
	"image/x-cmx": {
	source: "apache",
	extensions: [
		"cmx"
	]
},
	"image/x-freehand": {
	source: "apache",
	extensions: [
		"fh",
		"fhc",
		"fh4",
		"fh5",
		"fh7"
	]
},
	"image/x-icon": {
	source: "apache",
	compressible: true,
	extensions: [
		"ico"
	]
},
	"image/x-jng": {
	source: "nginx",
	extensions: [
		"jng"
	]
},
	"image/x-mrsid-image": {
	source: "apache",
	extensions: [
		"sid"
	]
},
	"image/x-ms-bmp": {
	source: "nginx",
	compressible: true,
	extensions: [
		"bmp"
	]
},
	"image/x-pcx": {
	source: "apache",
	extensions: [
		"pcx"
	]
},
	"image/x-pict": {
	source: "apache",
	extensions: [
		"pic",
		"pct"
	]
},
	"image/x-portable-anymap": {
	source: "apache",
	extensions: [
		"pnm"
	]
},
	"image/x-portable-bitmap": {
	source: "apache",
	extensions: [
		"pbm"
	]
},
	"image/x-portable-graymap": {
	source: "apache",
	extensions: [
		"pgm"
	]
},
	"image/x-portable-pixmap": {
	source: "apache",
	extensions: [
		"ppm"
	]
},
	"image/x-rgb": {
	source: "apache",
	extensions: [
		"rgb"
	]
},
	"image/x-tga": {
	source: "apache",
	extensions: [
		"tga"
	]
},
	"image/x-xbitmap": {
	source: "apache",
	extensions: [
		"xbm"
	]
},
	"image/x-xcf": {
	compressible: false
},
	"image/x-xpixmap": {
	source: "apache",
	extensions: [
		"xpm"
	]
},
	"image/x-xwindowdump": {
	source: "apache",
	extensions: [
		"xwd"
	]
},
	"message/cpim": {
	source: "iana"
},
	"message/delivery-status": {
	source: "iana"
},
	"message/disposition-notification": {
	source: "iana",
	extensions: [
		"disposition-notification"
	]
},
	"message/external-body": {
	source: "iana"
},
	"message/feedback-report": {
	source: "iana"
},
	"message/global": {
	source: "iana",
	extensions: [
		"u8msg"
	]
},
	"message/global-delivery-status": {
	source: "iana",
	extensions: [
		"u8dsn"
	]
},
	"message/global-disposition-notification": {
	source: "iana",
	extensions: [
		"u8mdn"
	]
},
	"message/global-headers": {
	source: "iana",
	extensions: [
		"u8hdr"
	]
},
	"message/http": {
	source: "iana",
	compressible: false
},
	"message/imdn+xml": {
	source: "iana",
	compressible: true
},
	"message/news": {
	source: "iana"
},
	"message/partial": {
	source: "iana",
	compressible: false
},
	"message/rfc822": {
	source: "iana",
	compressible: true,
	extensions: [
		"eml",
		"mime"
	]
},
	"message/s-http": {
	source: "iana"
},
	"message/sip": {
	source: "iana"
},
	"message/sipfrag": {
	source: "iana"
},
	"message/tracking-status": {
	source: "iana"
},
	"message/vnd.si.simp": {
	source: "iana"
},
	"message/vnd.wfa.wsc": {
	source: "iana",
	extensions: [
		"wsc"
	]
},
	"model/3mf": {
	source: "iana",
	extensions: [
		"3mf"
	]
},
	"model/e57": {
	source: "iana"
},
	"model/gltf+json": {
	source: "iana",
	compressible: true,
	extensions: [
		"gltf"
	]
},
	"model/gltf-binary": {
	source: "iana",
	compressible: true,
	extensions: [
		"glb"
	]
},
	"model/iges": {
	source: "iana",
	compressible: false,
	extensions: [
		"igs",
		"iges"
	]
},
	"model/mesh": {
	source: "iana",
	compressible: false,
	extensions: [
		"msh",
		"mesh",
		"silo"
	]
},
	"model/mtl": {
	source: "iana",
	extensions: [
		"mtl"
	]
},
	"model/obj": {
	source: "iana",
	extensions: [
		"obj"
	]
},
	"model/step": {
	source: "iana"
},
	"model/step+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"stpx"
	]
},
	"model/step+zip": {
	source: "iana",
	compressible: false,
	extensions: [
		"stpz"
	]
},
	"model/step-xml+zip": {
	source: "iana",
	compressible: false,
	extensions: [
		"stpxz"
	]
},
	"model/stl": {
	source: "iana",
	extensions: [
		"stl"
	]
},
	"model/vnd.collada+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"dae"
	]
},
	"model/vnd.dwf": {
	source: "iana",
	extensions: [
		"dwf"
	]
},
	"model/vnd.flatland.3dml": {
	source: "iana"
},
	"model/vnd.gdl": {
	source: "iana",
	extensions: [
		"gdl"
	]
},
	"model/vnd.gs-gdl": {
	source: "apache"
},
	"model/vnd.gs.gdl": {
	source: "iana"
},
	"model/vnd.gtw": {
	source: "iana",
	extensions: [
		"gtw"
	]
},
	"model/vnd.moml+xml": {
	source: "iana",
	compressible: true
},
	"model/vnd.mts": {
	source: "iana",
	extensions: [
		"mts"
	]
},
	"model/vnd.opengex": {
	source: "iana",
	extensions: [
		"ogex"
	]
},
	"model/vnd.parasolid.transmit.binary": {
	source: "iana",
	extensions: [
		"x_b"
	]
},
	"model/vnd.parasolid.transmit.text": {
	source: "iana",
	extensions: [
		"x_t"
	]
},
	"model/vnd.pytha.pyox": {
	source: "iana"
},
	"model/vnd.rosette.annotated-data-model": {
	source: "iana"
},
	"model/vnd.sap.vds": {
	source: "iana",
	extensions: [
		"vds"
	]
},
	"model/vnd.usdz+zip": {
	source: "iana",
	compressible: false,
	extensions: [
		"usdz"
	]
},
	"model/vnd.valve.source.compiled-map": {
	source: "iana",
	extensions: [
		"bsp"
	]
},
	"model/vnd.vtu": {
	source: "iana",
	extensions: [
		"vtu"
	]
},
	"model/vrml": {
	source: "iana",
	compressible: false,
	extensions: [
		"wrl",
		"vrml"
	]
},
	"model/x3d+binary": {
	source: "apache",
	compressible: false,
	extensions: [
		"x3db",
		"x3dbz"
	]
},
	"model/x3d+fastinfoset": {
	source: "iana",
	extensions: [
		"x3db"
	]
},
	"model/x3d+vrml": {
	source: "apache",
	compressible: false,
	extensions: [
		"x3dv",
		"x3dvz"
	]
},
	"model/x3d+xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"x3d",
		"x3dz"
	]
},
	"model/x3d-vrml": {
	source: "iana",
	extensions: [
		"x3dv"
	]
},
	"multipart/alternative": {
	source: "iana",
	compressible: false
},
	"multipart/appledouble": {
	source: "iana"
},
	"multipart/byteranges": {
	source: "iana"
},
	"multipart/digest": {
	source: "iana"
},
	"multipart/encrypted": {
	source: "iana",
	compressible: false
},
	"multipart/form-data": {
	source: "iana",
	compressible: false
},
	"multipart/header-set": {
	source: "iana"
},
	"multipart/mixed": {
	source: "iana"
},
	"multipart/multilingual": {
	source: "iana"
},
	"multipart/parallel": {
	source: "iana"
},
	"multipart/related": {
	source: "iana",
	compressible: false
},
	"multipart/report": {
	source: "iana"
},
	"multipart/signed": {
	source: "iana",
	compressible: false
},
	"multipart/vnd.bint.med-plus": {
	source: "iana"
},
	"multipart/voice-message": {
	source: "iana"
},
	"multipart/x-mixed-replace": {
	source: "iana"
},
	"text/1d-interleaved-parityfec": {
	source: "iana"
},
	"text/cache-manifest": {
	source: "iana",
	compressible: true,
	extensions: [
		"appcache",
		"manifest"
	]
},
	"text/calendar": {
	source: "iana",
	extensions: [
		"ics",
		"ifb"
	]
},
	"text/calender": {
	compressible: true
},
	"text/cmd": {
	compressible: true
},
	"text/coffeescript": {
	extensions: [
		"coffee",
		"litcoffee"
	]
},
	"text/cql": {
	source: "iana"
},
	"text/cql-expression": {
	source: "iana"
},
	"text/cql-identifier": {
	source: "iana"
},
	"text/css": {
	source: "iana",
	charset: "UTF-8",
	compressible: true,
	extensions: [
		"css"
	]
},
	"text/csv": {
	source: "iana",
	compressible: true,
	extensions: [
		"csv"
	]
},
	"text/csv-schema": {
	source: "iana"
},
	"text/directory": {
	source: "iana"
},
	"text/dns": {
	source: "iana"
},
	"text/ecmascript": {
	source: "iana"
},
	"text/encaprtp": {
	source: "iana"
},
	"text/enriched": {
	source: "iana"
},
	"text/fhirpath": {
	source: "iana"
},
	"text/flexfec": {
	source: "iana"
},
	"text/fwdred": {
	source: "iana"
},
	"text/gff3": {
	source: "iana"
},
	"text/grammar-ref-list": {
	source: "iana"
},
	"text/html": {
	source: "iana",
	compressible: true,
	extensions: [
		"html",
		"htm",
		"shtml"
	]
},
	"text/jade": {
	extensions: [
		"jade"
	]
},
	"text/javascript": {
	source: "iana",
	compressible: true
},
	"text/jcr-cnd": {
	source: "iana"
},
	"text/jsx": {
	compressible: true,
	extensions: [
		"jsx"
	]
},
	"text/less": {
	compressible: true,
	extensions: [
		"less"
	]
},
	"text/markdown": {
	source: "iana",
	compressible: true,
	extensions: [
		"markdown",
		"md"
	]
},
	"text/mathml": {
	source: "nginx",
	extensions: [
		"mml"
	]
},
	"text/mdx": {
	compressible: true,
	extensions: [
		"mdx"
	]
},
	"text/mizar": {
	source: "iana"
},
	"text/n3": {
	source: "iana",
	charset: "UTF-8",
	compressible: true,
	extensions: [
		"n3"
	]
},
	"text/parameters": {
	source: "iana",
	charset: "UTF-8"
},
	"text/parityfec": {
	source: "iana"
},
	"text/plain": {
	source: "iana",
	compressible: true,
	extensions: [
		"txt",
		"text",
		"conf",
		"def",
		"list",
		"log",
		"in",
		"ini"
	]
},
	"text/provenance-notation": {
	source: "iana",
	charset: "UTF-8"
},
	"text/prs.fallenstein.rst": {
	source: "iana"
},
	"text/prs.lines.tag": {
	source: "iana",
	extensions: [
		"dsc"
	]
},
	"text/prs.prop.logic": {
	source: "iana"
},
	"text/raptorfec": {
	source: "iana"
},
	"text/red": {
	source: "iana"
},
	"text/rfc822-headers": {
	source: "iana"
},
	"text/richtext": {
	source: "iana",
	compressible: true,
	extensions: [
		"rtx"
	]
},
	"text/rtf": {
	source: "iana",
	compressible: true,
	extensions: [
		"rtf"
	]
},
	"text/rtp-enc-aescm128": {
	source: "iana"
},
	"text/rtploopback": {
	source: "iana"
},
	"text/rtx": {
	source: "iana"
},
	"text/sgml": {
	source: "iana",
	extensions: [
		"sgml",
		"sgm"
	]
},
	"text/shaclc": {
	source: "iana"
},
	"text/shex": {
	source: "iana",
	extensions: [
		"shex"
	]
},
	"text/slim": {
	extensions: [
		"slim",
		"slm"
	]
},
	"text/spdx": {
	source: "iana",
	extensions: [
		"spdx"
	]
},
	"text/strings": {
	source: "iana"
},
	"text/stylus": {
	extensions: [
		"stylus",
		"styl"
	]
},
	"text/t140": {
	source: "iana"
},
	"text/tab-separated-values": {
	source: "iana",
	compressible: true,
	extensions: [
		"tsv"
	]
},
	"text/troff": {
	source: "iana",
	extensions: [
		"t",
		"tr",
		"roff",
		"man",
		"me",
		"ms"
	]
},
	"text/turtle": {
	source: "iana",
	charset: "UTF-8",
	extensions: [
		"ttl"
	]
},
	"text/ulpfec": {
	source: "iana"
},
	"text/uri-list": {
	source: "iana",
	compressible: true,
	extensions: [
		"uri",
		"uris",
		"urls"
	]
},
	"text/vcard": {
	source: "iana",
	compressible: true,
	extensions: [
		"vcard"
	]
},
	"text/vnd.a": {
	source: "iana"
},
	"text/vnd.abc": {
	source: "iana"
},
	"text/vnd.ascii-art": {
	source: "iana"
},
	"text/vnd.curl": {
	source: "iana",
	extensions: [
		"curl"
	]
},
	"text/vnd.curl.dcurl": {
	source: "apache",
	extensions: [
		"dcurl"
	]
},
	"text/vnd.curl.mcurl": {
	source: "apache",
	extensions: [
		"mcurl"
	]
},
	"text/vnd.curl.scurl": {
	source: "apache",
	extensions: [
		"scurl"
	]
},
	"text/vnd.debian.copyright": {
	source: "iana",
	charset: "UTF-8"
},
	"text/vnd.dmclientscript": {
	source: "iana"
},
	"text/vnd.dvb.subtitle": {
	source: "iana",
	extensions: [
		"sub"
	]
},
	"text/vnd.esmertec.theme-descriptor": {
	source: "iana",
	charset: "UTF-8"
},
	"text/vnd.familysearch.gedcom": {
	source: "iana",
	extensions: [
		"ged"
	]
},
	"text/vnd.ficlab.flt": {
	source: "iana"
},
	"text/vnd.fly": {
	source: "iana",
	extensions: [
		"fly"
	]
},
	"text/vnd.fmi.flexstor": {
	source: "iana",
	extensions: [
		"flx"
	]
},
	"text/vnd.gml": {
	source: "iana"
},
	"text/vnd.graphviz": {
	source: "iana",
	extensions: [
		"gv"
	]
},
	"text/vnd.hans": {
	source: "iana"
},
	"text/vnd.hgl": {
	source: "iana"
},
	"text/vnd.in3d.3dml": {
	source: "iana",
	extensions: [
		"3dml"
	]
},
	"text/vnd.in3d.spot": {
	source: "iana",
	extensions: [
		"spot"
	]
},
	"text/vnd.iptc.newsml": {
	source: "iana"
},
	"text/vnd.iptc.nitf": {
	source: "iana"
},
	"text/vnd.latex-z": {
	source: "iana"
},
	"text/vnd.motorola.reflex": {
	source: "iana"
},
	"text/vnd.ms-mediapackage": {
	source: "iana"
},
	"text/vnd.net2phone.commcenter.command": {
	source: "iana"
},
	"text/vnd.radisys.msml-basic-layout": {
	source: "iana"
},
	"text/vnd.senx.warpscript": {
	source: "iana"
},
	"text/vnd.si.uricatalogue": {
	source: "iana"
},
	"text/vnd.sosi": {
	source: "iana"
},
	"text/vnd.sun.j2me.app-descriptor": {
	source: "iana",
	charset: "UTF-8",
	extensions: [
		"jad"
	]
},
	"text/vnd.trolltech.linguist": {
	source: "iana",
	charset: "UTF-8"
},
	"text/vnd.wap.si": {
	source: "iana"
},
	"text/vnd.wap.sl": {
	source: "iana"
},
	"text/vnd.wap.wml": {
	source: "iana",
	extensions: [
		"wml"
	]
},
	"text/vnd.wap.wmlscript": {
	source: "iana",
	extensions: [
		"wmls"
	]
},
	"text/vtt": {
	source: "iana",
	charset: "UTF-8",
	compressible: true,
	extensions: [
		"vtt"
	]
},
	"text/x-asm": {
	source: "apache",
	extensions: [
		"s",
		"asm"
	]
},
	"text/x-c": {
	source: "apache",
	extensions: [
		"c",
		"cc",
		"cxx",
		"cpp",
		"h",
		"hh",
		"dic"
	]
},
	"text/x-component": {
	source: "nginx",
	extensions: [
		"htc"
	]
},
	"text/x-fortran": {
	source: "apache",
	extensions: [
		"f",
		"for",
		"f77",
		"f90"
	]
},
	"text/x-gwt-rpc": {
	compressible: true
},
	"text/x-handlebars-template": {
	extensions: [
		"hbs"
	]
},
	"text/x-java-source": {
	source: "apache",
	extensions: [
		"java"
	]
},
	"text/x-jquery-tmpl": {
	compressible: true
},
	"text/x-lua": {
	extensions: [
		"lua"
	]
},
	"text/x-markdown": {
	compressible: true,
	extensions: [
		"mkd"
	]
},
	"text/x-nfo": {
	source: "apache",
	extensions: [
		"nfo"
	]
},
	"text/x-opml": {
	source: "apache",
	extensions: [
		"opml"
	]
},
	"text/x-org": {
	compressible: true,
	extensions: [
		"org"
	]
},
	"text/x-pascal": {
	source: "apache",
	extensions: [
		"p",
		"pas"
	]
},
	"text/x-processing": {
	compressible: true,
	extensions: [
		"pde"
	]
},
	"text/x-sass": {
	extensions: [
		"sass"
	]
},
	"text/x-scss": {
	extensions: [
		"scss"
	]
},
	"text/x-setext": {
	source: "apache",
	extensions: [
		"etx"
	]
},
	"text/x-sfv": {
	source: "apache",
	extensions: [
		"sfv"
	]
},
	"text/x-suse-ymp": {
	compressible: true,
	extensions: [
		"ymp"
	]
},
	"text/x-uuencode": {
	source: "apache",
	extensions: [
		"uu"
	]
},
	"text/x-vcalendar": {
	source: "apache",
	extensions: [
		"vcs"
	]
},
	"text/x-vcard": {
	source: "apache",
	extensions: [
		"vcf"
	]
},
	"text/xml": {
	source: "iana",
	compressible: true,
	extensions: [
		"xml"
	]
},
	"text/xml-external-parsed-entity": {
	source: "iana"
},
	"text/yaml": {
	compressible: true,
	extensions: [
		"yaml",
		"yml"
	]
},
	"video/1d-interleaved-parityfec": {
	source: "iana"
},
	"video/3gpp": {
	source: "iana",
	extensions: [
		"3gp",
		"3gpp"
	]
},
	"video/3gpp-tt": {
	source: "iana"
},
	"video/3gpp2": {
	source: "iana",
	extensions: [
		"3g2"
	]
},
	"video/av1": {
	source: "iana"
},
	"video/bmpeg": {
	source: "iana"
},
	"video/bt656": {
	source: "iana"
},
	"video/celb": {
	source: "iana"
},
	"video/dv": {
	source: "iana"
},
	"video/encaprtp": {
	source: "iana"
},
	"video/ffv1": {
	source: "iana"
},
	"video/flexfec": {
	source: "iana"
},
	"video/h261": {
	source: "iana",
	extensions: [
		"h261"
	]
},
	"video/h263": {
	source: "iana",
	extensions: [
		"h263"
	]
},
	"video/h263-1998": {
	source: "iana"
},
	"video/h263-2000": {
	source: "iana"
},
	"video/h264": {
	source: "iana",
	extensions: [
		"h264"
	]
},
	"video/h264-rcdo": {
	source: "iana"
},
	"video/h264-svc": {
	source: "iana"
},
	"video/h265": {
	source: "iana"
},
	"video/iso.segment": {
	source: "iana",
	extensions: [
		"m4s"
	]
},
	"video/jpeg": {
	source: "iana",
	extensions: [
		"jpgv"
	]
},
	"video/jpeg2000": {
	source: "iana"
},
	"video/jpm": {
	source: "apache",
	extensions: [
		"jpm",
		"jpgm"
	]
},
	"video/jxsv": {
	source: "iana"
},
	"video/mj2": {
	source: "iana",
	extensions: [
		"mj2",
		"mjp2"
	]
},
	"video/mp1s": {
	source: "iana"
},
	"video/mp2p": {
	source: "iana"
},
	"video/mp2t": {
	source: "iana",
	extensions: [
		"ts"
	]
},
	"video/mp4": {
	source: "iana",
	compressible: false,
	extensions: [
		"mp4",
		"mp4v",
		"mpg4"
	]
},
	"video/mp4v-es": {
	source: "iana"
},
	"video/mpeg": {
	source: "iana",
	compressible: false,
	extensions: [
		"mpeg",
		"mpg",
		"mpe",
		"m1v",
		"m2v"
	]
},
	"video/mpeg4-generic": {
	source: "iana"
},
	"video/mpv": {
	source: "iana"
},
	"video/nv": {
	source: "iana"
},
	"video/ogg": {
	source: "iana",
	compressible: false,
	extensions: [
		"ogv"
	]
},
	"video/parityfec": {
	source: "iana"
},
	"video/pointer": {
	source: "iana"
},
	"video/quicktime": {
	source: "iana",
	compressible: false,
	extensions: [
		"qt",
		"mov"
	]
},
	"video/raptorfec": {
	source: "iana"
},
	"video/raw": {
	source: "iana"
},
	"video/rtp-enc-aescm128": {
	source: "iana"
},
	"video/rtploopback": {
	source: "iana"
},
	"video/rtx": {
	source: "iana"
},
	"video/scip": {
	source: "iana"
},
	"video/smpte291": {
	source: "iana"
},
	"video/smpte292m": {
	source: "iana"
},
	"video/ulpfec": {
	source: "iana"
},
	"video/vc1": {
	source: "iana"
},
	"video/vc2": {
	source: "iana"
},
	"video/vnd.cctv": {
	source: "iana"
},
	"video/vnd.dece.hd": {
	source: "iana",
	extensions: [
		"uvh",
		"uvvh"
	]
},
	"video/vnd.dece.mobile": {
	source: "iana",
	extensions: [
		"uvm",
		"uvvm"
	]
},
	"video/vnd.dece.mp4": {
	source: "iana"
},
	"video/vnd.dece.pd": {
	source: "iana",
	extensions: [
		"uvp",
		"uvvp"
	]
},
	"video/vnd.dece.sd": {
	source: "iana",
	extensions: [
		"uvs",
		"uvvs"
	]
},
	"video/vnd.dece.video": {
	source: "iana",
	extensions: [
		"uvv",
		"uvvv"
	]
},
	"video/vnd.directv.mpeg": {
	source: "iana"
},
	"video/vnd.directv.mpeg-tts": {
	source: "iana"
},
	"video/vnd.dlna.mpeg-tts": {
	source: "iana"
},
	"video/vnd.dvb.file": {
	source: "iana",
	extensions: [
		"dvb"
	]
},
	"video/vnd.fvt": {
	source: "iana",
	extensions: [
		"fvt"
	]
},
	"video/vnd.hns.video": {
	source: "iana"
},
	"video/vnd.iptvforum.1dparityfec-1010": {
	source: "iana"
},
	"video/vnd.iptvforum.1dparityfec-2005": {
	source: "iana"
},
	"video/vnd.iptvforum.2dparityfec-1010": {
	source: "iana"
},
	"video/vnd.iptvforum.2dparityfec-2005": {
	source: "iana"
},
	"video/vnd.iptvforum.ttsavc": {
	source: "iana"
},
	"video/vnd.iptvforum.ttsmpeg2": {
	source: "iana"
},
	"video/vnd.motorola.video": {
	source: "iana"
},
	"video/vnd.motorola.videop": {
	source: "iana"
},
	"video/vnd.mpegurl": {
	source: "iana",
	extensions: [
		"mxu",
		"m4u"
	]
},
	"video/vnd.ms-playready.media.pyv": {
	source: "iana",
	extensions: [
		"pyv"
	]
},
	"video/vnd.nokia.interleaved-multimedia": {
	source: "iana"
},
	"video/vnd.nokia.mp4vr": {
	source: "iana"
},
	"video/vnd.nokia.videovoip": {
	source: "iana"
},
	"video/vnd.objectvideo": {
	source: "iana"
},
	"video/vnd.radgamettools.bink": {
	source: "iana"
},
	"video/vnd.radgamettools.smacker": {
	source: "iana"
},
	"video/vnd.sealed.mpeg1": {
	source: "iana"
},
	"video/vnd.sealed.mpeg4": {
	source: "iana"
},
	"video/vnd.sealed.swf": {
	source: "iana"
},
	"video/vnd.sealedmedia.softseal.mov": {
	source: "iana"
},
	"video/vnd.uvvu.mp4": {
	source: "iana",
	extensions: [
		"uvu",
		"uvvu"
	]
},
	"video/vnd.vivo": {
	source: "iana",
	extensions: [
		"viv"
	]
},
	"video/vnd.youtube.yt": {
	source: "iana"
},
	"video/vp8": {
	source: "iana"
},
	"video/vp9": {
	source: "iana"
},
	"video/webm": {
	source: "apache",
	compressible: false,
	extensions: [
		"webm"
	]
},
	"video/x-f4v": {
	source: "apache",
	extensions: [
		"f4v"
	]
},
	"video/x-fli": {
	source: "apache",
	extensions: [
		"fli"
	]
},
	"video/x-flv": {
	source: "apache",
	compressible: false,
	extensions: [
		"flv"
	]
},
	"video/x-m4v": {
	source: "apache",
	extensions: [
		"m4v"
	]
},
	"video/x-matroska": {
	source: "apache",
	compressible: false,
	extensions: [
		"mkv",
		"mk3d",
		"mks"
	]
},
	"video/x-mng": {
	source: "apache",
	extensions: [
		"mng"
	]
},
	"video/x-ms-asf": {
	source: "apache",
	extensions: [
		"asf",
		"asx"
	]
},
	"video/x-ms-vob": {
	source: "apache",
	extensions: [
		"vob"
	]
},
	"video/x-ms-wm": {
	source: "apache",
	extensions: [
		"wm"
	]
},
	"video/x-ms-wmv": {
	source: "apache",
	compressible: false,
	extensions: [
		"wmv"
	]
},
	"video/x-ms-wmx": {
	source: "apache",
	extensions: [
		"wmx"
	]
},
	"video/x-ms-wvx": {
	source: "apache",
	extensions: [
		"wvx"
	]
},
	"video/x-msvideo": {
	source: "apache",
	extensions: [
		"avi"
	]
},
	"video/x-sgi-movie": {
	source: "apache",
	extensions: [
		"movie"
	]
},
	"video/x-smv": {
	source: "apache",
	extensions: [
		"smv"
	]
},
	"x-conference/x-cooltalk": {
	source: "apache",
	extensions: [
		"ice"
	]
},
	"x-shader/x-fragment": {
	compressible: true
},
	"x-shader/x-vertex": {
	compressible: true
}
};

/*!
 * mime-db
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015-2022 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module exports.
 */

var mimeDb = require$$0;

/*!
 * mime-types
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */

(function (exports) {

	/**
	 * Module dependencies.
	 * @private
	 */

	var db = mimeDb;
	var extname = require$$1$3.extname;

	/**
	 * Module variables.
	 * @private
	 */

	var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/;
	var TEXT_TYPE_REGEXP = /^text\//i;

	/**
	 * Module exports.
	 * @public
	 */

	exports.charset = charset;
	exports.charsets = { lookup: charset };
	exports.contentType = contentType;
	exports.extension = extension;
	exports.extensions = Object.create(null);
	exports.lookup = lookup;
	exports.types = Object.create(null);

	// Populate the extensions/types maps
	populateMaps(exports.extensions, exports.types);

	/**
	 * Get the default charset for a MIME type.
	 *
	 * @param {string} type
	 * @return {boolean|string}
	 */

	function charset (type) {
	  if (!type || typeof type !== 'string') {
	    return false
	  }

	  // TODO: use media-typer
	  var match = EXTRACT_TYPE_REGEXP.exec(type);
	  var mime = match && db[match[1].toLowerCase()];

	  if (mime && mime.charset) {
	    return mime.charset
	  }

	  // default text/* to utf-8
	  if (match && TEXT_TYPE_REGEXP.test(match[1])) {
	    return 'UTF-8'
	  }

	  return false
	}

	/**
	 * Create a full Content-Type header given a MIME type or extension.
	 *
	 * @param {string} str
	 * @return {boolean|string}
	 */

	function contentType (str) {
	  // TODO: should this even be in this module?
	  if (!str || typeof str !== 'string') {
	    return false
	  }

	  var mime = str.indexOf('/') === -1
	    ? exports.lookup(str)
	    : str;

	  if (!mime) {
	    return false
	  }

	  // TODO: use content-type or other module
	  if (mime.indexOf('charset') === -1) {
	    var charset = exports.charset(mime);
	    if (charset) mime += '; charset=' + charset.toLowerCase();
	  }

	  return mime
	}

	/**
	 * Get the default extension for a MIME type.
	 *
	 * @param {string} type
	 * @return {boolean|string}
	 */

	function extension (type) {
	  if (!type || typeof type !== 'string') {
	    return false
	  }

	  // TODO: use media-typer
	  var match = EXTRACT_TYPE_REGEXP.exec(type);

	  // get extensions
	  var exts = match && exports.extensions[match[1].toLowerCase()];

	  if (!exts || !exts.length) {
	    return false
	  }

	  return exts[0]
	}

	/**
	 * Lookup the MIME type for a file path/extension.
	 *
	 * @param {string} path
	 * @return {boolean|string}
	 */

	function lookup (path) {
	  if (!path || typeof path !== 'string') {
	    return false
	  }

	  // get the extension ("ext" or ".ext" or full path)
	  var extension = extname('x.' + path)
	    .toLowerCase()
	    .substr(1);

	  if (!extension) {
	    return false
	  }

	  return exports.types[extension] || false
	}

	/**
	 * Populate the extensions and types maps.
	 * @private
	 */

	function populateMaps (extensions, types) {
	  // source preference (least -> most)
	  var preference = ['nginx', 'apache', undefined, 'iana'];

	  Object.keys(db).forEach(function forEachMimeType (type) {
	    var mime = db[type];
	    var exts = mime.extensions;

	    if (!exts || !exts.length) {
	      return
	    }

	    // mime -> extensions
	    extensions[type] = exts;

	    // extension -> mime
	    for (var i = 0; i < exts.length; i++) {
	      var extension = exts[i];

	      if (types[extension]) {
	        var from = preference.indexOf(db[types[extension]].source);
	        var to = preference.indexOf(mime.source);

	        if (types[extension] !== 'application/octet-stream' &&
	          (from > to || (from === to && types[extension].substr(0, 12) === 'application/'))) {
	          // skip the remapping
	          continue
	        }
	      }

	      // set the extension -> mime
	      types[extension] = type;
	    }
	  });
	} 
} (mimeTypes));

var defer_1 = defer$1;

/**
 * Runs provided function on next iteration of the event loop
 *
 * @param {function} fn - function to run
 */
function defer$1(fn)
{
  var nextTick = typeof setImmediate == 'function'
    ? setImmediate
    : (
      typeof process == 'object' && typeof process.nextTick == 'function'
      ? process.nextTick
      : null
    );

  if (nextTick)
  {
    nextTick(fn);
  }
  else
  {
    setTimeout(fn, 0);
  }
}

var defer = defer_1;

// API
var async_1 = async$2;

/**
 * Runs provided callback asynchronously
 * even if callback itself is not
 *
 * @param   {function} callback - callback to invoke
 * @returns {function} - augmented callback
 */
function async$2(callback)
{
  var isAsync = false;

  // check if async happened
  defer(function() { isAsync = true; });

  return function async_callback(err, result)
  {
    if (isAsync)
    {
      callback(err, result);
    }
    else
    {
      defer(function nextTick_callback()
      {
        callback(err, result);
      });
    }
  };
}

// API
var abort_1 = abort$2;

/**
 * Aborts leftover active jobs
 *
 * @param {object} state - current state object
 */
function abort$2(state)
{
  Object.keys(state.jobs).forEach(clean.bind(state));

  // reset leftover jobs
  state.jobs = {};
}

/**
 * Cleans up leftover job by invoking abort function for the provided job id
 *
 * @this  state
 * @param {string|number} key - job id to abort
 */
function clean(key)
{
  if (typeof this.jobs[key] == 'function')
  {
    this.jobs[key]();
  }
}

var async$1 = async_1
  , abort$1 = abort_1
  ;

// API
var iterate_1 = iterate$2;

/**
 * Iterates over each job object
 *
 * @param {array|object} list - array or object (named list) to iterate over
 * @param {function} iterator - iterator to run
 * @param {object} state - current job status
 * @param {function} callback - invoked when all elements processed
 */
function iterate$2(list, iterator, state, callback)
{
  // store current index
  var key = state['keyedList'] ? state['keyedList'][state.index] : state.index;

  state.jobs[key] = runJob(iterator, key, list[key], function(error, output)
  {
    // don't repeat yourself
    // skip secondary callbacks
    if (!(key in state.jobs))
    {
      return;
    }

    // clean up jobs
    delete state.jobs[key];

    if (error)
    {
      // don't process rest of the results
      // stop still active jobs
      // and reset the list
      abort$1(state);
    }
    else
    {
      state.results[key] = output;
    }

    // return salvaged results
    callback(error, state.results);
  });
}

/**
 * Runs iterator over provided job element
 *
 * @param   {function} iterator - iterator to invoke
 * @param   {string|number} key - key/index of the element in the list of jobs
 * @param   {mixed} item - job description
 * @param   {function} callback - invoked after iterator is done with the job
 * @returns {function|mixed} - job abort function or something else
 */
function runJob(iterator, key, item, callback)
{
  var aborter;

  // allow shortcut if iterator expects only two arguments
  if (iterator.length == 2)
  {
    aborter = iterator(item, async$1(callback));
  }
  // otherwise go with full three arguments
  else
  {
    aborter = iterator(item, key, async$1(callback));
  }

  return aborter;
}

// API
var state_1 = state;

/**
 * Creates initial state object
 * for iteration over list
 *
 * @param   {array|object} list - list to iterate over
 * @param   {function|null} sortMethod - function to use for keys sort,
 *                                     or `null` to keep them as is
 * @returns {object} - initial state object
 */
function state(list, sortMethod)
{
  var isNamedList = !Array.isArray(list)
    , initState =
    {
      index    : 0,
      keyedList: isNamedList || sortMethod ? Object.keys(list) : null,
      jobs     : {},
      results  : isNamedList ? {} : [],
      size     : isNamedList ? Object.keys(list).length : list.length
    }
    ;

  if (sortMethod)
  {
    // sort array keys based on it's values
    // sort object's keys just on own merit
    initState.keyedList.sort(isNamedList ? sortMethod : function(a, b)
    {
      return sortMethod(list[a], list[b]);
    });
  }

  return initState;
}

var abort = abort_1
  , async = async_1
  ;

// API
var terminator_1 = terminator$2;

/**
 * Terminates jobs in the attached state context
 *
 * @this  AsyncKitState#
 * @param {function} callback - final callback to invoke after termination
 */
function terminator$2(callback)
{
  if (!Object.keys(this.jobs).length)
  {
    return;
  }

  // fast forward iteration index
  this.index = this.size;

  // abort jobs
  abort(this);

  // send back results we have so far
  async(callback)(null, this.results);
}

var iterate$1    = iterate_1
  , initState$1  = state_1
  , terminator$1 = terminator_1
  ;

// Public API
var parallel_1 = parallel;

/**
 * Runs iterator over provided array elements in parallel
 *
 * @param   {array|object} list - array or object (named list) to iterate over
 * @param   {function} iterator - iterator to run
 * @param   {function} callback - invoked when all elements processed
 * @returns {function} - jobs terminator
 */
function parallel(list, iterator, callback)
{
  var state = initState$1(list);

  while (state.index < (state['keyedList'] || list).length)
  {
    iterate$1(list, iterator, state, function(error, result)
    {
      if (error)
      {
        callback(error, result);
        return;
      }

      // looks like it's the last one
      if (Object.keys(state.jobs).length === 0)
      {
        callback(null, state.results);
        return;
      }
    });

    state.index++;
  }

  return terminator$1.bind(state, callback);
}

var serialOrdered$2 = {exports: {}};

var iterate    = iterate_1
  , initState  = state_1
  , terminator = terminator_1
  ;

// Public API
serialOrdered$2.exports = serialOrdered$1;
// sorting helpers
serialOrdered$2.exports.ascending  = ascending;
serialOrdered$2.exports.descending = descending;

/**
 * Runs iterator over provided sorted array elements in series
 *
 * @param   {array|object} list - array or object (named list) to iterate over
 * @param   {function} iterator - iterator to run
 * @param   {function} sortMethod - custom sort function
 * @param   {function} callback - invoked when all elements processed
 * @returns {function} - jobs terminator
 */
function serialOrdered$1(list, iterator, sortMethod, callback)
{
  var state = initState(list, sortMethod);

  iterate(list, iterator, state, function iteratorHandler(error, result)
  {
    if (error)
    {
      callback(error, result);
      return;
    }

    state.index++;

    // are we there yet?
    if (state.index < (state['keyedList'] || list).length)
    {
      iterate(list, iterator, state, iteratorHandler);
      return;
    }

    // done here
    callback(null, state.results);
  });

  return terminator.bind(state, callback);
}

/*
 * -- Sort methods
 */

/**
 * sort helper to sort array elements in ascending order
 *
 * @param   {mixed} a - an item to compare
 * @param   {mixed} b - an item to compare
 * @returns {number} - comparison result
 */
function ascending(a, b)
{
  return a < b ? -1 : a > b ? 1 : 0;
}

/**
 * sort helper to sort array elements in descending order
 *
 * @param   {mixed} a - an item to compare
 * @param   {mixed} b - an item to compare
 * @returns {number} - comparison result
 */
function descending(a, b)
{
  return -1 * ascending(a, b);
}

var serialOrderedExports = serialOrdered$2.exports;

var serialOrdered = serialOrderedExports;

// Public API
var serial_1 = serial;

/**
 * Runs iterator over provided array elements in series
 *
 * @param   {array|object} list - array or object (named list) to iterate over
 * @param   {function} iterator - iterator to run
 * @param   {function} callback - invoked when all elements processed
 * @returns {function} - jobs terminator
 */
function serial(list, iterator, callback)
{
  return serialOrdered(list, iterator, null, callback);
}

var asynckit$1 =
{
  parallel      : parallel_1,
  serial        : serial_1,
  serialOrdered : serialOrderedExports
};

// populates missing values
var populate$1 = function(dst, src) {

  Object.keys(src).forEach(function(prop)
  {
    dst[prop] = dst[prop] || src[prop];
  });

  return dst;
};

var CombinedStream = combined_stream;
var util$1 = require$$1$2;
var path = require$$1$3;
var http$2 = require$$1;
var https$2 = require$$2;
var parseUrl$2 = require$$0$4.parse;
var fs$1 = require$$6;
var Stream = require$$0$2.Stream;
var mime = mimeTypes;
var asynckit = asynckit$1;
var populate = populate$1;

// Public API
var form_data = FormData$2;

// make it a Stream
util$1.inherits(FormData$2, CombinedStream);

/**
 * Create readable "multipart/form-data" streams.
 * Can be used to submit forms
 * and file uploads to other web applications.
 *
 * @constructor
 * @param {Object} options - Properties to be added/overriden for FormData and CombinedStream
 */
function FormData$2(options) {
  if (!(this instanceof FormData$2)) {
    return new FormData$2(options);
  }

  this._overheadLength = 0;
  this._valueLength = 0;
  this._valuesToMeasure = [];

  CombinedStream.call(this);

  options = options || {};
  for (var option in options) {
    this[option] = options[option];
  }
}

FormData$2.LINE_BREAK = '\r\n';
FormData$2.DEFAULT_CONTENT_TYPE = 'application/octet-stream';

FormData$2.prototype.append = function(field, value, options) {

  options = options || {};

  // allow filename as single option
  if (typeof options == 'string') {
    options = {filename: options};
  }

  var append = CombinedStream.prototype.append.bind(this);

  // all that streamy business can't handle numbers
  if (typeof value == 'number') {
    value = '' + value;
  }

  // https://github.com/felixge/node-form-data/issues/38
  if (util$1.isArray(value)) {
    // Please convert your array into string
    // the way web server expects it
    this._error(new Error('Arrays are not supported.'));
    return;
  }

  var header = this._multiPartHeader(field, value, options);
  var footer = this._multiPartFooter();

  append(header);
  append(value);
  append(footer);

  // pass along options.knownLength
  this._trackLength(header, value, options);
};

FormData$2.prototype._trackLength = function(header, value, options) {
  var valueLength = 0;

  // used w/ getLengthSync(), when length is known.
  // e.g. for streaming directly from a remote server,
  // w/ a known file a size, and not wanting to wait for
  // incoming file to finish to get its size.
  if (options.knownLength != null) {
    valueLength += +options.knownLength;
  } else if (Buffer.isBuffer(value)) {
    valueLength = value.length;
  } else if (typeof value === 'string') {
    valueLength = Buffer.byteLength(value);
  }

  this._valueLength += valueLength;

  // @check why add CRLF? does this account for custom/multiple CRLFs?
  this._overheadLength +=
    Buffer.byteLength(header) +
    FormData$2.LINE_BREAK.length;

  // empty or either doesn't have path or not an http response or not a stream
  if (!value || ( !value.path && !(value.readable && value.hasOwnProperty('httpVersion')) && !(value instanceof Stream))) {
    return;
  }

  // no need to bother with the length
  if (!options.knownLength) {
    this._valuesToMeasure.push(value);
  }
};

FormData$2.prototype._lengthRetriever = function(value, callback) {

  if (value.hasOwnProperty('fd')) {

    // take read range into a account
    // `end` = Infinity –> read file till the end
    //
    // TODO: Looks like there is bug in Node fs.createReadStream
    // it doesn't respect `end` options without `start` options
    // Fix it when node fixes it.
    // https://github.com/joyent/node/issues/7819
    if (value.end != undefined && value.end != Infinity && value.start != undefined) {

      // when end specified
      // no need to calculate range
      // inclusive, starts with 0
      callback(null, value.end + 1 - (value.start ? value.start : 0));

    // not that fast snoopy
    } else {
      // still need to fetch file size from fs
      fs$1.stat(value.path, function(err, stat) {

        var fileSize;

        if (err) {
          callback(err);
          return;
        }

        // update final size based on the range options
        fileSize = stat.size - (value.start ? value.start : 0);
        callback(null, fileSize);
      });
    }

  // or http response
  } else if (value.hasOwnProperty('httpVersion')) {
    callback(null, +value.headers['content-length']);

  // or request stream http://github.com/mikeal/request
  } else if (value.hasOwnProperty('httpModule')) {
    // wait till response come back
    value.on('response', function(response) {
      value.pause();
      callback(null, +response.headers['content-length']);
    });
    value.resume();

  // something else
  } else {
    callback('Unknown stream');
  }
};

FormData$2.prototype._multiPartHeader = function(field, value, options) {
  // custom header specified (as string)?
  // it becomes responsible for boundary
  // (e.g. to handle extra CRLFs on .NET servers)
  if (typeof options.header == 'string') {
    return options.header;
  }

  var contentDisposition = this._getContentDisposition(value, options);
  var contentType = this._getContentType(value, options);

  var contents = '';
  var headers  = {
    // add custom disposition as third element or keep it two elements if not
    'Content-Disposition': ['form-data', 'name="' + field + '"'].concat(contentDisposition || []),
    // if no content type. allow it to be empty array
    'Content-Type': [].concat(contentType || [])
  };

  // allow custom headers.
  if (typeof options.header == 'object') {
    populate(headers, options.header);
  }

  var header;
  for (var prop in headers) {
    if (!headers.hasOwnProperty(prop)) continue;
    header = headers[prop];

    // skip nullish headers.
    if (header == null) {
      continue;
    }

    // convert all headers to arrays.
    if (!Array.isArray(header)) {
      header = [header];
    }

    // add non-empty headers.
    if (header.length) {
      contents += prop + ': ' + header.join('; ') + FormData$2.LINE_BREAK;
    }
  }

  return '--' + this.getBoundary() + FormData$2.LINE_BREAK + contents + FormData$2.LINE_BREAK;
};

FormData$2.prototype._getContentDisposition = function(value, options) {

  var filename
    , contentDisposition
    ;

  if (typeof options.filepath === 'string') {
    // custom filepath for relative paths
    filename = path.normalize(options.filepath).replace(/\\/g, '/');
  } else if (options.filename || value.name || value.path) {
    // custom filename take precedence
    // formidable and the browser add a name property
    // fs- and request- streams have path property
    filename = path.basename(options.filename || value.name || value.path);
  } else if (value.readable && value.hasOwnProperty('httpVersion')) {
    // or try http response
    filename = path.basename(value.client._httpMessage.path || '');
  }

  if (filename) {
    contentDisposition = 'filename="' + filename + '"';
  }

  return contentDisposition;
};

FormData$2.prototype._getContentType = function(value, options) {

  // use custom content-type above all
  var contentType = options.contentType;

  // or try `name` from formidable, browser
  if (!contentType && value.name) {
    contentType = mime.lookup(value.name);
  }

  // or try `path` from fs-, request- streams
  if (!contentType && value.path) {
    contentType = mime.lookup(value.path);
  }

  // or if it's http-reponse
  if (!contentType && value.readable && value.hasOwnProperty('httpVersion')) {
    contentType = value.headers['content-type'];
  }

  // or guess it from the filepath or filename
  if (!contentType && (options.filepath || options.filename)) {
    contentType = mime.lookup(options.filepath || options.filename);
  }

  // fallback to the default content type if `value` is not simple value
  if (!contentType && typeof value == 'object') {
    contentType = FormData$2.DEFAULT_CONTENT_TYPE;
  }

  return contentType;
};

FormData$2.prototype._multiPartFooter = function() {
  return function(next) {
    var footer = FormData$2.LINE_BREAK;

    var lastPart = (this._streams.length === 0);
    if (lastPart) {
      footer += this._lastBoundary();
    }

    next(footer);
  }.bind(this);
};

FormData$2.prototype._lastBoundary = function() {
  return '--' + this.getBoundary() + '--' + FormData$2.LINE_BREAK;
};

FormData$2.prototype.getHeaders = function(userHeaders) {
  var header;
  var formHeaders = {
    'content-type': 'multipart/form-data; boundary=' + this.getBoundary()
  };

  for (header in userHeaders) {
    if (userHeaders.hasOwnProperty(header)) {
      formHeaders[header.toLowerCase()] = userHeaders[header];
    }
  }

  return formHeaders;
};

FormData$2.prototype.setBoundary = function(boundary) {
  this._boundary = boundary;
};

FormData$2.prototype.getBoundary = function() {
  if (!this._boundary) {
    this._generateBoundary();
  }

  return this._boundary;
};

FormData$2.prototype.getBuffer = function() {
  var dataBuffer = new Buffer.alloc( 0 );
  var boundary = this.getBoundary();

  // Create the form content. Add Line breaks to the end of data.
  for (var i = 0, len = this._streams.length; i < len; i++) {
    if (typeof this._streams[i] !== 'function') {

      // Add content to the buffer.
      if(Buffer.isBuffer(this._streams[i])) {
        dataBuffer = Buffer.concat( [dataBuffer, this._streams[i]]);
      }else {
        dataBuffer = Buffer.concat( [dataBuffer, Buffer.from(this._streams[i])]);
      }

      // Add break after content.
      if (typeof this._streams[i] !== 'string' || this._streams[i].substring( 2, boundary.length + 2 ) !== boundary) {
        dataBuffer = Buffer.concat( [dataBuffer, Buffer.from(FormData$2.LINE_BREAK)] );
      }
    }
  }

  // Add the footer and return the Buffer object.
  return Buffer.concat( [dataBuffer, Buffer.from(this._lastBoundary())] );
};

FormData$2.prototype._generateBoundary = function() {
  // This generates a 50 character boundary similar to those used by Firefox.
  // They are optimized for boyer-moore parsing.
  var boundary = '--------------------------';
  for (var i = 0; i < 24; i++) {
    boundary += Math.floor(Math.random() * 10).toString(16);
  }

  this._boundary = boundary;
};

// Note: getLengthSync DOESN'T calculate streams length
// As workaround one can calculate file size manually
// and add it as knownLength option
FormData$2.prototype.getLengthSync = function() {
  var knownLength = this._overheadLength + this._valueLength;

  // Don't get confused, there are 3 "internal" streams for each keyval pair
  // so it basically checks if there is any value added to the form
  if (this._streams.length) {
    knownLength += this._lastBoundary().length;
  }

  // https://github.com/form-data/form-data/issues/40
  if (!this.hasKnownLength()) {
    // Some async length retrievers are present
    // therefore synchronous length calculation is false.
    // Please use getLength(callback) to get proper length
    this._error(new Error('Cannot calculate proper length in synchronous way.'));
  }

  return knownLength;
};

// Public API to check if length of added values is known
// https://github.com/form-data/form-data/issues/196
// https://github.com/form-data/form-data/issues/262
FormData$2.prototype.hasKnownLength = function() {
  var hasKnownLength = true;

  if (this._valuesToMeasure.length) {
    hasKnownLength = false;
  }

  return hasKnownLength;
};

FormData$2.prototype.getLength = function(cb) {
  var knownLength = this._overheadLength + this._valueLength;

  if (this._streams.length) {
    knownLength += this._lastBoundary().length;
  }

  if (!this._valuesToMeasure.length) {
    process.nextTick(cb.bind(this, null, knownLength));
    return;
  }

  asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function(err, values) {
    if (err) {
      cb(err);
      return;
    }

    values.forEach(function(length) {
      knownLength += length;
    });

    cb(null, knownLength);
  });
};

FormData$2.prototype.submit = function(params, cb) {
  var request
    , options
    , defaults = {method: 'post'}
    ;

  // parse provided url if it's string
  // or treat it as options object
  if (typeof params == 'string') {

    params = parseUrl$2(params);
    options = populate({
      port: params.port,
      path: params.pathname,
      host: params.hostname,
      protocol: params.protocol
    }, defaults);

  // use custom params
  } else {

    options = populate(params, defaults);
    // if no port provided use default one
    if (!options.port) {
      options.port = options.protocol == 'https:' ? 443 : 80;
    }
  }

  // put that good code in getHeaders to some use
  options.headers = this.getHeaders(params.headers);

  // https if specified, fallback to http in any other case
  if (options.protocol == 'https:') {
    request = https$2.request(options);
  } else {
    request = http$2.request(options);
  }

  // get content length and fire away
  this.getLength(function(err, length) {
    if (err && err !== 'Unknown stream') {
      this._error(err);
      return;
    }

    // add content length
    if (length) {
      request.setHeader('Content-Length', length);
    }

    this.pipe(request);
    if (cb) {
      var onResponse;

      var callback = function (error, responce) {
        request.removeListener('error', callback);
        request.removeListener('response', onResponse);

        return cb.call(this, error, responce);
      };

      onResponse = callback.bind(this, null);

      request.on('error', callback);
      request.on('response', onResponse);
    }
  }.bind(this));

  return request;
};

FormData$2.prototype._error = function(err) {
  if (!this.error) {
    this.error = err;
    this.pause();
    this.emit('error', err);
  }
};

FormData$2.prototype.toString = function () {
  return '[object FormData]';
};

var proxyFromEnv$1 = {};

var parseUrl$1 = require$$0$4.parse;

var DEFAULT_PORTS = {
  ftp: 21,
  gopher: 70,
  http: 80,
  https: 443,
  ws: 80,
  wss: 443,
};

var stringEndsWith = String.prototype.endsWith || function(s) {
  return s.length <= this.length &&
    this.indexOf(s, this.length - s.length) !== -1;
};

/**
 * @param {string|object} url - The URL, or the result from url.parse.
 * @return {string} The URL of the proxy that should handle the request to the
 *  given URL. If no proxy is set, this will be an empty string.
 */
function getProxyForUrl(url) {
  var parsedUrl = typeof url === 'string' ? parseUrl$1(url) : url || {};
  var proto = parsedUrl.protocol;
  var hostname = parsedUrl.host;
  var port = parsedUrl.port;
  if (typeof hostname !== 'string' || !hostname || typeof proto !== 'string') {
    return '';  // Don't proxy URLs without a valid scheme or host.
  }

  proto = proto.split(':', 1)[0];
  // Stripping ports in this way instead of using parsedUrl.hostname to make
  // sure that the brackets around IPv6 addresses are kept.
  hostname = hostname.replace(/:\d*$/, '');
  port = parseInt(port) || DEFAULT_PORTS[proto] || 0;
  if (!shouldProxy(hostname, port)) {
    return '';  // Don't proxy URLs that match NO_PROXY.
  }

  var proxy =
    getEnv('npm_config_' + proto + '_proxy') ||
    getEnv(proto + '_proxy') ||
    getEnv('npm_config_proxy') ||
    getEnv('all_proxy');
  if (proxy && proxy.indexOf('://') === -1) {
    // Missing scheme in proxy, default to the requested URL's scheme.
    proxy = proto + '://' + proxy;
  }
  return proxy;
}

/**
 * Determines whether a given URL should be proxied.
 *
 * @param {string} hostname - The host name of the URL.
 * @param {number} port - The effective port of the URL.
 * @returns {boolean} Whether the given URL should be proxied.
 * @private
 */
function shouldProxy(hostname, port) {
  var NO_PROXY =
    (getEnv('npm_config_no_proxy') || getEnv('no_proxy')).toLowerCase();
  if (!NO_PROXY) {
    return true;  // Always proxy if NO_PROXY is not set.
  }
  if (NO_PROXY === '*') {
    return false;  // Never proxy if wildcard is set.
  }

  return NO_PROXY.split(/[,\s]/).every(function(proxy) {
    if (!proxy) {
      return true;  // Skip zero-length hosts.
    }
    var parsedProxy = proxy.match(/^(.+):(\d+)$/);
    var parsedProxyHostname = parsedProxy ? parsedProxy[1] : proxy;
    var parsedProxyPort = parsedProxy ? parseInt(parsedProxy[2]) : 0;
    if (parsedProxyPort && parsedProxyPort !== port) {
      return true;  // Skip if ports don't match.
    }

    if (!/^[.*]/.test(parsedProxyHostname)) {
      // No wildcards, so stop proxying if there is an exact match.
      return hostname !== parsedProxyHostname;
    }

    if (parsedProxyHostname.charAt(0) === '*') {
      // Remove leading wildcard.
      parsedProxyHostname = parsedProxyHostname.slice(1);
    }
    // Stop proxying if the hostname ends with the no_proxy host.
    return !stringEndsWith.call(hostname, parsedProxyHostname);
  });
}

/**
 * Get the value for an environment variable.
 *
 * @param {string} key - The name of the environment variable.
 * @return {string} The value of the environment variable.
 * @private
 */
function getEnv(key) {
  return process.env[key.toLowerCase()] || process.env[key.toUpperCase()] || '';
}

proxyFromEnv$1.getProxyForUrl = getProxyForUrl;

var followRedirects$1 = {exports: {}};

var debug$1;

var debug_1 = function () {
  if (!debug$1) {
    try {
      /* eslint global-require: off */
      debug$1 = require("debug")("follow-redirects");
    }
    catch (error) { /* */ }
    if (typeof debug$1 !== "function") {
      debug$1 = function () { /* */ };
    }
  }
  debug$1.apply(null, arguments);
};

var url$1 = require$$0$4;
var URL$1 = url$1.URL;
var http$1 = require$$1;
var https$1 = require$$2;
var Writable = require$$0$2.Writable;
var assert = require$$4$1;
var debug = debug_1;

// Whether to use the native URL object or the legacy url module
var useNativeURL = false;
try {
  assert(new URL$1());
}
catch (error) {
  useNativeURL = error.code === "ERR_INVALID_URL";
}

// URL fields to preserve in copy operations
var preservedUrlFields = [
  "auth",
  "host",
  "hostname",
  "href",
  "path",
  "pathname",
  "port",
  "protocol",
  "query",
  "search",
  "hash",
];

// Create handlers that pass events from native requests
var events = ["abort", "aborted", "connect", "error", "socket", "timeout"];
var eventHandlers = Object.create(null);
events.forEach(function (event) {
  eventHandlers[event] = function (arg1, arg2, arg3) {
    this._redirectable.emit(event, arg1, arg2, arg3);
  };
});

// Error types with codes
var InvalidUrlError = createErrorType(
  "ERR_INVALID_URL",
  "Invalid URL",
  TypeError
);
var RedirectionError = createErrorType(
  "ERR_FR_REDIRECTION_FAILURE",
  "Redirected request failed"
);
var TooManyRedirectsError = createErrorType(
  "ERR_FR_TOO_MANY_REDIRECTS",
  "Maximum number of redirects exceeded",
  RedirectionError
);
var MaxBodyLengthExceededError = createErrorType(
  "ERR_FR_MAX_BODY_LENGTH_EXCEEDED",
  "Request body larger than maxBodyLength limit"
);
var WriteAfterEndError = createErrorType(
  "ERR_STREAM_WRITE_AFTER_END",
  "write after end"
);

// istanbul ignore next
var destroy = Writable.prototype.destroy || noop$1;

// An HTTP(S) request that can be redirected
function RedirectableRequest(options, responseCallback) {
  // Initialize the request
  Writable.call(this);
  this._sanitizeOptions(options);
  this._options = options;
  this._ended = false;
  this._ending = false;
  this._redirectCount = 0;
  this._redirects = [];
  this._requestBodyLength = 0;
  this._requestBodyBuffers = [];

  // Attach a callback if passed
  if (responseCallback) {
    this.on("response", responseCallback);
  }

  // React to responses of native requests
  var self = this;
  this._onNativeResponse = function (response) {
    try {
      self._processResponse(response);
    }
    catch (cause) {
      self.emit("error", cause instanceof RedirectionError ?
        cause : new RedirectionError({ cause: cause }));
    }
  };

  // Perform the first request
  this._performRequest();
}
RedirectableRequest.prototype = Object.create(Writable.prototype);

RedirectableRequest.prototype.abort = function () {
  destroyRequest(this._currentRequest);
  this._currentRequest.abort();
  this.emit("abort");
};

RedirectableRequest.prototype.destroy = function (error) {
  destroyRequest(this._currentRequest, error);
  destroy.call(this, error);
  return this;
};

// Writes buffered data to the current native request
RedirectableRequest.prototype.write = function (data, encoding, callback) {
  // Writing is not allowed if end has been called
  if (this._ending) {
    throw new WriteAfterEndError();
  }

  // Validate input and shift parameters if necessary
  if (!isString$1(data) && !isBuffer$1(data)) {
    throw new TypeError("data should be a string, Buffer or Uint8Array");
  }
  if (isFunction$1(encoding)) {
    callback = encoding;
    encoding = null;
  }

  // Ignore empty buffers, since writing them doesn't invoke the callback
  // https://github.com/nodejs/node/issues/22066
  if (data.length === 0) {
    if (callback) {
      callback();
    }
    return;
  }
  // Only write when we don't exceed the maximum body length
  if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {
    this._requestBodyLength += data.length;
    this._requestBodyBuffers.push({ data: data, encoding: encoding });
    this._currentRequest.write(data, encoding, callback);
  }
  // Error when we exceed the maximum body length
  else {
    this.emit("error", new MaxBodyLengthExceededError());
    this.abort();
  }
};

// Ends the current native request
RedirectableRequest.prototype.end = function (data, encoding, callback) {
  // Shift parameters if necessary
  if (isFunction$1(data)) {
    callback = data;
    data = encoding = null;
  }
  else if (isFunction$1(encoding)) {
    callback = encoding;
    encoding = null;
  }

  // Write data if needed and end
  if (!data) {
    this._ended = this._ending = true;
    this._currentRequest.end(null, null, callback);
  }
  else {
    var self = this;
    var currentRequest = this._currentRequest;
    this.write(data, encoding, function () {
      self._ended = true;
      currentRequest.end(null, null, callback);
    });
    this._ending = true;
  }
};

// Sets a header value on the current native request
RedirectableRequest.prototype.setHeader = function (name, value) {
  this._options.headers[name] = value;
  this._currentRequest.setHeader(name, value);
};

// Clears a header value on the current native request
RedirectableRequest.prototype.removeHeader = function (name) {
  delete this._options.headers[name];
  this._currentRequest.removeHeader(name);
};

// Global timeout for all underlying requests
RedirectableRequest.prototype.setTimeout = function (msecs, callback) {
  var self = this;

  // Destroys the socket on timeout
  function destroyOnTimeout(socket) {
    socket.setTimeout(msecs);
    socket.removeListener("timeout", socket.destroy);
    socket.addListener("timeout", socket.destroy);
  }

  // Sets up a timer to trigger a timeout event
  function startTimer(socket) {
    if (self._timeout) {
      clearTimeout(self._timeout);
    }
    self._timeout = setTimeout(function () {
      self.emit("timeout");
      clearTimer();
    }, msecs);
    destroyOnTimeout(socket);
  }

  // Stops a timeout from triggering
  function clearTimer() {
    // Clear the timeout
    if (self._timeout) {
      clearTimeout(self._timeout);
      self._timeout = null;
    }

    // Clean up all attached listeners
    self.removeListener("abort", clearTimer);
    self.removeListener("error", clearTimer);
    self.removeListener("response", clearTimer);
    self.removeListener("close", clearTimer);
    if (callback) {
      self.removeListener("timeout", callback);
    }
    if (!self.socket) {
      self._currentRequest.removeListener("socket", startTimer);
    }
  }

  // Attach callback if passed
  if (callback) {
    this.on("timeout", callback);
  }

  // Start the timer if or when the socket is opened
  if (this.socket) {
    startTimer(this.socket);
  }
  else {
    this._currentRequest.once("socket", startTimer);
  }

  // Clean up on events
  this.on("socket", destroyOnTimeout);
  this.on("abort", clearTimer);
  this.on("error", clearTimer);
  this.on("response", clearTimer);
  this.on("close", clearTimer);

  return this;
};

// Proxy all other public ClientRequest methods
[
  "flushHeaders", "getHeader",
  "setNoDelay", "setSocketKeepAlive",
].forEach(function (method) {
  RedirectableRequest.prototype[method] = function (a, b) {
    return this._currentRequest[method](a, b);
  };
});

// Proxy all public ClientRequest properties
["aborted", "connection", "socket"].forEach(function (property) {
  Object.defineProperty(RedirectableRequest.prototype, property, {
    get: function () { return this._currentRequest[property]; },
  });
});

RedirectableRequest.prototype._sanitizeOptions = function (options) {
  // Ensure headers are always present
  if (!options.headers) {
    options.headers = {};
  }

  // Since http.request treats host as an alias of hostname,
  // but the url module interprets host as hostname plus port,
  // eliminate the host property to avoid confusion.
  if (options.host) {
    // Use hostname if set, because it has precedence
    if (!options.hostname) {
      options.hostname = options.host;
    }
    delete options.host;
  }

  // Complete the URL object when necessary
  if (!options.pathname && options.path) {
    var searchPos = options.path.indexOf("?");
    if (searchPos < 0) {
      options.pathname = options.path;
    }
    else {
      options.pathname = options.path.substring(0, searchPos);
      options.search = options.path.substring(searchPos);
    }
  }
};


// Executes the next native request (initial or redirect)
RedirectableRequest.prototype._performRequest = function () {
  // Load the native protocol
  var protocol = this._options.protocol;
  var nativeProtocol = this._options.nativeProtocols[protocol];
  if (!nativeProtocol) {
    throw new TypeError("Unsupported protocol " + protocol);
  }

  // If specified, use the agent corresponding to the protocol
  // (HTTP and HTTPS use different types of agents)
  if (this._options.agents) {
    var scheme = protocol.slice(0, -1);
    this._options.agent = this._options.agents[scheme];
  }

  // Create the native request and set up its event handlers
  var request = this._currentRequest =
        nativeProtocol.request(this._options, this._onNativeResponse);
  request._redirectable = this;
  for (var event of events) {
    request.on(event, eventHandlers[event]);
  }

  // RFC7230§5.3.1: When making a request directly to an origin server, […]
  // a client MUST send only the absolute path […] as the request-target.
  this._currentUrl = /^\//.test(this._options.path) ?
    url$1.format(this._options) :
    // When making a request to a proxy, […]
    // a client MUST send the target URI in absolute-form […].
    this._options.path;

  // End a redirected request
  // (The first request must be ended explicitly with RedirectableRequest#end)
  if (this._isRedirect) {
    // Write the request entity and end
    var i = 0;
    var self = this;
    var buffers = this._requestBodyBuffers;
    (function writeNext(error) {
      // Only write if this request has not been redirected yet
      /* istanbul ignore else */
      if (request === self._currentRequest) {
        // Report any write errors
        /* istanbul ignore if */
        if (error) {
          self.emit("error", error);
        }
        // Write the next buffer if there are still left
        else if (i < buffers.length) {
          var buffer = buffers[i++];
          /* istanbul ignore else */
          if (!request.finished) {
            request.write(buffer.data, buffer.encoding, writeNext);
          }
        }
        // End the request if `end` has been called on us
        else if (self._ended) {
          request.end();
        }
      }
    }());
  }
};

// Processes a response from the current native request
RedirectableRequest.prototype._processResponse = function (response) {
  // Store the redirected response
  var statusCode = response.statusCode;
  if (this._options.trackRedirects) {
    this._redirects.push({
      url: this._currentUrl,
      headers: response.headers,
      statusCode: statusCode,
    });
  }

  // RFC7231§6.4: The 3xx (Redirection) class of status code indicates
  // that further action needs to be taken by the user agent in order to
  // fulfill the request. If a Location header field is provided,
  // the user agent MAY automatically redirect its request to the URI
  // referenced by the Location field value,
  // even if the specific status code is not understood.

  // If the response is not a redirect; return it as-is
  var location = response.headers.location;
  if (!location || this._options.followRedirects === false ||
      statusCode < 300 || statusCode >= 400) {
    response.responseUrl = this._currentUrl;
    response.redirects = this._redirects;
    this.emit("response", response);

    // Clean up
    this._requestBodyBuffers = [];
    return;
  }

  // The response is a redirect, so abort the current request
  destroyRequest(this._currentRequest);
  // Discard the remainder of the response to avoid waiting for data
  response.destroy();

  // RFC7231§6.4: A client SHOULD detect and intervene
  // in cyclical redirections (i.e., "infinite" redirection loops).
  if (++this._redirectCount > this._options.maxRedirects) {
    throw new TooManyRedirectsError();
  }

  // Store the request headers if applicable
  var requestHeaders;
  var beforeRedirect = this._options.beforeRedirect;
  if (beforeRedirect) {
    requestHeaders = Object.assign({
      // The Host header was set by nativeProtocol.request
      Host: response.req.getHeader("host"),
    }, this._options.headers);
  }

  // RFC7231§6.4: Automatic redirection needs to done with
  // care for methods not known to be safe, […]
  // RFC7231§6.4.2–3: For historical reasons, a user agent MAY change
  // the request method from POST to GET for the subsequent request.
  var method = this._options.method;
  if ((statusCode === 301 || statusCode === 302) && this._options.method === "POST" ||
      // RFC7231§6.4.4: The 303 (See Other) status code indicates that
      // the server is redirecting the user agent to a different resource […]
      // A user agent can perform a retrieval request targeting that URI
      // (a GET or HEAD request if using HTTP) […]
      (statusCode === 303) && !/^(?:GET|HEAD)$/.test(this._options.method)) {
    this._options.method = "GET";
    // Drop a possible entity and headers related to it
    this._requestBodyBuffers = [];
    removeMatchingHeaders(/^content-/i, this._options.headers);
  }

  // Drop the Host header, as the redirect might lead to a different host
  var currentHostHeader = removeMatchingHeaders(/^host$/i, this._options.headers);

  // If the redirect is relative, carry over the host of the last request
  var currentUrlParts = parseUrl(this._currentUrl);
  var currentHost = currentHostHeader || currentUrlParts.host;
  var currentUrl = /^\w+:/.test(location) ? this._currentUrl :
    url$1.format(Object.assign(currentUrlParts, { host: currentHost }));

  // Create the redirected request
  var redirectUrl = resolveUrl(location, currentUrl);
  debug("redirecting to", redirectUrl.href);
  this._isRedirect = true;
  spreadUrlObject(redirectUrl, this._options);

  // Drop confidential headers when redirecting to a less secure protocol
  // or to a different domain that is not a superdomain
  if (redirectUrl.protocol !== currentUrlParts.protocol &&
     redirectUrl.protocol !== "https:" ||
     redirectUrl.host !== currentHost &&
     !isSubdomain(redirectUrl.host, currentHost)) {
    removeMatchingHeaders(/^(?:authorization|cookie)$/i, this._options.headers);
  }

  // Evaluate the beforeRedirect callback
  if (isFunction$1(beforeRedirect)) {
    var responseDetails = {
      headers: response.headers,
      statusCode: statusCode,
    };
    var requestDetails = {
      url: currentUrl,
      method: method,
      headers: requestHeaders,
    };
    beforeRedirect(this._options, responseDetails, requestDetails);
    this._sanitizeOptions(this._options);
  }

  // Perform the redirected request
  this._performRequest();
};

// Wraps the key/value object of protocols with redirect functionality
function wrap(protocols) {
  // Default settings
  var exports = {
    maxRedirects: 21,
    maxBodyLength: 10 * 1024 * 1024,
  };

  // Wrap each protocol
  var nativeProtocols = {};
  Object.keys(protocols).forEach(function (scheme) {
    var protocol = scheme + ":";
    var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];
    var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol);

    // Executes a request, following redirects
    function request(input, options, callback) {
      // Parse parameters, ensuring that input is an object
      if (isURL(input)) {
        input = spreadUrlObject(input);
      }
      else if (isString$1(input)) {
        input = spreadUrlObject(parseUrl(input));
      }
      else {
        callback = options;
        options = validateUrl(input);
        input = { protocol: protocol };
      }
      if (isFunction$1(options)) {
        callback = options;
        options = null;
      }

      // Set defaults
      options = Object.assign({
        maxRedirects: exports.maxRedirects,
        maxBodyLength: exports.maxBodyLength,
      }, input, options);
      options.nativeProtocols = nativeProtocols;
      if (!isString$1(options.host) && !isString$1(options.hostname)) {
        options.hostname = "::1";
      }

      assert.equal(options.protocol, protocol, "protocol mismatch");
      debug("options", options);
      return new RedirectableRequest(options, callback);
    }

    // Executes a GET request, following redirects
    function get(input, options, callback) {
      var wrappedRequest = wrappedProtocol.request(input, options, callback);
      wrappedRequest.end();
      return wrappedRequest;
    }

    // Expose the properties on the wrapped protocol
    Object.defineProperties(wrappedProtocol, {
      request: { value: request, configurable: true, enumerable: true, writable: true },
      get: { value: get, configurable: true, enumerable: true, writable: true },
    });
  });
  return exports;
}

function noop$1() { /* empty */ }

function parseUrl(input) {
  var parsed;
  /* istanbul ignore else */
  if (useNativeURL) {
    parsed = new URL$1(input);
  }
  else {
    // Ensure the URL is valid and absolute
    parsed = validateUrl(url$1.parse(input));
    if (!isString$1(parsed.protocol)) {
      throw new InvalidUrlError({ input });
    }
  }
  return parsed;
}

function resolveUrl(relative, base) {
  /* istanbul ignore next */
  return useNativeURL ? new URL$1(relative, base) : parseUrl(url$1.resolve(base, relative));
}

function validateUrl(input) {
  if (/^\[/.test(input.hostname) && !/^\[[:0-9a-f]+\]$/i.test(input.hostname)) {
    throw new InvalidUrlError({ input: input.href || input });
  }
  if (/^\[/.test(input.host) && !/^\[[:0-9a-f]+\](:\d+)?$/i.test(input.host)) {
    throw new InvalidUrlError({ input: input.href || input });
  }
  return input;
}

function spreadUrlObject(urlObject, target) {
  var spread = target || {};
  for (var key of preservedUrlFields) {
    spread[key] = urlObject[key];
  }

  // Fix IPv6 hostname
  if (spread.hostname.startsWith("[")) {
    spread.hostname = spread.hostname.slice(1, -1);
  }
  // Ensure port is a number
  if (spread.port !== "") {
    spread.port = Number(spread.port);
  }
  // Concatenate path
  spread.path = spread.search ? spread.pathname + spread.search : spread.pathname;

  return spread;
}

function removeMatchingHeaders(regex, headers) {
  var lastValue;
  for (var header in headers) {
    if (regex.test(header)) {
      lastValue = headers[header];
      delete headers[header];
    }
  }
  return (lastValue === null || typeof lastValue === "undefined") ?
    undefined : String(lastValue).trim();
}

function createErrorType(code, message, baseClass) {
  // Create constructor
  function CustomError(properties) {
    Error.captureStackTrace(this, this.constructor);
    Object.assign(this, properties || {});
    this.code = code;
    this.message = this.cause ? message + ": " + this.cause.message : message;
  }

  // Attach constructor and set default properties
  CustomError.prototype = new (baseClass || Error)();
  Object.defineProperties(CustomError.prototype, {
    constructor: {
      value: CustomError,
      enumerable: false,
    },
    name: {
      value: "Error [" + code + "]",
      enumerable: false,
    },
  });
  return CustomError;
}

function destroyRequest(request, error) {
  for (var event of events) {
    request.removeListener(event, eventHandlers[event]);
  }
  request.on("error", noop$1);
  request.destroy(error);
}

function isSubdomain(subdomain, domain) {
  assert(isString$1(subdomain) && isString$1(domain));
  var dot = subdomain.length - domain.length - 1;
  return dot > 0 && subdomain[dot] === "." && subdomain.endsWith(domain);
}

function isString$1(value) {
  return typeof value === "string" || value instanceof String;
}

function isFunction$1(value) {
  return typeof value === "function";
}

function isBuffer$1(value) {
  return typeof value === "object" && ("length" in value);
}

function isURL(value) {
  return URL$1 && value instanceof URL$1;
}

// Exports
followRedirects$1.exports = wrap({ http: http$1, https: https$1 });
followRedirects$1.exports.wrap = wrap;

var followRedirectsExports = followRedirects$1.exports;

const FormData$1 = form_data;
const url = require$$0$4;
const proxyFromEnv = proxyFromEnv$1;
const http = require$$1;
const https = require$$2;
const util = require$$1$2;
const followRedirects = followRedirectsExports;
const zlib = require$$3;
const stream = require$$0$2;
const EventEmitter = require$$0$3;

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

const FormData__default = /*#__PURE__*/_interopDefaultLegacy(FormData$1);
const url__default = /*#__PURE__*/_interopDefaultLegacy(url);
const http__default = /*#__PURE__*/_interopDefaultLegacy(http);
const https__default = /*#__PURE__*/_interopDefaultLegacy(https);
const util__default = /*#__PURE__*/_interopDefaultLegacy(util);
const followRedirects__default = /*#__PURE__*/_interopDefaultLegacy(followRedirects);
const zlib__default = /*#__PURE__*/_interopDefaultLegacy(zlib);
const stream__default = /*#__PURE__*/_interopDefaultLegacy(stream);
const EventEmitter__default = /*#__PURE__*/_interopDefaultLegacy(EventEmitter);

function bind(fn, thisArg) {
  return function wrap() {
    return fn.apply(thisArg, arguments);
  };
}

// utils is a library of generic helper functions non-specific to axios

const {toString} = Object.prototype;
const {getPrototypeOf} = Object;

const kindOf = (cache => thing => {
    const str = toString.call(thing);
    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
})(Object.create(null));

const kindOfTest = (type) => {
  type = type.toLowerCase();
  return (thing) => kindOf(thing) === type
};

const typeOfTest = type => thing => typeof thing === type;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 *
 * @returns {boolean} True if value is an Array, otherwise false
 */
const {isArray} = Array;

/**
 * Determine if a value is undefined
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if the value is undefined, otherwise false
 */
const isUndefined = typeOfTest('undefined');

/**
 * Determine if a value is a Buffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
const isArrayBuffer = kindOfTest('ArrayBuffer');


/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  let result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a String, otherwise false
 */
const isString = typeOfTest('string');

/**
 * Determine if a value is a Function
 *
 * @param {*} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
const isFunction = typeOfTest('function');

/**
 * Determine if a value is a Number
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Number, otherwise false
 */
const isNumber = typeOfTest('number');

/**
 * Determine if a value is an Object
 *
 * @param {*} thing The value to test
 *
 * @returns {boolean} True if value is an Object, otherwise false
 */
const isObject = (thing) => thing !== null && typeof thing === 'object';

/**
 * Determine if a value is a Boolean
 *
 * @param {*} thing The value to test
 * @returns {boolean} True if value is a Boolean, otherwise false
 */
const isBoolean = thing => thing === true || thing === false;

/**
 * Determine if a value is a plain Object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a plain Object, otherwise false
 */
const isPlainObject = (val) => {
  if (kindOf(val) !== 'object') {
    return false;
  }

  const prototype = getPrototypeOf(val);
  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
};

/**
 * Determine if a value is a Date
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Date, otherwise false
 */
const isDate = kindOfTest('Date');

/**
 * Determine if a value is a File
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a File, otherwise false
 */
const isFile = kindOfTest('File');

/**
 * Determine if a value is a Blob
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Blob, otherwise false
 */
const isBlob = kindOfTest('Blob');

/**
 * Determine if a value is a FileList
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a File, otherwise false
 */
const isFileList = kindOfTest('FileList');

/**
 * Determine if a value is a Stream
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Stream, otherwise false
 */
const isStream = (val) => isObject(val) && isFunction(val.pipe);

/**
 * Determine if a value is a FormData
 *
 * @param {*} thing The value to test
 *
 * @returns {boolean} True if value is an FormData, otherwise false
 */
const isFormData = (thing) => {
  let kind;
  return thing && (
    (typeof FormData === 'function' && thing instanceof FormData) || (
      isFunction(thing.append) && (
        (kind = kindOf(thing)) === 'formdata' ||
        // detect form-data instance
        (kind === 'object' && isFunction(thing.toString) && thing.toString() === '[object FormData]')
      )
    )
  )
};

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
const isURLSearchParams = kindOfTest('URLSearchParams');

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 *
 * @returns {String} The String freed of excess whitespace
 */
const trim = (str) => str.trim ?
  str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 *
 * @param {Boolean} [allOwnKeys = false]
 * @returns {any}
 */
function forEach(obj, fn, {allOwnKeys = false} = {}) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  let i;
  let l;

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys.length;
    let key;

    for (i = 0; i < len; i++) {
      key = keys[i];
      fn.call(null, obj[key], key, obj);
    }
  }
}

function findKey(obj, key) {
  key = key.toLowerCase();
  const keys = Object.keys(obj);
  let i = keys.length;
  let _key;
  while (i-- > 0) {
    _key = keys[i];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}

const _global = (() => {
  /*eslint no-undef:0*/
  if (typeof globalThis !== "undefined") return globalThis;
  return typeof self !== "undefined" ? self : (typeof window !== 'undefined' ? window : commonjsGlobal)
})();

const isContextDefined = (context) => !isUndefined(context) && context !== _global;

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 *
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  const {caseless} = isContextDefined(this) && this || {};
  const result = {};
  const assignValue = (val, key) => {
    const targetKey = caseless && findKey(result, key) || key;
    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
      result[targetKey] = merge(result[targetKey], val);
    } else if (isPlainObject(val)) {
      result[targetKey] = merge({}, val);
    } else if (isArray(val)) {
      result[targetKey] = val.slice();
    } else {
      result[targetKey] = val;
    }
  };

  for (let i = 0, l = arguments.length; i < l; i++) {
    arguments[i] && forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 *
 * @param {Boolean} [allOwnKeys]
 * @returns {Object} The resulting value of object a
 */
const extend = (a, b, thisArg, {allOwnKeys}= {}) => {
  forEach(b, (val, key) => {
    if (thisArg && isFunction(val)) {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  }, {allOwnKeys});
  return a;
};

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 *
 * @returns {string} content value without BOM
 */
const stripBOM = (content) => {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
};

/**
 * Inherit the prototype methods from one constructor into another
 * @param {function} constructor
 * @param {function} superConstructor
 * @param {object} [props]
 * @param {object} [descriptors]
 *
 * @returns {void}
 */
const inherits = (constructor, superConstructor, props, descriptors) => {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors);
  constructor.prototype.constructor = constructor;
  Object.defineProperty(constructor, 'super', {
    value: superConstructor.prototype
  });
  props && Object.assign(constructor.prototype, props);
};

/**
 * Resolve object with deep prototype chain to a flat object
 * @param {Object} sourceObj source object
 * @param {Object} [destObj]
 * @param {Function|Boolean} [filter]
 * @param {Function} [propFilter]
 *
 * @returns {Object}
 */
const toFlatObject = (sourceObj, destObj, filter, propFilter) => {
  let props;
  let i;
  let prop;
  const merged = {};

  destObj = destObj || {};
  // eslint-disable-next-line no-eq-null,eqeqeq
  if (sourceObj == null) return destObj;

  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i = props.length;
    while (i-- > 0) {
      prop = props[i];
      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = filter !== false && getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);

  return destObj;
};

/**
 * Determines whether a string ends with the characters of a specified string
 *
 * @param {String} str
 * @param {String} searchString
 * @param {Number} [position= 0]
 *
 * @returns {boolean}
 */
const endsWith = (str, searchString, position) => {
  str = String(str);
  if (position === undefined || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  const lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
};


/**
 * Returns new array from array like object or null if failed
 *
 * @param {*} [thing]
 *
 * @returns {?Array}
 */
const toArray = (thing) => {
  if (!thing) return null;
  if (isArray(thing)) return thing;
  let i = thing.length;
  if (!isNumber(i)) return null;
  const arr = new Array(i);
  while (i-- > 0) {
    arr[i] = thing[i];
  }
  return arr;
};

/**
 * Checking if the Uint8Array exists and if it does, it returns a function that checks if the
 * thing passed in is an instance of Uint8Array
 *
 * @param {TypedArray}
 *
 * @returns {Array}
 */
// eslint-disable-next-line func-names
const isTypedArray = (TypedArray => {
  // eslint-disable-next-line func-names
  return thing => {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));

/**
 * For each entry in the object, call the function with the key and value.
 *
 * @param {Object<any, any>} obj - The object to iterate over.
 * @param {Function} fn - The function to call for each entry.
 *
 * @returns {void}
 */
const forEachEntry = (obj, fn) => {
  const generator = obj && obj[Symbol.iterator];

  const iterator = generator.call(obj);

  let result;

  while ((result = iterator.next()) && !result.done) {
    const pair = result.value;
    fn.call(obj, pair[0], pair[1]);
  }
};

/**
 * It takes a regular expression and a string, and returns an array of all the matches
 *
 * @param {string} regExp - The regular expression to match against.
 * @param {string} str - The string to search.
 *
 * @returns {Array<boolean>}
 */
const matchAll = (regExp, str) => {
  let matches;
  const arr = [];

  while ((matches = regExp.exec(str)) !== null) {
    arr.push(matches);
  }

  return arr;
};

/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */
const isHTMLForm = kindOfTest('HTMLFormElement');

const toCamelCase = str => {
  return str.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,
    function replacer(m, p1, p2) {
      return p1.toUpperCase() + p2;
    }
  );
};

/* Creating a function that will check if an object has a property. */
const hasOwnProperty = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);

/**
 * Determine if a value is a RegExp object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a RegExp object, otherwise false
 */
const isRegExp = kindOfTest('RegExp');

const reduceDescriptors = (obj, reducer) => {
  const descriptors = Object.getOwnPropertyDescriptors(obj);
  const reducedDescriptors = {};

  forEach(descriptors, (descriptor, name) => {
    let ret;
    if ((ret = reducer(descriptor, name, obj)) !== false) {
      reducedDescriptors[name] = ret || descriptor;
    }
  });

  Object.defineProperties(obj, reducedDescriptors);
};

/**
 * Makes all methods read-only
 * @param {Object} obj
 */

const freezeMethods = (obj) => {
  reduceDescriptors(obj, (descriptor, name) => {
    // skip restricted props in strict mode
    if (isFunction(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {
      return false;
    }

    const value = obj[name];

    if (!isFunction(value)) return;

    descriptor.enumerable = false;

    if ('writable' in descriptor) {
      descriptor.writable = false;
      return;
    }

    if (!descriptor.set) {
      descriptor.set = () => {
        throw Error('Can not rewrite read-only method \'' + name + '\'');
      };
    }
  });
};

const toObjectSet = (arrayOrString, delimiter) => {
  const obj = {};

  const define = (arr) => {
    arr.forEach(value => {
      obj[value] = true;
    });
  };

  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));

  return obj;
};

const noop = () => {};

const toFiniteNumber = (value, defaultValue) => {
  value = +value;
  return Number.isFinite(value) ? value : defaultValue;
};

const ALPHA = 'abcdefghijklmnopqrstuvwxyz';

const DIGIT = '0123456789';

const ALPHABET = {
  DIGIT,
  ALPHA,
  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
};

const generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
  let str = '';
  const {length} = alphabet;
  while (size--) {
    str += alphabet[Math.random() * length|0];
  }

  return str;
};

/**
 * If the thing is a FormData object, return true, otherwise return false.
 *
 * @param {unknown} thing - The thing to check.
 *
 * @returns {boolean}
 */
function isSpecCompliantForm(thing) {
  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === 'FormData' && thing[Symbol.iterator]);
}

const toJSONObject = (obj) => {
  const stack = new Array(10);

  const visit = (source, i) => {

    if (isObject(source)) {
      if (stack.indexOf(source) >= 0) {
        return;
      }

      if(!('toJSON' in source)) {
        stack[i] = source;
        const target = isArray(source) ? [] : {};

        forEach(source, (value, key) => {
          const reducedValue = visit(value, i + 1);
          !isUndefined(reducedValue) && (target[key] = reducedValue);
        });

        stack[i] = undefined;

        return target;
      }
    }

    return source;
  };

  return visit(obj, 0);
};

const isAsyncFn = kindOfTest('AsyncFunction');

const isThenable = (thing) =>
  thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);

const utils$1 = {
  isArray,
  isArrayBuffer,
  isBuffer,
  isFormData,
  isArrayBufferView,
  isString,
  isNumber,
  isBoolean,
  isObject,
  isPlainObject,
  isUndefined,
  isDate,
  isFile,
  isBlob,
  isRegExp,
  isFunction,
  isStream,
  isURLSearchParams,
  isTypedArray,
  isFileList,
  forEach,
  merge,
  extend,
  trim,
  stripBOM,
  inherits,
  toFlatObject,
  kindOf,
  kindOfTest,
  endsWith,
  toArray,
  forEachEntry,
  matchAll,
  isHTMLForm,
  hasOwnProperty,
  hasOwnProp: hasOwnProperty, // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors,
  freezeMethods,
  toObjectSet,
  toCamelCase,
  noop,
  toFiniteNumber,
  findKey,
  global: _global,
  isContextDefined,
  ALPHABET,
  generateString,
  isSpecCompliantForm,
  toJSONObject,
  isAsyncFn,
  isThenable
};

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [config] The config.
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 *
 * @returns {Error} The created error.
 */
function AxiosError(message, code, config, request, response) {
  Error.call(this);

  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = (new Error()).stack;
  }

  this.message = message;
  this.name = 'AxiosError';
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  response && (this.response = response);
}

utils$1.inherits(AxiosError, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: utils$1.toJSONObject(this.config),
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  }
});

const prototype$1 = AxiosError.prototype;
const descriptors = {};

[
  'ERR_BAD_OPTION_VALUE',
  'ERR_BAD_OPTION',
  'ECONNABORTED',
  'ETIMEDOUT',
  'ERR_NETWORK',
  'ERR_FR_TOO_MANY_REDIRECTS',
  'ERR_DEPRECATED',
  'ERR_BAD_RESPONSE',
  'ERR_BAD_REQUEST',
  'ERR_CANCELED',
  'ERR_NOT_SUPPORT',
  'ERR_INVALID_URL'
// eslint-disable-next-line func-names
].forEach(code => {
  descriptors[code] = {value: code};
});

Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(prototype$1, 'isAxiosError', {value: true});

// eslint-disable-next-line func-names
AxiosError.from = (error, code, config, request, response, customProps) => {
  const axiosError = Object.create(prototype$1);

  utils$1.toFlatObject(error, axiosError, function filter(obj) {
    return obj !== Error.prototype;
  }, prop => {
    return prop !== 'isAxiosError';
  });

  AxiosError.call(axiosError, error.message, code, config, request, response);

  axiosError.cause = error;

  axiosError.name = error.name;

  customProps && Object.assign(axiosError, customProps);

  return axiosError;
};

/**
 * Determines if the given thing is a array or js object.
 *
 * @param {string} thing - The object or array to be visited.
 *
 * @returns {boolean}
 */
function isVisitable(thing) {
  return utils$1.isPlainObject(thing) || utils$1.isArray(thing);
}

/**
 * It removes the brackets from the end of a string
 *
 * @param {string} key - The key of the parameter.
 *
 * @returns {string} the key without the brackets.
 */
function removeBrackets(key) {
  return utils$1.endsWith(key, '[]') ? key.slice(0, -2) : key;
}

/**
 * It takes a path, a key, and a boolean, and returns a string
 *
 * @param {string} path - The path to the current key.
 * @param {string} key - The key of the current object being iterated over.
 * @param {string} dots - If true, the key will be rendered with dots instead of brackets.
 *
 * @returns {string} The path to the current key.
 */
function renderKey(path, key, dots) {
  if (!path) return key;
  return path.concat(key).map(function each(token, i) {
    // eslint-disable-next-line no-param-reassign
    token = removeBrackets(token);
    return !dots && i ? '[' + token + ']' : token;
  }).join(dots ? '.' : '');
}

/**
 * If the array is an array and none of its elements are visitable, then it's a flat array.
 *
 * @param {Array<any>} arr - The array to check
 *
 * @returns {boolean}
 */
function isFlatArray(arr) {
  return utils$1.isArray(arr) && !arr.some(isVisitable);
}

const predicates = utils$1.toFlatObject(utils$1, {}, null, function filter(prop) {
  return /^is[A-Z]/.test(prop);
});

/**
 * Convert a data object to FormData
 *
 * @param {Object} obj
 * @param {?Object} [formData]
 * @param {?Object} [options]
 * @param {Function} [options.visitor]
 * @param {Boolean} [options.metaTokens = true]
 * @param {Boolean} [options.dots = false]
 * @param {?Boolean} [options.indexes = false]
 *
 * @returns {Object}
 **/

/**
 * It converts an object into a FormData object
 *
 * @param {Object<any, any>} obj - The object to convert to form data.
 * @param {string} formData - The FormData object to append to.
 * @param {Object<string, any>} options
 *
 * @returns
 */
function toFormData(obj, formData, options) {
  if (!utils$1.isObject(obj)) {
    throw new TypeError('target must be an object');
  }

  // eslint-disable-next-line no-param-reassign
  formData = formData || new (FormData__default["default"] || FormData)();

  // eslint-disable-next-line no-param-reassign
  options = utils$1.toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    // eslint-disable-next-line no-eq-null,eqeqeq
    return !utils$1.isUndefined(source[option]);
  });

  const metaTokens = options.metaTokens;
  // eslint-disable-next-line no-use-before-define
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;
  const useBlob = _Blob && utils$1.isSpecCompliantForm(formData);

  if (!utils$1.isFunction(visitor)) {
    throw new TypeError('visitor must be a function');
  }

  function convertValue(value) {
    if (value === null) return '';

    if (utils$1.isDate(value)) {
      return value.toISOString();
    }

    if (!useBlob && utils$1.isBlob(value)) {
      throw new AxiosError('Blob is not supported. Use a Buffer instead.');
    }

    if (utils$1.isArrayBuffer(value) || utils$1.isTypedArray(value)) {
      return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);
    }

    return value;
  }

  /**
   * Default visitor.
   *
   * @param {*} value
   * @param {String|Number} key
   * @param {Array<String|Number>} path
   * @this {FormData}
   *
   * @returns {boolean} return true to visit the each prop of the value recursively
   */
  function defaultVisitor(value, key, path) {
    let arr = value;

    if (value && !path && typeof value === 'object') {
      if (utils$1.endsWith(key, '{}')) {
        // eslint-disable-next-line no-param-reassign
        key = metaTokens ? key : key.slice(0, -2);
        // eslint-disable-next-line no-param-reassign
        value = JSON.stringify(value);
      } else if (
        (utils$1.isArray(value) && isFlatArray(value)) ||
        ((utils$1.isFileList(value) || utils$1.endsWith(key, '[]')) && (arr = utils$1.toArray(value))
        )) {
        // eslint-disable-next-line no-param-reassign
        key = removeBrackets(key);

        arr.forEach(function each(el, index) {
          !(utils$1.isUndefined(el) || el === null) && formData.append(
            // eslint-disable-next-line no-nested-ternary
            indexes === true ? renderKey([key], index, dots) : (indexes === null ? key : key + '[]'),
            convertValue(el)
          );
        });
        return false;
      }
    }

    if (isVisitable(value)) {
      return true;
    }

    formData.append(renderKey(path, key, dots), convertValue(value));

    return false;
  }

  const stack = [];

  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue,
    isVisitable
  });

  function build(value, path) {
    if (utils$1.isUndefined(value)) return;

    if (stack.indexOf(value) !== -1) {
      throw Error('Circular reference detected in ' + path.join('.'));
    }

    stack.push(value);

    utils$1.forEach(value, function each(el, key) {
      const result = !(utils$1.isUndefined(el) || el === null) && visitor.call(
        formData, el, utils$1.isString(key) ? key.trim() : key, path, exposedHelpers
      );

      if (result === true) {
        build(el, path ? path.concat(key) : [key]);
      }
    });

    stack.pop();
  }

  if (!utils$1.isObject(obj)) {
    throw new TypeError('data must be an object');
  }

  build(obj);

  return formData;
}

/**
 * It encodes a string by replacing all characters that are not in the unreserved set with
 * their percent-encoded equivalents
 *
 * @param {string} str - The string to encode.
 *
 * @returns {string} The encoded string.
 */
function encode$1(str) {
  const charMap = {
    '!': '%21',
    "'": '%27',
    '(': '%28',
    ')': '%29',
    '~': '%7E',
    '%20': '+',
    '%00': '\x00'
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
    return charMap[match];
  });
}

/**
 * It takes a params object and converts it to a FormData object
 *
 * @param {Object<string, any>} params - The parameters to be converted to a FormData object.
 * @param {Object<string, any>} options - The options object passed to the Axios constructor.
 *
 * @returns {void}
 */
function AxiosURLSearchParams(params, options) {
  this._pairs = [];

  params && toFormData(params, this, options);
}

const prototype = AxiosURLSearchParams.prototype;

prototype.append = function append(name, value) {
  this._pairs.push([name, value]);
};

prototype.toString = function toString(encoder) {
  const _encode = encoder ? function(value) {
    return encoder.call(this, value, encode$1);
  } : encode$1;

  return this._pairs.map(function each(pair) {
    return _encode(pair[0]) + '=' + _encode(pair[1]);
  }, '').join('&');
};

/**
 * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their
 * URI encoded counterparts
 *
 * @param {string} val The value to be encoded.
 *
 * @returns {string} The encoded value.
 */
function encode(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @param {?object} options
 *
 * @returns {string} The formatted url
 */
function buildURL(url, params, options) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }
  
  const _encode = options && options.encode || encode;

  const serializeFn = options && options.serialize;

  let serializedParams;

  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = utils$1.isURLSearchParams(params) ?
      params.toString() :
      new AxiosURLSearchParams(params, options).toString(_encode);
  }

  if (serializedParams) {
    const hashmarkIndex = url.indexOf("#");

    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
}

class InterceptorManager {
  constructor() {
    this.handlers = [];
  }

  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled,
      rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  }

  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */
  eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  }

  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    if (this.handlers) {
      this.handlers = [];
    }
  }

  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(fn) {
    utils$1.forEach(this.handlers, function forEachHandler(h) {
      if (h !== null) {
        fn(h);
      }
    });
  }
}

const InterceptorManager$1 = InterceptorManager;

const transitionalDefaults = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};

const URLSearchParams = url__default["default"].URLSearchParams;

const platform$1 = {
  isNode: true,
  classes: {
    URLSearchParams,
    FormData: FormData__default["default"],
    Blob: typeof Blob !== 'undefined' && Blob || null
  },
  protocols: [ 'http', 'https', 'file', 'data' ]
};

const hasBrowserEnv = typeof window !== 'undefined' && typeof document !== 'undefined';

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 *
 * @returns {boolean}
 */
const hasStandardBrowserEnv = (
  (product) => {
    return hasBrowserEnv && ['ReactNative', 'NativeScript', 'NS'].indexOf(product) < 0
  })(typeof navigator !== 'undefined' && navigator.product);

/**
 * Determine if we're running in a standard browser webWorker environment
 *
 * Although the `isStandardBrowserEnv` method indicates that
 * `allows axios to run in a web worker`, the WebWorker will still be
 * filtered out due to its judgment standard
 * `typeof window !== 'undefined' && typeof document !== 'undefined'`.
 * This leads to a problem when axios post `FormData` in webWorker
 */
const hasStandardBrowserWebWorkerEnv = (() => {
  return (
    typeof WorkerGlobalScope !== 'undefined' &&
    // eslint-disable-next-line no-undef
    self instanceof WorkerGlobalScope &&
    typeof self.importScripts === 'function'
  );
})();

const utils = /*#__PURE__*/Object.freeze({
  __proto__: null,
  hasBrowserEnv: hasBrowserEnv,
  hasStandardBrowserWebWorkerEnv: hasStandardBrowserWebWorkerEnv,
  hasStandardBrowserEnv: hasStandardBrowserEnv
});

const platform = {
  ...utils,
  ...platform$1
};

function toURLEncodedForm(data, options) {
  return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({
    visitor: function(value, key, path, helpers) {
      if (platform.isNode && utils$1.isBuffer(value)) {
        this.append(key, value.toString('base64'));
        return false;
      }

      return helpers.defaultVisitor.apply(this, arguments);
    }
  }, options));
}

/**
 * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']
 *
 * @param {string} name - The name of the property to get.
 *
 * @returns An array of strings.
 */
function parsePropPath(name) {
  // foo[x][y][z]
  // foo.x.y.z
  // foo-x-y-z
  // foo x y z
  return utils$1.matchAll(/\w+|\[(\w*)]/g, name).map(match => {
    return match[0] === '[]' ? '' : match[1] || match[0];
  });
}

/**
 * Convert an array to an object.
 *
 * @param {Array<any>} arr - The array to convert to an object.
 *
 * @returns An object with the same keys and values as the array.
 */
function arrayToObject(arr) {
  const obj = {};
  const keys = Object.keys(arr);
  let i;
  const len = keys.length;
  let key;
  for (i = 0; i < len; i++) {
    key = keys[i];
    obj[key] = arr[key];
  }
  return obj;
}

/**
 * It takes a FormData object and returns a JavaScript object
 *
 * @param {string} formData The FormData object to convert to JSON.
 *
 * @returns {Object<string, any> | null} The converted object.
 */
function formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    let name = path[index++];

    if (name === '__proto__') return true;

    const isNumericKey = Number.isFinite(+name);
    const isLast = index >= path.length;
    name = !name && utils$1.isArray(target) ? target.length : name;

    if (isLast) {
      if (utils$1.hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }

      return !isNumericKey;
    }

    if (!target[name] || !utils$1.isObject(target[name])) {
      target[name] = [];
    }

    const result = buildPath(path, value, target[name], index);

    if (result && utils$1.isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }

    return !isNumericKey;
  }

  if (utils$1.isFormData(formData) && utils$1.isFunction(formData.entries)) {
    const obj = {};

    utils$1.forEachEntry(formData, (name, value) => {
      buildPath(parsePropPath(name), value, obj, 0);
    });

    return obj;
  }

  return null;
}

/**
 * It takes a string, tries to parse it, and if it fails, it returns the stringified version
 * of the input
 *
 * @param {any} rawValue - The value to be stringified.
 * @param {Function} parser - A function that parses a string into a JavaScript object.
 * @param {Function} encoder - A function that takes a value and returns a string.
 *
 * @returns {string} A stringified version of the rawValue.
 */
function stringifySafely(rawValue, parser, encoder) {
  if (utils$1.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils$1.trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

const defaults = {

  transitional: transitionalDefaults,

  adapter: ['xhr', 'http'],

  transformRequest: [function transformRequest(data, headers) {
    const contentType = headers.getContentType() || '';
    const hasJSONContentType = contentType.indexOf('application/json') > -1;
    const isObjectPayload = utils$1.isObject(data);

    if (isObjectPayload && utils$1.isHTMLForm(data)) {
      data = new FormData(data);
    }

    const isFormData = utils$1.isFormData(data);

    if (isFormData) {
      return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
    }

    if (utils$1.isArrayBuffer(data) ||
      utils$1.isBuffer(data) ||
      utils$1.isStream(data) ||
      utils$1.isFile(data) ||
      utils$1.isBlob(data)
    ) {
      return data;
    }
    if (utils$1.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils$1.isURLSearchParams(data)) {
      headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);
      return data.toString();
    }

    let isFileList;

    if (isObjectPayload) {
      if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {
        return toURLEncodedForm(data, this.formSerializer).toString();
      }

      if ((isFileList = utils$1.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {
        const _FormData = this.env && this.env.FormData;

        return toFormData(
          isFileList ? {'files[]': data} : data,
          _FormData && new _FormData(),
          this.formSerializer
        );
      }
    }

    if (isObjectPayload || hasJSONContentType ) {
      headers.setContentType('application/json', false);
      return stringifySafely(data);
    }

    return data;
  }],

  transformResponse: [function transformResponse(data) {
    const transitional = this.transitional || defaults.transitional;
    const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    const JSONRequested = this.responseType === 'json';

    if (data && utils$1.isString(data) && ((forcedJSONParsing && !this.responseType) || JSONRequested)) {
      const silentJSONParsing = transitional && transitional.silentJSONParsing;
      const strictJSONParsing = !silentJSONParsing && JSONRequested;

      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  env: {
    FormData: platform.classes.FormData,
    Blob: platform.classes.Blob
  },

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },

  headers: {
    common: {
      'Accept': 'application/json, text/plain, */*',
      'Content-Type': undefined
    }
  }
};

utils$1.forEach(['delete', 'get', 'head', 'post', 'put', 'patch'], (method) => {
  defaults.headers[method] = {};
});

const defaults$1 = defaults;

// RawAxiosHeaders whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
const ignoreDuplicateOf = utils$1.toObjectSet([
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
]);

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} rawHeaders Headers needing to be parsed
 *
 * @returns {Object} Headers parsed into an object
 */
const parseHeaders = rawHeaders => {
  const parsed = {};
  let key;
  let val;
  let i;

  rawHeaders && rawHeaders.split('\n').forEach(function parser(line) {
    i = line.indexOf(':');
    key = line.substring(0, i).trim().toLowerCase();
    val = line.substring(i + 1).trim();

    if (!key || (parsed[key] && ignoreDuplicateOf[key])) {
      return;
    }

    if (key === 'set-cookie') {
      if (parsed[key]) {
        parsed[key].push(val);
      } else {
        parsed[key] = [val];
      }
    } else {
      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
    }
  });

  return parsed;
};

const $internals = Symbol('internals');

function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}

function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }

  return utils$1.isArray(value) ? value.map(normalizeValue) : String(value);
}

function parseTokens(str) {
  const tokens = Object.create(null);
  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let match;

  while ((match = tokensRE.exec(str))) {
    tokens[match[1]] = match[2];
  }

  return tokens;
}

const isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());

function matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {
  if (utils$1.isFunction(filter)) {
    return filter.call(this, value, header);
  }

  if (isHeaderNameFilter) {
    value = header;
  }

  if (!utils$1.isString(value)) return;

  if (utils$1.isString(filter)) {
    return value.indexOf(filter) !== -1;
  }

  if (utils$1.isRegExp(filter)) {
    return filter.test(value);
  }
}

function formatHeader(header) {
  return header.trim()
    .toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
      return char.toUpperCase() + str;
    });
}

function buildAccessors(obj, header) {
  const accessorName = utils$1.toCamelCase(' ' + header);

  ['get', 'set', 'has'].forEach(methodName => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}

class AxiosHeaders {
  constructor(headers) {
    headers && this.set(headers);
  }

  set(header, valueOrRewrite, rewrite) {
    const self = this;

    function setHeader(_value, _header, _rewrite) {
      const lHeader = normalizeHeader(_header);

      if (!lHeader) {
        throw new Error('header name must be a non-empty string');
      }

      const key = utils$1.findKey(self, lHeader);

      if(!key || self[key] === undefined || _rewrite === true || (_rewrite === undefined && self[key] !== false)) {
        self[key || _header] = normalizeValue(_value);
      }
    }

    const setHeaders = (headers, _rewrite) =>
      utils$1.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));

    if (utils$1.isPlainObject(header) || header instanceof this.constructor) {
      setHeaders(header, valueOrRewrite);
    } else if(utils$1.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
      setHeaders(parseHeaders(header), valueOrRewrite);
    } else {
      header != null && setHeader(valueOrRewrite, header, rewrite);
    }

    return this;
  }

  get(header, parser) {
    header = normalizeHeader(header);

    if (header) {
      const key = utils$1.findKey(this, header);

      if (key) {
        const value = this[key];

        if (!parser) {
          return value;
        }

        if (parser === true) {
          return parseTokens(value);
        }

        if (utils$1.isFunction(parser)) {
          return parser.call(this, value, key);
        }

        if (utils$1.isRegExp(parser)) {
          return parser.exec(value);
        }

        throw new TypeError('parser must be boolean|regexp|function');
      }
    }
  }

  has(header, matcher) {
    header = normalizeHeader(header);

    if (header) {
      const key = utils$1.findKey(this, header);

      return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
    }

    return false;
  }

  delete(header, matcher) {
    const self = this;
    let deleted = false;

    function deleteHeader(_header) {
      _header = normalizeHeader(_header);

      if (_header) {
        const key = utils$1.findKey(self, _header);

        if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {
          delete self[key];

          deleted = true;
        }
      }
    }

    if (utils$1.isArray(header)) {
      header.forEach(deleteHeader);
    } else {
      deleteHeader(header);
    }

    return deleted;
  }

  clear(matcher) {
    const keys = Object.keys(this);
    let i = keys.length;
    let deleted = false;

    while (i--) {
      const key = keys[i];
      if(!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
        delete this[key];
        deleted = true;
      }
    }

    return deleted;
  }

  normalize(format) {
    const self = this;
    const headers = {};

    utils$1.forEach(this, (value, header) => {
      const key = utils$1.findKey(headers, header);

      if (key) {
        self[key] = normalizeValue(value);
        delete self[header];
        return;
      }

      const normalized = format ? formatHeader(header) : String(header).trim();

      if (normalized !== header) {
        delete self[header];
      }

      self[normalized] = normalizeValue(value);

      headers[normalized] = true;
    });

    return this;
  }

  concat(...targets) {
    return this.constructor.concat(this, ...targets);
  }

  toJSON(asStrings) {
    const obj = Object.create(null);

    utils$1.forEach(this, (value, header) => {
      value != null && value !== false && (obj[header] = asStrings && utils$1.isArray(value) ? value.join(', ') : value);
    });

    return obj;
  }

  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }

  toString() {
    return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\n');
  }

  get [Symbol.toStringTag]() {
    return 'AxiosHeaders';
  }

  static from(thing) {
    return thing instanceof this ? thing : new this(thing);
  }

  static concat(first, ...targets) {
    const computed = new this(first);

    targets.forEach((target) => computed.set(target));

    return computed;
  }

  static accessor(header) {
    const internals = this[$internals] = (this[$internals] = {
      accessors: {}
    });

    const accessors = internals.accessors;
    const prototype = this.prototype;

    function defineAccessor(_header) {
      const lHeader = normalizeHeader(_header);

      if (!accessors[lHeader]) {
        buildAccessors(prototype, _header);
        accessors[lHeader] = true;
      }
    }

    utils$1.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);

    return this;
  }
}

AxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']);

// reserved names hotfix
utils$1.reduceDescriptors(AxiosHeaders.prototype, ({value}, key) => {
  let mapped = key[0].toUpperCase() + key.slice(1); // map `set` => `Set`
  return {
    get: () => value,
    set(headerValue) {
      this[mapped] = headerValue;
    }
  }
});

utils$1.freezeMethods(AxiosHeaders);

const AxiosHeaders$1 = AxiosHeaders;

/**
 * Transform the data for a request or a response
 *
 * @param {Array|Function} fns A single function or Array of functions
 * @param {?Object} response The response object
 *
 * @returns {*} The resulting transformed data
 */
function transformData(fns, response) {
  const config = this || defaults$1;
  const context = response || config;
  const headers = AxiosHeaders$1.from(context.headers);
  let data = context.data;

  utils$1.forEach(fns, function transform(fn) {
    data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);
  });

  headers.normalize();

  return data;
}

function isCancel(value) {
  return !!(value && value.__CANCEL__);
}

/**
 * A `CanceledError` is an object that is thrown when an operation is canceled.
 *
 * @param {string=} message The message.
 * @param {Object=} config The config.
 * @param {Object=} request The request.
 *
 * @returns {CanceledError} The created error.
 */
function CanceledError(message, config, request) {
  // eslint-disable-next-line no-eq-null,eqeqeq
  AxiosError.call(this, message == null ? 'canceled' : message, AxiosError.ERR_CANCELED, config, request);
  this.name = 'CanceledError';
}

utils$1.inherits(CanceledError, AxiosError, {
  __CANCEL__: true
});

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 *
 * @returns {object} The response.
 */
function settle(resolve, reject, response) {
  const validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(new AxiosError(
      'Request failed with status code ' + response.status,
      [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
}

/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 *
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
}

/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 *
 * @returns {string} The combined URL
 */
function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/?\/$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
}

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 *
 * @returns {string} The combined full path
 */
function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
}

const VERSION = "1.6.7";

function parseProtocol(url) {
  const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
  return match && match[1] || '';
}

const DATA_URL_PATTERN = /^(?:([^;]+);)?(?:[^;]+;)?(base64|),([\s\S]*)$/;

/**
 * Parse data uri to a Buffer or Blob
 *
 * @param {String} uri
 * @param {?Boolean} asBlob
 * @param {?Object} options
 * @param {?Function} options.Blob
 *
 * @returns {Buffer|Blob}
 */
function fromDataURI(uri, asBlob, options) {
  const _Blob = options && options.Blob || platform.classes.Blob;
  const protocol = parseProtocol(uri);

  if (asBlob === undefined && _Blob) {
    asBlob = true;
  }

  if (protocol === 'data') {
    uri = protocol.length ? uri.slice(protocol.length + 1) : uri;

    const match = DATA_URL_PATTERN.exec(uri);

    if (!match) {
      throw new AxiosError('Invalid URL', AxiosError.ERR_INVALID_URL);
    }

    const mime = match[1];
    const isBase64 = match[2];
    const body = match[3];
    const buffer = Buffer.from(decodeURIComponent(body), isBase64 ? 'base64' : 'utf8');

    if (asBlob) {
      if (!_Blob) {
        throw new AxiosError('Blob is not supported', AxiosError.ERR_NOT_SUPPORT);
      }

      return new _Blob([buffer], {type: mime});
    }

    return buffer;
  }

  throw new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_NOT_SUPPORT);
}

/**
 * Throttle decorator
 * @param {Function} fn
 * @param {Number} freq
 * @return {Function}
 */
function throttle(fn, freq) {
  let timestamp = 0;
  const threshold = 1000 / freq;
  let timer = null;
  return function throttled(force, args) {
    const now = Date.now();
    if (force || now - timestamp > threshold) {
      if (timer) {
        clearTimeout(timer);
        timer = null;
      }
      timestamp = now;
      return fn.apply(null, args);
    }
    if (!timer) {
      timer = setTimeout(() => {
        timer = null;
        timestamp = Date.now();
        return fn.apply(null, args);
      }, threshold - (now - timestamp));
    }
  };
}

/**
 * Calculate data maxRate
 * @param {Number} [samplesCount= 10]
 * @param {Number} [min= 1000]
 * @returns {Function}
 */
function speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;

  min = min !== undefined ? min : 1000;

  return function push(chunkLength) {
    const now = Date.now();

    const startedAt = timestamps[tail];

    if (!firstSampleTS) {
      firstSampleTS = now;
    }

    bytes[head] = chunkLength;
    timestamps[head] = now;

    let i = tail;
    let bytesCount = 0;

    while (i !== head) {
      bytesCount += bytes[i++];
      i = i % samplesCount;
    }

    head = (head + 1) % samplesCount;

    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }

    if (now - firstSampleTS < min) {
      return;
    }

    const passed = startedAt && now - startedAt;

    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;
  };
}

const kInternals = Symbol('internals');

class AxiosTransformStream extends stream__default["default"].Transform{
  constructor(options) {
    options = utils$1.toFlatObject(options, {
      maxRate: 0,
      chunkSize: 64 * 1024,
      minChunkSize: 100,
      timeWindow: 500,
      ticksRate: 2,
      samplesCount: 15
    }, null, (prop, source) => {
      return !utils$1.isUndefined(source[prop]);
    });

    super({
      readableHighWaterMark: options.chunkSize
    });

    const self = this;

    const internals = this[kInternals] = {
      length: options.length,
      timeWindow: options.timeWindow,
      ticksRate: options.ticksRate,
      chunkSize: options.chunkSize,
      maxRate: options.maxRate,
      minChunkSize: options.minChunkSize,
      bytesSeen: 0,
      isCaptured: false,
      notifiedBytesLoaded: 0,
      ts: Date.now(),
      bytes: 0,
      onReadCallback: null
    };

    const _speedometer = speedometer(internals.ticksRate * options.samplesCount, internals.timeWindow);

    this.on('newListener', event => {
      if (event === 'progress') {
        if (!internals.isCaptured) {
          internals.isCaptured = true;
        }
      }
    });

    let bytesNotified = 0;

    internals.updateProgress = throttle(function throttledHandler() {
      const totalBytes = internals.length;
      const bytesTransferred = internals.bytesSeen;
      const progressBytes = bytesTransferred - bytesNotified;
      if (!progressBytes || self.destroyed) return;

      const rate = _speedometer(progressBytes);

      bytesNotified = bytesTransferred;

      process.nextTick(() => {
        self.emit('progress', {
          'loaded': bytesTransferred,
          'total': totalBytes,
          'progress': totalBytes ? (bytesTransferred / totalBytes) : undefined,
          'bytes': progressBytes,
          'rate': rate ? rate : undefined,
          'estimated': rate && totalBytes && bytesTransferred <= totalBytes ?
            (totalBytes - bytesTransferred) / rate : undefined
        });
      });
    }, internals.ticksRate);

    const onFinish = () => {
      internals.updateProgress(true);
    };

    this.once('end', onFinish);
    this.once('error', onFinish);
  }

  _read(size) {
    const internals = this[kInternals];

    if (internals.onReadCallback) {
      internals.onReadCallback();
    }

    return super._read(size);
  }

  _transform(chunk, encoding, callback) {
    const self = this;
    const internals = this[kInternals];
    const maxRate = internals.maxRate;

    const readableHighWaterMark = this.readableHighWaterMark;

    const timeWindow = internals.timeWindow;

    const divider = 1000 / timeWindow;
    const bytesThreshold = (maxRate / divider);
    const minChunkSize = internals.minChunkSize !== false ? Math.max(internals.minChunkSize, bytesThreshold * 0.01) : 0;

    function pushChunk(_chunk, _callback) {
      const bytes = Buffer.byteLength(_chunk);
      internals.bytesSeen += bytes;
      internals.bytes += bytes;

      if (internals.isCaptured) {
        internals.updateProgress();
      }

      if (self.push(_chunk)) {
        process.nextTick(_callback);
      } else {
        internals.onReadCallback = () => {
          internals.onReadCallback = null;
          process.nextTick(_callback);
        };
      }
    }

    const transformChunk = (_chunk, _callback) => {
      const chunkSize = Buffer.byteLength(_chunk);
      let chunkRemainder = null;
      let maxChunkSize = readableHighWaterMark;
      let bytesLeft;
      let passed = 0;

      if (maxRate) {
        const now = Date.now();

        if (!internals.ts || (passed = (now - internals.ts)) >= timeWindow) {
          internals.ts = now;
          bytesLeft = bytesThreshold - internals.bytes;
          internals.bytes = bytesLeft < 0 ? -bytesLeft : 0;
          passed = 0;
        }

        bytesLeft = bytesThreshold - internals.bytes;
      }

      if (maxRate) {
        if (bytesLeft <= 0) {
          // next time window
          return setTimeout(() => {
            _callback(null, _chunk);
          }, timeWindow - passed);
        }

        if (bytesLeft < maxChunkSize) {
          maxChunkSize = bytesLeft;
        }
      }

      if (maxChunkSize && chunkSize > maxChunkSize && (chunkSize - maxChunkSize) > minChunkSize) {
        chunkRemainder = _chunk.subarray(maxChunkSize);
        _chunk = _chunk.subarray(0, maxChunkSize);
      }

      pushChunk(_chunk, chunkRemainder ? () => {
        process.nextTick(_callback, null, chunkRemainder);
      } : _callback);
    };

    transformChunk(chunk, function transformNextChunk(err, _chunk) {
      if (err) {
        return callback(err);
      }

      if (_chunk) {
        transformChunk(_chunk, transformNextChunk);
      } else {
        callback(null);
      }
    });
  }

  setLength(length) {
    this[kInternals].length = +length;
    return this;
  }
}

const AxiosTransformStream$1 = AxiosTransformStream;

const {asyncIterator} = Symbol;

const readBlob = async function* (blob) {
  if (blob.stream) {
    yield* blob.stream();
  } else if (blob.arrayBuffer) {
    yield await blob.arrayBuffer();
  } else if (blob[asyncIterator]) {
    yield* blob[asyncIterator]();
  } else {
    yield blob;
  }
};

const readBlob$1 = readBlob;

const BOUNDARY_ALPHABET = utils$1.ALPHABET.ALPHA_DIGIT + '-_';

const textEncoder = new util.TextEncoder();

const CRLF = '\r\n';
const CRLF_BYTES = textEncoder.encode(CRLF);
const CRLF_BYTES_COUNT = 2;

class FormDataPart {
  constructor(name, value) {
    const {escapeName} = this.constructor;
    const isStringValue = utils$1.isString(value);

    let headers = `Content-Disposition: form-data; name="${escapeName(name)}"${
      !isStringValue && value.name ? `; filename="${escapeName(value.name)}"` : ''
    }${CRLF}`;

    if (isStringValue) {
      value = textEncoder.encode(String(value).replace(/\r?\n|\r\n?/g, CRLF));
    } else {
      headers += `Content-Type: ${value.type || "application/octet-stream"}${CRLF}`;
    }

    this.headers = textEncoder.encode(headers + CRLF);

    this.contentLength = isStringValue ? value.byteLength : value.size;

    this.size = this.headers.byteLength + this.contentLength + CRLF_BYTES_COUNT;

    this.name = name;
    this.value = value;
  }

  async *encode(){
    yield this.headers;

    const {value} = this;

    if(utils$1.isTypedArray(value)) {
      yield value;
    } else {
      yield* readBlob$1(value);
    }

    yield CRLF_BYTES;
  }

  static escapeName(name) {
      return String(name).replace(/[\r\n"]/g, (match) => ({
        '\r' : '%0D',
        '\n' : '%0A',
        '"' : '%22',
      }[match]));
  }
}

const formDataToStream = (form, headersHandler, options) => {
  const {
    tag = 'form-data-boundary',
    size = 25,
    boundary = tag + '-' + utils$1.generateString(size, BOUNDARY_ALPHABET)
  } = options || {};

  if(!utils$1.isFormData(form)) {
    throw TypeError('FormData instance required');
  }

  if (boundary.length < 1 || boundary.length > 70) {
    throw Error('boundary must be 10-70 characters long')
  }

  const boundaryBytes = textEncoder.encode('--' + boundary + CRLF);
  const footerBytes = textEncoder.encode('--' + boundary + '--' + CRLF + CRLF);
  let contentLength = footerBytes.byteLength;

  const parts = Array.from(form.entries()).map(([name, value]) => {
    const part = new FormDataPart(name, value);
    contentLength += part.size;
    return part;
  });

  contentLength += boundaryBytes.byteLength * parts.length;

  contentLength = utils$1.toFiniteNumber(contentLength);

  const computedHeaders = {
    'Content-Type': `multipart/form-data; boundary=${boundary}`
  };

  if (Number.isFinite(contentLength)) {
    computedHeaders['Content-Length'] = contentLength;
  }

  headersHandler && headersHandler(computedHeaders);

  return stream.Readable.from((async function *() {
    for(const part of parts) {
      yield boundaryBytes;
      yield* part.encode();
    }

    yield footerBytes;
  })());
};

const formDataToStream$1 = formDataToStream;

class ZlibHeaderTransformStream extends stream__default["default"].Transform {
  __transform(chunk, encoding, callback) {
    this.push(chunk);
    callback();
  }

  _transform(chunk, encoding, callback) {
    if (chunk.length !== 0) {
      this._transform = this.__transform;

      // Add Default Compression headers if no zlib headers are present
      if (chunk[0] !== 120) { // Hex: 78
        const header = Buffer.alloc(2);
        header[0] = 120; // Hex: 78
        header[1] = 156; // Hex: 9C 
        this.push(header, encoding);
      }
    }

    this.__transform(chunk, encoding, callback);
  }
}

const ZlibHeaderTransformStream$1 = ZlibHeaderTransformStream;

const callbackify = (fn, reducer) => {
  return utils$1.isAsyncFn(fn) ? function (...args) {
    const cb = args.pop();
    fn.apply(this, args).then((value) => {
      try {
        reducer ? cb(null, ...reducer(value)) : cb(null, value);
      } catch (err) {
        cb(err);
      }
    }, cb);
  } : fn;
};

const callbackify$1 = callbackify;

const zlibOptions = {
  flush: zlib__default["default"].constants.Z_SYNC_FLUSH,
  finishFlush: zlib__default["default"].constants.Z_SYNC_FLUSH
};

const brotliOptions = {
  flush: zlib__default["default"].constants.BROTLI_OPERATION_FLUSH,
  finishFlush: zlib__default["default"].constants.BROTLI_OPERATION_FLUSH
};

const isBrotliSupported = utils$1.isFunction(zlib__default["default"].createBrotliDecompress);

const {http: httpFollow, https: httpsFollow} = followRedirects__default["default"];

const isHttps = /https:?/;

const supportedProtocols = platform.protocols.map(protocol => {
  return protocol + ':';
});

/**
 * If the proxy or config beforeRedirects functions are defined, call them with the options
 * object.
 *
 * @param {Object<string, any>} options - The options object that was passed to the request.
 *
 * @returns {Object<string, any>}
 */
function dispatchBeforeRedirect(options, responseDetails) {
  if (options.beforeRedirects.proxy) {
    options.beforeRedirects.proxy(options);
  }
  if (options.beforeRedirects.config) {
    options.beforeRedirects.config(options, responseDetails);
  }
}

/**
 * If the proxy or config afterRedirects functions are defined, call them with the options
 *
 * @param {http.ClientRequestArgs} options
 * @param {AxiosProxyConfig} configProxy configuration from Axios options object
 * @param {string} location
 *
 * @returns {http.ClientRequestArgs}
 */
function setProxy(options, configProxy, location) {
  let proxy = configProxy;
  if (!proxy && proxy !== false) {
    const proxyUrl = proxyFromEnv.getProxyForUrl(location);
    if (proxyUrl) {
      proxy = new URL(proxyUrl);
    }
  }
  if (proxy) {
    // Basic proxy authorization
    if (proxy.username) {
      proxy.auth = (proxy.username || '') + ':' + (proxy.password || '');
    }

    if (proxy.auth) {
      // Support proxy auth object form
      if (proxy.auth.username || proxy.auth.password) {
        proxy.auth = (proxy.auth.username || '') + ':' + (proxy.auth.password || '');
      }
      const base64 = Buffer
        .from(proxy.auth, 'utf8')
        .toString('base64');
      options.headers['Proxy-Authorization'] = 'Basic ' + base64;
    }

    options.headers.host = options.hostname + (options.port ? ':' + options.port : '');
    const proxyHost = proxy.hostname || proxy.host;
    options.hostname = proxyHost;
    // Replace 'host' since options is not a URL object
    options.host = proxyHost;
    options.port = proxy.port;
    options.path = location;
    if (proxy.protocol) {
      options.protocol = proxy.protocol.includes(':') ? proxy.protocol : `${proxy.protocol}:`;
    }
  }

  options.beforeRedirects.proxy = function beforeRedirect(redirectOptions) {
    // Configure proxy for redirected request, passing the original config proxy to apply
    // the exact same logic as if the redirected request was performed by axios directly.
    setProxy(redirectOptions, configProxy, redirectOptions.href);
  };
}

const isHttpAdapterSupported = typeof process !== 'undefined' && utils$1.kindOf(process) === 'process';

// temporary hotfix

const wrapAsync = (asyncExecutor) => {
  return new Promise((resolve, reject) => {
    let onDone;
    let isDone;

    const done = (value, isRejected) => {
      if (isDone) return;
      isDone = true;
      onDone && onDone(value, isRejected);
    };

    const _resolve = (value) => {
      done(value);
      resolve(value);
    };

    const _reject = (reason) => {
      done(reason, true);
      reject(reason);
    };

    asyncExecutor(_resolve, _reject, (onDoneHandler) => (onDone = onDoneHandler)).catch(_reject);
  })
};

const resolveFamily = ({address, family}) => {
  if (!utils$1.isString(address)) {
    throw TypeError('address must be a string');
  }
  return ({
    address,
    family: family || (address.indexOf('.') < 0 ? 6 : 4)
  });
};

const buildAddressEntry = (address, family) => resolveFamily(utils$1.isObject(address) ? address : {address, family});

/*eslint consistent-return:0*/
const httpAdapter = isHttpAdapterSupported && function httpAdapter(config) {
  return wrapAsync(async function dispatchHttpRequest(resolve, reject, onDone) {
    let {data, lookup, family} = config;
    const {responseType, responseEncoding} = config;
    const method = config.method.toUpperCase();
    let isDone;
    let rejected = false;
    let req;

    if (lookup) {
      const _lookup = callbackify$1(lookup, (value) => utils$1.isArray(value) ? value : [value]);
      // hotfix to support opt.all option which is required for node 20.x
      lookup = (hostname, opt, cb) => {
        _lookup(hostname, opt, (err, arg0, arg1) => {
          if (err) {
            return cb(err);
          }

          const addresses = utils$1.isArray(arg0) ? arg0.map(addr => buildAddressEntry(addr)) : [buildAddressEntry(arg0, arg1)];

          opt.all ? cb(err, addresses) : cb(err, addresses[0].address, addresses[0].family);
        });
      };
    }

    // temporary internal emitter until the AxiosRequest class will be implemented
    const emitter = new EventEmitter__default["default"]();

    const onFinished = () => {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(abort);
      }

      if (config.signal) {
        config.signal.removeEventListener('abort', abort);
      }

      emitter.removeAllListeners();
    };

    onDone((value, isRejected) => {
      isDone = true;
      if (isRejected) {
        rejected = true;
        onFinished();
      }
    });

    function abort(reason) {
      emitter.emit('abort', !reason || reason.type ? new CanceledError(null, config, req) : reason);
    }

    emitter.once('abort', reject);

    if (config.cancelToken || config.signal) {
      config.cancelToken && config.cancelToken.subscribe(abort);
      if (config.signal) {
        config.signal.aborted ? abort() : config.signal.addEventListener('abort', abort);
      }
    }

    // Parse url
    const fullPath = buildFullPath(config.baseURL, config.url);
    const parsed = new URL(fullPath, 'http://localhost');
    const protocol = parsed.protocol || supportedProtocols[0];

    if (protocol === 'data:') {
      let convertedData;

      if (method !== 'GET') {
        return settle(resolve, reject, {
          status: 405,
          statusText: 'method not allowed',
          headers: {},
          config
        });
      }

      try {
        convertedData = fromDataURI(config.url, responseType === 'blob', {
          Blob: config.env && config.env.Blob
        });
      } catch (err) {
        throw AxiosError.from(err, AxiosError.ERR_BAD_REQUEST, config);
      }

      if (responseType === 'text') {
        convertedData = convertedData.toString(responseEncoding);

        if (!responseEncoding || responseEncoding === 'utf8') {
          convertedData = utils$1.stripBOM(convertedData);
        }
      } else if (responseType === 'stream') {
        convertedData = stream__default["default"].Readable.from(convertedData);
      }

      return settle(resolve, reject, {
        data: convertedData,
        status: 200,
        statusText: 'OK',
        headers: new AxiosHeaders$1(),
        config
      });
    }

    if (supportedProtocols.indexOf(protocol) === -1) {
      return reject(new AxiosError(
        'Unsupported protocol ' + protocol,
        AxiosError.ERR_BAD_REQUEST,
        config
      ));
    }

    const headers = AxiosHeaders$1.from(config.headers).normalize();

    // Set User-Agent (required by some servers)
    // See https://github.com/axios/axios/issues/69
    // User-Agent is specified; handle case where no UA header is desired
    // Only set header if it hasn't been set in config
    headers.set('User-Agent', 'axios/' + VERSION, false);

    const onDownloadProgress = config.onDownloadProgress;
    const onUploadProgress = config.onUploadProgress;
    const maxRate = config.maxRate;
    let maxUploadRate = undefined;
    let maxDownloadRate = undefined;

    // support for spec compliant FormData objects
    if (utils$1.isSpecCompliantForm(data)) {
      const userBoundary = headers.getContentType(/boundary=([-_\w\d]{10,70})/i);

      data = formDataToStream$1(data, (formHeaders) => {
        headers.set(formHeaders);
      }, {
        tag: `axios-${VERSION}-boundary`,
        boundary: userBoundary && userBoundary[1] || undefined
      });
      // support for https://www.npmjs.com/package/form-data api
    } else if (utils$1.isFormData(data) && utils$1.isFunction(data.getHeaders)) {
      headers.set(data.getHeaders());

      if (!headers.hasContentLength()) {
        try {
          const knownLength = await util__default["default"].promisify(data.getLength).call(data);
          Number.isFinite(knownLength) && knownLength >= 0 && headers.setContentLength(knownLength);
          /*eslint no-empty:0*/
        } catch (e) {
        }
      }
    } else if (utils$1.isBlob(data)) {
      data.size && headers.setContentType(data.type || 'application/octet-stream');
      headers.setContentLength(data.size || 0);
      data = stream__default["default"].Readable.from(readBlob$1(data));
    } else if (data && !utils$1.isStream(data)) {
      if (Buffer.isBuffer(data)) ; else if (utils$1.isArrayBuffer(data)) {
        data = Buffer.from(new Uint8Array(data));
      } else if (utils$1.isString(data)) {
        data = Buffer.from(data, 'utf-8');
      } else {
        return reject(new AxiosError(
          'Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream',
          AxiosError.ERR_BAD_REQUEST,
          config
        ));
      }

      // Add Content-Length header if data exists
      headers.setContentLength(data.length, false);

      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {
        return reject(new AxiosError(
          'Request body larger than maxBodyLength limit',
          AxiosError.ERR_BAD_REQUEST,
          config
        ));
      }
    }

    const contentLength = utils$1.toFiniteNumber(headers.getContentLength());

    if (utils$1.isArray(maxRate)) {
      maxUploadRate = maxRate[0];
      maxDownloadRate = maxRate[1];
    } else {
      maxUploadRate = maxDownloadRate = maxRate;
    }

    if (data && (onUploadProgress || maxUploadRate)) {
      if (!utils$1.isStream(data)) {
        data = stream__default["default"].Readable.from(data, {objectMode: false});
      }

      data = stream__default["default"].pipeline([data, new AxiosTransformStream$1({
        length: contentLength,
        maxRate: utils$1.toFiniteNumber(maxUploadRate)
      })], utils$1.noop);

      onUploadProgress && data.on('progress', progress => {
        onUploadProgress(Object.assign(progress, {
          upload: true
        }));
      });
    }

    // HTTP basic authentication
    let auth = undefined;
    if (config.auth) {
      const username = config.auth.username || '';
      const password = config.auth.password || '';
      auth = username + ':' + password;
    }

    if (!auth && parsed.username) {
      const urlUsername = parsed.username;
      const urlPassword = parsed.password;
      auth = urlUsername + ':' + urlPassword;
    }

    auth && headers.delete('authorization');

    let path;

    try {
      path = buildURL(
        parsed.pathname + parsed.search,
        config.params,
        config.paramsSerializer
      ).replace(/^\?/, '');
    } catch (err) {
      const customErr = new Error(err.message);
      customErr.config = config;
      customErr.url = config.url;
      customErr.exists = true;
      return reject(customErr);
    }

    headers.set(
      'Accept-Encoding',
      'gzip, compress, deflate' + (isBrotliSupported ? ', br' : ''), false
      );

    const options = {
      path,
      method: method,
      headers: headers.toJSON(),
      agents: { http: config.httpAgent, https: config.httpsAgent },
      auth,
      protocol,
      family,
      beforeRedirect: dispatchBeforeRedirect,
      beforeRedirects: {}
    };

    // cacheable-lookup integration hotfix
    !utils$1.isUndefined(lookup) && (options.lookup = lookup);

    if (config.socketPath) {
      options.socketPath = config.socketPath;
    } else {
      options.hostname = parsed.hostname;
      options.port = parsed.port;
      setProxy(options, config.proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);
    }

    let transport;
    const isHttpsRequest = isHttps.test(options.protocol);
    options.agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;
    if (config.transport) {
      transport = config.transport;
    } else if (config.maxRedirects === 0) {
      transport = isHttpsRequest ? https__default["default"] : http__default["default"];
    } else {
      if (config.maxRedirects) {
        options.maxRedirects = config.maxRedirects;
      }
      if (config.beforeRedirect) {
        options.beforeRedirects.config = config.beforeRedirect;
      }
      transport = isHttpsRequest ? httpsFollow : httpFollow;
    }

    if (config.maxBodyLength > -1) {
      options.maxBodyLength = config.maxBodyLength;
    } else {
      // follow-redirects does not skip comparison, so it should always succeed for axios -1 unlimited
      options.maxBodyLength = Infinity;
    }

    if (config.insecureHTTPParser) {
      options.insecureHTTPParser = config.insecureHTTPParser;
    }

    // Create the request
    req = transport.request(options, function handleResponse(res) {
      if (req.destroyed) return;

      const streams = [res];

      const responseLength = +res.headers['content-length'];

      if (onDownloadProgress) {
        const transformStream = new AxiosTransformStream$1({
          length: utils$1.toFiniteNumber(responseLength),
          maxRate: utils$1.toFiniteNumber(maxDownloadRate)
        });

        onDownloadProgress && transformStream.on('progress', progress => {
          onDownloadProgress(Object.assign(progress, {
            download: true
          }));
        });

        streams.push(transformStream);
      }

      // decompress the response body transparently if required
      let responseStream = res;

      // return the last request in case of redirects
      const lastRequest = res.req || req;

      // if decompress disabled we should not decompress
      if (config.decompress !== false && res.headers['content-encoding']) {
        // if no content, but headers still say that it is encoded,
        // remove the header not confuse downstream operations
        if (method === 'HEAD' || res.statusCode === 204) {
          delete res.headers['content-encoding'];
        }

        switch ((res.headers['content-encoding'] || '').toLowerCase()) {
        /*eslint default-case:0*/
        case 'gzip':
        case 'x-gzip':
        case 'compress':
        case 'x-compress':
          // add the unzipper to the body stream processing pipeline
          streams.push(zlib__default["default"].createUnzip(zlibOptions));

          // remove the content-encoding in order to not confuse downstream operations
          delete res.headers['content-encoding'];
          break;
        case 'deflate':
          streams.push(new ZlibHeaderTransformStream$1());

          // add the unzipper to the body stream processing pipeline
          streams.push(zlib__default["default"].createUnzip(zlibOptions));

          // remove the content-encoding in order to not confuse downstream operations
          delete res.headers['content-encoding'];
          break;
        case 'br':
          if (isBrotliSupported) {
            streams.push(zlib__default["default"].createBrotliDecompress(brotliOptions));
            delete res.headers['content-encoding'];
          }
        }
      }

      responseStream = streams.length > 1 ? stream__default["default"].pipeline(streams, utils$1.noop) : streams[0];

      const offListeners = stream__default["default"].finished(responseStream, () => {
        offListeners();
        onFinished();
      });

      const response = {
        status: res.statusCode,
        statusText: res.statusMessage,
        headers: new AxiosHeaders$1(res.headers),
        config,
        request: lastRequest
      };

      if (responseType === 'stream') {
        response.data = responseStream;
        settle(resolve, reject, response);
      } else {
        const responseBuffer = [];
        let totalResponseBytes = 0;

        responseStream.on('data', function handleStreamData(chunk) {
          responseBuffer.push(chunk);
          totalResponseBytes += chunk.length;

          // make sure the content length is not over the maxContentLength if specified
          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {
            // stream.destroy() emit aborted event before calling reject() on Node.js v16
            rejected = true;
            responseStream.destroy();
            reject(new AxiosError('maxContentLength size of ' + config.maxContentLength + ' exceeded',
              AxiosError.ERR_BAD_RESPONSE, config, lastRequest));
          }
        });

        responseStream.on('aborted', function handlerStreamAborted() {
          if (rejected) {
            return;
          }

          const err = new AxiosError(
            'maxContentLength size of ' + config.maxContentLength + ' exceeded',
            AxiosError.ERR_BAD_RESPONSE,
            config,
            lastRequest
          );
          responseStream.destroy(err);
          reject(err);
        });

        responseStream.on('error', function handleStreamError(err) {
          if (req.destroyed) return;
          reject(AxiosError.from(err, null, config, lastRequest));
        });

        responseStream.on('end', function handleStreamEnd() {
          try {
            let responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);
            if (responseType !== 'arraybuffer') {
              responseData = responseData.toString(responseEncoding);
              if (!responseEncoding || responseEncoding === 'utf8') {
                responseData = utils$1.stripBOM(responseData);
              }
            }
            response.data = responseData;
          } catch (err) {
            return reject(AxiosError.from(err, null, config, response.request, response));
          }
          settle(resolve, reject, response);
        });
      }

      emitter.once('abort', err => {
        if (!responseStream.destroyed) {
          responseStream.emit('error', err);
          responseStream.destroy();
        }
      });
    });

    emitter.once('abort', err => {
      reject(err);
      req.destroy(err);
    });

    // Handle errors
    req.on('error', function handleRequestError(err) {
      // @todo remove
      // if (req.aborted && err.code !== AxiosError.ERR_FR_TOO_MANY_REDIRECTS) return;
      reject(AxiosError.from(err, null, config, req));
    });

    // set tcp keep alive to prevent drop connection by peer
    req.on('socket', function handleRequestSocket(socket) {
      // default interval of sending ack packet is 1 minute
      socket.setKeepAlive(true, 1000 * 60);
    });

    // Handle request timeout
    if (config.timeout) {
      // This is forcing a int timeout to avoid problems if the `req` interface doesn't handle other types.
      const timeout = parseInt(config.timeout, 10);

      if (Number.isNaN(timeout)) {
        reject(new AxiosError(
          'error trying to parse `config.timeout` to int',
          AxiosError.ERR_BAD_OPTION_VALUE,
          config,
          req
        ));

        return;
      }

      // Sometime, the response will be very slow, and does not respond, the connect event will be block by event loop system.
      // And timer callback will be fired, and abort() will be invoked before connection, then get "socket hang up" and code ECONNRESET.
      // At this time, if we have a large number of request, nodejs will hang up some socket on background. and the number will up and up.
      // And then these socket which be hang up will devouring CPU little by little.
      // ClientRequest.setTimeout will be fired on the specify milliseconds, and can make sure that abort() will be fired after connect.
      req.setTimeout(timeout, function handleRequestTimeout() {
        if (isDone) return;
        let timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
        const transitional = config.transitional || transitionalDefaults;
        if (config.timeoutErrorMessage) {
          timeoutErrorMessage = config.timeoutErrorMessage;
        }
        reject(new AxiosError(
          timeoutErrorMessage,
          transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
          config,
          req
        ));
        abort();
      });
    }


    // Send the request
    if (utils$1.isStream(data)) {
      let ended = false;
      let errored = false;

      data.on('end', () => {
        ended = true;
      });

      data.once('error', err => {
        errored = true;
        req.destroy(err);
      });

      data.on('close', () => {
        if (!ended && !errored) {
          abort(new CanceledError('Request stream has been aborted', config, req));
        }
      });

      data.pipe(req);
    } else {
      req.end(data);
    }
  });
};

const cookies = platform.hasStandardBrowserEnv ?

  // Standard browser envs support document.cookie
  {
    write(name, value, expires, path, domain, secure) {
      const cookie = [name + '=' + encodeURIComponent(value)];

      utils$1.isNumber(expires) && cookie.push('expires=' + new Date(expires).toGMTString());

      utils$1.isString(path) && cookie.push('path=' + path);

      utils$1.isString(domain) && cookie.push('domain=' + domain);

      secure === true && cookie.push('secure');

      document.cookie = cookie.join('; ');
    },

    read(name) {
      const match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
      return (match ? decodeURIComponent(match[3]) : null);
    },

    remove(name) {
      this.write(name, '', Date.now() - 86400000);
    }
  }

  :

  // Non-standard browser env (web workers, react-native) lack needed support.
  {
    write() {},
    read() {
      return null;
    },
    remove() {}
  };

const isURLSameOrigin = platform.hasStandardBrowserEnv ?

// Standard browser envs have full support of the APIs needed to test
// whether the request URL is of the same origin as current location.
  (function standardBrowserEnv() {
    const msie = /(msie|trident)/i.test(navigator.userAgent);
    const urlParsingNode = document.createElement('a');
    let originURL;

    /**
    * Parse a URL to discover its components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
    function resolveURL(url) {
      let href = url;

      if (msie) {
        // IE needs attribute set twice to normalize properties
        urlParsingNode.setAttribute('href', href);
        href = urlParsingNode.href;
      }

      urlParsingNode.setAttribute('href', href);

      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
        host: urlParsingNode.host,
        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
        hostname: urlParsingNode.hostname,
        port: urlParsingNode.port,
        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
          urlParsingNode.pathname :
          '/' + urlParsingNode.pathname
      };
    }

    originURL = resolveURL(window.location.href);

    /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
    return function isURLSameOrigin(requestURL) {
      const parsed = (utils$1.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
      return (parsed.protocol === originURL.protocol &&
          parsed.host === originURL.host);
    };
  })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
  (function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
      return true;
    };
  })();

function progressEventReducer(listener, isDownloadStream) {
  let bytesNotified = 0;
  const _speedometer = speedometer(50, 250);

  return e => {
    const loaded = e.loaded;
    const total = e.lengthComputable ? e.total : undefined;
    const progressBytes = loaded - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange = loaded <= total;

    bytesNotified = loaded;

    const data = {
      loaded,
      total,
      progress: total ? (loaded / total) : undefined,
      bytes: progressBytes,
      rate: rate ? rate : undefined,
      estimated: rate && total && inRange ? (total - loaded) / rate : undefined,
      event: e
    };

    data[isDownloadStream ? 'download' : 'upload'] = true;

    listener(data);
  };
}

const isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';

const xhrAdapter = isXHRAdapterSupported && function (config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    let requestData = config.data;
    const requestHeaders = AxiosHeaders$1.from(config.headers).normalize();
    let {responseType, withXSRFToken} = config;
    let onCanceled;
    function done() {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(onCanceled);
      }

      if (config.signal) {
        config.signal.removeEventListener('abort', onCanceled);
      }
    }

    let contentType;

    if (utils$1.isFormData(requestData)) {
      if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {
        requestHeaders.setContentType(false); // Let the browser set it
      } else if ((contentType = requestHeaders.getContentType()) !== false) {
        // fix semicolon duplication issue for ReactNative FormData implementation
        const [type, ...tokens] = contentType ? contentType.split(';').map(token => token.trim()).filter(Boolean) : [];
        requestHeaders.setContentType([type || 'multipart/form-data', ...tokens].join('; '));
      }
    }

    let request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      const username = config.auth.username || '';
      const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
      requestHeaders.set('Authorization', 'Basic ' + btoa(username + ':' + password));
    }

    const fullPath = buildFullPath(config.baseURL, config.url);

    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    function onloadend() {
      if (!request) {
        return;
      }
      // Prepare the response
      const responseHeaders = AxiosHeaders$1.from(
        'getAllResponseHeaders' in request && request.getAllResponseHeaders()
      );
      const responseData = !responseType || responseType === 'text' || responseType === 'json' ?
        request.responseText : request.response;
      const response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config,
        request
      };

      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);

      // Clean up request
      request = null;
    }

    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }

        // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        }
        // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'
        setTimeout(onloadend);
      };
    }

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(new AxiosError('Request aborted', AxiosError.ECONNABORTED, config, request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      let timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
      const transitional = config.transitional || transitionalDefaults;
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(new AxiosError(
        timeoutErrorMessage,
        transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
        config,
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if(platform.hasStandardBrowserEnv) {
      withXSRFToken && utils$1.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(config));

      if (withXSRFToken || (withXSRFToken !== false && isURLSameOrigin(fullPath))) {
        // Add xsrf header
        const xsrfValue = config.xsrfHeaderName && config.xsrfCookieName && cookies.read(config.xsrfCookieName);

        if (xsrfValue) {
          requestHeaders.set(config.xsrfHeaderName, xsrfValue);
        }
      }
    }

    // Remove Content-Type if data is undefined
    requestData === undefined && requestHeaders.setContentType(null);

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils$1.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
        request.setRequestHeader(key, val);
      });
    }

    // Add withCredentials to request if needed
    if (!utils$1.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }

    // Add responseType to request if needed
    if (responseType && responseType !== 'json') {
      request.responseType = config.responseType;
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', progressEventReducer(config.onDownloadProgress, true));
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', progressEventReducer(config.onUploadProgress));
    }

    if (config.cancelToken || config.signal) {
      // Handle cancellation
      // eslint-disable-next-line func-names
      onCanceled = cancel => {
        if (!request) {
          return;
        }
        reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);
        request.abort();
        request = null;
      };

      config.cancelToken && config.cancelToken.subscribe(onCanceled);
      if (config.signal) {
        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
      }
    }

    const protocol = parseProtocol(fullPath);

    if (protocol && platform.protocols.indexOf(protocol) === -1) {
      reject(new AxiosError('Unsupported protocol ' + protocol + ':', AxiosError.ERR_BAD_REQUEST, config));
      return;
    }


    // Send the request
    request.send(requestData || null);
  });
};

const knownAdapters = {
  http: httpAdapter,
  xhr: xhrAdapter
};

utils$1.forEach(knownAdapters, (fn, value) => {
  if (fn) {
    try {
      Object.defineProperty(fn, 'name', {value});
    } catch (e) {
      // eslint-disable-next-line no-empty
    }
    Object.defineProperty(fn, 'adapterName', {value});
  }
});

const renderReason = (reason) => `- ${reason}`;

const isResolvedHandle = (adapter) => utils$1.isFunction(adapter) || adapter === null || adapter === false;

const adapters = {
  getAdapter: (adapters) => {
    adapters = utils$1.isArray(adapters) ? adapters : [adapters];

    const {length} = adapters;
    let nameOrAdapter;
    let adapter;

    const rejectedReasons = {};

    for (let i = 0; i < length; i++) {
      nameOrAdapter = adapters[i];
      let id;

      adapter = nameOrAdapter;

      if (!isResolvedHandle(nameOrAdapter)) {
        adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];

        if (adapter === undefined) {
          throw new AxiosError(`Unknown adapter '${id}'`);
        }
      }

      if (adapter) {
        break;
      }

      rejectedReasons[id || '#' + i] = adapter;
    }

    if (!adapter) {

      const reasons = Object.entries(rejectedReasons)
        .map(([id, state]) => `adapter ${id} ` +
          (state === false ? 'is not supported by the environment' : 'is not available in the build')
        );

      let s = length ?
        (reasons.length > 1 ? 'since :\n' + reasons.map(renderReason).join('\n') : ' ' + renderReason(reasons[0])) :
        'as no adapter specified';

      throw new AxiosError(
        `There is no suitable adapter to dispatch the request ` + s,
        'ERR_NOT_SUPPORT'
      );
    }

    return adapter;
  },
  adapters: knownAdapters
};

/**
 * Throws a `CanceledError` if cancellation has been requested.
 *
 * @param {Object} config The config that is to be used for the request
 *
 * @returns {void}
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }

  if (config.signal && config.signal.aborted) {
    throw new CanceledError(null, config);
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 *
 * @returns {Promise} The Promise to be fulfilled
 */
function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  config.headers = AxiosHeaders$1.from(config.headers);

  // Transform request data
  config.data = transformData.call(
    config,
    config.transformRequest
  );

  if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {
    config.headers.setContentType('application/x-www-form-urlencoded', false);
  }

  const adapter = adapters.getAdapter(config.adapter || defaults$1.adapter);

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData.call(
      config,
      config.transformResponse,
      response
    );

    response.headers = AxiosHeaders$1.from(response.headers);

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          config.transformResponse,
          reason.response
        );
        reason.response.headers = AxiosHeaders$1.from(reason.response.headers);
      }
    }

    return Promise.reject(reason);
  });
}

const headersToObject = (thing) => thing instanceof AxiosHeaders$1 ? thing.toJSON() : thing;

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 *
 * @returns {Object} New object resulting from merging config2 to config1
 */
function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  const config = {};

  function getMergedValue(target, source, caseless) {
    if (utils$1.isPlainObject(target) && utils$1.isPlainObject(source)) {
      return utils$1.merge.call({caseless}, target, source);
    } else if (utils$1.isPlainObject(source)) {
      return utils$1.merge({}, source);
    } else if (utils$1.isArray(source)) {
      return source.slice();
    }
    return source;
  }

  // eslint-disable-next-line consistent-return
  function mergeDeepProperties(a, b, caseless) {
    if (!utils$1.isUndefined(b)) {
      return getMergedValue(a, b, caseless);
    } else if (!utils$1.isUndefined(a)) {
      return getMergedValue(undefined, a, caseless);
    }
  }

  // eslint-disable-next-line consistent-return
  function valueFromConfig2(a, b) {
    if (!utils$1.isUndefined(b)) {
      return getMergedValue(undefined, b);
    }
  }

  // eslint-disable-next-line consistent-return
  function defaultToConfig2(a, b) {
    if (!utils$1.isUndefined(b)) {
      return getMergedValue(undefined, b);
    } else if (!utils$1.isUndefined(a)) {
      return getMergedValue(undefined, a);
    }
  }

  // eslint-disable-next-line consistent-return
  function mergeDirectKeys(a, b, prop) {
    if (prop in config2) {
      return getMergedValue(a, b);
    } else if (prop in config1) {
      return getMergedValue(undefined, a);
    }
  }

  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    withXSRFToken: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)
  };

  utils$1.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
    const merge = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge(config1[prop], config2[prop], prop);
    (utils$1.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
  });

  return config;
}

const validators$1 = {};

// eslint-disable-next-line func-names
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {
  validators$1[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});

const deprecatedWarnings = {};

/**
 * Transitional option validator
 *
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 *
 * @returns {function}
 */
validators$1.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  }

  // eslint-disable-next-line func-names
  return (value, opt, opts) => {
    if (validator === false) {
      throw new AxiosError(
        formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),
        AxiosError.ERR_DEPRECATED
      );
    }

    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      // eslint-disable-next-line no-console
      console.warn(
        formatMessage(
          opt,
          ' has been deprecated since v' + version + ' and will be removed in the near future'
        )
      );
    }

    return validator ? validator(value, opt, opts) : true;
  };
};

/**
 * Assert object's properties type
 *
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 *
 * @returns {object}
 */

function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new AxiosError('options must be an object', AxiosError.ERR_BAD_OPTION_VALUE);
  }
  const keys = Object.keys(options);
  let i = keys.length;
  while (i-- > 0) {
    const opt = keys[i];
    const validator = schema[opt];
    if (validator) {
      const value = options[opt];
      const result = value === undefined || validator(value, opt, options);
      if (result !== true) {
        throw new AxiosError('option ' + opt + ' must be ' + result, AxiosError.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new AxiosError('Unknown option ' + opt, AxiosError.ERR_BAD_OPTION);
    }
  }
}

const validator = {
  assertOptions,
  validators: validators$1
};

const validators = validator.validators;

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 *
 * @return {Axios} A new instance of Axios
 */
class Axios {
  constructor(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new InterceptorManager$1(),
      response: new InterceptorManager$1()
    };
  }

  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  async request(configOrUrl, config) {
    try {
      return await this._request(configOrUrl, config);
    } catch (err) {
      if (err instanceof Error) {
        let dummy;

        Error.captureStackTrace ? Error.captureStackTrace(dummy = {}) : (dummy = new Error());

        // slice off the Error: ... line
        const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, '') : '';

        if (!err.stack) {
          err.stack = stack;
          // match without the 2 top stack lines
        } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ''))) {
          err.stack += '\n' + stack;
        }
      }

      throw err;
    }
  }

  _request(configOrUrl, config) {
    /*eslint no-param-reassign:0*/
    // Allow for axios('example/url'[, config]) a la fetch API
    if (typeof configOrUrl === 'string') {
      config = config || {};
      config.url = configOrUrl;
    } else {
      config = configOrUrl || {};
    }

    config = mergeConfig(this.defaults, config);

    const {transitional, paramsSerializer, headers} = config;

    if (transitional !== undefined) {
      validator.assertOptions(transitional, {
        silentJSONParsing: validators.transitional(validators.boolean),
        forcedJSONParsing: validators.transitional(validators.boolean),
        clarifyTimeoutError: validators.transitional(validators.boolean)
      }, false);
    }

    if (paramsSerializer != null) {
      if (utils$1.isFunction(paramsSerializer)) {
        config.paramsSerializer = {
          serialize: paramsSerializer
        };
      } else {
        validator.assertOptions(paramsSerializer, {
          encode: validators.function,
          serialize: validators.function
        }, true);
      }
    }

    // Set config.method
    config.method = (config.method || this.defaults.method || 'get').toLowerCase();

    // Flatten headers
    let contextHeaders = headers && utils$1.merge(
      headers.common,
      headers[config.method]
    );

    headers && utils$1.forEach(
      ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
      (method) => {
        delete headers[method];
      }
    );

    config.headers = AxiosHeaders$1.concat(contextHeaders, headers);

    // filter out skipped interceptors
    const requestInterceptorChain = [];
    let synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
        return;
      }

      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });

    const responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });

    let promise;
    let i = 0;
    let len;

    if (!synchronousRequestInterceptors) {
      const chain = [dispatchRequest.bind(this), undefined];
      chain.unshift.apply(chain, requestInterceptorChain);
      chain.push.apply(chain, responseInterceptorChain);
      len = chain.length;

      promise = Promise.resolve(config);

      while (i < len) {
        promise = promise.then(chain[i++], chain[i++]);
      }

      return promise;
    }

    len = requestInterceptorChain.length;

    let newConfig = config;

    i = 0;

    while (i < len) {
      const onFulfilled = requestInterceptorChain[i++];
      const onRejected = requestInterceptorChain[i++];
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected.call(this, error);
        break;
      }
    }

    try {
      promise = dispatchRequest.call(this, newConfig);
    } catch (error) {
      return Promise.reject(error);
    }

    i = 0;
    len = responseInterceptorChain.length;

    while (i < len) {
      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
    }

    return promise;
  }

  getUri(config) {
    config = mergeConfig(this.defaults, config);
    const fullPath = buildFullPath(config.baseURL, config.url);
    return buildURL(fullPath, config.params, config.paramsSerializer);
  }
}

// Provide aliases for supported request methods
utils$1.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method,
      url,
      data: (config || {}).data
    }));
  };
});

utils$1.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/

  function generateHTTPMethod(isForm) {
    return function httpMethod(url, data, config) {
      return this.request(mergeConfig(config || {}, {
        method,
        headers: isForm ? {
          'Content-Type': 'multipart/form-data'
        } : {},
        url,
        data
      }));
    };
  }

  Axios.prototype[method] = generateHTTPMethod();

  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);
});

const Axios$1 = Axios;

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @param {Function} executor The executor function.
 *
 * @returns {CancelToken}
 */
class CancelToken {
  constructor(executor) {
    if (typeof executor !== 'function') {
      throw new TypeError('executor must be a function.');
    }

    let resolvePromise;

    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });

    const token = this;

    // eslint-disable-next-line func-names
    this.promise.then(cancel => {
      if (!token._listeners) return;

      let i = token._listeners.length;

      while (i-- > 0) {
        token._listeners[i](cancel);
      }
      token._listeners = null;
    });

    // eslint-disable-next-line func-names
    this.promise.then = onfulfilled => {
      let _resolve;
      // eslint-disable-next-line func-names
      const promise = new Promise(resolve => {
        token.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);

      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };

      return promise;
    };

    executor(function cancel(message, config, request) {
      if (token.reason) {
        // Cancellation has already been requested
        return;
      }

      token.reason = new CanceledError(message, config, request);
      resolvePromise(token.reason);
    });
  }

  /**
   * Throws a `CanceledError` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  }

  /**
   * Subscribe to the cancel signal
   */

  subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }

    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  }

  /**
   * Unsubscribe from the cancel signal
   */

  unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    const index = this._listeners.indexOf(listener);
    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  }

  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  static source() {
    let cancel;
    const token = new CancelToken(function executor(c) {
      cancel = c;
    });
    return {
      token,
      cancel
    };
  }
}

const CancelToken$1 = CancelToken;

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 *
 * @returns {Function}
 */
function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
}

/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 *
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
function isAxiosError(payload) {
  return utils$1.isObject(payload) && (payload.isAxiosError === true);
}

const HttpStatusCode = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511,
};

Object.entries(HttpStatusCode).forEach(([key, value]) => {
  HttpStatusCode[value] = key;
});

const HttpStatusCode$1 = HttpStatusCode;

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 *
 * @returns {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  const context = new Axios$1(defaultConfig);
  const instance = bind(Axios$1.prototype.request, context);

  // Copy axios.prototype to instance
  utils$1.extend(instance, Axios$1.prototype, context, {allOwnKeys: true});

  // Copy context to instance
  utils$1.extend(instance, context, null, {allOwnKeys: true});

  // Factory for creating new instances
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };

  return instance;
}

// Create the default instance to be exported
const axios$1 = createInstance(defaults$1);

// Expose Axios class to allow class inheritance
axios$1.Axios = Axios$1;

// Expose Cancel & CancelToken
axios$1.CanceledError = CanceledError;
axios$1.CancelToken = CancelToken$1;
axios$1.isCancel = isCancel;
axios$1.VERSION = VERSION;
axios$1.toFormData = toFormData;

// Expose AxiosError class
axios$1.AxiosError = AxiosError;

// alias for CanceledError for backward compatibility
axios$1.Cancel = axios$1.CanceledError;

// Expose all/spread
axios$1.all = function all(promises) {
  return Promise.all(promises);
};

axios$1.spread = spread;

// Expose isAxiosError
axios$1.isAxiosError = isAxiosError;

// Expose mergeConfig
axios$1.mergeConfig = mergeConfig;

axios$1.AxiosHeaders = AxiosHeaders$1;

axios$1.formToJSON = thing => formDataToJSON(utils$1.isHTMLForm(thing) ? new FormData(thing) : thing);

axios$1.getAdapter = adapters.getAdapter;

axios$1.HttpStatusCode = HttpStatusCode$1;

axios$1.default = axios$1;

var axios_1 = axios$1;

const {ethers: ethers$3} = lib_commonjs$1;
const {BlobEIP4844Transaction} = cjs$4;
const {Common} = cjs$1;
const {loadKZG} = cjs;

const defaultAxios = axios_1;
const axios = defaultAxios.create({
    timeout: 50000,
});

function sleep(ms) {
    return new Promise((resolve) => {
        setTimeout(resolve, ms);
    });
}

function parseBigintValue(value) {
    if (typeof value == 'bigint') {
        return '0x' + value.toString(16);
    }
    if (typeof value == 'object') {
        const {_hex} = value;
        const c = BigInt(_hex);
        return '0x' + c.toString(16);
    }
    return value;
}

function padHex(hex) {
    if (typeof (hex) === "string" && !hex.startsWith("0x")) {
        return "0x" + hex;
    }
    return hex;
}

function computeVersionedHash(commitment, blobCommitmentVersion) {
    const computedVersionedHash = new Uint8Array(32);
    computedVersionedHash.set([blobCommitmentVersion], 0);
    const hash = ethers$3.getBytes(ethers$3.sha256(commitment));
    computedVersionedHash.set(hash.subarray(1), 1);
    return computedVersionedHash;
}

function commitmentsToVersionedHashes(commitment) {
    return computeVersionedHash(commitment, 0x01);
}

const MIN_BLOB_GASPRICE = 1n;
const BLOB_GASPRICE_UPDATE_FRACTION = 3338477n;

function fakeExponential(factor, numerator, denominator) {
    let i = 1n;
    let output = 0n;
    let numerator_accum = factor * denominator;
    while (numerator_accum > 0n) {
        output += numerator_accum;
        numerator_accum = (numerator_accum * numerator) / (denominator * i);
        i++;
    }
    return output / denominator;
}

let BlobUploader$2 = class BlobUploader {
    #kzg;
    #jsonRpc;
    #privateKey;
    #provider;
    #wallet;
    #chainId;

    constructor(rpc, pk) {
        this.#jsonRpc = rpc;
        this.#privateKey = padHex(pk);
        this.#provider = new ethers$3.JsonRpcProvider(rpc);
        this.#wallet = new ethers$3.Wallet(this.#privateKey, this.#provider);
    }

    async #getKzg() {
        if (!this.#kzg) {
            this.#kzg = await loadKZG();
        }
        return this.#kzg;
    }

    async sendRpcCall(method, parameters) {
        try {
            let response = await axios({
                method: "POST",
                url: this.#jsonRpc,
                data: {
                    jsonrpc: "2.0",
                    method: method,
                    params: parameters,
                    id: 67
                },
            });
            if(response.data.error) {
                console.log("Response Error:", response.data.error);
                return null;
            }
            let returnedValue = response.data.result;
            if (returnedValue === "0x") {
                return null;
            }
            return returnedValue;
        } catch (error) {
            console.log('send error', error);
            return null;
        }
    }

    async sendRawTransaction(param) {
        return await this.sendRpcCall("eth_sendRawTransaction", [param]);
    }

    async getChainId() {
        if (this.#chainId == null) {
            this.#chainId = await this.sendRpcCall("eth_chainId", []);
        }
        return this.#chainId;
    }

    async getNonce() {
        return await this.#wallet.getNonce();
    }

    async getFee() {
        return await this.#provider.getFeeData();
    }

    async getBlobGasPrice() {
        // get current block
        const block = await this.#provider.getBlock("latest");
        const result = await this.sendRpcCall("eth_getBlockByNumber", [
            parseBigintValue(BigInt(block.number)), true
        ]);
        const excessBlobGas = BigInt(result.excessBlobGas);
        return fakeExponential(MIN_BLOB_GASPRICE, excessBlobGas ,BLOB_GASPRICE_UPDATE_FRACTION);
    }

    async estimateGas(params) {
        const limit = await this.sendRpcCall("eth_estimateGas", [params]);
        if (limit) {
            return BigInt(limit);
        }
        return null;
    }

    async sendNormalTx(tx) {
        let {chainId, nonce, to, value, data, maxPriorityFeePerGas, maxFeePerGas, gasLimit} = tx;
        const txResponse = await this.#wallet.sendTransaction({
            chainId,
            nonce,
            to,
            value,
            data,
            maxPriorityFeePerGas,
            maxFeePerGas,
            gasLimit,
        });
        return txResponse.hash;
    }

    async sendTx(tx, blobs) {
        if (!blobs) {
            return this.sendNormalTx(tx);
        }

        // blobs
        const kzg = await this.#getKzg();
        const commitments = [];
        const proofs = [];
        const versionedHashes = [];
        const hexHashes = [];
        for (let i = 0; i < blobs.length; i++) {
            commitments.push(kzg.blobToKzgCommitment(blobs[i]));
            proofs.push(kzg.computeBlobKzgProof(blobs[i], commitments[i]));
            const hash = commitmentsToVersionedHashes(commitments[i]);
            versionedHashes.push(hash);
            hexHashes.push(ethers$3.hexlify(hash));
        }

        const chain = await this.getChainId();
        let {chainId, nonce, to, value, data, maxPriorityFeePerGas, maxFeePerGas, gasLimit, maxFeePerBlobGas} = tx;
        if (chainId == null) {
            chainId = chain;
        } else {
            chainId = BigInt(chainId);
            if (chainId !== BigInt(chain)) {
                throw Error('invalid network id')
            }
        }

        if (nonce == null) {
            nonce = await this.getNonce();
        }

        value = value == null ? '0x0' : BigInt(value);

        if (gasLimit == null) {
            const hexValue = parseBigintValue(value);
            const params = {
                from: this.#wallet.address,
                to,
                data,
                value: hexValue,
                blobVersionedHashes: hexHashes,
            };
            gasLimit = await this.estimateGas(params);
            if (gasLimit == null) {
                throw Error('estimateGas: execution reverted')
            }
        } else {
            gasLimit = BigInt(gasLimit);
        }

        if (maxFeePerGas == null) {
            const fee = await this.getFee();
            maxPriorityFeePerGas = fee.maxPriorityFeePerGas * 6n / 5n;
            maxFeePerGas = fee.maxFeePerGas * 6n / 5n;
        } else {
            maxFeePerGas = BigInt(maxFeePerGas);
            maxPriorityFeePerGas = BigInt(maxPriorityFeePerGas);
        }

        if (maxFeePerBlobGas == null) {
            maxFeePerBlobGas = await this.getBlobGasPrice();
            maxFeePerBlobGas = maxFeePerBlobGas * 6n / 5n;
        } else {
            maxFeePerBlobGas = BigInt(maxFeePerBlobGas);
        }


        // send
        const common = Common.custom(
            {
                name: 'custom-chain',
                networkId: chainId,
                chainId: chainId,
            },
            {
                baseChain: 1,
                eips: [1559, 3860, 4844]
            }
        );
        const unsignedTx = new BlobEIP4844Transaction(
            {
                chainId,
                nonce,
                to,
                value,
                data,
                maxPriorityFeePerGas,
                maxFeePerGas,
                gasLimit,
                maxFeePerBlobGas,
                blobVersionedHashes: versionedHashes,
                blobs,
                kzgCommitments: commitments,
                kzgProofs: proofs,
            },
            {common}
        );

        const pk = ethers$3.getBytes(this.#privateKey);
        const signedTx = unsignedTx.sign(pk);
        const rawData = signedTx.serializeNetworkWrapper();

        const hex = Buffer.from(rawData).toString('hex');
        return await this.sendRawTransaction('0x' + hex);
    }

    async isTransactionMined(transactionHash) {
        const txReceipt = await this.#provider.getTransactionReceipt(transactionHash);
        if (txReceipt && txReceipt.blockNumber) {
            return txReceipt;
        }
    }

    async getTxReceipt(transactionHash) {
        let txReceipt;
        while (!txReceipt) {
            txReceipt = await this.isTransactionMined(transactionHash);
            if (txReceipt) break;
            await sleep(5000);
        }
        return txReceipt;
    }

    async getBlobHash(blob) {
        const kzg = await this.#getKzg();
        const commit = kzg.blobToKzgCommitment(blob);
        const localHash = commitmentsToVersionedHashes(commit);
        const hash = new Uint8Array(32);
        hash.set(localHash.subarray(0, 32 - 8));
        return ethers$3.hexlify(hash);
    }
};

var uploader = {
    BlobUploader: BlobUploader$2
};

const {ethers: ethers$2} = lib_commonjs$1;

const BlobTxBytesPerFieldElement         = 32;      // Size in bytes of a field element
const BlobTxFieldElementsPerBlob         = 4096;
const BLOB_SIZE$1 = BlobTxBytesPerFieldElement * BlobTxFieldElementsPerBlob;
const BLOB_DATA_SIZE$2 = 31 * BlobTxFieldElementsPerBlob;

function EncodeBlobs$2(data) {
    const len = data.length;
    if (len === 0) {
        throw Error('invalid blob data')
    }

    let blobIndex = 0;
    let fieldIndex = -1;

    const blobs = [new Uint8Array(BLOB_SIZE$1).fill(0)];
    for (let i = 0; i < len; i += 31) {
        fieldIndex++;
        if (fieldIndex === BlobTxFieldElementsPerBlob) {
            blobs.push(new Uint8Array(BLOB_SIZE$1).fill(0));
            blobIndex++;
            fieldIndex = 0;
        }
        let max = i + 31;
        if (max > len) {
            max = len;
        }
        blobs[blobIndex].set(data.subarray(i, max), fieldIndex * 32 + 1);
    }
    return blobs;
}

function DecodeBlob$1(blob) {
    if (!blob) {
        throw Error('invalid blob data')
    }

    blob = ethers$2.getBytes(blob);
    if (blob.length < BLOB_SIZE$1) {
        const newBlob = new Uint8Array(BLOB_SIZE$1).fill(0);
        newBlob.set(blob);
        blob = newBlob;
    }

    let data = [];
    let j = 0;
    for (let i = 0; i < BlobTxFieldElementsPerBlob; i++) {
        const chunk = blob.subarray(j + 1, j + 32);
        data = [...data, ...chunk];
        j += 32;
    }
    let i = data.length - 1;
    for (; i >= 0; i--) {
        if (data[i] !== 0x00) {
            break
        }
    }
    const newData = data.slice(0, i + 1);
    return newData;
}

function DecodeBlobs$1(blobs) {
    if (!blobs) {
        throw Error('invalid blobs')
    }

    blobs = ethers$2.getBytes(blobs);
    const len = blobs.length;
    if (len === 0) {
        throw Error('invalid blobs')
    }

    let buf = [];
    for (let i = 0; i < len; i += BLOB_SIZE$1) {
        let max = i + BLOB_SIZE$1;
        if (max > len) {
            max = len;
        }
        const blob = blobs.subarray(i, max);
        const blobBuf = DecodeBlob$1(blob);
        buf = [...buf, ...blobBuf];
    }
    return new Buffer(buf);
}

var blobs = {
    EncodeBlobs: EncodeBlobs$2,
    DecodeBlobs: DecodeBlobs$1,
    DecodeBlob: DecodeBlob$1,
    BLOB_SIZE: BLOB_SIZE$1,
    BLOB_DATA_SIZE: BLOB_DATA_SIZE$2
};

const {ethers: ethers$1, Contract} = lib_commonjs$1;

const contractABI = [
    'function countChunks(bytes memory name) external view returns (uint256)',
    'function readChunk(bytes memory name, uint256 chunkId) external view returns (bytes memory, bool)'
];

const stringToHex$1 = (s) => ethers$1.hexlify(ethers$1.toUtf8Bytes(s));

async function readChunk(ethStorageRpc, ethStorageAddress, hexName, index) {
    let result;
    try {
        const provider = new ethers$1.JsonRpcProvider(ethStorageRpc);
        const contract = new Contract(ethStorageAddress, contractABI, provider);
        result = await contract.readChunk(hexName, index);
    } catch (e) {
        const provider = new ethers$1.JsonRpcProvider(ethStorageRpc);
        const contract = new Contract(ethStorageAddress, contractABI, provider);
        result = await contract.readChunk(hexName, index);
    }
    return ethers$1.getBytes(result[0]);
}

async function DownloadFile$2(ethStorageRpc, ethStorageAddress, fileName) {
    const hexName = stringToHex$1(fileName);

    const provider = new ethers$1.JsonRpcProvider(ethStorageRpc);
    const contract = new Contract(ethStorageAddress, contractABI, provider);
    const blobCount = await contract.countChunks(hexName);

    let buff = [];
    for (let i = 0; i < blobCount; i++) {
        const chunk = await readChunk(ethStorageRpc, ethStorageAddress, hexName, i);
        buff = [...buff, ...chunk];
    }
    return new Buffer(buff);
}

var download = {
    DownloadFile: DownloadFile$2
};

const fs = require$$6;
const {ethers} = lib_commonjs$1;
const {BlobUploader: BlobUploader$1} = uploader;
const {EncodeBlobs: EncodeBlobs$1, BLOB_DATA_SIZE: BLOB_DATA_SIZE$1} = blobs;
const {DownloadFile: DownloadFile$1} = download;

const flatDirectoryBlobAbi = [
    "constructor(uint8 slotLimit, uint32 maxChunkSize, address storageAddress) public",
    "function setDefault(bytes memory _defaultFile) public",
    "function upfrontPayment() external view returns (uint256)",
    "function getChunkHash(bytes memory name, uint256 chunkId) public view returns (bytes32)",
    "function writeChunks(bytes memory name, uint256[] memory chunkIds, uint256[] memory sizes) external payable",
    "function refund() public",
    "function remove(bytes memory name) external returns (uint256)",
    "function countChunks(bytes memory name) external view returns (uint256)",
    "function isSupportBlob() view public returns (bool)"
];

const REMOVE_FAIL = -1;
const REMOVE_NORMAL = 0;
const REMOVE_SUCCESS = 1;

const MAX_BLOB_COUNT = 3;

const SEPOLIA_ETH_STORAGE = "0x804C520d3c084C805E37A35E90057Ac32831F96f";
const ES_TEST_RPC = "http://65.108.236.27:9540";

const stringToHex = (s) => ethers.hexlify(ethers.toUtf8Bytes(s));

const getFileChunk = (path, fileSize, start, end) => {
    end = end > fileSize ? fileSize : end;
    const length = end - start;
    const buf = new Buffer(length);
    const fd = fs.openSync(path, 'r');
    fs.readSync(fd, buf, 0, length, start);
    fs.closeSync(fd);
    return buf;
};

let EthStorage$1 = class EthStorage {
    #wallet;
    #blobUploader;
    #contractAddr;

    constructor(rpc, privateKey, contractAddr = null) {
        const provider = new ethers.JsonRpcProvider(rpc);
        this.#wallet = new ethers.Wallet(privateKey, provider);
        this.#blobUploader = new BlobUploader$1(rpc, privateKey);
        this.#contractAddr = contractAddr;
    }

    async #deploy(ethStorage) {
        const contractByteCode = '';
        const factory = new ethers.ContractFactory(flatDirectoryBlobAbi, contractByteCode, this.#wallet);
        try {
            const contract = await factory.deploy(0, BLOB_DATA_SIZE$1, ethStorage, {gasLimit: 3800000});
            await contract.waitForDeployment();

            this.#contractAddr = await contract.getAddress();
            console.log(`FlatDirectory Address: ${this.#contractAddr}`);
            return this.#contractAddr;
        } catch (e) {
            console.error(`ERROR: deploy flat directory failed!`, e.message);
            return null;
        }
    }

    async deployDirectory(ethStorage) {
        return this.#deploy(ethStorage);
    }

    async deployNormalDirectory() {
        return this.deployDirectory("0x0000000000000000000000000000000000000000");
    }

    async deploySepoliaDirectory() {
        return this.deployDirectory(SEPOLIA_ETH_STORAGE);
    }

    async setDefaultFile(filename) {
        if (!this.#contractAddr) {
            console.error(`ERROR: flat directory not deployed!`);
            return;
        }

        const hexName = filename ? stringToHex(filename) : "0x";
        const fileContract = new ethers.Contract(this.#contractAddr, flatDirectoryBlobAbi, this.#wallet);
        try {
            const tx = await fileContract.setDefault(hexName);
            console.log(`Transaction Id: ${tx.hash}`);
            const txReceipt = await tx.wait();
            if (txReceipt.status) {
                console.log(`Set succeeds`);
            } else {
                console.error(`ERROR: set failed!`);
            }
        } catch (e) {
            console.error(`ERROR: set failed!`, e.message);
        }
    }

    async refund() {
        if (!this.#contractAddr) {
            console.error(`ERROR: flat directory not deployed!`);
            return;
        }

        const fileContract = new ethers.Contract(this.#contractAddr, flatDirectoryBlobAbi, this.#wallet);
        try {
            const tx = await fileContract.refund();
            console.log(`Transaction Id: ${tx.hash}`);
            const txReceipt = await tx.wait();
            if (txReceipt.status) {
                console.log(`Refund succeeds`);
            } else {
                console.error(`ERROR: transaction failed!`);
            }
        } catch (e) {
            console.error(`ERROR: transaction failed!`, e.message);
        }
    }

    async remove(fileName) {
        const fileContract = new ethers.Contract(this.#contractAddr, flatDirectoryBlobAbi, this.#wallet);
        try {
            const tx = await fileContract.remove(stringToHex(fileName));
            console.log(`Transaction Id: ${tx.hash}`);
            const receipt = await tx.wait();
            if (receipt.status) {
                console.log(`Remove file: ${fileName} succeeded`);
                return true;
            } else {
                console.error(`ERROR: Failed to remove file: ${fileName}`);
            }
        } catch (e) {
            console.error(`ERROR: Failed to remove file: ${fileName}`, e.message);
        }
        return false;
    }

    async #clearOldFile(fileContract, fileName, hexName, chunkLength) {
        let oldChunkLength = await fileContract.countChunks(hexName);
        if (oldChunkLength > chunkLength) {
            // remove
            const v = await this.remove(fileName);
            if (v) {
                return REMOVE_SUCCESS;
            } else {
                return REMOVE_FAIL;
            }
        } else if (oldChunkLength === 0) {
            return REMOVE_SUCCESS;
        } else {
            return REMOVE_NORMAL;
        }
    }

    async upload(filePath) {
        if (!this.#contractAddr) {
            console.error(`ERROR: flat directory not deployed!`);
            return;
        }
        const fileStat = fs.statSync(filePath);
        if (!fileStat.isFile()) {
            console.error(`ERROR: only upload file!`);
            return;
        }

        const fileContract = new ethers.Contract(this.#contractAddr, flatDirectoryBlobAbi, this.#wallet);
        const isSupport = await fileContract.isSupportBlob();
        if (!isSupport) {
            console.error(`ERROR: The current contract does not support blob upload!`);
            return;
        }

        const fileSize = fileStat.size;
        const fileName = filePath.substring(filePath.lastIndexOf("/") + 1);
        const hexName = stringToHex(fileName);

        const blobDataSize = BLOB_DATA_SIZE$1;
        const blobLength = Math.ceil(fileSize / blobDataSize);

        const clearState = await this.#clearOldFile(fileContract, fileName, hexName, blobLength);
        if (clearState === REMOVE_FAIL) {
            return {
                totalChunkCount: blobLength,
                successIndex: 0,
                uploadSuccessCount: 0,
                uploadFileSize: 0,
                totalCost: 0,
            };
        }

        const cost = await fileContract.upfrontPayment();
        let successIndex = 0;
        let uploadCount = 0;
        let uploadFileSize = 0;
        let totalCost = 0n;
        for (let i = 0; i < blobLength; i += MAX_BLOB_COUNT) {
            const content = getFileChunk(filePath, fileSize, i * blobDataSize, (i + MAX_BLOB_COUNT) * blobDataSize);
            const blobs = EncodeBlobs$1(content);

            const blobArr = [];
            const indexArr = [];
            const lenArr = [];
            for (let j = 0; j < blobs.length; j++) {
                blobArr.push(blobs[j]);
                indexArr.push(i + j);
                if (i + j === blobLength - 1) {
                    lenArr.push(fileSize - blobDataSize * (blobLength - 1));
                } else {
                    lenArr.push(blobDataSize);
                }
            }

            // check
            if (clearState === REMOVE_NORMAL) {
                let hasChange = false;
                for (let j = 0; j < blobArr.length; j++) {
                    const dataHash = await fileContract.getChunkHash(hexName, indexArr[j]);
                    const localHash = await this.#blobUploader.getBlobHash(blobArr[j]);
                    if (dataHash !== localHash) {
                        hasChange = true;
                        break;
                    }
                }
                if (!hasChange) {
                    successIndex += indexArr.length;
                    console.log(`File ${fileName} chunkId: ${indexArr}: The data is not changed.`);
                    continue;
                }
            }

            // send
            let success = false;
            try {
                const value = cost * BigInt(blobArr.length);
                const tx = await fileContract.writeChunks.populateTransaction(hexName, indexArr, lenArr, {
                    value
                });
                const hash = await this.#blobUploader.sendTx(tx, blobArr);
                console.log(`Transaction Id: ${hash}`);

                const txReceipt = await this.#blobUploader.getTxReceipt(hash);
                if (txReceipt && txReceipt.status) {
                    success = true;
                    totalCost += value;
                    uploadFileSize += BLOB_DATA_SIZE$1 * indexArr.length;
                    if (i + indexArr.length === blobLength) {
                        uploadFileSize = uploadFileSize - BLOB_DATA_SIZE$1 + lenArr[lenArr.length - 1];
                    }
                    uploadCount += indexArr.length;
                    successIndex += indexArr.length;
                    console.log(`File ${fileName} chunkId: ${indexArr} uploaded!`);
                }
            } catch (e) {
                console.log('Error:' + e.message);
            }
            if (!success) {
                break;
            }
        }
        return {
            totalChunkCount: blobLength,
            successIndex: successIndex,
            uploadSuccessCount: uploadCount,
            uploadFileSize: uploadFileSize,
            totalCost: totalCost,
        }
    }

    async download(fileName, ethStorageRpc = ES_TEST_RPC) {
        if (!this.#contractAddr) {
            console.error(`ERROR: flat directory not deployed!`);
            return;
        }
        return await DownloadFile$1(ethStorageRpc, this.#contractAddr, fileName);
    }
};

var ethstorage = {
    EthStorage: EthStorage$1
};

const { BlobUploader } = uploader;
const {
  EncodeBlobs,
  DecodeBlobs,
  DecodeBlob,
  BLOB_SIZE,
  BLOB_DATA_SIZE
} = blobs;
const { DownloadFile } = download;
const { EthStorage } = ethstorage;

var src = {
  BlobUploader,
  EthStorage,
  DownloadFile,
  EncodeBlobs,
  DecodeBlobs,
  DecodeBlob,
  BLOB_SIZE,
  BLOB_DATA_SIZE,
};

var index = /*@__PURE__*/getDefaultExportFromCjs(src);

export { index as default };
