{"version":3,"file":"index.esm.js","sources":["../src/utils/util.js","../src/utils/blobs.js","../src/utils/uploader.js","../src/param/abi.js","../src/param/constant.js","../src/ethstorage.js","../src/download.js"],"sourcesContent":["import {ethers} from \"ethers\";\n\nexport const stringToHex = (s) => ethers.hexlify(ethers.toUtf8Bytes(s));\n\nexport async function getChainId(rpc) {\n    const provider = new ethers.JsonRpcProvider(rpc);\n    const network = await provider.getNetwork();\n    return Number(network.chainId);\n}\n\n","import {ethers} from \"ethers\";\n\nconst BlobTxBytesPerFieldElement         = 32;      // Size in bytes of a field element\nconst BlobTxFieldElementsPerBlob         = 4096;\nconst BLOB_SIZE = BlobTxBytesPerFieldElement * BlobTxFieldElementsPerBlob;\n\nexport function encodeBlobs(data) {\n    const len = data.length;\n    if (len === 0) {\n        throw Error('Blobs: invalid blob data')\n    }\n\n    let blobIndex = 0;\n    let fieldIndex = -1;\n\n    const blobs = [new Uint8Array(BLOB_SIZE).fill(0)];\n    for (let i = 0; i < len; i += 31) {\n        fieldIndex++;\n        if (fieldIndex === BlobTxFieldElementsPerBlob) {\n            blobs.push(new Uint8Array(BLOB_SIZE).fill(0));\n            blobIndex++;\n            fieldIndex = 0;\n        }\n        let max = i + 31;\n        if (max > len) {\n            max = len;\n        }\n        blobs[blobIndex].set(data.subarray(i, max), fieldIndex * 32 + 1);\n    }\n    return blobs;\n}\n\nexport function decodeBlob(blob) {\n    if (!blob) {\n        throw Error('Blobs: invalid blob data')\n    }\n\n    blob = ethers.getBytes(blob);\n    if (blob.length < BLOB_SIZE) {\n        const newBlob = new Uint8Array(BLOB_SIZE).fill(0);\n        newBlob.set(blob);\n        blob = newBlob;\n    }\n\n    let data = [];\n    let j = 0\n    for (let i = 0; i < BlobTxFieldElementsPerBlob; i++) {\n        const chunk = blob.subarray(j + 1, j + 32);\n        data = [...data, ...chunk];\n        j += 32;\n    }\n    let i = data.length - 1;\n    for (; i >= 0; i--) {\n        if (data[i] !== 0x00) {\n            break\n        }\n    }\n    return data.slice(0, i + 1);\n}\n\nexport function decodeBlobs(blobs) {\n    if (!blobs) {\n        throw Error('Blobs: invalid blobs')\n    }\n\n    blobs = ethers.getBytes(blobs);\n    const len = blobs.length;\n    if (len === 0) {\n        throw Error('Blobs: invalid blobs')\n    }\n\n    let buf = [];\n    for (let i = 0; i < len; i += BLOB_SIZE) {\n        let max = i + BLOB_SIZE;\n        if (max > len) {\n            max = len;\n        }\n        const blob = blobs.subarray(i, max);\n        const blobBuf = DecodeBlob(blob);\n        buf = [...buf, ...blobBuf];\n    }\n    return new Buffer(buf);\n}\n","import {ethers} from \"ethers\";\nimport {loadKZG} from 'kzg-wasm';\n\nfunction computeVersionedHash(commitment, blobCommitmentVersion) {\n    const computedVersionedHash = new Uint8Array(32);\n    computedVersionedHash.set([blobCommitmentVersion], 0);\n    const hash = ethers.getBytes(ethers.sha256(commitment));\n    computedVersionedHash.set(hash.subarray(1), 1);\n    return computedVersionedHash;\n}\n\nfunction commitmentsToVersionedHashes(commitment) {\n    return computeVersionedHash(commitment, 0x01);\n}\n\n// blob gas price\nconst MIN_BLOB_GASPRICE = 1n;\nconst BLOB_GASPRICE_UPDATE_FRACTION = 3338477n;\n\nfunction fakeExponential(factor, numerator, denominator) {\n    let i = 1n;\n    let output = 0n;\n    let numerator_accum = factor * denominator;\n    while (numerator_accum > 0n) {\n        output += numerator_accum;\n        numerator_accum = (numerator_accum * numerator) / (denominator * i);\n        i++;\n    }\n    return output / denominator;\n}\n\nexport class BlobUploader {\n    #kzg;\n\n    #provider;\n    #wallet;\n\n    constructor(rpc, pk) {\n        this.#provider = new ethers.JsonRpcProvider(rpc);\n        this.#wallet = new ethers.Wallet(pk, this.#provider);\n    }\n\n    async #getKzg() {\n        if (!this.#kzg) {\n            this.#kzg = await loadKZG();\n        }\n        return this.#kzg;\n    }\n\n    async getNonce() {\n        return await this.#wallet.getNonce();\n    }\n\n    async getBlobGasPrice() {\n        // get current block\n        const block = await this.#provider.getBlock(\"latest\");\n        const excessBlobGas = BigInt(block.excessBlobGas);\n        const gas = fakeExponential(MIN_BLOB_GASPRICE, excessBlobGas, BLOB_GASPRICE_UPDATE_FRACTION);\n        return gas * 11n / 10n;\n    }\n\n    async getGasPrice() {\n        return await this.#provider.getFeeData();\n    }\n\n    async estimateGas(params) {\n        const limit = await this.#provider.send(\"eth_estimateGas\", [params]);\n        if (limit) {\n            return BigInt(limit) * 11n / 10n;\n        }\n        return null;\n    }\n\n    async sendTx(tx, blobs) {\n        if (!blobs) {\n            return await this.#wallet.sendTransaction(tx);\n        }\n\n        if (tx.maxFeePerBlobGas == null) {\n            tx.maxFeePerBlobGas = await this.getBlobGasPrice();\n        }\n\n        // blobs\n        const kzg = await this.#getKzg();\n        const ethersBlobs = [];\n        const versionedHashes = [];\n        for (let i = 0; i < blobs.length; i++) {\n            const blob = blobs[i];\n            const commitment = kzg.blobToKzgCommitment(blob);\n            const proof = kzg.computeBlobKzgProof(blob, commitment);\n            ethersBlobs.push({\n                data: blob,\n                proof: proof,\n                commitment: commitment\n            });\n\n            const hash = commitmentsToVersionedHashes(commitment);\n            versionedHashes.push(ethers.hexlify(hash));\n        }\n\n        // send\n        tx.type = 3;\n        tx.blobVersionedHashes = versionedHashes;\n        tx.blobs = ethersBlobs;\n        tx.kzg = kzg;\n        return await this.#wallet.sendTransaction(tx);\n    }\n\n    async getBlobHash(blob) {\n        const kzg = await this.#getKzg();\n        const commit = kzg.blobToKzgCommitment(blob);\n        const localHash = commitmentsToVersionedHashes(commit);\n        const hash = new Uint8Array(32);\n        hash.set(localHash.subarray(0, 32 - 8));\n        return ethers.hexlify(hash);\n    }\n}\n","\nexport const EthStorageAbi = [\n  'function putBlobs(uint256 num) public payable',\n  'function putBlob(bytes32 _key, uint256 _blobIdx, uint256 _length) public payable',\n  'function get(bytes32 _key, uint8 _decodeType, uint256 _off, uint256 _len) public view returns (bytes memory)',\n  'function size(bytes32 _key) public view returns (uint256)',\n  'function upfrontPayment() public view returns (uint256)'\n];\n\nexport const FlatDirectoryAbi = [\n  \"constructor(uint8 slotLimit, uint32 maxChunkSize, address storageAddress) public\",\n  \"function setDefault(bytes memory _defaultFile) public\",\n  \"function upfrontPayment() external view returns (uint256)\",\n  \"function getChunkHash(bytes memory name, uint256 chunkId) public view returns (bytes32)\",\n  \"function writeChunks(bytes memory name, uint256[] memory chunkIds, uint256[] memory sizes) external payable\",\n  \"function refund() public\",\n  \"function remove(bytes memory name) external returns (uint256)\",\n  \"function countChunks(bytes memory name) external view returns (uint256)\",\n  \"function isSupportBlob() view public returns (bool)\",\n  \"function getStorageMode(bytes memory name) public view returns(uint256)\"\n];\n","\nconst SEPOLIA_CHAIN_ID = 11155111;\nconst QUARKCHAIN_L2_CHAIN_ID = 42069;\n\nexport const ETHSTORAGE_MAPPING = {\n    [SEPOLIA_CHAIN_ID]: '0x804C520d3c084C805E37A35E90057Ac32831F96f',\n    [QUARKCHAIN_L2_CHAIN_ID]: '0x90a708C0dca081ca48a9851a8A326775155f87Fd',\n}\n\n\n\nconst BlobTxBytesPerFieldElement         = 32;      // Size in bytes of a field element\nconst BlobTxFieldElementsPerBlob         = 4096;\nexport const BLOB_SIZE = BlobTxBytesPerFieldElement * BlobTxFieldElementsPerBlob;\nexport const BLOB_DATA_SIZE = 31 * BlobTxFieldElementsPerBlob;\n\n// DecodeType\nexport const RawData = 0;\nexport const PaddingPer31Bytes = 1;\n","import {ethers} from \"ethers\";\nimport {\n    BlobUploader,\n    stringToHex,\n    getChainId,\n    encodeBlobs\n} from \"./utils\";\nimport {\n    ETHSTORAGE_MAPPING,\n    BLOB_DATA_SIZE,\n    BLOB_SIZE,\n    PaddingPer31Bytes,\n    EthStorageAbi\n} from \"./param\";\n\nexport class EthStorage {\n    #ethStorageRpc;\n    #contractAddr;\n\n    #wallet;\n    #blobUploader;\n\n    static async create(config) {\n        const {rpc, ethStorageRpc, privateKey} = config;\n        const chainId = await getChainId(rpc);\n        const ethStorageAddress = ETHSTORAGE_MAPPING[chainId];\n        if (!ethStorageAddress) {\n            throw new Error(\"EthStorage: Network not supported yet.\");\n        }\n\n        return new EthStorage({\n            rpc,\n            ethStorageRpc,\n            privateKey,\n            ethStorageAddress\n        });\n    }\n\n    constructor(config) {\n        const {rpc, ethStorageRpc, privateKey, ethStorageAddress} = config;\n        this.#ethStorageRpc = ethStorageRpc;\n        this.#contractAddr = ethStorageAddress;\n\n        const provider = new ethers.JsonRpcProvider(rpc);\n        this.#wallet = new ethers.Wallet(privateKey, provider);\n        this.#blobUploader = new BlobUploader(rpc, privateKey);\n    }\n\n    async estimateCost(key, data) {\n        if (!data || !Buffer.isBuffer(data)) {\n            throw new Error(`EthStorage: Invalid data.`);\n        }\n        if (data.length < 0 || data.length > BLOB_DATA_SIZE) {\n            throw new Error(`EthStorage: the length of data(Buffer) should be > 0 && < ${BLOB_DATA_SIZE}.`);\n        }\n\n        const hexKey = ethers.keccak256(stringToHex(key));\n        const contract = new ethers.Contract(this.#contractAddr, EthStorageAbi, this.#wallet);\n        const [storageCost, maxFeePerBlobGas, gasFeeData] = await Promise.all([\n            contract.upfrontPayment(),\n            this.#blobUploader.getBlobGasPrice(),\n            this.#blobUploader.getGasPrice(),\n        ]);\n\n        const blobs = encodeBlobs(data);\n        const blobHash = await this.#blobUploader.getBlobHash(blobs[0]);\n        const gasLimit = await contract.putBlob.estimateGas(hexKey, 0, data.length, {\n            value: storageCost,\n            blobVersionedHashes: [blobHash]\n        });\n\n        // get cost\n        const totalGasCost = (gasFeeData.maxFeePerGas + gasFeeData.maxPriorityFeePerGas) * gasLimit;\n        const totalBlobGasCost = maxFeePerBlobGas * BigInt(BLOB_SIZE);\n        const gasCost = totalGasCost + totalBlobGasCost;\n        return {\n            storageCost,\n            gasCost\n        }\n    }\n\n    async write(key, data) {\n        if (!data || !Buffer.isBuffer(data)) {\n            throw new Error(`EthStorage: Invalid data.`);\n        }\n        if (data.length < 0 || data.length > BLOB_DATA_SIZE) {\n            throw new Error(`EthStorage: the length of data(Buffer) should be > 0 && < ${BLOB_DATA_SIZE}.`);\n        }\n\n        const contract = new ethers.Contract(this.#contractAddr, EthStorageAbi, this.#wallet);\n        const hexKey = ethers.keccak256(stringToHex(key));\n        const storageCost = await contract.upfrontPayment();\n        const tx = await contract.putBlob.populateTransaction(hexKey, 0, data.length, {\n            value: storageCost,\n        });\n\n        const blobs = encodeBlobs(data);\n        let txRes = await this.#blobUploader.sendTx(tx, blobs);\n        console.log(`EthStorage: Send Success! hash is ${txRes.hash}`)\n        txRes = await txRes.wait();\n        return txRes.status;\n    }\n\n    async read(key) {\n        if (!key) {\n            throw new Error(`EthStorage: Invalid key.`);\n        }\n        if(!this.#ethStorageRpc) {\n            throw new Error(`EthStorage: Reading content requires providing 'ethStorageRpc'.`)\n        }\n        const hexKey = ethers.keccak256(stringToHex(key));\n        const provider = new ethers.JsonRpcProvider(this.#ethStorageRpc);\n        const contract = new ethers.Contract(this.#contractAddr, EthStorageAbi, provider);\n        const size = await contract.size(hexKey, {\n            from: this.#wallet.address\n        });\n        if (size === 0n) {\n            throw new Error(`EthStorage: There is no data corresponding to key ${key} under wallet address ${this.#wallet.address}.`)\n        }\n        const data = await contract.get(hexKey, PaddingPer31Bytes, 0, size, {\n            from: this.#wallet.address\n        });\n        return ethers.getBytes(data);\n    }\n\n    async putBlobs(number, data) {\n        if (!data || !Buffer.isBuffer(data)) {\n            throw new Error(`EthStorage: Invalid data.`);\n        }\n\n        const contract = new ethers.Contract(this.#contractAddr, EthStorageAbi, this.#wallet);\n        const storageCost = await contract.upfrontPayment();\n        const tx = await contract.putBlobs.populateTransaction(number, {\n            value: storageCost * BigInt(number),\n        });\n\n        const blobs = encodeBlobs(data);\n        let txRes = await this.#blobUploader.sendTx(tx, [blobs[0]]);\n        console.log(`EthStorage: Send Success! hash is ${txRes.hash}`)\n        txRes = await txRes.wait();\n        return txRes.status;\n    }\n}\n","import {ethers, Contract} from \"ethers\";\n\nconst contractABI = [\n    'function countChunks(bytes memory name) external view returns (uint256)',\n    'function readChunk(bytes memory name, uint256 chunkId) external view returns (bytes memory, bool)'\n]\n\nconst stringToHex = (s) => ethers.hexlify(ethers.toUtf8Bytes(s));\n\nasync function readChunk(ethStorageRpc, ethStorageAddress, hexName, index) {\n    let result;\n    try {\n        const provider = new ethers.JsonRpcProvider(ethStorageRpc);\n        const contract = new Contract(ethStorageAddress, contractABI, provider);\n        result = await contract.readChunk(hexName, index);\n    } catch (e) {\n        const provider = new ethers.JsonRpcProvider(ethStorageRpc);\n        const contract = new Contract(ethStorageAddress, contractABI, provider);\n        result = await contract.readChunk(hexName, index);\n    }\n    return ethers.getBytes(result[0]);\n}\n\nexport async function Download(ethStorageRpc, ethStorageAddress, fileName) {\n    const hexName = stringToHex(fileName);\n\n    const provider = new ethers.JsonRpcProvider(ethStorageRpc);\n    const contract = new Contract(ethStorageAddress, contractABI, provider);\n    const blobCount = await contract.countChunks(hexName);\n\n    let buff = [];\n    for (let i = 0; i < blobCount; i++) {\n        const chunk = await readChunk(ethStorageRpc, ethStorageAddress, hexName, i);\n        buff = [...buff, ...chunk];\n    }\n    return new Buffer(buff);\n}\n"],"names":["stringToHex","BlobTxBytesPerFieldElement","BlobTxFieldElementsPerBlob","BLOB_SIZE"],"mappings":";;;AAEY,MAACA,aAAW,GAAG,CAAC,CAAC,KAAK,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE;AACxE;AACO,eAAe,UAAU,CAAC,GAAG,EAAE;AACtC,IAAI,MAAM,QAAQ,GAAG,IAAI,MAAM,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;AACrD,IAAI,MAAM,OAAO,GAAG,MAAM,QAAQ,CAAC,UAAU,EAAE,CAAC;AAChD,IAAI,OAAO,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;AACnC;;ACNA,MAAMC,4BAA0B,WAAW,EAAE,CAAC;AAC9C,MAAMC,4BAA0B,WAAW,IAAI,CAAC;AAChD,MAAMC,WAAS,GAAGF,4BAA0B,GAAGC,4BAA0B,CAAC;AAC1E;AACO,SAAS,WAAW,CAAC,IAAI,EAAE;AAClC,IAAI,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC;AAC5B,IAAI,IAAI,GAAG,KAAK,CAAC,EAAE;AACnB,QAAQ,MAAM,KAAK,CAAC,0BAA0B,CAAC;AAC/C,KAAK;AACL;AACA,IAAI,IAAI,SAAS,GAAG,CAAC,CAAC;AACtB,IAAI,IAAI,UAAU,GAAG,CAAC,CAAC,CAAC;AACxB;AACA,IAAI,MAAM,KAAK,GAAG,CAAC,IAAI,UAAU,CAACC,WAAS,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AACtD,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,IAAI,EAAE,EAAE;AACtC,QAAQ,UAAU,EAAE,CAAC;AACrB,QAAQ,IAAI,UAAU,KAAKD,4BAA0B,EAAE;AACvD,YAAY,KAAK,CAAC,IAAI,CAAC,IAAI,UAAU,CAACC,WAAS,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1D,YAAY,SAAS,EAAE,CAAC;AACxB,YAAY,UAAU,GAAG,CAAC,CAAC;AAC3B,SAAS;AACT,QAAQ,IAAI,GAAG,GAAG,CAAC,GAAG,EAAE,CAAC;AACzB,QAAQ,IAAI,GAAG,GAAG,GAAG,EAAE;AACvB,YAAY,GAAG,GAAG,GAAG,CAAC;AACtB,SAAS;AACT,QAAQ,KAAK,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,UAAU,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;AACzE,KAAK;AACL,IAAI,OAAO,KAAK,CAAC;AACjB,CAAC;AACD;AACO,SAAS,UAAU,CAAC,IAAI,EAAE;AACjC,IAAI,IAAI,CAAC,IAAI,EAAE;AACf,QAAQ,MAAM,KAAK,CAAC,0BAA0B,CAAC;AAC/C,KAAK;AACL;AACA,IAAI,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AACjC,IAAI,IAAI,IAAI,CAAC,MAAM,GAAGA,WAAS,EAAE;AACjC,QAAQ,MAAM,OAAO,GAAG,IAAI,UAAU,CAACA,WAAS,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC1D,QAAQ,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAC1B,QAAQ,IAAI,GAAG,OAAO,CAAC;AACvB,KAAK;AACL;AACA,IAAI,IAAI,IAAI,GAAG,EAAE,CAAC;AAClB,IAAI,IAAI,CAAC,GAAG,EAAC;AACb,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAGD,4BAA0B,EAAE,CAAC,EAAE,EAAE;AACzD,QAAQ,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AACnD,QAAQ,IAAI,GAAG,CAAC,GAAG,IAAI,EAAE,GAAG,KAAK,CAAC,CAAC;AACnC,QAAQ,CAAC,IAAI,EAAE,CAAC;AAChB,KAAK;AACL,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;AAC5B,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;AACxB,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;AAC9B,YAAY,KAAK;AACjB,SAAS;AACT,KAAK;AACL,IAAI,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;AAChC,CAAC;AACD;AACO,SAAS,WAAW,CAAC,KAAK,EAAE;AACnC,IAAI,IAAI,CAAC,KAAK,EAAE;AAChB,QAAQ,MAAM,KAAK,CAAC,sBAAsB,CAAC;AAC3C,KAAK;AACL;AACA,IAAI,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACnC,IAAI,MAAM,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC;AAC7B,IAAI,IAAI,GAAG,KAAK,CAAC,EAAE;AACnB,QAAQ,MAAM,KAAK,CAAC,sBAAsB,CAAC;AAC3C,KAAK;AACL;AACA,IAAI,IAAI,GAAG,GAAG,EAAE,CAAC;AACjB,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,IAAIC,WAAS,EAAE;AAC7C,QAAQ,IAAI,GAAG,GAAG,CAAC,GAAGA,WAAS,CAAC;AAChC,QAAQ,IAAI,GAAG,GAAG,GAAG,EAAE;AACvB,YAAY,GAAG,GAAG,GAAG,CAAC;AACtB,SAAS;AACT,QAAQ,MAAM,IAAI,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;AAC5C,QAAQ,MAAM,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;AACzC,QAAQ,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,OAAO,CAAC,CAAC;AACnC,KAAK;AACL,IAAI,OAAO,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC;AAC3B;;AC/EA,SAAS,oBAAoB,CAAC,UAAU,EAAE,qBAAqB,EAAE;AACjE,IAAI,MAAM,qBAAqB,GAAG,IAAI,UAAU,CAAC,EAAE,CAAC,CAAC;AACrD,IAAI,qBAAqB,CAAC,GAAG,CAAC,CAAC,qBAAqB,CAAC,EAAE,CAAC,CAAC,CAAC;AAC1D,IAAI,MAAM,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;AAC5D,IAAI,qBAAqB,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACnD,IAAI,OAAO,qBAAqB,CAAC;AACjC,CAAC;AACD;AACA,SAAS,4BAA4B,CAAC,UAAU,EAAE;AAClD,IAAI,OAAO,oBAAoB,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;AAClD,CAAC;AACD;AACA;AACA,MAAM,iBAAiB,GAAG,EAAE,CAAC;AAC7B,MAAM,6BAA6B,GAAG,QAAQ,CAAC;AAC/C;AACA,SAAS,eAAe,CAAC,MAAM,EAAE,SAAS,EAAE,WAAW,EAAE;AACzD,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC;AACf,IAAI,IAAI,MAAM,GAAG,EAAE,CAAC;AACpB,IAAI,IAAI,eAAe,GAAG,MAAM,GAAG,WAAW,CAAC;AAC/C,IAAI,OAAO,eAAe,GAAG,EAAE,EAAE;AACjC,QAAQ,MAAM,IAAI,eAAe,CAAC;AAClC,QAAQ,eAAe,GAAG,CAAC,eAAe,GAAG,SAAS,KAAK,WAAW,GAAG,CAAC,CAAC,CAAC;AAC5E,QAAQ,CAAC,EAAE,CAAC;AACZ,KAAK;AACL,IAAI,OAAO,MAAM,GAAG,WAAW,CAAC;AAChC,CAAC;AACD;AACO,MAAM,YAAY,CAAC;AAC1B,IAAI,IAAI,CAAC;AACT;AACA,IAAI,SAAS,CAAC;AACd,IAAI,OAAO,CAAC;AACZ;AACA,IAAI,WAAW,CAAC,GAAG,EAAE,EAAE,EAAE;AACzB,QAAQ,IAAI,CAAC,SAAS,GAAG,IAAI,MAAM,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;AACzD,QAAQ,IAAI,CAAC,OAAO,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;AAC7D,KAAK;AACL;AACA,IAAI,MAAM,OAAO,GAAG;AACpB,QAAQ,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;AACxB,YAAY,IAAI,CAAC,IAAI,GAAG,MAAM,OAAO,EAAE,CAAC;AACxC,SAAS;AACT,QAAQ,OAAO,IAAI,CAAC,IAAI,CAAC;AACzB,KAAK;AACL;AACA,IAAI,MAAM,QAAQ,GAAG;AACrB,QAAQ,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;AAC7C,KAAK;AACL;AACA,IAAI,MAAM,eAAe,GAAG;AAC5B;AACA,QAAQ,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;AAC9D,QAAQ,MAAM,aAAa,GAAG,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;AAC1D,QAAQ,MAAM,GAAG,GAAG,eAAe,CAAC,iBAAiB,EAAE,aAAa,EAAE,6BAA6B,CAAC,CAAC;AACrG,QAAQ,OAAO,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAC/B,KAAK;AACL;AACA,IAAI,MAAM,WAAW,GAAG;AACxB,QAAQ,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;AACjD,KAAK;AACL;AACA,IAAI,MAAM,WAAW,CAAC,MAAM,EAAE;AAC9B,QAAQ,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;AAC7E,QAAQ,IAAI,KAAK,EAAE;AACnB,YAAY,OAAO,MAAM,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC;AAC7C,SAAS;AACT,QAAQ,OAAO,IAAI,CAAC;AACpB,KAAK;AACL;AACA,IAAI,MAAM,MAAM,CAAC,EAAE,EAAE,KAAK,EAAE;AAC5B,QAAQ,IAAI,CAAC,KAAK,EAAE;AACpB,YAAY,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;AAC1D,SAAS;AACT;AACA,QAAQ,IAAI,EAAE,CAAC,gBAAgB,IAAI,IAAI,EAAE;AACzC,YAAY,EAAE,CAAC,gBAAgB,GAAG,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;AAC/D,SAAS;AACT;AACA;AACA,QAAQ,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;AACzC,QAAQ,MAAM,WAAW,GAAG,EAAE,CAAC;AAC/B,QAAQ,MAAM,eAAe,GAAG,EAAE,CAAC;AACnC,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC/C,YAAY,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AAClC,YAAY,MAAM,UAAU,GAAG,GAAG,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;AAC7D,YAAY,MAAM,KAAK,GAAG,GAAG,CAAC,mBAAmB,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;AACpE,YAAY,WAAW,CAAC,IAAI,CAAC;AAC7B,gBAAgB,IAAI,EAAE,IAAI;AAC1B,gBAAgB,KAAK,EAAE,KAAK;AAC5B,gBAAgB,UAAU,EAAE,UAAU;AACtC,aAAa,CAAC,CAAC;AACf;AACA,YAAY,MAAM,IAAI,GAAG,4BAA4B,CAAC,UAAU,CAAC,CAAC;AAClE,YAAY,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;AACvD,SAAS;AACT;AACA;AACA,QAAQ,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC;AACpB,QAAQ,EAAE,CAAC,mBAAmB,GAAG,eAAe,CAAC;AACjD,QAAQ,EAAE,CAAC,KAAK,GAAG,WAAW,CAAC;AAC/B,QAAQ,EAAE,CAAC,GAAG,GAAG,GAAG,CAAC;AACrB,QAAQ,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;AACtD,KAAK;AACL;AACA,IAAI,MAAM,WAAW,CAAC,IAAI,EAAE;AAC5B,QAAQ,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;AACzC,QAAQ,MAAM,MAAM,GAAG,GAAG,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;AACrD,QAAQ,MAAM,SAAS,GAAG,4BAA4B,CAAC,MAAM,CAAC,CAAC;AAC/D,QAAQ,MAAM,IAAI,GAAG,IAAI,UAAU,CAAC,EAAE,CAAC,CAAC;AACxC,QAAQ,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;AAChD,QAAQ,OAAO,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AACpC,KAAK;AACL;;ACnHO,MAAM,aAAa,GAAG;AAC7B,EAAE,+CAA+C;AACjD,EAAE,kFAAkF;AACpF,EAAE,8GAA8G;AAChH,EAAE,2DAA2D;AAC7D,EAAE,yDAAyD;AAC3D,CAAC;;ACND,MAAM,gBAAgB,GAAG,QAAQ,CAAC;AAClC,MAAM,sBAAsB,GAAG,KAAK,CAAC;AACrC;AACO,MAAM,kBAAkB,GAAG;AAClC,IAAI,CAAC,gBAAgB,GAAG,4CAA4C;AACpE,IAAI,CAAC,sBAAsB,GAAG,4CAA4C;AAC1E,EAAC;AACD;AACA;AACA;AACA,MAAM,0BAA0B,WAAW,EAAE,CAAC;AAC9C,MAAM,0BAA0B,WAAW,IAAI,CAAC;AACzC,MAAM,SAAS,GAAG,0BAA0B,GAAG,0BAA0B,CAAC;AAC1E,MAAM,cAAc,GAAG,EAAE,GAAG,0BAA0B,CAAC;AAIvD,MAAM,iBAAiB,GAAG,CAAC;;ACH3B,MAAM,UAAU,CAAC;AACxB,IAAI,cAAc,CAAC;AACnB,IAAI,aAAa,CAAC;AAClB;AACA,IAAI,OAAO,CAAC;AACZ,IAAI,aAAa,CAAC;AAClB;AACA,IAAI,aAAa,MAAM,CAAC,MAAM,EAAE;AAChC,QAAQ,MAAM,CAAC,GAAG,EAAE,aAAa,EAAE,UAAU,CAAC,GAAG,MAAM,CAAC;AACxD,QAAQ,MAAM,OAAO,GAAG,MAAM,UAAU,CAAC,GAAG,CAAC,CAAC;AAC9C,QAAQ,MAAM,iBAAiB,GAAG,kBAAkB,CAAC,OAAO,CAAC,CAAC;AAC9D,QAAQ,IAAI,CAAC,iBAAiB,EAAE;AAChC,YAAY,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;AACtE,SAAS;AACT;AACA,QAAQ,OAAO,IAAI,UAAU,CAAC;AAC9B,YAAY,GAAG;AACf,YAAY,aAAa;AACzB,YAAY,UAAU;AACtB,YAAY,iBAAiB;AAC7B,SAAS,CAAC,CAAC;AACX,KAAK;AACL;AACA,IAAI,WAAW,CAAC,MAAM,EAAE;AACxB,QAAQ,MAAM,CAAC,GAAG,EAAE,aAAa,EAAE,UAAU,EAAE,iBAAiB,CAAC,GAAG,MAAM,CAAC;AAC3E,QAAQ,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;AAC5C,QAAQ,IAAI,CAAC,aAAa,GAAG,iBAAiB,CAAC;AAC/C;AACA,QAAQ,MAAM,QAAQ,GAAG,IAAI,MAAM,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;AACzD,QAAQ,IAAI,CAAC,OAAO,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;AAC/D,QAAQ,IAAI,CAAC,aAAa,GAAG,IAAI,YAAY,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;AAC/D,KAAK;AACL;AACA,IAAI,MAAM,YAAY,CAAC,GAAG,EAAE,IAAI,EAAE;AAClC,QAAQ,IAAI,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;AAC7C,YAAY,MAAM,IAAI,KAAK,CAAC,CAAC,yBAAyB,CAAC,CAAC,CAAC;AACzD,SAAS;AACT,QAAQ,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,MAAM,GAAG,cAAc,EAAE;AAC7D,YAAY,MAAM,IAAI,KAAK,CAAC,CAAC,0DAA0D,EAAE,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5G,SAAS;AACT;AACA,QAAQ,MAAM,MAAM,GAAG,MAAM,CAAC,SAAS,CAACH,aAAW,CAAC,GAAG,CAAC,CAAC,CAAC;AAC1D,QAAQ,MAAM,QAAQ,GAAG,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,EAAE,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;AAC9F,QAAQ,MAAM,CAAC,WAAW,EAAE,gBAAgB,EAAE,UAAU,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;AAC9E,YAAY,QAAQ,CAAC,cAAc,EAAE;AACrC,YAAY,IAAI,CAAC,aAAa,CAAC,eAAe,EAAE;AAChD,YAAY,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE;AAC5C,SAAS,CAAC,CAAC;AACX;AACA,QAAQ,MAAM,KAAK,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;AACxC,QAAQ,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AACxE,QAAQ,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,OAAO,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,IAAI,CAAC,MAAM,EAAE;AACpF,YAAY,KAAK,EAAE,WAAW;AAC9B,YAAY,mBAAmB,EAAE,CAAC,QAAQ,CAAC;AAC3C,SAAS,CAAC,CAAC;AACX;AACA;AACA,QAAQ,MAAM,YAAY,GAAG,CAAC,UAAU,CAAC,YAAY,GAAG,UAAU,CAAC,oBAAoB,IAAI,QAAQ,CAAC;AACpG,QAAQ,MAAM,gBAAgB,GAAG,gBAAgB,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC;AACtE,QAAQ,MAAM,OAAO,GAAG,YAAY,GAAG,gBAAgB,CAAC;AACxD,QAAQ,OAAO;AACf,YAAY,WAAW;AACvB,YAAY,OAAO;AACnB,SAAS;AACT,KAAK;AACL;AACA,IAAI,MAAM,KAAK,CAAC,GAAG,EAAE,IAAI,EAAE;AAC3B,QAAQ,IAAI,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;AAC7C,YAAY,MAAM,IAAI,KAAK,CAAC,CAAC,yBAAyB,CAAC,CAAC,CAAC;AACzD,SAAS;AACT,QAAQ,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,MAAM,GAAG,cAAc,EAAE;AAC7D,YAAY,MAAM,IAAI,KAAK,CAAC,CAAC,0DAA0D,EAAE,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5G,SAAS;AACT;AACA,QAAQ,MAAM,QAAQ,GAAG,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,EAAE,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;AAC9F,QAAQ,MAAM,MAAM,GAAG,MAAM,CAAC,SAAS,CAACA,aAAW,CAAC,GAAG,CAAC,CAAC,CAAC;AAC1D,QAAQ,MAAM,WAAW,GAAG,MAAM,QAAQ,CAAC,cAAc,EAAE,CAAC;AAC5D,QAAQ,MAAM,EAAE,GAAG,MAAM,QAAQ,CAAC,OAAO,CAAC,mBAAmB,CAAC,MAAM,EAAE,CAAC,EAAE,IAAI,CAAC,MAAM,EAAE;AACtF,YAAY,KAAK,EAAE,WAAW;AAC9B,SAAS,CAAC,CAAC;AACX;AACA,QAAQ,MAAM,KAAK,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;AACxC,QAAQ,IAAI,KAAK,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;AAC/D,QAAQ,OAAO,CAAC,GAAG,CAAC,CAAC,kCAAkC,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,EAAC;AACtE,QAAQ,KAAK,GAAG,MAAM,KAAK,CAAC,IAAI,EAAE,CAAC;AACnC,QAAQ,OAAO,KAAK,CAAC,MAAM,CAAC;AAC5B,KAAK;AACL;AACA,IAAI,MAAM,IAAI,CAAC,GAAG,EAAE;AACpB,QAAQ,IAAI,CAAC,GAAG,EAAE;AAClB,YAAY,MAAM,IAAI,KAAK,CAAC,CAAC,wBAAwB,CAAC,CAAC,CAAC;AACxD,SAAS;AACT,QAAQ,GAAG,CAAC,IAAI,CAAC,cAAc,EAAE;AACjC,YAAY,MAAM,IAAI,KAAK,CAAC,CAAC,+DAA+D,CAAC,CAAC;AAC9F,SAAS;AACT,QAAQ,MAAM,MAAM,GAAG,MAAM,CAAC,SAAS,CAACA,aAAW,CAAC,GAAG,CAAC,CAAC,CAAC;AAC1D,QAAQ,MAAM,QAAQ,GAAG,IAAI,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;AACzE,QAAQ,MAAM,QAAQ,GAAG,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,EAAE,aAAa,EAAE,QAAQ,CAAC,CAAC;AAC1F,QAAQ,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE;AACjD,YAAY,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO;AACtC,SAAS,CAAC,CAAC;AACX,QAAQ,IAAI,IAAI,KAAK,EAAE,EAAE;AACzB,YAAY,MAAM,IAAI,KAAK,CAAC,CAAC,kDAAkD,EAAE,GAAG,CAAC,sBAAsB,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AACrI,SAAS;AACT,QAAQ,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,GAAG,CAAC,MAAM,EAAE,iBAAiB,EAAE,CAAC,EAAE,IAAI,EAAE;AAC5E,YAAY,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO;AACtC,SAAS,CAAC,CAAC;AACX,QAAQ,OAAO,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AACrC,KAAK;AACL;AACA,IAAI,MAAM,QAAQ,CAAC,MAAM,EAAE,IAAI,EAAE;AACjC,QAAQ,IAAI,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;AAC7C,YAAY,MAAM,IAAI,KAAK,CAAC,CAAC,yBAAyB,CAAC,CAAC,CAAC;AACzD,SAAS;AACT;AACA,QAAQ,MAAM,QAAQ,GAAG,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,EAAE,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;AAC9F,QAAQ,MAAM,WAAW,GAAG,MAAM,QAAQ,CAAC,cAAc,EAAE,CAAC;AAC5D,QAAQ,MAAM,EAAE,GAAG,MAAM,QAAQ,CAAC,QAAQ,CAAC,mBAAmB,CAAC,MAAM,EAAE;AACvE,YAAY,KAAK,EAAE,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC;AAC/C,SAAS,CAAC,CAAC;AACX;AACA,QAAQ,MAAM,KAAK,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;AACxC,QAAQ,IAAI,KAAK,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpE,QAAQ,OAAO,CAAC,GAAG,CAAC,CAAC,kCAAkC,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,EAAC;AACtE,QAAQ,KAAK,GAAG,MAAM,KAAK,CAAC,IAAI,EAAE,CAAC;AACnC,QAAQ,OAAO,KAAK,CAAC,MAAM,CAAC;AAC5B,KAAK;AACL;;AC5IA,MAAM,WAAW,GAAG;AACpB,IAAI,yEAAyE;AAC7E,IAAI,mGAAmG;AACvG,EAAC;AACD;AACA,MAAM,WAAW,GAAG,CAAC,CAAC,KAAK,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;AACjE;AACA,eAAe,SAAS,CAAC,aAAa,EAAE,iBAAiB,EAAE,OAAO,EAAE,KAAK,EAAE;AAC3E,IAAI,IAAI,MAAM,CAAC;AACf,IAAI,IAAI;AACR,QAAQ,MAAM,QAAQ,GAAG,IAAI,MAAM,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;AACnE,QAAQ,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,iBAAiB,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC;AAChF,QAAQ,MAAM,GAAG,MAAM,QAAQ,CAAC,SAAS,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;AAC1D,KAAK,CAAC,OAAO,CAAC,EAAE;AAChB,QAAQ,MAAM,QAAQ,GAAG,IAAI,MAAM,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;AACnE,QAAQ,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,iBAAiB,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC;AAChF,QAAQ,MAAM,GAAG,MAAM,QAAQ,CAAC,SAAS,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;AAC1D,KAAK;AACL,IAAI,OAAO,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC;AACD;AACO,eAAe,QAAQ,CAAC,aAAa,EAAE,iBAAiB,EAAE,QAAQ,EAAE;AAC3E,IAAI,MAAM,OAAO,GAAG,WAAW,CAAC,QAAQ,CAAC,CAAC;AAC1C;AACA,IAAI,MAAM,QAAQ,GAAG,IAAI,MAAM,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;AAC/D,IAAI,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,iBAAiB,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC;AAC5E,IAAI,MAAM,SAAS,GAAG,MAAM,QAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;AAC1D;AACA,IAAI,IAAI,IAAI,GAAG,EAAE,CAAC;AAClB,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;AACxC,QAAQ,MAAM,KAAK,GAAG,MAAM,SAAS,CAAC,aAAa,EAAE,iBAAiB,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;AACpF,QAAQ,IAAI,GAAG,CAAC,GAAG,IAAI,EAAE,GAAG,KAAK,CAAC,CAAC;AACnC,KAAK;AACL,IAAI,OAAO,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC;AAC5B;;;;"}