{"version":3,"file":"index.esm.js","sources":["../src/utils/util.js","../src/utils/blobs.js","../node_modules/async-mutex/index.mjs","../src/utils/uploader.js","../src/param/abi.js","../src/param/constant.js","../src/ethstorage.js","../src/flatdirectory.js"],"sourcesContent":["import {ethers} from \"ethers\";\n\nexport const stringToHex = (s) => ethers.hexlify(ethers.toUtf8Bytes(s));\n\nexport async function getChainId(rpc) {\n    const provider = new ethers.JsonRpcProvider(rpc);\n    const network = await provider.getNetwork();\n    return Number(network.chainId);\n}\n\n","import {ethers} from \"ethers\";\n\nconst BlobTxBytesPerFieldElement         = 32;      // Size in bytes of a field element\nconst BlobTxFieldElementsPerBlob         = 4096;\nconst BLOB_SIZE = BlobTxBytesPerFieldElement * BlobTxFieldElementsPerBlob;\n\nexport function encodeBlobs(data) {\n    const len = data.length;\n    if (len === 0) {\n        throw Error('Blobs: invalid blob data')\n    }\n\n    let blobIndex = 0;\n    let fieldIndex = -1;\n\n    const blobs = [new Uint8Array(BLOB_SIZE).fill(0)];\n    for (let i = 0; i < len; i += 31) {\n        fieldIndex++;\n        if (fieldIndex === BlobTxFieldElementsPerBlob) {\n            blobs.push(new Uint8Array(BLOB_SIZE).fill(0));\n            blobIndex++;\n            fieldIndex = 0;\n        }\n        let max = i + 31;\n        if (max > len) {\n            max = len;\n        }\n        blobs[blobIndex].set(data.subarray(i, max), fieldIndex * 32 + 1);\n    }\n    return blobs;\n}\n\nexport function decodeBlob(blob) {\n    if (!blob) {\n        throw Error('Blobs: invalid blob data')\n    }\n\n    blob = ethers.getBytes(blob);\n    if (blob.length < BLOB_SIZE) {\n        const newBlob = new Uint8Array(BLOB_SIZE).fill(0);\n        newBlob.set(blob);\n        blob = newBlob;\n    }\n\n    let data = [];\n    let j = 0\n    for (let i = 0; i < BlobTxFieldElementsPerBlob; i++) {\n        const chunk = blob.subarray(j + 1, j + 32);\n        data = [...data, ...chunk];\n        j += 32;\n    }\n    let i = data.length - 1;\n    for (; i >= 0; i--) {\n        if (data[i] !== 0x00) {\n            break\n        }\n    }\n    return data.slice(0, i + 1);\n}\n\nexport function decodeBlobs(blobs) {\n    if (!blobs) {\n        throw Error('Blobs: invalid blobs')\n    }\n\n    blobs = ethers.getBytes(blobs);\n    const len = blobs.length;\n    if (len === 0) {\n        throw Error('Blobs: invalid blobs')\n    }\n\n    let buf = [];\n    for (let i = 0; i < len; i += BLOB_SIZE) {\n        let max = i + BLOB_SIZE;\n        if (max > len) {\n            max = len;\n        }\n        const blob = blobs.subarray(i, max);\n        const blobBuf = DecodeBlob(blob);\n        buf = [...buf, ...blobBuf];\n    }\n    return new Buffer(buf);\n}\n","const E_TIMEOUT = new Error('timeout while waiting for mutex to become available');\nconst E_ALREADY_LOCKED = new Error('mutex already locked');\nconst E_CANCELED = new Error('request for lock canceled');\n\nvar __awaiter$2 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass Semaphore {\n    constructor(_value, _cancelError = E_CANCELED) {\n        this._value = _value;\n        this._cancelError = _cancelError;\n        this._queue = [];\n        this._weightedWaiters = [];\n    }\n    acquire(weight = 1, priority = 0) {\n        if (weight <= 0)\n            throw new Error(`invalid weight ${weight}: must be positive`);\n        return new Promise((resolve, reject) => {\n            const task = { resolve, reject, weight, priority };\n            const i = findIndexFromEnd(this._queue, (other) => priority <= other.priority);\n            if (i === -1 && weight <= this._value) {\n                // Needs immediate dispatch, skip the queue\n                this._dispatchItem(task);\n            }\n            else {\n                this._queue.splice(i + 1, 0, task);\n            }\n        });\n    }\n    runExclusive(callback_1) {\n        return __awaiter$2(this, arguments, void 0, function* (callback, weight = 1, priority = 0) {\n            const [value, release] = yield this.acquire(weight, priority);\n            try {\n                return yield callback(value);\n            }\n            finally {\n                release();\n            }\n        });\n    }\n    waitForUnlock(weight = 1, priority = 0) {\n        if (weight <= 0)\n            throw new Error(`invalid weight ${weight}: must be positive`);\n        if (this._couldLockImmediately(weight, priority)) {\n            return Promise.resolve();\n        }\n        else {\n            return new Promise((resolve) => {\n                if (!this._weightedWaiters[weight - 1])\n                    this._weightedWaiters[weight - 1] = [];\n                insertSorted(this._weightedWaiters[weight - 1], { resolve, priority });\n            });\n        }\n    }\n    isLocked() {\n        return this._value <= 0;\n    }\n    getValue() {\n        return this._value;\n    }\n    setValue(value) {\n        this._value = value;\n        this._dispatchQueue();\n    }\n    release(weight = 1) {\n        if (weight <= 0)\n            throw new Error(`invalid weight ${weight}: must be positive`);\n        this._value += weight;\n        this._dispatchQueue();\n    }\n    cancel() {\n        this._queue.forEach((entry) => entry.reject(this._cancelError));\n        this._queue = [];\n    }\n    _dispatchQueue() {\n        this._drainUnlockWaiters();\n        while (this._queue.length > 0 && this._queue[0].weight <= this._value) {\n            this._dispatchItem(this._queue.shift());\n            this._drainUnlockWaiters();\n        }\n    }\n    _dispatchItem(item) {\n        const previousValue = this._value;\n        this._value -= item.weight;\n        item.resolve([previousValue, this._newReleaser(item.weight)]);\n    }\n    _newReleaser(weight) {\n        let called = false;\n        return () => {\n            if (called)\n                return;\n            called = true;\n            this.release(weight);\n        };\n    }\n    _drainUnlockWaiters() {\n        if (this._queue.length === 0) {\n            for (let weight = this._value; weight > 0; weight--) {\n                const waiters = this._weightedWaiters[weight - 1];\n                if (!waiters)\n                    continue;\n                waiters.forEach((waiter) => waiter.resolve());\n                this._weightedWaiters[weight - 1] = [];\n            }\n        }\n        else {\n            const queuedPriority = this._queue[0].priority;\n            for (let weight = this._value; weight > 0; weight--) {\n                const waiters = this._weightedWaiters[weight - 1];\n                if (!waiters)\n                    continue;\n                const i = waiters.findIndex((waiter) => waiter.priority <= queuedPriority);\n                (i === -1 ? waiters : waiters.splice(0, i))\n                    .forEach((waiter => waiter.resolve()));\n            }\n        }\n    }\n    _couldLockImmediately(weight, priority) {\n        return (this._queue.length === 0 || this._queue[0].priority < priority) &&\n            weight <= this._value;\n    }\n}\nfunction insertSorted(a, v) {\n    const i = findIndexFromEnd(a, (other) => v.priority <= other.priority);\n    a.splice(i + 1, 0, v);\n}\nfunction findIndexFromEnd(a, predicate) {\n    for (let i = a.length - 1; i >= 0; i--) {\n        if (predicate(a[i])) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nvar __awaiter$1 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass Mutex {\n    constructor(cancelError) {\n        this._semaphore = new Semaphore(1, cancelError);\n    }\n    acquire() {\n        return __awaiter$1(this, arguments, void 0, function* (priority = 0) {\n            const [, releaser] = yield this._semaphore.acquire(1, priority);\n            return releaser;\n        });\n    }\n    runExclusive(callback, priority = 0) {\n        return this._semaphore.runExclusive(() => callback(), 1, priority);\n    }\n    isLocked() {\n        return this._semaphore.isLocked();\n    }\n    waitForUnlock(priority = 0) {\n        return this._semaphore.waitForUnlock(1, priority);\n    }\n    release() {\n        if (this._semaphore.isLocked())\n            this._semaphore.release();\n    }\n    cancel() {\n        return this._semaphore.cancel();\n    }\n}\n\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nfunction withTimeout(sync, timeout, timeoutError = E_TIMEOUT) {\n    return {\n        acquire: (weightOrPriority, priority) => {\n            let weight;\n            if (isSemaphore(sync)) {\n                weight = weightOrPriority;\n            }\n            else {\n                weight = undefined;\n                priority = weightOrPriority;\n            }\n            if (weight !== undefined && weight <= 0) {\n                throw new Error(`invalid weight ${weight}: must be positive`);\n            }\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n                let isTimeout = false;\n                const handle = setTimeout(() => {\n                    isTimeout = true;\n                    reject(timeoutError);\n                }, timeout);\n                try {\n                    const ticket = yield (isSemaphore(sync)\n                        ? sync.acquire(weight, priority)\n                        : sync.acquire(priority));\n                    if (isTimeout) {\n                        const release = Array.isArray(ticket) ? ticket[1] : ticket;\n                        release();\n                    }\n                    else {\n                        clearTimeout(handle);\n                        resolve(ticket);\n                    }\n                }\n                catch (e) {\n                    if (!isTimeout) {\n                        clearTimeout(handle);\n                        reject(e);\n                    }\n                }\n            }));\n        },\n        runExclusive(callback, weight, priority) {\n            return __awaiter(this, void 0, void 0, function* () {\n                let release = () => undefined;\n                try {\n                    const ticket = yield this.acquire(weight, priority);\n                    if (Array.isArray(ticket)) {\n                        release = ticket[1];\n                        return yield callback(ticket[0]);\n                    }\n                    else {\n                        release = ticket;\n                        return yield callback();\n                    }\n                }\n                finally {\n                    release();\n                }\n            });\n        },\n        release(weight) {\n            sync.release(weight);\n        },\n        cancel() {\n            return sync.cancel();\n        },\n        waitForUnlock: (weightOrPriority, priority) => {\n            let weight;\n            if (isSemaphore(sync)) {\n                weight = weightOrPriority;\n            }\n            else {\n                weight = undefined;\n                priority = weightOrPriority;\n            }\n            if (weight !== undefined && weight <= 0) {\n                throw new Error(`invalid weight ${weight}: must be positive`);\n            }\n            return new Promise((resolve, reject) => {\n                const handle = setTimeout(() => reject(timeoutError), timeout);\n                (isSemaphore(sync)\n                    ? sync.waitForUnlock(weight, priority)\n                    : sync.waitForUnlock(priority)).then(() => {\n                    clearTimeout(handle);\n                    resolve();\n                });\n            });\n        },\n        isLocked: () => sync.isLocked(),\n        getValue: () => sync.getValue(),\n        setValue: (value) => sync.setValue(value),\n    };\n}\nfunction isSemaphore(sync) {\n    return sync.getValue !== undefined;\n}\n\n// eslint-disable-next-lisne @typescript-eslint/explicit-module-boundary-types\nfunction tryAcquire(sync, alreadyAcquiredError = E_ALREADY_LOCKED) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return withTimeout(sync, 0, alreadyAcquiredError);\n}\n\nexport { E_ALREADY_LOCKED, E_CANCELED, E_TIMEOUT, Mutex, Semaphore, tryAcquire, withTimeout };\n","import {ethers} from \"ethers\";\nimport {loadKZG} from 'kzg-wasm';\nimport {Mutex} from 'async-mutex';\n\nfunction computeVersionedHash(commitment, blobCommitmentVersion) {\n    const computedVersionedHash = new Uint8Array(32);\n    computedVersionedHash.set([blobCommitmentVersion], 0);\n    const hash = ethers.getBytes(ethers.sha256(commitment));\n    computedVersionedHash.set(hash.subarray(1), 1);\n    return computedVersionedHash;\n}\n\nfunction commitmentsToVersionedHashes(commitment) {\n    return computeVersionedHash(commitment, 0x01);\n}\n\n// blob gas price\nconst MIN_BLOB_GASPRICE = 1n;\nconst BLOB_GASPRICE_UPDATE_FRACTION = 3338477n;\n\nfunction fakeExponential(factor, numerator, denominator) {\n    let i = 1n;\n    let output = 0n;\n    let numerator_accum = factor * denominator;\n    while (numerator_accum > 0n) {\n        output += numerator_accum;\n        numerator_accum = (numerator_accum * numerator) / (denominator * i);\n        i++;\n    }\n    return output / denominator;\n}\n\nexport class BlobUploader {\n    #kzg;\n\n    #provider;\n    #wallet;\n    #mutex;\n\n    constructor(rpc, pk) {\n        this.#provider = new ethers.JsonRpcProvider(rpc);\n        this.#wallet = new ethers.Wallet(pk, this.#provider);\n        this.#mutex = new Mutex();\n    }\n\n    async #getKzg() {\n        if (!this.#kzg) {\n            this.#kzg = await loadKZG();\n        }\n        return this.#kzg;\n    }\n\n    async getNonce() {\n        return await this.#wallet.getNonce();\n    }\n\n    async getBlobGasPrice() {\n        // get current block\n        const block = await this.#provider.getBlock(\"latest\");\n        const excessBlobGas = BigInt(block.excessBlobGas);\n        const gas = fakeExponential(MIN_BLOB_GASPRICE, excessBlobGas, BLOB_GASPRICE_UPDATE_FRACTION);\n        return gas * 11n / 10n;\n    }\n\n    async getGasPrice() {\n        return await this.#provider.getFeeData();\n    }\n\n    async estimateGas(params) {\n        const limit = await this.#provider.send(\"eth_estimateGas\", [params]);\n        if (limit) {\n            return BigInt(limit) * 11n / 10n;\n        }\n        return null;\n    }\n\n    async sendTx(tx, blobs) {\n        if (!blobs) {\n            return await this.#wallet.sendTransaction(tx);\n        }\n\n        if (tx.maxFeePerBlobGas == null) {\n            tx.maxFeePerBlobGas = await this.getBlobGasPrice();\n        }\n\n        // blobs\n        const kzg = await this.#getKzg();\n        const ethersBlobs = [];\n        const versionedHashes = [];\n        for (let i = 0; i < blobs.length; i++) {\n            const blob = blobs[i];\n            const commitment = kzg.blobToKzgCommitment(blob);\n            const proof = kzg.computeBlobKzgProof(blob, commitment);\n            ethersBlobs.push({\n                data: blob,\n                proof: proof,\n                commitment: commitment\n            });\n\n            const hash = commitmentsToVersionedHashes(commitment);\n            versionedHashes.push(ethers.hexlify(hash));\n        }\n\n        // send\n        tx.type = 3;\n        tx.blobVersionedHashes = versionedHashes;\n        tx.blobs = ethersBlobs;\n        tx.kzg = kzg;\n        return await this.#wallet.sendTransaction(tx);\n    }\n\n    async sendTxLock(tx, blobs) {\n        const release = await this.#mutex.acquire();\n        try {\n            return await this.sendTx(tx, blobs);\n        } finally {\n            release();\n        }\n    }\n\n    async getBlobHash(blob) {\n        const kzg = await this.#getKzg();\n        const commit = kzg.blobToKzgCommitment(blob);\n        const localHash = commitmentsToVersionedHashes(commit);\n        const hash = new Uint8Array(32);\n        hash.set(localHash.subarray(0, 32 - 8));\n        return ethers.hexlify(hash);\n    }\n}\n","\nexport const EthStorageAbi = [\n  'function putBlobs(uint256 num) public payable',\n  'function putBlob(bytes32 _key, uint256 _blobIdx, uint256 _length) public payable',\n  'function get(bytes32 _key, uint8 _decodeType, uint256 _off, uint256 _len) public view returns (bytes memory)',\n  'function size(bytes32 _key) public view returns (uint256)',\n  'function upfrontPayment() public view returns (uint256)'\n];\n\nexport const FlatDirectoryAbi = [\n  \"constructor(uint8 slotLimit, uint32 maxChunkSize, address storageAddress) public\",\n  \"function setDefault(bytes memory _defaultFile) public\",\n  \"function upfrontPayment() external view returns (uint256)\",\n  \"function getChunkHash(bytes memory name, uint256 chunkId) public view returns (bytes32)\",\n  \"function writeChunks(bytes memory name, uint256[] memory chunkIds, uint256[] memory sizes) external payable\",\n  \"function refund() public\",\n  \"function remove(bytes memory name) external returns (uint256)\",\n  \"function countChunks(bytes memory name) external view returns (uint256)\",\n  \"function isSupportBlob() view public returns (bool)\",\n  \"function getStorageMode(bytes memory name) public view returns(uint256)\",\n  'function readChunk(bytes memory name, uint256 chunkId) external view returns (bytes memory, bool)'\n];\n","\nconst SEPOLIA_CHAIN_ID = 11155111;\nconst QUARKCHAIN_L2_CHAIN_ID = 42069;\n\nexport const ETHSTORAGE_MAPPING = {\n    [SEPOLIA_CHAIN_ID]: '0x804C520d3c084C805E37A35E90057Ac32831F96f',\n    [QUARKCHAIN_L2_CHAIN_ID]: '0x90a708C0dca081ca48a9851a8A326775155f87Fd',\n}\n\n\n\nconst BlobTxBytesPerFieldElement         = 32;      // Size in bytes of a field element\nconst BlobTxFieldElementsPerBlob         = 4096;\nexport const BLOB_SIZE = BlobTxBytesPerFieldElement * BlobTxFieldElementsPerBlob;\nexport const BLOB_DATA_SIZE = 31 * BlobTxFieldElementsPerBlob;\n\n// DecodeType\nexport const RawData = 0;\nexport const PaddingPer31Bytes = 1;\n\n\n\nexport const MAX_BLOB_COUNT = 3;\n","import {ethers} from \"ethers\";\nimport {\n    BlobUploader,\n    stringToHex,\n    getChainId,\n    encodeBlobs\n} from \"./utils\";\nimport {\n    ETHSTORAGE_MAPPING,\n    BLOB_DATA_SIZE,\n    BLOB_SIZE,\n    PaddingPer31Bytes,\n    EthStorageAbi\n} from \"./param\";\n\nexport class EthStorage {\n    #ethStorageRpc;\n    #contractAddr;\n\n    #wallet;\n    #blobUploader;\n\n    static async create(config) {\n        const {rpc, ethStorageRpc, privateKey} = config;\n        const chainId = await getChainId(rpc);\n        const ethStorageAddress = ETHSTORAGE_MAPPING[chainId];\n        if (!ethStorageAddress) {\n            throw new Error(\"EthStorage: Network not supported yet.\");\n        }\n\n        return new EthStorage({\n            rpc,\n            ethStorageRpc,\n            privateKey,\n            ethStorageAddress\n        });\n    }\n\n    constructor(config) {\n        const {rpc, ethStorageRpc, privateKey, ethStorageAddress} = config;\n        this.#ethStorageRpc = ethStorageRpc;\n        this.#contractAddr = ethStorageAddress;\n\n        const provider = new ethers.JsonRpcProvider(rpc);\n        this.#wallet = new ethers.Wallet(privateKey, provider);\n        this.#blobUploader = new BlobUploader(rpc, privateKey);\n    }\n\n    async estimateCost(key, data) {\n        if (!data || !Buffer.isBuffer(data)) {\n            throw new Error(`EthStorage: Invalid data.`);\n        }\n        if (data.length < 0 || data.length > BLOB_DATA_SIZE) {\n            throw new Error(`EthStorage: the length of data(Buffer) should be > 0 && < ${BLOB_DATA_SIZE}.`);\n        }\n\n        const hexKey = ethers.keccak256(stringToHex(key));\n        const contract = new ethers.Contract(this.#contractAddr, EthStorageAbi, this.#wallet);\n        const [storageCost, maxFeePerBlobGas, gasFeeData] = await Promise.all([\n            contract.upfrontPayment(),\n            this.#blobUploader.getBlobGasPrice(),\n            this.#blobUploader.getGasPrice(),\n        ]);\n\n        const blobs = encodeBlobs(data);\n        const blobHash = await this.#blobUploader.getBlobHash(blobs[0]);\n        const gasLimit = await contract.putBlob.estimateGas(hexKey, 0, data.length, {\n            value: storageCost,\n            blobVersionedHashes: [blobHash]\n        });\n\n        // get cost\n        const totalGasCost = (gasFeeData.maxFeePerGas + gasFeeData.maxPriorityFeePerGas) * gasLimit;\n        const totalBlobGasCost = maxFeePerBlobGas * BigInt(BLOB_SIZE);\n        const gasCost = totalGasCost + totalBlobGasCost;\n        return {\n            storageCost,\n            gasCost\n        }\n    }\n\n    async write(key, data) {\n        if (!data || !Buffer.isBuffer(data)) {\n            throw new Error(`EthStorage: Invalid data.`);\n        }\n        if (data.length < 0 || data.length > BLOB_DATA_SIZE) {\n            throw new Error(`EthStorage: the length of data(Buffer) should be > 0 && < ${BLOB_DATA_SIZE}.`);\n        }\n\n        const contract = new ethers.Contract(this.#contractAddr, EthStorageAbi, this.#wallet);\n        const hexKey = ethers.keccak256(stringToHex(key));\n        const storageCost = await contract.upfrontPayment();\n        const tx = await contract.putBlob.populateTransaction(hexKey, 0, data.length, {\n            value: storageCost,\n        });\n\n        const blobs = encodeBlobs(data);\n        let txRes = await this.#blobUploader.sendTx(tx, blobs);\n        console.log(`EthStorage: Tx hash is ${txRes.hash}`)\n        txRes = await txRes.wait();\n        return txRes.status;\n    }\n\n    async read(key) {\n        if (!key) {\n            throw new Error(`EthStorage: Invalid key.`);\n        }\n        if(!this.#ethStorageRpc) {\n            throw new Error(`EthStorage: Reading content requires providing 'ethStorageRpc'.`)\n        }\n        const hexKey = ethers.keccak256(stringToHex(key));\n        const provider = new ethers.JsonRpcProvider(this.#ethStorageRpc);\n        const contract = new ethers.Contract(this.#contractAddr, EthStorageAbi, provider);\n        const size = await contract.size(hexKey, {\n            from: this.#wallet.address\n        });\n        if (size === 0n) {\n            throw new Error(`EthStorage: There is no data corresponding to key ${key} under wallet address ${this.#wallet.address}.`)\n        }\n        const data = await contract.get(hexKey, PaddingPer31Bytes, 0, size, {\n            from: this.#wallet.address\n        });\n        return ethers.getBytes(data);\n    }\n\n    async putBlobs(number, data) {\n        if (!data || !Buffer.isBuffer(data)) {\n            throw new Error(`EthStorage: Invalid data.`);\n        }\n\n        const contract = new ethers.Contract(this.#contractAddr, EthStorageAbi, this.#wallet);\n        const storageCost = await contract.upfrontPayment();\n        const tx = await contract.putBlobs.populateTransaction(number, {\n            value: storageCost * BigInt(number),\n        });\n\n        const blobs = encodeBlobs(data);\n        let txRes = await this.#blobUploader.sendTx(tx, [blobs[0]]);\n        console.log(`EthStorage: Tx hash is ${txRes.hash}`)\n        txRes = await txRes.wait();\n        return txRes.status;\n    }\n}\n","import {ethers} from \"ethers\";\nimport {\n    BLOB_DATA_SIZE,\n    MAX_BLOB_COUNT,\n    ETHSTORAGE_MAPPING,\n    FlatDirectoryAbi, BLOB_SIZE\n} from './param';\nimport {BlobUploader, encodeBlobs, getChainId, stringToHex} from \"./utils\";\n\nconst REMOVE_FAIL = -1;\nconst REMOVE_NORMAL = 0;\nconst REMOVE_SUCCESS = 1;\n\nconst VERSION_BLOB = '2';\n\n\nconst defaultCallback = {\n    onProgress: () => {\n    },\n    onFail: () => {\n    },\n    onSuccess: () => {\n    },\n}\n\nexport class FlatDirectory {\n    #ethStorageRpc;\n    #contractAddr;\n    #chainId;\n\n    #wallet;\n    #blobUploader;\n\n    static async create(config) {\n        const {rpc, ethStorageRpc, privateKey, address} = config;\n        const chainId = await getChainId(rpc);\n\n        return new FlatDirectory({\n            rpc,\n            ethStorageRpc,\n            privateKey,\n            address,\n            chainId\n        });\n    }\n\n    constructor(config) {\n        const {rpc, ethStorageRpc, privateKey, address, chainId} = config;\n        this.#ethStorageRpc = ethStorageRpc;\n        this.#contractAddr = address;\n        this.#chainId = chainId;\n\n        const provider = new ethers.JsonRpcProvider(rpc);\n        this.#wallet = new ethers.Wallet(privateKey, provider);\n        this.#blobUploader = new BlobUploader(rpc, privateKey);\n    }\n\n    check() {\n        if (!this.#contractAddr) {\n            throw new Error(`FlatDirectory: FlatDirectory not deployed!`);\n        }\n    }\n\n    async deploy() {\n        const ethStorage = ETHSTORAGE_MAPPING[this.#chainId] || '0x0000000000000000000000000000000000000000';\n        const contractByteCode = '0x60c0604052600060a09081526006906200001a9082620001ac565b503480156200002857600080fd5b50604051620038d0380380620038d08339810160408190526200004b9162000278565b60ff831660805282828281816200006233620000b5565b6002805463ffffffff909316600160a01b0263ffffffff60a01b1990931692909217909155600380546001600160a01b039092166001600160a01b031990921691909117905550620002e4945050505050565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200013257607f821691505b6020821081036200015357634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001a757600081815260208120601f850160051c81016020861015620001825750805b601f850160051c820191505b81811015620001a3578281556001016200018e565b5050505b505050565b81516001600160401b03811115620001c857620001c862000107565b620001e081620001d984546200011d565b8462000159565b602080601f831160018114620002185760008415620001ff5750858301515b600019600386901b1c1916600185901b178555620001a3565b600085815260208120601f198616915b82811015620002495788860151825594840194600190910190840162000228565b5085821015620002685787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000806000606084860312156200028e57600080fd5b835160ff81168114620002a057600080fd5b602085015190935063ffffffff81168114620002bb57600080fd5b60408501519092506001600160a01b0381168114620002d957600080fd5b809150509250925092565b6080516135c962000307600039600081816105500152611e9301526135c96000f3fe608060405260043610620001ee5760003560e01c8063590e1ae3116200010f578063caf1283611620000a3578063dd473fae116200006d578063dd473fae1462000776578063f14c7ad71462000794578063f2fde38b14620007ac578063f916c5b014620007d157620001ee565b8063caf1283614620006b5578063cf86bf9314620006f0578063d84eb56c146200072c578063dc38b0a2146200075157620001ee565b80638bf4515c11620000e55780638bf4515c14620006005780638da5cb5b146200062557806393b7628f1462000645578063956a3433146200069057620001ee565b8063590e1ae314620005ab5780635ba1d9e514620005c3578063715018a614620005e857620001ee565b80631ccbc6da116200018757806342216bed116200015d57806342216bed1462000504578063492c7b2a14620005295780634eed7cf1146200054057806358edef4c146200058657620001ee565b80631ccbc6da14620004ae5780631fbfa12714620004d55780632b68b9c614620004ec57620001ee565b806311ce026711620001c957806311ce026714620003de5780631a7237e014620004195780631c5ee10c146200044e5780631c993ad5146200048957620001ee565b8063038cd79f14620003705780630936286114620003895780631089f40f14620003b9575b348015620001fb57600080fd5b506000366060808284036200022157505060408051602081019091526000815262000365565b8383600081811062000237576200023762002a5f565b9050013560f81c60f81b6001600160f81b031916602f60f81b146200028357505060408051808201909152600e81526d0d2dcc6dee4e4cac6e840e0c2e8d60931b602082015262000365565b83836200029260018262002a8b565b818110620002a457620002a462002a5f565b909101356001600160f81b031916602f60f81b0390506200030657620002fd620002d2846001818862002aa1565b6006604051602001620002e89392919062002b03565b604051602081830303815290604052620007f6565b50905062000358565b6200035462000319846001818862002aa1565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250620007f692505050565b5090505b6200036381620008a1565b505b915050805190602001f35b620003876200038136600462002ca3565b620008e2565b005b3480156200039657600080fd5b50620003a16200092c565b604051620003b0919062002d66565b60405180910390f35b348015620003c657600080fd5b5062000387620003d836600462002d7b565b620009c2565b348015620003eb57600080fd5b5060035462000400906001600160a01b031681565b6040516001600160a01b039091168152602001620003b0565b3480156200042657600080fd5b506200043e6200043836600462002da3565b62000a15565b604051620003b092919062002deb565b3480156200045b57600080fd5b50620004736200046d36600462002e11565b62000ac5565b60408051928352602083019190915201620003b0565b3480156200049657600080fd5b5062000387620004a836600462002e11565b62000b58565b348015620004bb57600080fd5b50620004c662000b97565b604051908152602001620003b0565b62000387620004e636600462002ed9565b62000c0d565b348015620004f957600080fd5b506200038762000d92565b3480156200051157600080fd5b50620004c66200052336600462002da3565b62000dcd565b620003876200053a36600462002f6a565b62000e78565b3480156200054d57600080fd5b507f000000000000000000000000000000000000000000000000000000000000000060ff1615155b6040519015158152602001620003b0565b3480156200059357600080fd5b50620004c6620005a536600462002e11565b62000f8f565b348015620005b857600080fd5b506200038762001057565b348015620005d057600080fd5b5062000575620005e236600462002da3565b620010c1565b348015620005f557600080fd5b506200038762001181565b3480156200060d57600080fd5b506200043e6200061f36600462002e11565b620007f6565b3480156200063257600080fd5b506002546001600160a01b031662000400565b3480156200065257600080fd5b50620006816200066436600462002e11565b805160209182012060009081526005909152604090205460ff1690565b604051620003b0919062002ff6565b3480156200069d57600080fd5b50620004c6620006af36600462003013565b620011bc565b348015620006c257600080fd5b50620006da620006d436600462002da3565b62001276565b60408051928352901515602083015201620003b0565b348015620006fd57600080fd5b506002546200071690600160a01b900463ffffffff1681565b60405163ffffffff9091168152602001620003b0565b3480156200073957600080fd5b50620004c66200074b36600462002da3565b6200130c565b3480156200075e57600080fd5b50620003876200077036600462003036565b620013c2565b3480156200078357600080fd5b50651b585b9d585b60d21b620004c6565b348015620007a157600080fd5b506200057562001411565b348015620007b957600080fd5b5062000387620007cb36600462003036565b6200143d565b348015620007de57600080fd5b50620004c6620007f036600462002e11565b620014dc565b60606000806200081d84805160209182012060009081526005909152604090205460ff1690565b9050600281600281111562000836576200083662002fe0565b0362000858576200084e848051906020012062001561565b9250925050915091565b60018160028111156200086f576200086f62002fe0565b0362000887576200084e848051906020012062001761565b505060408051600080825260208201909252939092509050565b600081516040620008b3919062003061565b9050601f19620008c582602062003061565b620008d290601f62003061565b1690506020808303528060208303f35b6002546001600160a01b03163314620009185760405162461bcd60e51b81526004016200090f9062003077565b60405180910390fd5b62000927836000848462000e78565b505050565b600680546200093b9062002acd565b80601f0160208091040260200160405190810160405280929190818152602001828054620009699062002acd565b8015620009ba5780601f106200098e57610100808354040283529160200191620009ba565b820191906000526020600020905b8154815290600101906020018083116200099c57829003601f168201915b505050505081565b6002546001600160a01b03163314620009ef5760405162461bcd60e51b81526004016200090f9062003077565b6002805463ffffffff909216600160a01b0263ffffffff60a01b19909216919091179055565b606060008062000a3c85805160209182012060009081526005909152604090205460ff1690565b9050600281600281111562000a555762000a5562002fe0565b0362000a795762000a6e8580519060200120856200188e565b925092505062000abe565b600181600281111562000a905762000a9062002fe0565b0362000aa95762000a6e8580519060200120856200196b565b50506040805160008082526020820190925291505b9250929050565b600080600062000aec84805160209182012060009081526005909152604090205460ff1690565b9050600281600281111562000b055762000b0562002fe0565b0362000b1d576200084e8480519060200120620019e4565b600181600281111562000b345762000b3462002fe0565b0362000b4c576200084e848051906020012062001abb565b50600093849350915050565b6002546001600160a01b0316331462000b855760405162461bcd60e51b81526004016200090f9062003077565b600662000b938282620030f6565b5050565b60035460408051630e65e36d60e11b815290516000926001600160a01b031691631ccbc6da9160048083019260209291908290030181865afa15801562000be2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c089190620031c2565b905090565b6002546001600160a01b0316331462000c3a5760405162461bcd60e51b81526004016200090f9062003077565b62000c4462001411565b62000cab5760405162461bcd60e51b815260206004820152603060248201527f5468652063757272656e74206e6574776f726b20646f6573206e6f742073757060448201526f1c1bdc9d08189b1bd8881d5c1b1bd85960821b60648201526084016200090f565b600062000ccf84805160209182012060009081526005909152604090205460ff1690565b9050600081600281111562000ce85762000ce862002fe0565b148062000d095750600281600281111562000d075762000d0762002fe0565b145b62000d4e5760405162461bcd60e51b8152602060048201526014602482015273496e76616c69642073746f72616765206d6f646560601b60448201526064016200090f565b600081600281111562000d655762000d6562002fe0565b0362000d785762000d7884600262001b12565b62000d8c8480519060200120848462001b54565b50505050565b6002546001600160a01b0316331462000dbf5760405162461bcd60e51b81526004016200090f9062003077565b6002546001600160a01b0316ff5b60008062000df284805160209182012060009081526005909152604090205460ff1690565b9050600281600281111562000e0b5762000e0b62002fe0565b0362000e2d5762000e24848051906020012084620011bc565b91505062000e72565b600181600281111562000e445762000e4462002fe0565b0362000e6c57600062000e58858562000a15565b508051602090910120925062000e72915050565b50600090505b92915050565b6002546001600160a01b0316331462000ea55760405162461bcd60e51b81526004016200090f9062003077565b600062000ec985805160209182012060009081526005909152604090205460ff1690565b9050600081600281111562000ee25762000ee262002fe0565b148062000f035750600181600281111562000f015762000f0162002fe0565b145b62000f485760405162461bcd60e51b8152602060048201526014602482015273496e76616c69642073746f72616765206d6f646560601b60448201526064016200090f565b600081600281111562000f5f5762000f5f62002fe0565b0362000f725762000f7285600162001b12565b62000f8885805190602001208585853462001e83565b5050505050565b6002546000906001600160a01b0316331462000fbf5760405162461bcd60e51b81526004016200090f9062003077565b600062000fe383805160209182012060009081526005909152604090205460ff1690565b9050600281600281111562000ffc5762000ffc62002fe0565b036200101d57620010168380519060200120600062001f6c565b9392505050565b600181600281111562001034576200103462002fe0565b036200104e57620010168380519060200120600062001fcc565b50600092915050565b6002546001600160a01b03163314620010845760405162461bcd60e51b81526004016200090f9062003077565b6002546040516001600160a01b03909116904780156108fc02916000818181858888f19350505050158015620010be573d6000803e3d6000fd5b50565b6002546000906001600160a01b03163314620010f15760405162461bcd60e51b81526004016200090f9062003077565b60006200111584805160209182012060009081526005909152604090205460ff1690565b905060028160028111156200112e576200112e62002fe0565b03620011475762000e248480519060200120846200208e565b60018160028111156200115e576200115e62002fe0565b03620011775762000e2484805190602001208462002116565b5060009392505050565b6002546001600160a01b03163314620011ae5760405162461bcd60e51b81526004016200090f9062003077565b620011ba600062002206565b565b6000620011c98362002258565b8210620011d95750600062000e72565b60035460008481526004602081815260408084208785529091529182902054915163d8389dc560e01b8152908101919091526001600160a01b039091169063d8389dc590602401602060405180830381865afa1580156200123e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012649190620031dc565b67ffffffffffffffff19169392505050565b60008060006200129d85805160209182012060009081526005909152604090205460ff1690565b90506002816002811115620012b657620012b662002fe0565b03620012cf5762000a6e85805190602001208562002299565b6001816002811115620012e657620012e662002fe0565b03620012ff5762000a6e8580519060200120856200234d565b5060009485945092505050565b6002546000906001600160a01b031633146200133c5760405162461bcd60e51b81526004016200090f9062003077565b60006200136084805160209182012060009081526005909152604090205460ff1690565b9050600281600281111562001379576200137962002fe0565b03620013925762000e2484805190602001208462001f6c565b6001816002811115620013a957620013a962002fe0565b03620011775762000e2484805190602001208462001fcc565b6002546001600160a01b03163314620013ef5760405162461bcd60e51b81526004016200090f9062003077565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6003546000906001600160a01b03161580159062000c08575060006200143662000b97565b1015905090565b6002546001600160a01b031633146200146a5760405162461bcd60e51b81526004016200090f9062003077565b6001600160a01b038116620014d15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016200090f565b620010be8162002206565b6000806200150183805160209182012060009081526005909152604090205460ff1690565b905060028160028111156200151a576200151a62002fe0565b03620015325762001016838051906020012062002258565b600181600281111562001549576200154962002fe0565b036200104e57620010168380519060200120620023a5565b606060008060006200157385620019e4565b9150915080600003620015bb5760005b6040519080825280601f01601f191660200182016040528015620015ae576020820181803683370190505b5095600095509350505050565b6000826001600160401b03811115620015d857620015d862002b90565b6040519080825280601f01601f19166020018201604052801562001603576020820181803683370190505b5090506000805b838110156200175257600088815260046020818152604080842085855290915280832054600354915163afd5644d60e01b815292830181905292916001600160a01b039091169063afd5644d90602401602060405180830381865afa15801562001678573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200169e9190620031c2565b60035460405163bea94b8b60e01b81529192506001600160a01b03169063bea94b8b90620016d9908590600190600090879060040162003209565b600060405180830381865afa158015620016f7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200172191908101906200323e565b508060406020868801013e62001738818562003061565b9350505080806200174990620032bd565b9150506200160a565b50909660019650945050505050565b60606000806000620017738562001abb565b91509150806000036200178857600062001583565b6000826001600160401b03811115620017a557620017a562002b90565b6040519080825280601f01601f191660200182016040528015620017d0576020820181803683370190505b5090506020810160005b838110156200175257600088815260208181526040808320848452909152812054906200180782620023e4565b156200184957620018188260e01c90565b60008b8152600160209081526040808320878452909152902090915062001841908386620023f9565b505062001868565b816200185581620024ad565b50915062001864818662002513565b5050505b62001874818562003061565b9350505080806200188590620032bd565b915050620017da565b60606000806200189f858562002299565b5090506001811015620018c657505060408051600080825260208201909252915062000abe565b600354600086815260046020818152604080842089855290915280832054905163bea94b8b60e01b815292936001600160a01b03169263bea94b8b92620019169291600191879189910162003209565b600060405180830381865afa15801562001934573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200195e91908101906200323e565b9660019650945050505050565b600082815260208181526040808320848452909152812054606091906200199281620023e4565b15620019cc5760008581526001602090815260408083208784529091528120620019bd908362002572565b93506001925062000abe915050565b80620019d88162002619565b93509350505062000abe565b6000806000620019f48462002258565b90506000805b8281101562001ab15760035460008781526004602081815260408084208685529091529182902054915163afd5644d60e01b8152908101919091526001600160a01b039091169063afd5644d90602401602060405180830381865afa15801562001a68573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001a8e9190620031c2565b62001a9a908362003061565b91508062001aa881620032bd565b915050620019fa565b5094909350915050565b6000806000805b60008062001ad187846200234d565b915091508062001ae357505062001b08565b62001aef828562003061565b93508262001afd81620032bd565b935050505062001ac2565b9094909350915050565b81516020808401919091206000908152600590915260409020805482919060ff1916600183600281111562001b4b5762001b4b62002fe0565b02179055505050565b815160035460408051630e65e36d60e11b815290516000926001600160a01b031691631ccbc6da9160048083019260209291908290030181865afa15801562001ba1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001bc79190620031c2565b905062001bd58282620032d9565b34101562001c1d5760405162461bcd60e51b8152602060048201526014602482015273696e73756666696369656e742062616c616e636560601b60448201526064016200090f565b60005b828160ff16101562001e7b57838160ff168151811062001c445762001c4462002a5f565b6020026020010151600010801562001c935750600260149054906101000a900463ffffffff1663ffffffff16848260ff168151811062001c885762001c8862002a5f565b602002602001015111155b62001cd85760405162461bcd60e51b81526020600482015260146024820152730d2dcecc2d8d2c840c6d0eadcd640d8cadccee8d60631b60448201526064016200090f565b62001d0386868360ff168151811062001cf55762001cf562002a5f565b6020026020010151620026bf565b60003387878460ff168151811062001d1f5762001d1f62002a5f565b602002602001015160405160200162001d56939291906001600160a01b039390931683526020830191909152604082015260600190565b604051602081830303815290604052805190602001209050600360009054906101000a90046001600160a01b03166001600160a01b0316634581a920848385898760ff168151811062001dad5762001dad62002a5f565b60200260200101516040518563ffffffff1660e01b815260040162001de89392919092835260ff919091166020830152604082015260600190565b6000604051808303818588803b15801562001e0257600080fd5b505af115801562001e17573d6000803e3d6000fd5b505050505080600460008981526020019081526020016000206000888560ff168151811062001e4a5762001e4a62002a5f565b602002602001015181526020019081526020016000208190555050808062001e7290620032f3565b91505062001c20565b505050505050565b62001e8f85856200275d565b60ff7f00000000000000000000000000000000000000000000000000000000000000001682111562001ef65762001ed862001ecc84848462002875565b6001600160a01b031690565b60008681526020818152604080832088845290915290205562000f88565b60008581526001602090815260408083208784528252918290208251601f860183900483028101830190935284835262001f4d92909186908690819084018382808284376000920191909152506200293192505050565b6000868152602081815260408083208884529091529020555050505050565b60005b60008381526004602090815260408083208584529091529020548062001f96575062001fc6565b60008481526004602090815260408083208684529091528120558262001fbc81620032bd565b9350505062001f6f565b50919050565b60005b6000838152602081815260408083208584529091529020548062001ff4575062001fc6565b62001fff81620023e4565b62002060576000819050806001600160a01b0316632b68b9c66040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200204557600080fd5b505af11580156200205a573d6000803e3d6000fd5b50505050505b600084815260208181526040808320868452909152812055826200208481620032bd565b9350505062001fcf565b600082815260046020908152604080832084845290915281205480620020b957600091505062000e72565b600084815260046020526040812081620020d586600162003061565b81526020019081526020016000205414620020f557600091505062000e72565b50506000918252600460209081526040808420928452919052812055600190565b600082815260208181526040808320848452909152812054806200213f57600091505062000e72565b6000848152602081905260408120816200215b86600162003061565b815260200190815260200160002054146200217b57600091505062000e72565b6200218681620023e4565b620021e7576000819050806001600160a01b0316632b68b9c66040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620021cc57600080fd5b505af1158015620021e1573d6000803e3d6000fd5b50505050505b5050600091825260208281526040808420928452919052812055600190565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000805b60008381526004602090815260408083208484529091529020548062002283575062000e72565b816200228f81620032bd565b925050506200225c565b600080620022a78462002258565b8310620022ba5750600090508062000abe565b600354600085815260046020818152604080842088855290915280832054905163afd5644d60e01b81529182015290916001600160a01b03169063afd5644d90602401602060405180830381865afa1580156200231b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620023419190620031c2565b95600195509350505050565b6000828152602081815260408083208484529091528120548190806200237b57600080925092505062000abe565b6200238681620023e4565b1562002399576000620019bd8260e01c90565b80620019d881620024ad565b6000805b60008381526020818152604080832084845290915290205480620023ce575062000e72565b81620023da81620032bd565b92505050620023a9565b600080620023f28360e01c90565b1192915050565b60008060006200240985620029cb565b808652909350905083601c8411156200249f57601c81016000805b6020600162002435601c8a62002a8b565b6200244290602062003061565b6200244e919062002a8b565b6200245a919062003315565b8110156200249b57600081815260208b815260409091205480855292506200248490849062003061565b9250806200249281620032bd565b91505062002424565b5050505b600192505050935093915050565b6000806001600160a01b038316620024ca57506000928392509050565b60008060405180610160016040528061012681526020016200346e6101269139519050843b91508082101562002507575060009485945092505050565b62002341818362002a8b565b6000806000806200252486620024ad565b91509150806200253d5760008093509350505062000abe565b600060405180610160016040528061012681526020016200346e6101269139519050828187893c509095600195509350505050565b606060006200258183620029e6565b92509050601c8111156200261257603c82016000805b60206001620025a8601c8762002a8b565b620025b590602062003061565b620025c1919062002a8b565b620025cd919062003315565b8110156200260e57600081815260208881526040909120548085529250620025f790849062003061565b9250806200260581620032bd565b91505062002597565b5050505b5092915050565b606060008060006200262b85620024ad565b91509150806200263d57600062001583565b6000826001600160401b038111156200265a576200265a62002b90565b6040519080825280601f01601f19166020018201604052801562002685576020820181803683370190505b509050600060405180610160016040528061012681526020016200346e6101269139519050838160208401893c5095600195509350505050565b60008281526004602090815260408083208484529091529020548062000927578115806200271657506000838152600460205260408120816200270460018662002a8b565b81526020019081526020016000205414155b620009275760405162461bcd60e51b81526020600482015260166024820152751b5d5cdd081c995c1b1858d9481bdc88185c1c195b9960521b60448201526064016200090f565b60008281526020818152604080832084845290915290205480620027f957811580620027b25750600083815260208190526040812081620027a060018662002a8b565b81526020019081526020016000205414155b620027f95760405162461bcd60e51b81526020600482015260166024820152751b5d5cdd081c995c1b1858d9481bdc88185c1c195b9960521b60448201526064016200090f565b6200280481620023e4565b6200092757806001600160a01b0381161562000d8c57806001600160a01b0316632b68b9c66040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200285657600080fd5b505af11580156200286b573d6000803e3d6000fd5b5050505050505050565b60008060405180610160016040528061012681526020016200346e61012691398585604051602001620028ab9392919062003338565b60408051601f1981840301815291905290506000620028cd6043602062003061565b30838201529050620028e2608c602062003061565b905030818301525060008382604051620028fc9062002a51565b62002908919062002d66565b6040518091039082f090508015801562002926573d6000803e3d6000fd5b509695505050505050565b805160208083015160e083901b911c1790601c81111562002612576000603c8401815b6020600162002965601c8762002a8b565b6200297290602062003061565b6200297e919062002a8b565b6200298a919062003315565b8110156200260e5781519250620029a382602062003061565b6000828152602089905260409020849055915080620029c281620032bd565b91505062002954565b600080620029d98360e01c90565b9360209390931b92915050565b60006060620029f58360e01c90565b9150602083901b9250816001600160401b0381111562002a195762002a1962002b90565b6040519080825280601f01601f19166020018201604052801562002a44576020820181803683370190505b5060208101939093525091565b61010b806200336383390190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111562000e725762000e7262002a75565b6000808585111562002ab257600080fd5b8386111562002ac057600080fd5b5050820193919092039150565b600181811c9082168062002ae257607f821691505b60208210810362001fc657634e487b7160e01b600052602260045260246000fd5b828482376000838201600081526000845462002b1f8162002acd565b6001828116801562002b3a576001811462002b505762002b81565b60ff198416865282151583028601945062002b81565b8860005260208060002060005b8581101562002b785781548982015290840190820162002b5d565b50505082860194505b50929998505050505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171562002bd15762002bd162002b90565b604052919050565b60006001600160401b0382111562002bf55762002bf562002b90565b50601f01601f191660200190565b600082601f83011262002c1557600080fd5b813562002c2c62002c268262002bd9565b62002ba6565b81815284602083860101111562002c4257600080fd5b816020850160208301376000918101602001919091529392505050565b60008083601f84011262002c7257600080fd5b5081356001600160401b0381111562002c8a57600080fd5b60208301915083602082850101111562000abe57600080fd5b60008060006040848603121562002cb957600080fd5b83356001600160401b038082111562002cd157600080fd5b62002cdf8783880162002c03565b9450602086013591508082111562002cf657600080fd5b5062002d058682870162002c5f565b9497909650939450505050565b60005b8381101562002d2f57818101518382015260200162002d15565b50506000910152565b6000815180845262002d5281602086016020860162002d12565b601f01601f19169290920160200192915050565b60208152600062001016602083018462002d38565b60006020828403121562002d8e57600080fd5b813563ffffffff811681146200101657600080fd5b6000806040838503121562002db757600080fd5b82356001600160401b0381111562002dce57600080fd5b62002ddc8582860162002c03565b95602094909401359450505050565b60408152600062002e00604083018562002d38565b905082151560208301529392505050565b60006020828403121562002e2457600080fd5b81356001600160401b0381111562002e3b57600080fd5b62002e498482850162002c03565b949350505050565b600082601f83011262002e6357600080fd5b813560206001600160401b0382111562002e815762002e8162002b90565b8160051b62002e9282820162002ba6565b928352848101820192828101908785111562002ead57600080fd5b83870192505b8483101562002ece5782358252918301919083019062002eb3565b979650505050505050565b60008060006060848603121562002eef57600080fd5b83356001600160401b038082111562002f0757600080fd5b62002f158783880162002c03565b9450602086013591508082111562002f2c57600080fd5b62002f3a8783880162002e51565b9350604086013591508082111562002f5157600080fd5b5062002f608682870162002e51565b9150509250925092565b6000806000806060858703121562002f8157600080fd5b84356001600160401b038082111562002f9957600080fd5b62002fa78883890162002c03565b955060208701359450604087013591508082111562002fc557600080fd5b5062002fd48782880162002c5f565b95989497509550505050565b634e487b7160e01b600052602160045260246000fd5b60208101600383106200300d576200300d62002fe0565b91905290565b600080604083850312156200302757600080fd5b50508035926020909101359150565b6000602082840312156200304957600080fd5b81356001600160a01b03811681146200101657600080fd5b8082018082111562000e725762000e7262002a75565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b601f8211156200092757600081815260208120601f850160051c81016020861015620030d55750805b601f850160051c820191505b8181101562001e7b57828155600101620030e1565b81516001600160401b0381111562003112576200311262002b90565b6200312a8162003123845462002acd565b84620030ac565b602080601f831160018114620031625760008415620031495750858301515b600019600386901b1c1916600185901b17855562001e7b565b600085815260208120601f198616915b82811015620031935788860151825594840194600190910190840162003172565b5085821015620031b25787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215620031d557600080fd5b5051919050565b600060208284031215620031ef57600080fd5b815167ffffffffffffffff19811681146200101657600080fd5b848152608081016002851062003223576200322362002fe0565b84602083015283604083015282606083015295945050505050565b6000602082840312156200325157600080fd5b81516001600160401b038111156200326857600080fd5b8201601f810184136200327a57600080fd5b80516200328b62002c268262002bd9565b818152856020838501011115620032a157600080fd5b620032b482602083016020860162002d12565b95945050505050565b600060018201620032d257620032d262002a75565b5060010190565b808202811582820484141762000e725762000e7262002a75565b600060ff821660ff81036200330c576200330c62002a75565b60010192915050565b6000826200333357634e487b7160e01b600052601260045260246000fd5b500490565b600084516200334c81846020890162002d12565b820183858237600093019283525090939250505056fe608060405260405161010b38038061010b83398101604081905261002291610041565b80518060208301f35b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561005457600080fd5b82516001600160401b038082111561006b57600080fd5b818501915085601f83011261007f57600080fd5b8151818111156100915761009161002b565b604051601f8201601f19908116603f011681019083821181831017156100b9576100b961002b565b8160405282815288868487010111156100d157600080fd5b600093505b828410156100f357848401860151818501870152928501926100d6565b60008684830101528096505050505050509291505056fe6080604052348015600f57600080fd5b506004361060325760003560e01c80632b68b9c61460375780638da5cb5b14603f575b600080fd5b603d6081565b005b60657f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161460ed5760405162461bcd60e51b815260206004820152600e60248201526d3737ba10333937b69037bbb732b960911b604482015260640160405180910390fd5b33fffea2646970667358221220fc66c9afb7cb2f6209ae28167cf26c6c06f86a82cbe3c56de99027979389a1be64736f6c63430008070033a264697066735822122074ecdb7c1356cd26b7ae20a002751e685b2c97645c0ec1b1214c316ec9516dce64736f6c63430008120033';\n        const factory = new ethers.ContractFactory(FlatDirectoryAbi, contractByteCode, this.#wallet);\n        try {\n            const contract = await factory.deploy(0, BLOB_DATA_SIZE, ethStorage, {gasLimit: 3800000});\n            await contract.waitForDeployment();\n\n            this.#contractAddr = await contract.getAddress();\n            console.log(`FlatDirectory: Address is ${this.#contractAddr}`);\n            return this.#contractAddr;\n        } catch (e) {\n            console.error(`FlatDirectory: Deploy FlatDirectory failed!`, e.message);\n            return null;\n        }\n    }\n\n    async setDefault(filename) {\n        this.check();\n\n        const hexName = filename ? stringToHex(filename) : \"0x\";\n        const fileContract = new ethers.Contract(this.#contractAddr, FlatDirectoryAbi, this.#wallet);\n        try {\n            const tx = await fileContract.setDefault(hexName);\n            console.log(`FlatDirectory: Tx hash is ${tx.hash}`);\n            const txReceipt = await tx.wait();\n            return txReceipt.status;\n        } catch (e) {\n            console.error(`FlatDirectory: Set default file failed!`, e.message);\n        }\n        return false;\n    }\n\n    async refund() {\n        this.check();\n\n        const fileContract = new ethers.Contract(this.#contractAddr, FlatDirectoryAbi, this.#wallet);\n        try {\n            const tx = await fileContract.refund();\n            console.log(`FlatDirectory: Tx hash is ${tx.hash}`);\n            const txReceipt = await tx.wait();\n            return txReceipt.status;\n        } catch (e) {\n            console.error(`FlatDirectory: Refund failed!`, e.message);\n        }\n        return false;\n    }\n\n    async remove(key) {\n        this.check();\n\n        const fileContract = new ethers.Contract(this.#contractAddr, FlatDirectoryAbi, this.#wallet);\n        try {\n            const tx = await fileContract.remove(stringToHex(key));\n            console.log(`FlatDirectory: tx hash is ${tx.hash}`);\n            const receipt = await tx.wait();\n            return receipt.status;\n        } catch (e) {\n            console.error(`FlatDirectory: Failed to remove file: ${key}`, e.message);\n        }\n        return false;\n    }\n\n    async download(key) {\n        this.check();\n        if (!this.#ethStorageRpc) {\n            throw new Error(`FlatDirectory: Reading content requires providing 'ethStorageRpc'.`);\n        }\n\n        let buff = [];\n        const hexName = stringToHex(key);\n        const provider = new ethers.JsonRpcProvider(this.#ethStorageRpc);\n        const contract = new ethers.Contract(this.#contractAddr, FlatDirectoryAbi, provider);\n        try {\n            const blobCount = contract.countChunks(hexName);\n            for (let i = 0; i < blobCount; i++) {\n                const result = await contract.readChunk(hexName, i);\n                const chunk = ethers.getBytes(result[0]);\n                buff = [...buff, ...chunk];\n            }\n        } catch (e) {\n            console.error(`FlatDirectory: Download failed!`, e.message);\n        }\n        return Buffer.from(buff);\n    }\n\n    downloadSync(key, cb = defaultCallback) {\n        this.check();\n        if (!this.#ethStorageRpc) {\n            throw new Error(`FlatDirectory: Reading content requires providing 'ethStorageRpc'.`);\n        }\n\n        const hexName = stringToHex(key);\n        const provider = new ethers.JsonRpcProvider(this.#ethStorageRpc);\n        const contract = new ethers.Contract(this.#contractAddr, FlatDirectoryAbi, provider);\n        try {\n            contract.countChunks(hexName).then(async (blobCount) => {\n                let buff = [];\n                for (let i = 0; i < blobCount; i++) {\n                    let result;\n                    try {\n                        result = await contract.readChunk(hexName, i);\n                    } catch (e) {\n                        cb.onFail(e);\n                        return;\n                    }\n                    const chunk = ethers.getBytes(result[0]);\n                    cb.onProgress(i, blobCount, Buffer.from(chunk));\n                    buff = [...buff, ...chunk];\n                }\n                cb.onSuccess(Buffer.from(buff));\n            });\n        } catch (err) {\n            cb.onFail(err)\n        }\n    }\n\n    async estimateCost(key, data) {\n        this.check();\n\n        const hexName = stringToHex(key);\n        const fileContract = new ethers.Contract(this.#contractAddr, FlatDirectoryAbi, this.#wallet);\n        const [isSupport, fileMod, cost, maxFeePerBlobGas, gasFeeData] = await Promise.all([\n            fileContract.isSupportBlob(),\n            fileContract.getStorageMode(hexName),\n            fileContract.upfrontPayment(),\n            this.#blobUploader.getBlobGasPrice(),\n            this.#blobUploader.getGasPrice(),\n        ]);\n        if (!isSupport) {\n            throw new Error(`FlatDirectory: The contract does not support blob upload!`);\n        }\n        if (fileMod !== BigInt(VERSION_BLOB) && fileMod !== 0n) {\n            throw new Error(`FlatDirectory: This file does not support blob upload!`);\n        }\n\n        let totalGasCost = 0n;\n        let totalStorageCost = 0n;\n        let gasLimit = 0;\n\n        const content = Buffer.from(data);\n        const blobs = encodeBlobs(content);\n        const blobLength = blobs.length;\n        const blobDataSize = BLOB_DATA_SIZE;\n        const fileSize = content.length;\n        // send\n        for (let i = 0; i < blobLength; i += MAX_BLOB_COUNT) {\n            const blobArr = [];\n            const chunkIdArr = [];\n            const chunkSizeArr = [];\n            const blobHashArr = [];\n            let max = i + MAX_BLOB_COUNT > blobLength ? blobLength : i + MAX_BLOB_COUNT;\n            for (let j = i; j < max; j++) {\n                blobArr.push(blobs[j]);\n                chunkIdArr.push(j);\n                if (gasLimit === 0) {\n                    blobHashArr.push(await this.#blobUploader.getBlobHash(blobs[j]));\n                    if (j === blobLength - 1) {\n                        chunkSizeArr.push(fileSize - blobDataSize * (blobLength - 1));\n                    } else {\n                        chunkSizeArr.push(blobDataSize);\n                    }\n                }\n            }\n\n            // check change\n            const isChange = await this.#checkChange(fileContract, hexName, blobArr, chunkIdArr);\n            if (!isChange) {\n                continue;\n            }\n\n            // upload\n            const value = cost * BigInt(blobArr.length);\n            // storage\n            totalStorageCost += value;\n            // gas\n            if (gasLimit === 0) {\n                gasLimit = await fileContract.writeChunks.estimateGas(hexName, chunkIdArr, chunkSizeArr, {\n                    value: value,\n                    blobVersionedHashes: blobHashArr\n                });\n            }\n            const gasCost = (gasFeeData.maxFeePerGas + gasFeeData.maxPriorityFeePerGas) * gasLimit;\n            const blobGasCost = maxFeePerBlobGas * BigInt(BLOB_SIZE);\n            totalGasCost += gasCost + blobGasCost;\n        }\n\n        return {\n            storageCost: totalStorageCost,\n            gasCost: totalGasCost\n        }\n    }\n\n    // ******upload data******* /\n    async uploadData(key, data, cb = defaultCallback) {\n        this.check();\n\n        const hexName = stringToHex(key);\n        const fileContract = new ethers.Contract(this.#contractAddr, FlatDirectoryAbi, this.#wallet);\n        const [isSupport, fileMod] = await Promise.all([\n            fileContract.isSupportBlob(),\n            fileContract.getStorageMode(hexName),\n        ]).catch();\n        if (!isSupport) {\n            cb.onFail(new Error(`FlatDirectory: The contract does not support blob upload!`));\n            return;\n        }\n        if (fileMod !== BigInt(VERSION_BLOB) && fileMod !== 0n) {\n            cb.onFail(new Error(`FlatDirectory: This file does not support blob upload!`));\n            return;\n        }\n\n        const content = Buffer.from(data);\n        const blobs = encodeBlobs(content);\n        const blobLength = blobs.length;\n        const blobDataSize = BLOB_DATA_SIZE;\n        const fileSize = content.length;\n        // check old data\n        const [cost, oldChunkLength] = await Promise.all([\n            fileContract.upfrontPayment(),\n            fileContract.countChunks(hexName),\n        ]).catch();\n        const clearState = await this.#clearOldFile(hexName, blobLength, oldChunkLength);\n        if (clearState === REMOVE_FAIL) {\n            cb.onFail(new Error(`FlatDirectory: Failed to delete old data!`));\n            return;\n        }\n\n        // send\n        let totalUploadCount = 0;\n        let totalUploadSize = 0;\n        let totalCost = 0n;\n        for (let i = 0; i < blobLength; i += MAX_BLOB_COUNT) {\n            const blobArr = [];\n            const chunkIdArr = [];\n            const chunkSizeArr = [];\n            let max = i + MAX_BLOB_COUNT > blobLength ? blobLength : i + MAX_BLOB_COUNT;\n            for (let j = i; j < max; j++) {\n                blobArr.push(blobs[j]);\n                chunkIdArr.push(j);\n                if (j === blobLength - 1) {\n                    chunkSizeArr.push(fileSize - blobDataSize * (blobLength - 1));\n                } else {\n                    chunkSizeArr.push(blobDataSize);\n                }\n            }\n\n            // check change\n            if (clearState === REMOVE_NORMAL) {\n                try {\n                    const isChange = await this.#checkChange(fileContract, hexName, blobArr, chunkIdArr);\n                    if (!isChange) {\n                        console.log(`FlatDirectory: The ${chunkIdArr} chunks of file ${key} have not changed.`);\n                        cb.onProgress(chunkIdArr, blobLength);\n                        continue;\n                    }\n                } catch (e) {\n                    cb.onFail(e);\n                    const length = e.message.length;\n                    console.log(length > 500 ? (e.message.substring(0, 245) + \" ... \" + e.message.substring(length - 245, length)) : e.message);\n                    return;\n                }\n            }\n\n            // upload\n            try {\n                const status = await this.#uploadBlob(fileContract, key, hexName, blobArr, chunkIdArr, chunkSizeArr, cost);\n                if (!status) {\n                    cb.onFail(new Error(\"FlatDirectory: Sending transaction failed.\"));\n                    return; //  fail\n                }\n            } catch (e) {\n                cb.onFail(e);\n                const length = e.message.length;\n                console.log(length > 500 ? (e.message.substring(0, 245) + \" ... \" + e.message.substring(length - 245, length)) : e.message);\n                return;\n            }\n            // success\n            cb.onProgress(chunkIdArr, blobLength);\n            totalCost += cost * BigInt(blobArr.length);\n            totalUploadCount += blobArr.length;\n            for (let i = 0; i < chunkSizeArr.length; i++) {\n                totalUploadSize += chunkSizeArr[i];\n            }\n        }\n\n        cb.onSuccess({\n            totalUploadCount,\n            totalUploadSize,\n            totalCost,\n        });\n    }\n\n    async #clearOldFile(key, chunkLength, oldChunkLength) {\n        if (oldChunkLength > chunkLength) {\n            // remove\n            const v = await this.remove(key);\n            if (v) {\n                return REMOVE_SUCCESS;\n            } else {\n                return REMOVE_FAIL;\n            }\n        } else if (oldChunkLength === 0) {\n            return REMOVE_SUCCESS;\n        } else {\n            return REMOVE_NORMAL;\n        }\n    }\n\n    async #checkChange(fileContract, hexName, blobArr, chunkIdArr) {\n        let hasChange = false;\n        for (let j = 0; j < blobArr.length; j++) {\n            const dataHash = await fileContract.getChunkHash(hexName, chunkIdArr[j]);\n            const localHash = await this.#blobUploader.getBlobHash(blobArr[j]);\n            if (dataHash !== localHash) {\n                hasChange = true;\n                break;\n            }\n        }\n        return hasChange;\n    }\n\n    async #uploadBlob(fileContract, key, hexName, blobArr, chunkIdArr, chunkSizeArr, cost) {\n        // create tx\n        const value = cost * BigInt(blobArr.length);\n        const tx = await fileContract.writeChunks.populateTransaction(hexName, chunkIdArr, chunkSizeArr, {\n            value: value,\n        });\n        // send\n        const txResponse = await this.#blobUploader.sendTxLock(tx, blobArr);\n        console.log(`FlatDirectory: The ${chunkIdArr} chunks of file ${key} hash is ${txResponse.hash}.`);\n        const txReceipt = await txResponse.wait();\n        return txReceipt && txReceipt.status;\n    }\n}\n"],"names":["BlobTxBytesPerFieldElement","BlobTxFieldElementsPerBlob","BLOB_SIZE"],"mappings":"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","x_google_ignoreList":[2]}