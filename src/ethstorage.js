const fs = require("fs");
const {ethers} = require("ethers");
const {BlobUploader} = require("./uploader");
const {EncodeBlobs, BLOB_FILE_SIZE} = require("./blobs");

const MAX_BLOB_COUNT = 3;
const ETH_STORAGE = "0xb4B46bdAA835F8E4b4d8e208B6559cD267851051";
const flatDirectoryBlobAbi = [
    "function setEthStorageContract(address storageAddress) public",
    "function setDefault(bytes memory _defaultFile) public",
    "function upfrontPayment() external view returns (uint256)",
    "function getChunkHash(bytes memory name, uint256 chunkId) public view returns (bytes32)",
    "function writeChunk(bytes memory name, uint256[] memory chunkIds, uint256[] memory sizes) external payable",
];

const stringToHex = (s) => ethers.hexlify(ethers.toUtf8Bytes(s));

class EthStorage {
    #wallet;
    #blobUploader;
    #contractAddr;

    constructor(rpc, privateKey, contractAddr = null) {
        const provider = new ethers.JsonRpcProvider(rpc);
        this.#wallet = new ethers.Wallet(privateKey, provider);
        this.#blobUploader = new BlobUploader(rpc, privateKey);
        this.#contractAddr = contractAddr;
    }

    async deployDirectory() {
        const contractByteCode = '0x60008054600160a01b600160e01b03191663f800000160b11b17815560a0604052608090815260049062000034908262000149565b503480156200004257600080fd5b506200004e3362000054565b62000215565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620000cf57607f821691505b602082108103620000f057634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200014457600081815260208120601f850160051c810160208610156200011f5750805b601f850160051c820191505b8181101562000140578281556001016200012b565b5050505b505050565b81516001600160401b03811115620001655762000165620000a4565b6200017d81620001768454620000ba565b84620000f6565b602080601f831160018114620001b557600084156200019c5750858301515b600019600386901b1c1916600185901b17855562000140565b600085815260208120601f198616915b82811015620001e657888601518255948401946001909101908401620001c5565b5085821015620002055787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b611e4080620002256000396000f3fe6080604052600436106101405760003560e01c8063715018a6116100b6578063caf128361161006f578063caf1283614610504578063d84eb56c14610539578063dd473fae14610559578063f2fde38b14610575578063f916c5b014610595578063fb859653146105b557610140565b8063715018a6146104515780638da5cb5b146104665780638f208b5314610484578063a837b07a146104a4578063a9950abf146104c4578063ba406b88146104e457610140565b80632b68b9c6116101085780632b68b9c61461038957806342216bed1461039e57806348813604146103be57806358edef4c146103ec578063590e1ae31461040c5780635ba1d9e51461042157610140565b806309362861146102ac57806311ce0267146102d75780631c5ee10c1461030f5780631c993ad5146103445780631ccbc6da14610366575b34801561014c57600080fd5b506000366060808284036101705750506040805160208101909152600081526102a1565b838360008181106101835761018361166a565b9050013560f81c60f81b6001600160f81b031916602f60f81b146101cd57505060408051808201909152600e81526d0d2dcc6dee4e4cac6e840e0c2e8d60931b60208201526102a1565b83836101da600182611696565b8181106101e9576101e961166a565b909101356001600160f81b031916602f60f81b0390506102455761023d61021384600181886116a9565b60046040516020016102279392919061170d565b60405160208183030381529060405260016105c8565b509050610296565b61029261025584600181886116a9565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250600192506105c8915050565b5090505b61029f816105e9565b505b915050805190602001f35b3480156102b857600080fd5b506102c1610624565b6040516102ce91906117e2565b60405180910390f35b3480156102e357600080fd5b506001546102f7906001600160a01b031681565b6040516001600160a01b0390911681526020016102ce565b34801561031b57600080fd5b5061032f61032a3660046118ba565b6106b2565b604080519283526020830191909152016102ce565b34801561035057600080fd5b5061036461035f3660046118ba565b6106ce565b005b34801561037257600080fd5b5061037b610711565b6040519081526020016102ce565b34801561039557600080fd5b50610364610784565b3480156103aa57600080fd5b5061037b6103b93660046118f7565b6107bc565b3480156103ca57600080fd5b506103de6103d936600461194b565b6108a1565b6040516102ce9291906119a2565b3480156103f857600080fd5b5061037b6104073660046118ba565b6108c4565b34801561041857600080fd5b50610364610909565b34801561042d57600080fd5b5061044161043c3660046118f7565b610970565b60405190151581526020016102ce565b34801561045d57600080fd5b506103646109b3565b34801561047257600080fd5b506000546001600160a01b03166102f7565b34801561049057600080fd5b506103de61049f3660046119c6565b6105c8565b3480156104b057600080fd5b506103de6104bf3660046118f7565b6109e9565b3480156104d057600080fd5b506103646104df366004611a14565b610a00565b3480156104f057600080fd5b506103de6104ff3660046118f7565b610a4c565b34801561051057600080fd5b5061052461051f3660046118f7565b610a63565b604080519283529015156020830152016102ce565b34801561054557600080fd5b5061037b6105543660046118f7565b610a77565b34801561056557600080fd5b50651b585b9d585b60d21b61037b565b34801561058157600080fd5b50610364610590366004611a14565b610ab3565b3480156105a157600080fd5b5061037b6105b03660046118ba565b610b4b565b6103646105c3366004611abd565b610b6a565b606060006105dd848051906020012084610bb3565b915091505b9250929050565b6000815160406105f99190611b45565b9050601f19610609826020611b45565b61061490601f611b45565b1690506020808303528060208303f35b60048054610631906116d3565b80601f016020809104026020016040519081016040528092919081815260200182805461065d906116d3565b80156106aa5780601f1061067f576101008083540402835291602001916106aa565b820191906000526020600020905b81548152906001019060200180831161068d57829003601f168201915b505050505081565b6000806106c58380519060200120610d32565b91509150915091565b6000546001600160a01b031633146107015760405162461bcd60e51b81526004016106f890611b58565b60405180910390fd5b600461070d8282611bd3565b5050565b60015460408051630e65e36d60e11b815290516000926001600160a01b031691631ccbc6da9160048083019260209291908290030181865afa15801561075b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077f9190611c93565b905090565b6000546001600160a01b031633146107ae5760405162461bcd60e51b81526004016106f890611b58565b6000546001600160a01b0316ff5b815160208301206000906107dc8160009081526002602052604090205490565b83106107ec57506000905061089b565b600154600082815260026020526040902080546001600160a01b039092169163d8389dc59190869081106108225761082261166a565b90600052602060002001546040518263ffffffff1660e01b815260040161084b91815260200190565b602060405180830381865afa158015610868573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088c9190611cac565b67ffffffffffffffff19169150505b92915050565b606060006108b785805190602001208585610d80565b915091505b935093915050565b600080546001600160a01b031633146108ef5760405162461bcd60e51b81526004016106f890611b58565b61090182805190602001206000610e6c565b90505b919050565b6000546001600160a01b031633146109335760405162461bcd60e51b81526004016106f890611b58565b600080546040516001600160a01b03909116914780156108fc02929091818181858888f1935050505015801561096d573d6000803e3d6000fd5b50565b600080546001600160a01b0316331461099b5760405162461bcd60e51b81526004016106f890611b58565b6109ac838051906020012083610fd7565b9392505050565b6000546001600160a01b031633146109dd5760405162461bcd60e51b81526004016106f890611b58565b6109e7600061111c565b565b606060006105dd8480519060200120600185610d80565b6000546001600160a01b03163314610a2a5760405162461bcd60e51b81526004016106f890611b58565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b606060006105dd848051906020012060018561116c565b6000806105dd8480519060200120846112b8565b600080546001600160a01b03163314610aa25760405162461bcd60e51b81526004016106f890611b58565b6109ac838051906020012083610e6c565b6000546001600160a01b03163314610add5760405162461bcd60e51b81526004016106f890611b58565b6001600160a01b038116610b425760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106f8565b61096d8161111c565b6000610901828051906020012060009081526002602052604090205490565b6000546001600160a01b03163314610b945760405162461bcd60e51b81526004016106f890611b58565b610ba683805190602001208383611320565b610bae610909565b505050565b60606000806000610bc386610d32565b9150915080600003610bea57505060408051600080825260208201909252925090506105e2565b60008267ffffffffffffffff811115610c0557610c056117f5565b6040519080825280601f01601f191660200182016040528015610c2f576020820181803683370190505b5090506000805b83811015610d22576000898152600260205260408120805483908110610c5e57610c5e61166a565b60009182526020808320909101548083526003909152604080832054600154915163bea94b8b60e01b8152929450926001600160a01b039091169163bea94b8b91610cb19186918f918790600401611cd7565b600060405180830381865afa158015610cce573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cf69190810190611d17565b508060406020868801013e610d0b8185611b45565b935050508080610d1a90611d8e565b915050610c36565b5090976001975095505050505050565b6000806000805b600080610d4687846112b8565b9150915080610d56575050610d76565b610d608285611b45565b935082610d6c81611d8e565b9350505050610d39565b9094909350915050565b6060600080610d8f86856112b8565b5090506001811015610db45750506040805160008082526020820190925291506108bc565b6001546000878152600260205260408120805491926001600160a01b03169163bea94b8b919088908110610dea57610dea61166a565b60009182526020822001546040516001600160e01b031960e085901b168152610e19928b918890600401611cd7565b600060405180830381865afa158015610e36573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e5e9190810190611d17565b976001975095505050505050565b6000828152600260205260408120548110610ec95760405162461bcd60e51b815260206004820152601760248201527f7468652066696c6520686173206e6f20636f6e74656e7400000000000000000060448201526064016106f8565b600083815260026020526040812054610ee490600190611696565b90505b828110610fcf57600154600085815260026020526040902080546001600160a01b03909216916395bc2673919086908110610f2457610f2461166a565b90600052602060002001546040518263ffffffff1660e01b8152600401610f4d91815260200190565b600060405180830381600087803b158015610f6757600080fd5b505af1158015610f7b573d6000803e3d6000fd5b5050506000858152600260205260409020805490915080610f9e57610f9e611da7565b600190038181906000526020600020016000905590558060000315610fcf5780610fc781611dbd565b915050610ee7565b509092915050565b6000828152600260205260408120548290610ff490600190611696565b1461104c5760405162461bcd60e51b815260206004820152602260248201527f6f6e6c7920746865206c617374206368756e6b2063616e2062652072656d6f76604482015261195960f21b60648201526084016106f8565b600154600084815260026020526040902080546001600160a01b03909216916395bc26739190859081106110825761108261166a565b90600052602060002001546040518263ffffffff1660e01b81526004016110ab91815260200190565b600060405180830381600087803b1580156110c557600080fd5b505af11580156110d9573d6000803e3d6000fd5b50505060008481526002602052604090208054909150806110fc576110fc611da7565b600190038181906000526020600020016000905590556001905092915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b606060008061117e846201f000611dd4565b905060008167ffffffffffffffff81111561119b5761119b6117f5565b6040519080825280601f01601f1916602001820160405280156111c5576020820181803683370190505b5090506000805b86811015610d225760008981526002602052604081208054839081106111f4576111f461166a565b60009182526020808320909101548083526003909152604080832054600154915163bea94b8b60e01b8152929450926001600160a01b039091169163bea94b8b916112479186918f918790600401611cd7565b600060405180830381865afa158015611264573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261128c9190810190611d17565b508060406020868801013e6112a18185611b45565b9350505080806112b090611d8e565b9150506111cc565b600082815260026020526040812054819083106112da575060009050806105e2565b60008481526002602052604081208054859081106112fa576112fa61166a565b600091825260208083209190910154825260039052604090205495600195509350505050565b815160015460408051630e65e36d60e11b815290516000926001600160a01b031691631ccbc6da9160048083019260209291908290030181865afa15801561136c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113909190611c93565b905061139c8282611dd4565b3410156113e25760405162461bcd60e51b8152602060048201526014602482015273696e73756666696369656e742062616c616e636560601b60448201526064016106f8565b60005b828160ff16101561166257600060189054906101000a900463ffffffff1663ffffffff16848260ff168151811061141e5761141e61166a565b6020026020010151111561146b5760405162461bcd60e51b81526020600482015260146024820152730d2dcecc2d8d2c840c6d0eadcd640d8cadccee8d60631b60448201526064016106f8565b61148486868360ff1681518110610bae57610bae61166a565b60003342878460ff168151811061149d5761149d61166a565b6020026020010151846040516020016114dd94939291906001600160a01b039490941684526020840192909252604083015260ff16606082015260800190565b60408051808303601f1901815290829052805160209091012060015460005463022c0d4960e51b84526004840183905260ff86166024850152600160a01b900463ffffffff1660448401529092506001600160a01b031690634581a9209085906064016000604051808303818588803b15801561155957600080fd5b505af115801561156d573d6000803e3d6000fd5b50505050506115888760009081526002602052604090205490565b868360ff168151811061159d5761159d61166a565b602002602001015110156115fd578060026000898152602001908152602001600020878460ff16815181106115d4576115d461166a565b6020026020010151815481106115ec576115ec61166a565b60009182526020909120015561161f565b6000878152600260209081526040822080546001810182559083529120018190555b848260ff16815181106116345761163461166a565b602090810291909101810151600092835260039091526040909120558061165a81611deb565b9150506113e5565b505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561089b5761089b611680565b600080858511156116b957600080fd5b838611156116c657600080fd5b5050820193919092039150565b600181811c908216806116e757607f821691505b60208210810361170757634e487b7160e01b600052602260045260246000fd5b50919050565b8284823760008382016000815260008454611727816116d3565b6001828116801561173f576001811461175457611783565b60ff1984168652821515830286019450611783565b8860005260208060002060005b8581101561177a57815489820152908401908201611761565b50505082860194505b50929998505050505050505050565b60005b838110156117ad578181015183820152602001611795565b50506000910152565b600081518084526117ce816020860160208601611792565b601f01601f19169290920160200192915050565b6020815260006109ac60208301846117b6565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611834576118346117f5565b604052919050565b600067ffffffffffffffff821115611856576118566117f5565b50601f01601f191660200190565b600082601f83011261187557600080fd5b81356118886118838261183c565b61180b565b81815284602083860101111561189d57600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156118cc57600080fd5b813567ffffffffffffffff8111156118e357600080fd5b6118ef84828501611864565b949350505050565b6000806040838503121561190a57600080fd5b823567ffffffffffffffff81111561192157600080fd5b61192d85828601611864565b95602094909401359450505050565b80356002811061090457600080fd5b60008060006060848603121561196057600080fd5b833567ffffffffffffffff81111561197757600080fd5b61198386828701611864565b9350506119926020850161193c565b9150604084013590509250925092565b6040815260006119b560408301856117b6565b905082151560208301529392505050565b600080604083850312156119d957600080fd5b823567ffffffffffffffff8111156119f057600080fd5b6119fc85828601611864565b925050611a0b6020840161193c565b90509250929050565b600060208284031215611a2657600080fd5b81356001600160a01b03811681146109ac57600080fd5b600082601f830112611a4e57600080fd5b8135602067ffffffffffffffff821115611a6a57611a6a6117f5565b8160051b611a7982820161180b565b9283528481018201928281019087851115611a9357600080fd5b83870192505b84831015611ab257823582529183019190830190611a99565b979650505050505050565b600080600060608486031215611ad257600080fd5b833567ffffffffffffffff80821115611aea57600080fd5b611af687838801611864565b94506020860135915080821115611b0c57600080fd5b611b1887838801611a3d565b93506040860135915080821115611b2e57600080fd5b50611b3b86828701611a3d565b9150509250925092565b8082018082111561089b5761089b611680565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b601f821115610bae57600081815260208120601f850160051c81016020861015611bb45750805b601f850160051c820191505b8181101561166257828155600101611bc0565b815167ffffffffffffffff811115611bed57611bed6117f5565b611c0181611bfb84546116d3565b84611b8d565b602080601f831160018114611c365760008415611c1e5750858301515b600019600386901b1c1916600185901b178555611662565b600085815260208120601f198616915b82811015611c6557888601518255948401946001909101908401611c46565b5085821015611c835787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215611ca557600080fd5b5051919050565b600060208284031215611cbe57600080fd5b815167ffffffffffffffff19811681146109ac57600080fd5b8481526080810160028510611cfc57634e487b7160e01b600052602160045260246000fd5b84602083015283604083015282606083015295945050505050565b600060208284031215611d2957600080fd5b815167ffffffffffffffff811115611d4057600080fd5b8201601f81018413611d5157600080fd5b8051611d5f6118838261183c565b818152856020838501011115611d7457600080fd5b611d85826020830160208601611792565b95945050505050565b600060018201611da057611da0611680565b5060010190565b634e487b7160e01b600052603160045260246000fd5b600081611dcc57611dcc611680565b506000190190565b808202811582820484141761089b5761089b611680565b600060ff821660ff8103611e0157611e01611680565b6001019291505056fea2646970667358221220d3b6032af7f12e628fb3b9138059c48b93a8a8c0fd8c8b714e4dc5a05143f7c264736f6c63430008120033';
        const factory = new ethers.ContractFactory(flatDirectoryBlobAbi, contractByteCode, this.#wallet);
        let contract = await factory.deploy({gasLimit: 3000000});
        contract = await contract.waitForDeployment();
        if (contract) {
            const tx = await contract.setEthStorageContract(ETH_STORAGE);
            await tx.wait();
            console.log(`FlatDirectory Address: ${await contract.getAddress()}`);
            this.#contractAddr = await contract.getAddress();
        } else {
            console.error(`ERROR: deploy flat directory failed!`);
        }
    }

    async setDefaultFile(filename) {
        if (!this.#contractAddr) {
            console.error(`ERROR: flat directory not deployed!`);
            return;
        }

        const fileContract = new ethers.Contract(this.#contractAddr, flatDirectoryBlobAbi, this.#wallet);
        const defaultFile = '0x' + Buffer.from(filename, 'utf8').toString('hex');
        const tx = await fileContract.setDefault(defaultFile);
        const txReceipt = await tx.wait();
        if (txReceipt.status) {
            console.log(`Set succeeds`);
        } else {
            console.error(`ERROR: set failed!`);
        }
    }

    async upload(filePath) {
        if (!this.#contractAddr) {
            console.error(`ERROR: flat directory not deployed!`);
            return;
        }
        const fileStat = fs.statSync(filePath);
        if (!fileStat.isFile()) {
            console.error(`ERROR: only upload file!`);
            return;
        }

        const fileContract = new ethers.Contract(this.#contractAddr, flatDirectoryBlobAbi, this.#wallet);
        const cost = await fileContract.upfrontPayment();

        const content = fs.readFileSync(filePath);
        const blobs = EncodeBlobs(content);
        const blobLength = blobs.length;
        const fileSize = fileStat.size;
        const fileName = filePath.substring(filePath.lastIndexOf("/") + 1);
        const hexName = stringToHex(fileName);

        let successIndex = 0;
        for (let i = 0; i < blobLength; i += MAX_BLOB_COUNT) {
            const blobArr = [];
            const indexArr = [];
            const lenArr = [];
            let max = i + MAX_BLOB_COUNT > blobLength ? blobLength : i + MAX_BLOB_COUNT;
            for (let j = i; j < max; j++) {
                blobArr.push(blobs[j]);
                indexArr.push(j);
                if (j === blobLength - 1) {
                    lenArr.push(fileSize - BLOB_FILE_SIZE * (blobLength - 1));
                } else {
                    lenArr.push(BLOB_FILE_SIZE);
                }
            }

            // check
            let hasChange = false;
            for (let j = 0; j < blobArr.length; j++) {
                const dataHash = await fileContract.getChunkHash(hexName, indexArr[j]);
                const localHash = this.#blobUploader.getBlobHash(blobArr[j]);
                if (dataHash !== localHash) {
                    hasChange = true;
                    break;
                }
            }
            if (!hasChange) {
                successIndex += indexArr.length;
                console.log(`File ${fileName} chunkId: ${indexArr}: The data is not changed.`);
                continue;
            }

            // send
            let success = false;
            try {
                const value = cost * BigInt(blobArr.length);
                const tx = await fileContract.writeChunk.populateTransaction(hexName, indexArr, lenArr, {
                    value
                });
                const hash = await this.#blobUploader.sendTx(tx, blobArr);
                console.log(`Transaction Id: ${hash}`);
                const txReceipt = await this.#blobUploader.getTxReceipt(hash);
                if (txReceipt && txReceipt.status) {
                    success = true;
                    successIndex += indexArr.length;
                    console.log(`File ${fileName} chunkId: ${indexArr} uploaded!`);
                }
            } catch (e) {
                console.log('Error:' + e);
            }
            if (!success) {
                break;
            }
        }
        return {
            totalBlobCount: blobLength,
            successBlobIndex: successIndex,
        }
    }
}

module.exports = {
    EthStorage
}
