const fs = require("fs");
const {ethers} = require("ethers");
const {BlobUploader} = require("./uploader");
const {EncodeBlobs, BLOB_FILE_SIZE} = require("./blobs");

const MAX_BLOB_COUNT = 3;
const ETH_STORAGE = "0xb4B46bdAA835F8E4b4d8e208B6559cD267851051";
const flatDirectoryBlobAbi = [
    "constructor(uint32 size, address storageAddress) public",
    "function setDefault(bytes memory _defaultFile) public",
    "function upfrontPayment() external view returns (uint256)",
    "function getChunkHash(bytes memory name, uint256 chunkId) public view returns (bytes32)",
    "function writeChunk(bytes memory name, uint256[] memory chunkIds, uint256[] memory sizes) external payable",
];

const stringToHex = (s) => ethers.hexlify(ethers.toUtf8Bytes(s));

class EthStorage {
    #wallet;
    #blobUploader;
    #contractAddr;

    constructor(rpc, privateKey, contractAddr = null) {
        const provider = new ethers.JsonRpcProvider(rpc);
        this.#wallet = new ethers.Wallet(privateKey, provider);
        this.#blobUploader = new BlobUploader(rpc, privateKey);
        this.#contractAddr = contractAddr;
    }

    async deployDirectory() {
        const contractByteCode = '0x60c0604052600060a09081526003906200001a908262000181565b503480156200002857600080fd5b5060405162002089380380620020898339810160408190526200004b916200024d565b818162000058336200008c565b63ffffffff91909116608052600180546001600160a01b0319166001600160a01b03909216919091179055506200029f9050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200010757607f821691505b6020821081036200012857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200017c57600081815260208120601f850160051c81016020861015620001575750805b601f850160051c820191505b81811015620001785782815560010162000163565b5050505b505050565b81516001600160401b038111156200019d576200019d620000dc565b620001b581620001ae8454620000f2565b846200012e565b602080601f831160018114620001ed5760008415620001d45750858301515b600019600386901b1c1916600185901b17855562000178565b600085815260208120601f198616915b828110156200021e57888601518255948401946001909101908401620001fd565b50858210156200023d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600080604083850312156200026157600080fd5b825163ffffffff811681146200027657600080fd5b60208401519092506001600160a01b03811681146200029457600080fd5b809150509250929050565b608051611dc7620002c260003960008181610537015261131d0152611dc76000f3fe6080604052600436106101355760003560e01c8063715018a6116100ab578063d84eb56c1161006f578063d84eb56c146104e9578063dd473fae14610509578063e72438b014610525578063f2fde38b1461056e578063f916c5b01461058e578063fb859653146105ae57610135565b8063715018a6146104415780638bf4515c146104565780638da5cb5b14610476578063a9950abf14610494578063caf12836146104b457610135565b80631ccbc6da116100fd5780631ccbc6da146103845780632b68b9c6146103a757806342216bed146103bc57806358edef4c146103dc578063590e1ae3146103fc5780635ba1d9e51461041157610135565b8063093628611461029c57806311ce0267146102c75780631a7237e0146102ff5780631c5ee10c1461032d5780631c993ad514610362575b34801561014157600080fd5b50600036606080828403610165575050604080516020810190915260008152610291565b83836000818110610178576101786116a5565b9050013560f81c60f81b6001600160f81b031916602f60f81b146101c257505060408051808201909152600e81526d0d2dcc6dee4e4cac6e840e0c2e8d60931b6020820152610291565b83836101cf6001826116d1565b8181106101de576101de6116a5565b909101356001600160f81b031916602f60f81b0390506102385761023061020884600181886116e4565b600360405160200161021c93929190611748565b6040516020818303038152906040526105c1565b509050610286565b61028261024884600181886116e4565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506105c192505050565b5090505b61028f816105de565b505b915050805190602001f35b3480156102a857600080fd5b506102b1610619565b6040516102be919061181d565b60405180910390f35b3480156102d357600080fd5b506001546102e7906001600160a01b031681565b6040516001600160a01b0390911681526020016102be565b34801561030b57600080fd5b5061031f61031a3660046118f5565b6106a7565b6040516102be92919061193a565b34801561033957600080fd5b5061034d61034836600461195e565b6106c8565b604080519283526020830191909152016102be565b34801561036e57600080fd5b5061038261037d36600461195e565b6106db565b005b34801561039057600080fd5b5061039961071e565b6040519081526020016102be565b3480156103b357600080fd5b50610382610791565b3480156103c857600080fd5b506103996103d73660046118f5565b6107c9565b3480156103e857600080fd5b506103996103f736600461195e565b6108ae565b34801561040857600080fd5b506103826108eb565b34801561041d57600080fd5b5061043161042c3660046118f5565b610952565b60405190151581526020016102be565b34801561044d57600080fd5b50610382610995565b34801561046257600080fd5b5061031f61047136600461195e565b6105c1565b34801561048257600080fd5b506000546001600160a01b03166102e7565b3480156104a057600080fd5b506103826104af36600461199b565b6109cb565b3480156104c057600080fd5b506104d46104cf3660046118f5565b610a17565b604080519283529015156020830152016102be565b3480156104f557600080fd5b506103996105043660046118f5565b610a2b565b34801561051557600080fd5b50651b585b9d585b60d21b610399565b34801561053157600080fd5b506105597f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff90911681526020016102be565b34801561057a57600080fd5b5061038261058936600461199b565b610a67565b34801561059a57600080fd5b506103996105a936600461195e565b610aff565b6103826105bc366004611a44565b610b1e565b606060006105d58380519060200120610b67565b91509150915091565b6000815160406105ee9190611acc565b9050601f196105fe826020611acc565b61060990601f611acc565b1690506020808303528060208303f35b600380546106269061170e565b80601f01602080910402602001604051908101604052809291908181526020018280546106529061170e565b801561069f5780601f106106745761010080835404028352916020019161069f565b820191906000526020600020905b81548152906001019060200180831161068257829003601f168201915b505050505081565b606060006106bc848051906020012084610d43565b915091505b9250929050565b6000806105d58380519060200120610e2f565b6000546001600160a01b0316331461070e5760405162461bcd60e51b815260040161070590611adf565b60405180910390fd5b600361071a8282611b5a565b5050565b60015460408051630e65e36d60e11b815290516000926001600160a01b031691631ccbc6da9160048083019260209291908290030181865afa158015610768573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078c9190611c1a565b905090565b6000546001600160a01b031633146107bb5760405162461bcd60e51b815260040161070590611adf565b6000546001600160a01b0316ff5b815160208301206000906107e98160009081526002602052604090205490565b83106107f95750600090506108a8565b600154600082815260026020526040902080546001600160a01b039092169163d8389dc591908690811061082f5761082f6116a5565b90600052602060002001546040518263ffffffff1660e01b815260040161085891815260200190565b602060405180830381865afa158015610875573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108999190611c33565b67ffffffffffffffff19169150505b92915050565b600080546001600160a01b031633146108d95760405162461bcd60e51b815260040161070590611adf565b6108a882805190602001206000610e7d565b6000546001600160a01b031633146109155760405162461bcd60e51b815260040161070590611adf565b600080546040516001600160a01b03909116914780156108fc02929091818181858888f1935050505015801561094f573d6000803e3d6000fd5b50565b600080546001600160a01b0316331461097d5760405162461bcd60e51b815260040161070590611adf565b61098e838051906020012083610fe8565b9392505050565b6000546001600160a01b031633146109bf5760405162461bcd60e51b815260040161070590611adf565b6109c9600061112d565b565b6000546001600160a01b031633146109f55760405162461bcd60e51b815260040161070590611adf565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000806106bc84805190602001208461117d565b600080546001600160a01b03163314610a565760405162461bcd60e51b815260040161070590611adf565b61098e838051906020012083610e7d565b6000546001600160a01b03163314610a915760405162461bcd60e51b815260040161070590611adf565b6001600160a01b038116610af65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610705565b61094f8161112d565b60006108a8828051906020012060009081526002602052604090205490565b6000546001600160a01b03163314610b485760405162461bcd60e51b815260040161070590611adf565b610b5a8380519060200120838361124b565b610b626108eb565b505050565b60606000806000610b7785610e2f565b9150915080600003610b9e5750506040805160008082526020820190925294909350915050565b60008267ffffffffffffffff811115610bb957610bb9611830565b6040519080825280601f01601f191660200182016040528015610be3576020820181803683370190505b5090506000805b83811015610d34576000888152600260205260408120805483908110610c1257610c126116a5565b600091825260208220015460015460405163afd5644d60e01b8152600481018390529193506001600160a01b03169063afd5644d90602401602060405180830381865afa158015610c67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8b9190611c1a565b6001805460405163bea94b8b60e01b81529293506001600160a01b03169163bea94b8b91610cc3918691906000908790600401611c5e565b600060405180830381865afa158015610ce0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d089190810190611c9e565b508060406020868801013e610d1d8185611acc565b935050508080610d2c90611d15565b915050610bea565b50909660019650945050505050565b6060600080610d52858561117d565b5090506001811015610d775750506040805160008082526020820190925291506106c1565b6001546000868152600260205260408120805491926001600160a01b03169163bea94b8b919088908110610dad57610dad6116a5565b60009182526020822001546040516001600160e01b031960e085901b168152610ddd926001918890600401611c5e565b600060405180830381865afa158015610dfa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e229190810190611c9e565b9660019650945050505050565b6000806000805b600080610e43878461117d565b9150915080610e53575050610e73565b610e5d8285611acc565b935082610e6981611d15565b9350505050610e36565b9094909350915050565b6000828152600260205260408120548110610eda5760405162461bcd60e51b815260206004820152601760248201527f7468652066696c6520686173206e6f20636f6e74656e740000000000000000006044820152606401610705565b600083815260026020526040812054610ef5906001906116d1565b90505b828110610fe057600154600085815260026020526040902080546001600160a01b03909216916395bc2673919086908110610f3557610f356116a5565b90600052602060002001546040518263ffffffff1660e01b8152600401610f5e91815260200190565b600060405180830381600087803b158015610f7857600080fd5b505af1158015610f8c573d6000803e3d6000fd5b5050506000858152600260205260409020805490915080610faf57610faf611d2e565b600190038181906000526020600020016000905590558060000315610fe05780610fd881611d44565b915050610ef8565b509092915050565b6000828152600260205260408120548290611005906001906116d1565b1461105d5760405162461bcd60e51b815260206004820152602260248201527f6f6e6c7920746865206c617374206368756e6b2063616e2062652072656d6f76604482015261195960f21b6064820152608401610705565b600154600084815260026020526040902080546001600160a01b03909216916395bc2673919085908110611093576110936116a5565b90600052602060002001546040518263ffffffff1660e01b81526004016110bc91815260200190565b600060405180830381600087803b1580156110d657600080fd5b505af11580156110ea573d6000803e3d6000fd5b505050600084815260026020526040902080549091508061110d5761110d611d2e565b600190038181906000526020600020016000905590556001905092915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000828152600260205260408120548190831061119f575060009050806106c1565b6001546000858152600260205260408120805491926001600160a01b03169163afd5644d9190879081106111d5576111d56116a5565b90600052602060002001546040518263ffffffff1660e01b81526004016111fe91815260200190565b602060405180830381865afa15801561121b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123f9190611c1a565b95600195509350505050565b815160015460408051630e65e36d60e11b815290516000926001600160a01b031691631ccbc6da9160048083019260209291908290030181865afa158015611297573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112bb9190611c1a565b90506112c78282611d5b565b34101561130d5760405162461bcd60e51b8152602060048201526014602482015273696e73756666696369656e742062616c616e636560601b6044820152606401610705565b60005b828160ff1610156115a3577f000000000000000000000000000000000000000000000000000000000000000063ffffffff16848260ff1681518110611357576113576116a5565b602002602001015111156113a45760405162461bcd60e51b81526020600482015260146024820152730d2dcecc2d8d2c840c6d0eadcd640d8cadccee8d60631b6044820152606401610705565b6113ca86868360ff16815181106113bd576113bd6116a5565b60200260200101516115ab565b60003342878460ff16815181106113e3576113e36116a5565b60200260200101518460405160200161142394939291906001600160a01b039490941684526020840192909252604083015260ff16606082015260800190565b604051602081830303815290604052805190602001209050600160009054906101000a90046001600160a01b03166001600160a01b0316634581a920848385898760ff1681518110611477576114776116a5565b60200260200101516040518563ffffffff1660e01b81526004016114b19392919092835260ff919091166020830152604082015260600190565b6000604051808303818588803b1580156114ca57600080fd5b505af11580156114de573d6000803e3d6000fd5b50505050506114f98760009081526002602052604090205490565b868360ff168151811061150e5761150e6116a5565b6020026020010151101561156e578060026000898152602001908152602001600020878460ff1681518110611545576115456116a5565b60200260200101518154811061155d5761155d6116a5565b600091825260209091200155611590565b6000878152600260209081526040822080546001810182559083529120018190555b508061159b81611d72565b915050611310565b505050505050565b6000828152600260205260409020548111156116025760405162461bcd60e51b81526020600482015260166024820152751b5d5cdd081c995c1b1858d9481bdc88185c1c195b9960521b6044820152606401610705565b60008281526002602052604090205481101561071a57600154600083815260026020526040902080546001600160a01b03909216916395bc267391908490811061164e5761164e6116a5565b90600052602060002001546040518263ffffffff1660e01b815260040161167791815260200190565b600060405180830381600087803b15801561169157600080fd5b505af11580156115a3573d6000803e3d6000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b818103818111156108a8576108a86116bb565b600080858511156116f457600080fd5b8386111561170157600080fd5b5050820193919092039150565b600181811c9082168061172257607f821691505b60208210810361174257634e487b7160e01b600052602260045260246000fd5b50919050565b82848237600083820160008152600084546117628161170e565b6001828116801561177a576001811461178f576117be565b60ff19841686528215158302860194506117be565b8860005260208060002060005b858110156117b55781548982015290840190820161179c565b50505082860194505b50929998505050505050505050565b60005b838110156117e85781810151838201526020016117d0565b50506000910152565b600081518084526118098160208601602086016117cd565b601f01601f19169290920160200192915050565b60208152600061098e60208301846117f1565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561186f5761186f611830565b604052919050565b600067ffffffffffffffff82111561189157611891611830565b50601f01601f191660200190565b600082601f8301126118b057600080fd5b81356118c36118be82611877565b611846565b8181528460208386010111156118d857600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561190857600080fd5b823567ffffffffffffffff81111561191f57600080fd5b61192b8582860161189f565b95602094909401359450505050565b60408152600061194d60408301856117f1565b905082151560208301529392505050565b60006020828403121561197057600080fd5b813567ffffffffffffffff81111561198757600080fd5b6119938482850161189f565b949350505050565b6000602082840312156119ad57600080fd5b81356001600160a01b038116811461098e57600080fd5b600082601f8301126119d557600080fd5b8135602067ffffffffffffffff8211156119f1576119f1611830565b8160051b611a00828201611846565b9283528481018201928281019087851115611a1a57600080fd5b83870192505b84831015611a3957823582529183019190830190611a20565b979650505050505050565b600080600060608486031215611a5957600080fd5b833567ffffffffffffffff80821115611a7157600080fd5b611a7d8783880161189f565b94506020860135915080821115611a9357600080fd5b611a9f878388016119c4565b93506040860135915080821115611ab557600080fd5b50611ac2868287016119c4565b9150509250925092565b808201808211156108a8576108a86116bb565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b601f821115610b6257600081815260208120601f850160051c81016020861015611b3b5750805b601f850160051c820191505b818110156115a357828155600101611b47565b815167ffffffffffffffff811115611b7457611b74611830565b611b8881611b82845461170e565b84611b14565b602080601f831160018114611bbd5760008415611ba55750858301515b600019600386901b1c1916600185901b1785556115a3565b600085815260208120601f198616915b82811015611bec57888601518255948401946001909101908401611bcd565b5085821015611c0a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215611c2c57600080fd5b5051919050565b600060208284031215611c4557600080fd5b815167ffffffffffffffff198116811461098e57600080fd5b8481526080810160028510611c8357634e487b7160e01b600052602160045260246000fd5b84602083015283604083015282606083015295945050505050565b600060208284031215611cb057600080fd5b815167ffffffffffffffff811115611cc757600080fd5b8201601f81018413611cd857600080fd5b8051611ce66118be82611877565b818152856020838501011115611cfb57600080fd5b611d0c8260208301602086016117cd565b95945050505050565b600060018201611d2757611d276116bb565b5060010190565b634e487b7160e01b600052603160045260246000fd5b600081611d5357611d536116bb565b506000190190565b80820281158282048414176108a8576108a86116bb565b600060ff821660ff8103611d8857611d886116bb565b6001019291505056fea2646970667358221220e9872599cfcce23ac5cf7ebefd58f180b66198f8732ac975a35ab19fc2b7bc8364736f6c63430008120033';
        const factory = new ethers.ContractFactory(flatDirectoryBlobAbi, contractByteCode, this.#wallet);
        let contract = await factory.deploy(31 * 4096, ETH_STORAGE, {
            gasLimit: 3000000
        });
        contract = await contract.waitForDeployment();
        if (contract) {
            console.log(`FlatDirectory Address: ${await contract.getAddress()}`);
            this.#contractAddr = await contract.getAddress();
        } else {
            console.error(`ERROR: deploy flat directory failed!`);
        }
    }

    async setDefaultFile(filename) {
        if (!this.#contractAddr) {
            console.error(`ERROR: flat directory not deployed!`);
            return;
        }

        const fileContract = new ethers.Contract(this.#contractAddr, flatDirectoryBlobAbi, this.#wallet);
        const defaultFile = '0x' + Buffer.from(filename, 'utf8').toString('hex');
        const tx = await fileContract.setDefault(defaultFile);
        const txReceipt = await tx.wait();
        if (txReceipt.status) {
            console.log(`Set succeeds`);
        } else {
            console.error(`ERROR: set failed!`);
        }
    }

    async upload(filePath) {
        if (!this.#contractAddr) {
            console.error(`ERROR: flat directory not deployed!`);
            return;
        }
        const fileStat = fs.statSync(filePath);
        if (!fileStat.isFile()) {
            console.error(`ERROR: only upload file!`);
            return;
        }

        const fileContract = new ethers.Contract(this.#contractAddr, flatDirectoryBlobAbi, this.#wallet);
        const cost = await fileContract.upfrontPayment();

        const content = fs.readFileSync(filePath);
        const blobs = EncodeBlobs(content);
        const blobLength = blobs.length;
        const fileSize = fileStat.size;
        const fileName = filePath.substring(filePath.lastIndexOf("/") + 1);
        const hexName = stringToHex(fileName);

        let successIndex = 0;
        for (let i = 0; i < blobLength; i += MAX_BLOB_COUNT) {
            const blobArr = [];
            const indexArr = [];
            const lenArr = [];
            let max = i + MAX_BLOB_COUNT > blobLength ? blobLength : i + MAX_BLOB_COUNT;
            for (let j = i; j < max; j++) {
                blobArr.push(blobs[j]);
                indexArr.push(j);
                if (j === blobLength - 1) {
                    lenArr.push(fileSize - BLOB_FILE_SIZE * (blobLength - 1));
                } else {
                    lenArr.push(BLOB_FILE_SIZE);
                }
            }

            // check
            let hasChange = false;
            for (let j = 0; j < blobArr.length; j++) {
                const dataHash = await fileContract.getChunkHash(hexName, indexArr[j]);
                const localHash = this.#blobUploader.getBlobHash(blobArr[j]);
                if (dataHash !== localHash) {
                    hasChange = true;
                    break;
                }
            }
            if (!hasChange) {
                successIndex += indexArr.length;
                console.log(`File ${fileName} chunkId: ${indexArr}: The data is not changed.`);
                continue;
            }

            // send
            let success = false;
            try {
                const value = cost * BigInt(blobArr.length);
                const tx = await fileContract.writeChunk.populateTransaction(hexName, indexArr, lenArr, {
                    value
                });
                const hash = await this.#blobUploader.sendTx(tx, blobArr);
                console.log(`Transaction Id: ${hash}`);
                const txReceipt = await this.#blobUploader.getTxReceipt(hash);
                if (txReceipt && txReceipt.status) {
                    success = true;
                    successIndex += indexArr.length;
                    console.log(`File ${fileName} chunkId: ${indexArr} uploaded!`);
                }
            } catch (e) {
                console.log('Error:' + e);
            }
            if (!success) {
                break;
            }
        }
        return {
            totalBlobCount: blobLength,
            successBlobIndex: successIndex,
        }
    }
}

module.exports = {
    EthStorage
}
